[
    {
        "question_id": "99",
        "question": "What is the time zone of Salt Lake City?",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Salt_Lake_City <http://dbpedia.org/ontology/timeZone> ?uri }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in ISO 8601 format.\n\nTo solve this problem, you need to use the following SPARQL endpoint:\n```\nhttp://dbpedia.org/sparql\n```\n\nNote that you will need to replace `DBPedia` with the actual name of your database if it's different.\nTo retrieve information about the time zones of cities, including Salt Lake City, you can use the following SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT ?tz\nWHERE {\n  ?city dbo:timeZone dbo:hasCity ?tz .\n}\nLIMIT 1\nORDER BY DESC(?tz)\n```\n\nThis query uses the `dbo:timeZone`",
                "extracted_query": "PREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT ?tz\nWHERE {\n  ?city dbo:timeZone dbo:hasCity ?tz .\n}\nLIMIT 1\nORDER BY DESC(?tz)",
                "generation_time": 32.78915762901306
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?timezone WHERE {\n  <http://dbpedia.org/resource/Salt_Lake_City> <http://www.w3.org/2006/time#hasTimezone> ?timezone .\n}\n```",
                "extracted_query": "SELECT ?timezone WHERE {\n  <http://dbpedia.org/resource/Salt_Lake_City> <http://www.w3.org/2006/time#hasTimezone> ?timezone .\n}",
                "generation_time": 11.00120496749878
            }
        ]
    },
    {
        "question_id": "98",
        "question": "Who killed Caesar?",
        "reference_query": "PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> SELECT DISTINCT ?uri WHERE { ?uri dct:subject dbc:Assassins_of_Julius_Caesar }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format of \"Answer: <answer>.\"\n\nSPARQL Query:\nSELECT ?name WHERE {\n  ?person a\u5171\u548c\u56fd\u516c\u6c11 ;\n         b\u6b7b\u4ea1\u4e8e\u201c[date]\u201d ;\n         c\u51fa\u751f\u5730\u662f\u201c[country]\u201d .\n  FILTER(?person != [person]) .\n} LIMIT 1\n```sparql\nSELECT ?name \nWHERE { \n  ?person a\u5171\u548c\u56fd\u516c\u6c11 ; \n  b\u6b7b\u4ea1\u4e8e\u201c[date]\u201d ; \n  c\u51fa\u751f\u5730\u662f\u201c[country]\u201d . \n  FILTER(?person != [person]) . \n}\nLIMIT 1\n```",
                "extracted_query": "SELECT ?name \nWHERE { \n  ?person a\u5171\u548c\u56fd\u516c\u6c11 ; \n  b\u6b7b\u4ea1\u4e8e\u201c[date]\u201d ; \n  c\u51fa\u751f\u5730\u662f\u201c[country]\u201d . \n  FILTER(?person != [person]) . \n}\nLIMIT 1",
                "generation_time": 26.89427089691162
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?killedCaesar WHERE {\n  ?killedCaesar <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/KillerOf>.\n}\n```",
                "extracted_query": "SELECT ?killedCaesar WHERE {\n  ?killedCaesar <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/KillerOf>.\n}",
                "generation_time": 13.492248296737671
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?person ?relationship ?time WHERE {\n  ?person a :Person ;\n    ?relationship a :Relationship ;\n    ?time a :Time ;\n    ?person ?relationship ?time .\n  FILTER (?person = \"Julius Caesar\")\n  FILTER (?relationship = \"killed\")\n}\n```",
                "extracted_query": "SELECT ?person ?relationship ?time WHERE {\n  ?person a :Person ;\n    ?relationship a :Relationship ;\n    ?time a :Time ;\n    ?person ?relationship ?time .\n  FILTER (?person = \"Julius Caesar\")\n  FILTER (?relationship = \"killed\")\n}",
                "generation_time": 13.154431819915771
            }
        ]
    },
    {
        "question_id": "86",
        "question": "What is the highest mountain in Germany?",
        "reference_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri rdf:type onto:Mountain ; onto:elevation ?elevation ; onto:locatedInArea <http://dbpedia.org/resource/Germany> } ORDER BY DESC(?elevation) LIMIT 1",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be ordered by its elevation in meters from highest to lowest.\n\nThe answer should include the name of the mountain, its elevation in meters, and its country of origin.\nSELECT ?mountain { ?mountain a :Mountain . ?mountain elevation ?elevation . ?mountain countryOfOrigin ?countryOfOrigin . FILTER(?elevation > 0) ORDER BY ?elevation DESC LIMIT 1 } ```sparql\nSELECT ?mountain { ?mountain a :Mountain . ?mountain elevation ?elevation . ?mountain countryOfOrigin ?countryOfOrigin . FILTER(?elevation > 0) ORDER BY ?elevation DESC LIMIT 1 } ``` ```sparql\nSELECT ?mountain { ?mount",
                "extracted_query": "SELECT ?mountain { ?mountain a :Mountain . ?mountain elevation ?elevation . ?mountain countryOfOrigin ?countryOfOrigin . FILTER(?elevation > 0) ORDER BY ?elevation DESC LIMIT 1 }",
                "generation_time": 32.033812522888184
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?mountain \nWHERE {\n  ?mountain a :Mountain ;\n           rdfs:label \"highest mountain in Germany\"@en .\n}\nLIMIT 1```",
                "extracted_query": "SELECT ?mountain \nWHERE {\n  ?mountain a :Mountain ;\n           rdfs:label \"highest mountain in Germany\"@en .\n}\nLIMIT 1",
                "generation_time": 8.740993738174438
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?mountain ?height\nWHERE {\n  ?mountain a <http://www.w3.org/2000/01/rdf-schema#type> .\n  ?mountain <http://www.geonames.org/ontology#name> ?name .\n  ?mountain <http://www.geonames.org/ontology#elevation> ?height .\n  FILTER (?name = \"Zugspitze\") .\n}\n```",
                "extracted_query": "SELECT ?mountain ?height\nWHERE {\n  ?mountain a <http://www.w3.org/2000/01/rdf-schema#type> .\n  ?mountain <http://www.geonames.org/ontology#name> ?name .\n  ?mountain <http://www.geonames.org/ontology#elevation> ?height .\n  FILTER (?name = \"Zugspitze\") .\n}",
                "generation_time": 18.908966064453125
            }
        ]
    },
    {
        "question_id": "84",
        "question": "Which American presidents were in office during the Vietnam War?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> SELECT ?uri WHERE { ?uri dct:subject dbc:Presidents_of_the_United_States . res:Vietnam_War dbo:commander ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be presented as a list of president names separated by commas.\n\nThe SPARQL query should use the `?p` prefix to refer to the \"President\" property and the `?o` prefix to refer to the \"office\" property.\nTo solve this problem, you need to first retrieve information about all American presidents from the database. Then, filter out those who served in the Vietnam War. Finally, return the list of these presidents in alphabetical order. Here's how you can do it:\n\n```sparql\nPREFIX ex: <http://example.org/>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\n\nSELECT ?p ?o WHERE {\n  ?p foaf:name ?name .",
                "extracted_query": null,
                "generation_time": 32.04674458503723
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?president WHERE {\n  ?president wdt:P30 wd:Q27946 ;\n             wdt:P18 wd:Q5 .\n}\n```",
                "extracted_query": "SELECT ?president WHERE {\n  ?president wdt:P30 wd:Q27946 ;\n             wdt:P18 wd:Q5 .\n}",
                "generation_time": 9.627868175506592
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?president WHERE {\n  ?president a :President ;\n    ?war_years ?war_name .\n  FILTER (?war_name = \"Vietnam War\")\n}\n```",
                "extracted_query": "SELECT ?president WHERE {\n  ?president a :President ;\n    ?war_years ?war_name .\n  FILTER (?war_name = \"Vietnam War\")\n}",
                "generation_time": 8.75274109840393
            }
        ]
    },
    {
        "question_id": "81",
        "question": "Butch Otter is the governor of which U.S. state?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/class/yago/WikicatStatesOfTheUnitedStates> ; <http://dbpedia.org/property/governor> <http://dbpedia.org/resource/Butch_Otter> }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in JSON format.\n\n```json\n{\n  \"answer\": {\n    \"query\": \"PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?state WHERE { ?person dbo:name 'Butch Otter' } [ ?person dbo:state ?state ]\"\n  }\n}\n``` ```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\n\nSELECT ?state \nWHERE { \n  ?person dbo:name 'Butch Otter' \n  FILTER(?person dbo:state ?state)\n}\n``` ```json\n{\n  \"answer\": {\n    \"query\": \"PREFIX dbo: <http://dbpedia.org/ontology/>\n    SELECT ?state \n    WHERE { \n      ?person dbo",
                "extracted_query": "PREFIX dbo: <http://dbpedia.org/ontology/>\n\nSELECT ?state \nWHERE { \n  ?person dbo:name 'Butch Otter' \n  FILTER(?person dbo:state ?state)\n}",
                "generation_time": 32.054399490356445
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?state WHERE {\n  <Butch_Otter> dbo:governorOf ?governor.\n  ?governor rdfs:label \"Governor\"^^xsd:string.\n  ?governor dbo:country \"United States\"@en.\n  ?governor dbo:capitalCity \"Washington D.C.\"@en.\n  ?governor dbo:leaderTitle \"Governor\"@en.\n  ?governor dbo:inOfficeFrom \"2019-03-07\"^^xsd:date.\n  ?governor dbo:inOfficeUntil \"2025-03-06\"^^xsd:date.\n  ?governor dbo:office",
                "extracted_query": null,
                "generation_time": 34.18288707733154
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?state\nWHERE {\n  ?governor a <http://dbpedia.org/ontology/Person> .\n  ?governor <http://dbpedia.org/ontology/name> ?name .\n  ?governor <http://dbpedia.org/ontology/governor> ?governor .\n  ?governor <http://dbpedia.org/ontology/state> ?state .\n  FILTER (?name = \"Butch Otter\") .\n}\n```",
                "extracted_query": "SELECT ?state\nWHERE {\n  ?governor a <http://dbpedia.org/ontology/Person> .\n  ?governor <http://dbpedia.org/ontology/name> ?name .\n  ?governor <http://dbpedia.org/ontology/governor> ?governor .\n  ?governor <http://dbpedia.org/ontology/state> ?state .\n  FILTER (?name = \"Butch Otter\") .\n}",
                "generation_time": 19.08243227005005
            }
        ]
    },
    {
        "question_id": "73",
        "question": "How many gold medals did Michael Phelps win at the 2008 Olympics?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT Count(?sub) as ?c WHERE { ?sub dbo:goldMedalist dbr:Michael_Phelps . filter (contains (str(?sub), \"2008\") && contains (str(?sub), \"Olympics\")) }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format of \"Michael Phelps won X gold medals at the 2008 Olympics\". Here is the SPARQL query to answer the question:\n```\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nSELECT ?count\nWHERE {\n    ?athlete rdfs:label \"Michael Phelps\" .\n    ?athlete dcterms:gold medal .\n    FILTER(?athlete != \"\") \n    LIMIT 1\n}\n``` \n\nExplanation: This query selects all athletes who are named \"Michael Phelps\", then filters out any athletes who have not won a gold medal,",
                "extracted_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX dcterms: <http://purl.org/dc/terms/>\nSELECT ?count\nWHERE {\n    ?athlete rdfs:label \"Michael Phelps\" .\n    ?athlete dcterms:gold medal .\n    FILTER(?athlete != \"\") \n    LIMIT 1\n}",
                "generation_time": 32.05343317985535
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT (COUNT(?gold_medal) AS ?medals)\nWHERE {\n    VALUES (?athlete \"Michael Phelps\") {}\n    VALUES (?event \"2008 Summer Olympics\") {}\n    ?athlete wdt:P31 wd:Q5.\n    ?athlete wdt:P647 ?gold_medal.\n    FILTER regex(str(?gold_medal), \"Gold\", \"i\")\n}\n```",
                "extracted_query": "SELECT (COUNT(?gold_medal) AS ?medals)\nWHERE {\n    VALUES (?athlete \"Michael Phelps\") {}\n    VALUES (?event \"2008 Summer Olympics\") {}\n    ?athlete wdt:P31 wd:Q5.\n    ?athlete wdt:P647 ?gold_medal.\n    FILTER regex(str(?gold_medal), \"Gold\", \"i\")\n}",
                "generation_time": 19.570396423339844
            }
        ]
    },
    {
        "question_id": "66",
        "question": "Which artists were born on the same date as Rachel Stevens?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri a dbo:Artist . dbr:Rachel_Stevens dbo:birthDate ?birthdate . ?uri dbo:birthDate ?birthdate }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The output should be in RDF format.\n\nThe answer to this question is:\n```sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?artist \nWHERE {\n  ?artist rdf:type <http://schema.org/Artist> .\n  ?artist rdfs:label \"Rachel Stevens\"^^xsd:string .\n  ?artist rdf:type <http://schema.org/Person> .\n  ?artist rdfs:label \"Rachel Stevens\"^^xsd:string .\n  ?artist rdf:type <http://schema.org/DateOfBirth> .",
                "extracted_query": null,
                "generation_time": 31.950111627578735
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?artist WHERE {\n  ?artist <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xmlns.com/foaf/0.1/Artist> .\n  ?artist <http://xmlns.com/foaf/birthDate> ?birthDate .\n  ?artist <http://xmlns.com/foaf/name> \"Rachel Stevens\" .\n}\n```",
                "extracted_query": "SELECT ?artist WHERE {\n  ?artist <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xmlns.com/foaf/0.1/Artist> .\n  ?artist <http://xmlns.com/foaf/birthDate> ?birthDate .\n  ?artist <http://xmlns.com/foaf/name> \"Rachel Stevens\" .\n}",
                "generation_time": 21.26448631286621
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?artist ?birthDate\nWHERE {\n  ?artist a dbo:Artist .\n  ?artist dbo:birthDate ?birthDate .\n  FILTER (?birthDate = \"1972-03-18\")\n  FILTER (?artist = \"Rachel Stevens\")\n}\n```",
                "extracted_query": "SELECT ?artist ?birthDate\nWHERE {\n  ?artist a dbo:Artist .\n  ?artist dbo:birthDate ?birthDate .\n  FILTER (?birthDate = \"1972-03-18\")\n  FILTER (?artist = \"Rachel Stevens\")\n}",
                "generation_time": 12.249040603637695
            }
        ]
    },
    {
        "question_id": "64",
        "question": "What is the profession of Frank Herbert?",
        "reference_query": "PREFIX dbpedia2: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:Frank_Herbert dbpedia2:occupation ?string }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in JSON format.\n\nExample:\n```json\n{\n  \"answer\": {\n    \"profession\": \"Writer\"\n  }\n}\n```\n\nNote: You can assume that Frank Herbert's full name is \"Frank Herbert\".\nTo solve this problem, we need to retrieve information about the profession of Frank Herbert from an external database or API. Since I don't have direct access to such resources, I will generate a hypothetical SPARQL query based on the given information.\n\nHere's the SPARQL query:\n\n```sparql\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\nSELECT ?profession\nWHERE {\n  ?person foaf:name \"Frank Herbert\" .\n  FILTER NOT EXISTS { ?person fo",
                "extracted_query": null,
                "generation_time": 31.863882303237915
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?profession \nWHERE {\n  <http://www.gutenberg.org/files/1342/1342-h/1342-h.htm> a <http://dbpedia.org/ontology/authors>;\n  rdfs:label \"Frank Herbert\"@en;\n  dbp:profession ?profession .\n}\n```",
                "extracted_query": "SELECT ?profession \nWHERE {\n  <http://www.gutenberg.org/files/1342/1342-h/1342-h.htm> a <http://dbpedia.org/ontology/authors>;\n  rdfs:label \"Frank Herbert\"@en;\n  dbp:profession ?profession .\n}",
                "generation_time": 16.499511003494263
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?profession\nWHERE {\n  ?person a <http://dbpedia.org/ontology/Person> .\n  ?person <http://dbpedia.org/ontology/profession> ?profession .\n  ?person rdf:type <http://dbpedia.org/ontology/Author> .\n  FILTER(?person = <http://dbpedia.org/resource/Frank_Herbert> )\n}\n```",
                "extracted_query": "SELECT ?profession\nWHERE {\n  ?person a <http://dbpedia.org/ontology/Person> .\n  ?person <http://dbpedia.org/ontology/profession> ?profession .\n  ?person rdf:type <http://dbpedia.org/ontology/Author> .\n  FILTER(?person = <http://dbpedia.org/resource/Frank_Herbert> )\n}",
                "generation_time": 17.607558012008667
            }
        ]
    },
    {
        "question_id": "6",
        "question": "Are Taiko some kind of Japanese musical instrument?",
        "reference_query": "ASK WHERE { <http://dbpedia.org/resource/Taiko> a <http://dbpedia.org/class/yago/WikicatJapaneseMusicalInstruments> }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the form of a single sentence.\n\nSPARQL query:\n```sparql\nSELECT ?instrument WHERE {\n  ?instrument a <http://www.w3.org/ns/sparql-results#type> .\n  ?instrument <http://www.w3.org/2001/XMLSchema#string> \"Taiko\".\n}\n``` ```sparql\nSELECT ?instrument WHERE {\n  ?instrument a <http://www.w3.org/ns/sparql-results#type> .\n  ?instrument <http://www.w3.org/2001/XMLSchema#string> \"Japanese musical instrument\".\n}\n``` ```sparql\nSELECT ?instrument WHERE {\n  ?instrument a <http://www.w3.org/ns/sparql",
                "extracted_query": "SELECT ?instrument WHERE {\n  ?instrument a <http://www.w3.org/ns/sparql-results#type> .\n  ?instrument <http://www.w3.org/2001/XMLSchema#string> \"Taiko\".\n}\n\nSELECT ?instrument WHERE {\n  ?instrument a <http://www.w3.org/ns/sparql-results#type> .\n  ?instrument <http://www.w3.org/2001/XMLSchema#string> \"Japanese musical instrument\".\n}",
                "generation_time": 32.03715205192566
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?instrument WHERE {\n  ?instrument wdt:P31 wd:Q5 ;\n               wdt:P296 wd:Q478 .\n}\n```",
                "extracted_query": "SELECT ?instrument WHERE {\n  ?instrument wdt:P31 wd:Q5 ;\n               wdt:P296 wd:Q478 .\n}",
                "generation_time": 8.886890888214111
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?instrumentType WHERE {\n  ?instrumentType a <http://dbpedia.org/ontology/MusicalInstrument> .\n  ?instrumentType rdfs:label ?instrumentLabel .\n  FILTER (?instrumentLabel = \"Taiko\") .\n}\n```",
                "extracted_query": "SELECT ?instrumentType WHERE {\n  ?instrumentType a <http://dbpedia.org/ontology/MusicalInstrument> .\n  ?instrumentType rdfs:label ?instrumentLabel .\n  FILTER (?instrumentLabel = \"Taiko\") .\n}",
                "generation_time": 11.497375965118408
            }
        ]
    },
    {
        "question_id": "56",
        "question": "How many seats does the home stadium of FC Porto have?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX db: <http://dbpedia.org/> SELECT ?capacity WHERE { { dbr:FC_Porto dbo:ground ?ground . ?ground dbo:capacity ?capacity } UNION { dbr:FC_Porto dbo:ground ?ground . ?ground dbp:capacity ?capacity } }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format:\n```\n<result>\n  <count> [value]</count>\n  <type>integer</type>\n  <description>The number of seats at the home stadium of FC Porto.</description>\n</result>\n``` To solve this problem, we need to retrieve information about the home stadium of FC Porto from a database that stores information on stadiums. We will use the RDF (Resource Description Framework) protocol to fetch this data.\n\nHere's the SPARQL query to answer the question:\n\n```sparql\nSELECT ?numSeats\nWHERE {\n  ?stadium rdf:type stadium .\n  ?stadium stadiumHome .\n  ?stadium stadiumLocation fc-porto .\n}\nGROUP BY ?numSeats\nHAVING",
                "extracted_query": "SELECT ?numSeats\nWHERE {\n  ?stadium rdf:type stadium .\n  ?stadium stadiumHome .\n  ?stadium stadiumLocation fc-porto .\n}",
                "generation_time": 32.050891160964966
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT (COUNT(?stadium) AS ?seats)\nWHERE {\n  ?stadium wdt:P31 wd:Q5 ;\n           wdt:P24 wd:Q6 .\n}\nGROUP BY ?stadium",
                "extracted_query": "SELECT (COUNT(?stadium) AS ?seats)\nWHERE {\n  ?stadium wdt:P31 wd:Q5 ;\n           wdt:P24 wd:Q6 .\n}",
                "generation_time": 11.444974184036255
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT (COUNT(?seat) AS ?numberOfSeats)\nWHERE {\n  ?stadium a <http://dbpedia.org/ontology/Stadium> .\n  ?stadium rdfs:label \"Est\u00e1dio do Drag\u00e3o\" .\n  ?stadium rdf:type <http://dbpedia.org/ontology/SportsVenue> .\n  ?stadium dbo:hasCapacity ?numberOfSeats .\n}\n```",
                "extracted_query": "SELECT (COUNT(?seat) AS ?numberOfSeats)\nWHERE {\n  ?stadium a <http://dbpedia.org/ontology/Stadium> .\n  ?stadium rdfs:label \"Est\u00e1dio do Drag\u00e3o\" .\n  ?stadium rdf:type <http://dbpedia.org/ontology/SportsVenue> .\n  ?stadium dbo:hasCapacity ?numberOfSeats .\n}",
                "generation_time": 17.06292414665222
            }
        ]
    },
    {
        "question_id": "49",
        "question": "Which frequent flyer program has the most airlines?",
        "reference_query": "SELECT ?uri WHERE { ?airline <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline> . ?airline <http://dbpedia.org/property/frequentFlyer> ?uri. } GROUP BY ?uri ORDER BY DESC(COUNT(DISTINCT ?airline)) OFFSET 0 LIMIT 1",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be ordered by the number of airlines in descending order.\n\nThe answer should be presented as a list of airline codes separated by commas, e.g., \"AA,AXA,AL\". Ensure that the query is optimized to minimize execution time while still returning the correct results.\n```sparql\nSELECT ?airline\nWHERE {\n  ?program a <http://www.w3.org/ns/sparql-results#Program> .\n  ?program <http://www.w3.org/2006/11/flight-terms#hasFlight> ?flight .\n  ?flight <http://schema.org/isPartOf> ?program .\n  FILTER(?program != ?airline)\n}\nORDER BY DESC(?flight:count(?",
                "extracted_query": "SELECT ?airline\nWHERE {\n  ?program a <http://www.w3.org/ns/sparql-results#Program> .\n  ?program <http://www.w3.org/2006/11/flight-terms#hasFlight> ?flight .\n  ?flight <http://schema.org/isPartOf> ?program .\n  FILTER(?program != ?airline)\n}",
                "generation_time": 32.03565549850464
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?program (COUNT(DISTINCT ?airline) AS ?num_airlines)\nWHERE {\n    ?program a foaf:Organization ;\n             foaf:name ?name .\n    ?program rdfs:seeAlso ?url .\n    ?program dbo:frequentFlyerProgram true .\n    ?program dbo:hasAirlines ?airlineList .\n    FILTER regex(str(?airlineList), \"http://www.example.com/airlines/\")\n}\nGROUP BY ?program\nORDER BY DESC(?num_airlines) LIMIT 1\n```",
                "extracted_query": "SELECT ?program (COUNT(DISTINCT ?airline) AS ?num_airlines)\nWHERE {\n    ?program a foaf:Organization ;\n             foaf:name ?name .\n    ?program rdfs:seeAlso ?url .\n    ?program dbo:frequentFlyerProgram true .\n    ?program dbo:hasAirlines ?airlineList .\n    FILTER regex(str(?airlineList), \"http://www.example.com/airlines/\")\n}\nGROUP BY ?program\nORDER BY DESC(?num_airlines) LIMIT 1",
                "generation_time": 26.114196300506592
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?program ?count\nWHERE {\n  GRAPH ?g {\n    ?program a <http://dbpedia.org/ontology/FrequentFlyerProgram> .\n    ?program :hasAirline ?airline .\n    FILTER (COUNT(?airline) > 10)\n  }\n}\n```",
                "extracted_query": "SELECT ?program ?count\nWHERE {\n  GRAPH ?g {\n    ?program a <http://dbpedia.org/ontology/FrequentFlyerProgram> .\n    ?program :hasAirline ?airline .\n    FILTER (COUNT(?airline) > 10)\n  }\n}",
                "generation_time": 13.211515426635742
            }
        ]
    },
    {
        "question_id": "44",
        "question": "Which European countries have a constitutional monarchy?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dct:subject dbc:Countries_in_Europe ; dbo:governmentType dbr:Constitutional_monarchy }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The query should not include any SELECT statements.\n\nThe answer should be in JSON format and include the country name as the key-value pair.\nHere are the available countries:\n- Albania\n- Algeria\n- Andorra\n- Angola\n- Antarctica\n- Antigua and Barbuda\n- Argentina\n- Armenia\n- Australia\n- Austria\n- Azerbaijan\n- Bahamas\n- Bahrain\n- Bangladesh\n- Belarus\n- Belgium\n- Belize\n- Benin\n- Bermuda\n- Bhutan\n- Bolivia\n- Bosnia and Herzegovina\n- Botswana\n- Brazil\n- Brunei\n- Bulgaria\n- Burkina Faso\n- Burundi\n- Cambodia\n- Cameroon\n- Canada\n- Cape Verde\n- Cayman",
                "extracted_query": null,
                "generation_time": 32.0663685798645
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?country WHERE {\n  ?country wdt:P31 wd:Q2.\n  FILTER(lang(?country) = \"en\").\n}\n```",
                "extracted_query": "SELECT ?country WHERE {\n  ?country wdt:P31 wd:Q2.\n  FILTER(lang(?country) = \"en\").\n}",
                "generation_time": 8.031636953353882
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?country WHERE {\n  GRAPH <http://example.org/ontology#> {\n    ?country a <http://www.w3.org/2002/07/owl#Class> .\n    ?country rdfs:label \"Constitutional Monarchy\" .\n    FILTER lang(?country) = \"en\" .\n    FILTER lang(?country) = \"fr\" .\n    FILTER lang(?country) = \"de\" .\n  }\n}\n```",
                "extracted_query": "SELECT ?country WHERE {\n  GRAPH <http://example.org/ontology#> {\n    ?country a <http://www.w3.org/2002/07/owl#Class> .\n    ?country rdfs:label \"Constitutional Monarchy\" .\n    FILTER lang(?country) = \"en\" .\n    FILTER lang(?country) = \"fr\" .\n    FILTER lang(?country) = \"de\" .\n  }\n}",
                "generation_time": 20.358033418655396
            }
        ]
    },
    {
        "question_id": "42",
        "question": "Which countries have places with more than two caves?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 )",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in JSON format.\n\n```json\n{\n  \"answer\": {\n    \"country\": [\n      \"Afghanistan\",\n      \"Albania\",\n      \"Andorra\",\n      \"Angola\",\n      \"Antigua and Barbuda\",\n      \"Argentina\",\n      \"Armenia\",\n      \"Australia\",\n      \"Austria\",\n      \"Azerbaijan\",\n      \"Bahamas\",\n      \"Bahrain\",\n      \"Bangladesh\",\n      \"Barbados\",\n      \"Belarus\",\n      \"Belgium\",\n      \"Bolivia\",\n      \"Bosnia and Herzegovina\",\n      \"Botswana\",\n      \"Brazil\",\n      \"Brunei\",\n      \"Bulgaria\",\n      \"Burkina F",
                "extracted_query": null,
                "generation_time": 32.0603883266449
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?country WHERE {\n  ?place rdf:type owl:Thing .\n  ?place rdfs:subClassOf* wdt:P31 wd:Place .\n  ?place rdfs:label ?name .\n  ?cave rdfs:label \"Cave\" ;\n        wdt:P2048 wd:Q5 .\n  FILTER(?cave != ?place) .\n  ?place rdfs:subClassOf* wd:Q7 .\n  ?country rdfs:label ?countryLabel .\n}\n```",
                "extracted_query": "SELECT ?country WHERE {\n  ?place rdf:type owl:Thing .\n  ?place rdfs:subClassOf* wdt:P31 wd:Place .\n  ?place rdfs:label ?name .\n  ?cave rdfs:label \"Cave\" ;\n        wdt:P2048 wd:Q5 .\n  FILTER(?cave != ?place) .\n  ?place rdfs:subClassOf* wd:Q7 .\n  ?country rdfs:label ?countryLabel .\n}",
                "generation_time": 25.314563989639282
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?country ?count\nWHERE {\n  GRAPH <http://example.org/ontology#> {\n    ?country a owl:Class .\n    ?country owl:hasMember ?cave .\n    FILTER (COUNT(?cave) > 2)\n  }\n}\n```",
                "extracted_query": "SELECT ?country ?count\nWHERE {\n  GRAPH <http://example.org/ontology#> {\n    ?country a owl:Class .\n    ?country owl:hasMember ?cave .\n    FILTER (COUNT(?cave) > 2)\n  }\n}",
                "generation_time": 12.4035165309906
            }
        ]
    },
    {
        "question_id": "4",
        "question": "Which airports are located in California, USA?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Airport> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/California> } UNION { ?uri <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/California> } UNION { ?uri <http://dbpedia.org/ontology/city> ?city . ?city <http://dbpedia.org/ontology/isPartOf> <http://dbpedia.org/resource/California> } UNION { ?uri <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/California> } }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The query should not include any SELECT, INSERT, UPDATE, or DELETE statements.\n\nHere is an example of what the answer might look like:\n```\n?airport rdf:type :Airport .\n?airport :locationIn :California .\n?\n``` To find out which airports are located in California, USA, you can use the following SPARQL query:\n\n```sparql\nSELECT ?airport\nWHERE {\n  ?airport rdf:type :Airport .\n  ?airport :locationIn \"California\"^^<http://www.w3.org/2001/XMLSchema#string> .\n}\n``` \n\nThis query will return all `Airport` objects that have the property `locationIn` set to `\"California\"` and contain the string `\"California\"`. Note that this",
                "extracted_query": "SELECT ?airport\nWHERE {\n  ?airport rdf:type :Airport .\n  ?airport :locationIn \"California\"^^<http://www.w3.org/2001/XMLSchema#string> .\n}",
                "generation_time": 31.625239610671997
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?airport\nWHERE {\n  ?airport wdt:P31 wd:Q5.\n  ?airport wdt:P27 wd:Q6908.\n}\n```",
                "extracted_query": "SELECT ?airport\nWHERE {\n  ?airport wdt:P31 wd:Q5.\n  ?airport wdt:P27 wd:Q6908.\n}",
                "generation_time": 9.377659797668457
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?airport ?airportName\nWHERE {\n  ?airport a dbo:Airport .\n  FILTER (\n    CONTAINS(?airport, \"California\")\n  )\n}\n```",
                "extracted_query": "SELECT ?airport ?airportName\nWHERE {\n  ?airport a dbo:Airport .\n  FILTER (\n    CONTAINS(?airport, \"California\")\n  )\n}",
                "generation_time": 8.590850591659546
            }
        ]
    },
    {
        "question_id": "37",
        "question": "What are the nicknames of San Francisco?",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX foaf:<http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?string WHERE { res:San_Francisco foaf:nick ?string }",
        "validated": false,
        "validated_by": null,
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The output should be in JSON format.\n\n```json\n{\n  \"query\": \"PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?nickname WHERE { ?person foaf:name ?name . FILTER(?name = \"San Francisco\") . ?person foaf:nick ?nickname }\",\n  \"answer\": \"[{'nickname': 'SFO'}]\"\n}\n``` ```sparql\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\n\nSELECT ?nickname\nWHERE {\n    ?person foaf:name ?name .\n    FILTER(?name = \"San Francisco\")\n    ?person foaf:nick ?nickname\n}\n``` ```json\n{\n  \"query\": \"PREFIX foaf",
                "extracted_query": "PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n\nSELECT ?nickname\nWHERE {\n    ?person foaf:name ?name .\n    FILTER(?name = \"San Francisco\")\n    ?person foaf:nick ?nickname\n}",
                "generation_time": 32.01483869552612
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?nickName \nWHERE {\n  <http://dbpedia.org/resource/San_Francisco> rdfs:label ?name ;\n                                         dbo:nickname ?nickName .\n}\n```",
                "extracted_query": "SELECT ?nickName \nWHERE {\n  <http://dbpedia.org/resource/San_Francisco> rdfs:label ?name ;\n                                         dbo:nickname ?nickName .\n}",
                "generation_time": 10.085997819900513
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?nickname\nWHERE {\n  GRAPH <http://example.org/sf> {\n    ?s a <http://example.org/sf/Nickname> .\n    ?s ?p ?o .\n  }\n}\n```",
                "extracted_query": "SELECT ?nickname\nWHERE {\n  GRAPH <http://example.org/sf> {\n    ?s a <http://example.org/sf/Nickname> .\n    ?s ?p ?o .\n  }\n}",
                "generation_time": 10.949579000473022
            },
            {
                "level": 4,
                "model_name": "mistralai/Mistral-7B-Instruct-v0.3",
                "raw_query": "```sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\n\nSELECT DISTINCT ?nickname\nWHERE {\n  <http://dbpedia.",
                "extracted_query": null,
                "generation_time": 252.30421710014343
            },
            {
                "level": 5,
                "model_name": "google/gemma-2-9b-it",
                "raw_query": "```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?nickname\nWHERE {\n  <http://dbpedia.org/resource/San_Francisco> dbo:alternativeName ?nickname .\n}\n```",
                "extracted_query": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?nickname\nWHERE {\n  <http://dbpedia.org/resource/San_Francisco> dbo:alternativeName ?nickname .\n}",
                "generation_time": 219.87171173095703
            }
        ]
    },
    {
        "question_id": "32",
        "question": "What is Angela Merkel\u2019s birth name?",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?string WHERE { res:Angela_Merkel dbp:birthName ?string }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of:\n```\nPREFIX example: <http://example.org/>\nSELECT ?name\nWHERE {\n  ?person example:name ?name .\n  FILTER(?name = \"Angela Merkel\")\n}\n```\n\nNote: You can assume that there are no other names besides Angela Merkel in the data.\nTo solve this problem, you need to use the `PREFIX` keyword to specify the namespace for the person's name. In this case, we will use the `example:` prefix.\n\nHere is the SPARQL query that satisfies the given question:\n\n```sparql\nPREFIX example: <http://example.org/>\n\nSELECT ?name\nWHERE {\n  ?person example:name ?name .\n  FILTER(?name = \"Angela",
                "extracted_query": "PREFIX example: <http://example.org/>\nSELECT ?name\nWHERE {\n  ?person example:name ?name .\n  FILTER(?name = \"Angela Merkel\")\n}",
                "generation_time": 31.925995349884033
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?name WHERE {\n  <http://dbpedia.org/resource/Angela_Merkel> rdfs:label ?name .\n}\n```",
                "extracted_query": "SELECT ?name WHERE {\n  <http://dbpedia.org/resource/Angela_Merkel> rdfs:label ?name .\n}",
                "generation_time": 7.812460422515869
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?birthName\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:givenName ?givenName .\n  ?person dbo:name ?name .\n  FILTER (?person rdf:type dbo:Person)\n  FILTER (?givenName = \"Angela Merkel\")\n  FILTER (?name = \"Angela Merkel\")\n}\n```",
                "extracted_query": "SELECT ?birthName\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:givenName ?givenName .\n  ?person dbo:name ?name .\n  FILTER (?person rdf:type dbo:Person)\n  FILTER (?givenName = \"Angela Merkel\")\n  FILTER (?name = \"Angela Merkel\")\n}",
                "generation_time": 15.195733785629272
            }
        ]
    },
    {
        "question_id": "31",
        "question": "Who is the mayor of Berlin?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Berlin dbp:leader ?uri }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format \"City -> Person\". For example, if the answer is \"Berlin -> Bernd\", then the output should look like this:\n```\n```sparql\nPREFIX city: <http://example.org/city#>\nPREFIX person: <http://example.org/person#>\n\nSELECT ?person WHERE {\n  ?city city:isCapitalOf ?city.\n  ?city person:getName ?person.\n}\nLIMIT 1\n```\n```sparql\n\n```sparql\nPREFIX city: <http://example.org/city#>\nPREFIX person: <http://example.org/person#>\n\nSELECT ?person WHERE {\n  ?city city:isCapitalOf ?city.\n  ?city person:getName ?person.",
                "extracted_query": "PREFIX city: <http://example.org/city#>\nPREFIX person: <http://example.org/person#>\n\nSELECT ?person WHERE {\n  ?city city:isCapitalOf ?city.\n  ?city person:getName ?person.\n}\nLIMIT 1\n\n",
                "generation_time": 31.954358339309692
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?mayor \nWHERE {\n  ?city rdfs:label \"Berlin\"@en ;\n       dbo:municipalGovernment ?municipal .\n  ?municipal dbo:mayor ?mayor .\n}\n```",
                "extracted_query": "SELECT ?mayor \nWHERE {\n  ?city rdfs:label \"Berlin\"@en ;\n       dbo:municipalGovernment ?municipal .\n  ?municipal dbo:mayor ?mayor .\n}",
                "generation_time": 11.440034866333008
            }
        ]
    },
    {
        "question_id": "29",
        "question": "Which countries in the European Union adopted the Euro?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Euro> } UNION { ?uri <http://dbpedia.org/property/currencyCode> \"EUR\"@en } }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to the names of the countries that have adopted the Euro.\n\nThe answer is:\n```sparql\nPREFIX ex: <http://example.org/>\nSELECT ?country WHERE {\n  ?country ex:adoptionOfEuro ex:inEurope .\n}\nLIMIT 10\n``` \n\nNote: Replace `<http://example.org/>` with the actual URI of the RDF graph containing the data. To ensure that the country names are returned in the order they were adopted, you can use the `ORDER BY` clause. Additionally, if there are any duplicates in the results, you may want to add an additional condition to exclude those duplicates. Here's how you could modify the query to include this functionality:\n\n```sparql\nPREFIX",
                "extracted_query": "PREFIX ex: <http://example.org/>\nSELECT ?country WHERE {\n  ?country ex:adoptionOfEuro ex:inEurope .\n}\nLIMIT 10",
                "generation_time": 32.01675200462341
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?country WHERE {\n  ?country wdt:P31 wd:Q2.\n}\n```",
                "extracted_query": "SELECT ?country WHERE {\n  ?country wdt:P31 wd:Q2.\n}",
                "generation_time": 5.7573816776275635
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?country ?year\nWHERE {\n  GRAPH <http://example.org/euro_adoption> {\n    ?country a dbo:Country .\n    ?country dbo:adoptedEuro ?year .\n  }\n}\n```",
                "extracted_query": "SELECT ?country ?year\nWHERE {\n  GRAPH <http://example.org/euro_adoption> {\n    ?country a dbo:Country .\n    ?country dbo:adoptedEuro ?year .\n  }\n}",
                "generation_time": 10.498480558395386
            }
        ]
    },
    {
        "question_id": "23",
        "question": "Which software has been published by Mean Hamster Software?",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> PREFIX prop: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Software { ?uri prop:publisher \"Mean Hamster Software\"@en } UNION { ?uri onto:publisher res:Mean_Hamster_Software } }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of:\n```\nPREFIX mean: <http://example.org/mean/>\nSELECT ?software\nWHERE {\n  ?software a mean:Software ;\n    mean:publishes ?publication .\n}\nLIMIT 10\n``` To solve this problem, we need to find all the `Software` objects that have been published by the Mean Hamster Software organization. We will use the `a` predicate to specify the type of object (`Software`) and then use the `mean:publishes` property to check if the publication is from the Mean Hamster Software organization.\n\nHere's how you can write the SPARQL query:\n\n```sparql\nPREFIX mean: <http://example.org/mean/>\n\nSELECT ?software",
                "extracted_query": "PREFIX mean: <http://example.org/mean/>\nSELECT ?software\nWHERE {\n  ?software a mean:Software ;\n    mean:publishes ?publication .\n}",
                "generation_time": 31.653215408325195
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?software WHERE {\n  ?software wdt:P31 wd:Q24560.\n}\n```",
                "extracted_query": "SELECT ?software WHERE {\n  ?software wdt:P31 wd:Q24560.\n}",
                "generation_time": 6.508309841156006
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?software WHERE {\n  ?software rdf:type ?softwareType .\n  ?software a :Software .\n  ?software :publishedBy ?publisher .\n  FILTER (?publisher = \"Mean Hamster Software\") .\n}\n```",
                "extracted_query": "SELECT ?software WHERE {\n  ?software rdf:type ?softwareType .\n  ?software a :Software .\n  ?software :publishedBy ?publisher .\n  FILTER (?publisher = \"Mean Hamster Software\") .\n}",
                "generation_time": 10.415783882141113
            }
        ]
    },
    {
        "question_id": "68",
        "question": "Which country was Bill Gates born in?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?country WHERE { { dbr:Bill_Gates dbo:birthPlace ?birthPlace . ?birthPlace dbo:country ?country } UNION { dbr:Bill_Gates dbo:birthPlace ?birthPlace . ?birthPlace dbo:isPartOf ?place . ?place dbo:country ?country } }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in JSON format.\n\n```json\n{\n  \"answer\": {\n    \"country\": \"United States\"\n  }\n}\n``` ```sparql\nSELECT ?country\nWHERE { \n  ?person a <http://www.w3.org/ns/person#Person> .\n  ?person <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/ns/person#Country>. \n  FILTER(?person == <https://xmlns.com/foaf/0.7/name>)\n} LIMIT 1\n```",
                "extracted_query": "SELECT ?country\nWHERE { \n  ?person a <http://www.w3.org/ns/person#Person> .\n  ?person <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/ns/person#Country>. \n  FILTER(?person == <https://xmlns.com/foaf/0.7/name>)\n} LIMIT 1",
                "generation_time": 26.725618362426758
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?countryOfBirth WHERE {\n  <http://www.w3.org/People/BillGates/> rdfs:label \"Bill Gates\"@en ;\n    dbo:birthPlace ?birthPlace .\n  ?birthPlace rdfs:label ?birthPlaceLabel ;\n                dbo:countryOfCitizenship ?countryOfBirth .\n}\n```",
                "extracted_query": "SELECT ?countryOfBirth WHERE {\n  <http://www.w3.org/People/BillGates/> rdfs:label \"Bill Gates\"@en ;\n    dbo:birthPlace ?birthPlace .\n  ?birthPlace rdfs:label ?birthPlaceLabel ;\n                dbo:countryOfCitizenship ?countryOfBirth .\n}",
                "generation_time": 16.510754823684692
            }
        ]
    },
    {
        "question_id": "22",
        "question": "How many grand-children did Jacques Cousteau have?",
        "reference_query": "SELECT COUNT(DISTINCT ?y AS ?y) WHERE { <http://dbpedia.org/resource/Jacques_Cousteau> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/ontology/child> ?y . }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of:\n```\nSELECT ?count WHERE {\n  ?person a <http://www.w3.org/2000/01/rdf-schema#Person> .\n  ?person <http://www.w3.org/2004/02/skos/core#subdivisibleBy> <http://www.w3.org/2006/03/addressing/appers#grandparent>.\n  ?person <http://www.w3.org/2004/02/skos/core#inScheme> \"Cousteau\".\n  ?person <http://www.w3.org/2004/02/skos/core#hasParent> ?parent.",
                "extracted_query": null,
                "generation_time": 32.07713723182678
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT (COUNT(?grandchild) AS ?num_grandchildren)\nWHERE {\n  ?person rdfs:label \"Jacques Cousteau\"@en ;\n          foaf:knows ?grandchild .\n}\nGROUP BY ?person",
                "extracted_query": "SELECT (COUNT(?grandchild) AS ?num_grandchildren)\nWHERE {\n  ?person rdfs:label \"Jacques Cousteau\"@en ;\n          foaf:knows ?grandchild .\n}",
                "generation_time": 11.922401189804077
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT (COUNT(?grandchild) AS ?count)\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:grandchild ?grandchild .\n  ?grandchild dbo:name ?grandchildName .\n  FILTER (CONTAINS(STR(?grandchildName), \"Jacques Cousteau\"))\n}\n```",
                "extracted_query": "SELECT (COUNT(?grandchild) AS ?count)\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:grandchild ?grandchild .\n  ?grandchild dbo:name ?grandchildName .\n  FILTER (CONTAINS(STR(?grandchildName), \"Jacques Cousteau\"))\n}",
                "generation_time": 14.040996551513672
            }
        ]
    },
    {
        "question_id": "214",
        "question": "Give me all professional skateboarders from Sweden.",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation dbr:Skateboarder { ?uri dbo:birthPlace dbr:Sweden } UNION { ?uri dbo:birthPlace ?place . ?place dbo:country dbr:Sweden } }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to 10 results.\nSELECT ?person WHERE { ?person skatesProfessional ?skateboarder . FILTER(?skateboarder != \"No Skateboarder\"). FILTER(?skateboarder != \"No Professional Skater\"). ?skateboarder skatesSkateboard ?person . LIMIT 10 } ``` To answer your request, I will create a SPARQL query that retrieves all professional skateboarders from Sweden. Here's how it can be done:\n\n```sparql\nSELECT ?person \nWHERE {\n  ?person skatesProfessional ?skateboarder .\n  FILTER (?skateboarder != \"No Skateboarder\").\n  FILTER (?skateboarder != \"No Professional Sk",
                "extracted_query": "SELECT ?person WHERE { ?person skatesProfessional ?skateboarder . FILTER(?skateboarder != \"No Skateboarder\"). FILTER(?skateboarder != \"No Professional Skater\"). ?skateboarder skatesSkateboard ?person . LIMIT 10 }",
                "generation_time": 32.03447699546814
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?skater \nWHERE {\n  ?skater dbo:country \"Sweden\" .\n}\n```",
                "extracted_query": "SELECT ?skater \nWHERE {\n  ?skater dbo:country \"Sweden\" .\n}",
                "generation_time": 5.749824285507202
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?name ?occupation ?country\nWHERE {\n  ?s a sk8boarder .\n  ?s sk8boarder:name ?name .\n  ?s sk8boarder:occupation ?occupation .\n  ?s sk8boarder:country ?country .\n  FILTER (?country = \"Sweden\")\n}\n```",
                "extracted_query": "SELECT ?name ?occupation ?country\nWHERE {\n  ?s a sk8boarder .\n  ?s sk8boarder:name ?name .\n  ?s sk8boarder:occupation ?occupation .\n  ?s sk8boarder:country ?country .\n  FILTER (?country = \"Sweden\")\n}",
                "generation_time": 14.274866580963135
            }
        ]
    },
    {
        "question_id": "210",
        "question": "Which monarchs of the United Kingdom were married to a German?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatMonarchsOfTheUnitedKingdom ; dbo:spouse ?spouse . ?spouse dbo:birthPlace res:Germany }",
        "validated": false,
        "validated_by": null,
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be ordered by their marriage date in descending order.\n\nTo solve this problem, you need to use the following SQL database:\n```\nCREATE TABLE monarchs (\n  id INTEGER PRIMARY KEY,\n  name TEXT,\n  spouse TEXT\n);\nINSERT INTO monarchs VALUES (1, 'William', 'Elizabeth II');\nINSERT INTO monarchs VALUES (2, 'Mary', 'Edward VIII');\nINSERT INTO monarchs VALUES (3, 'George', 'Winston Churchill');\nINSERT INTO monarchs VALUES (4, 'Victoria', 'Albert I');\nINSERT INTO monarchs VALUES (5, 'Arthur', 'Edward VII');\nINSERT INTO monarchs VALUES (6, 'Elizabeth', 'Mary II');\nINSERT INTO monarchs VALUES (7, 'Alexander",
                "extracted_query": null,
                "generation_time": 31.940481424331665
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?monarch WHERE {\n  ?monarch <http://www.w3.org/2002/07/owl#sameAs> <http://dbpedia.org/resource/Monarch_of_the_United_Kingdom> .\n  ?monarch <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Monarch> .\n  ?monarch <http://www.w3.org/2002/07/owl#hasBroaderConcept> <http://dbpedia.org/ontology/GovernmentalHeadOfState> .\n  ?monarch <http://www.w3.org/",
                "extracted_query": null,
                "generation_time": 34.37173247337341
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?monarch ?spouse ?country\nWHERE {\n  GRAPH <http://example.org/ontology> {\n    ?monarch a <http://www.w3.org/2002/07/owl#Individual> .\n    ?monarch rdfs:label ?label .\n    ?monarch skos:prefLabel ?prefLabel .\n    ?monarch skos:altLabel ?altLabel .\n    ?monarch skos:related ?related .\n    ?monarch skos:altLabel ?altLabel .\n    ?monarch foaf:name ?name .\n    ?monarch foaf:spouse ?spouse .",
                "extracted_query": null,
                "generation_time": 27.737021923065186
            },
            {
                "level": 4,
                "model_name": "mistralai/Mistral-7B-Instruct-v0.3",
                "raw_query": "```sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT DISTINCT",
                "extracted_query": null,
                "generation_time": 219.55254769325256
            },
            {
                "level": 5,
                "model_name": "google/gemma-2-9b-it",
                "raw_query": "```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nSELECT ?monarch ?spouse\nWHERE {\n  ?monarch dbo:spouse ?spouse .\n  ?spouse dbo:nationality \"German\" .\n  FILTER (regex(?monarch, \"United Kingdom\"))\n}\n```",
                "extracted_query": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nSELECT ?monarch ?spouse\nWHERE {\n  ?monarch dbo:spouse ?spouse .\n  ?spouse dbo:nationality \"German\" .\n  FILTER (regex(?monarch, \"United Kingdom\"))\n}",
                "generation_time": 255.11986422538757
            }
        ]
    },
    {
        "question_id": "199",
        "question": "Give me all Argentine films.",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { { ?uri rdf:type yago:ArgentineFilms } UNION { ?uri rdf:type dbo:Film { ?uri dbo:country res:Argentina } UNION { ?uri dbp:country \"Argentina\"@en } } }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in JSON format.\n```json\n{\n  \"results\": [\n    {\n      \"title\": \"La Casa de Papel\",\n      \"year\": \"1984\"\n    },\n    {\n      \"title\": \"El Padrino\",\n      \"year\": \"1967\"\n    }\n  ]\n}\n``` ```sparql\nSELECT ?film { \n  ?film filmTitle ?year .\n  FILTER (lang(?film) = \"es\") \n} \nWHERE { \n  ?film filmTitle \"Argentine\"^^<http://www.w3.org/2001/XMLSchema#string> ?film .\n  ?film <http://www.w3.org/2001/XMLSchema#",
                "extracted_query": null,
                "generation_time": 31.815003395080566
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?film WHERE {\n  ?film rdf:type foaf:Document ;\n       dct:title ?title .\n  FILTER(REGEX(str(?title), \"Argentina\", \"i\"))\n}\n```",
                "extracted_query": "SELECT ?film WHERE {\n  ?film rdf:type foaf:Document ;\n       dct:title ?title .\n  FILTER(REGEX(str(?title), \"Argentina\", \"i\"))\n}",
                "generation_time": 9.398536920547485
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?film WHERE {\n  ?film a <http://dbpedia.org/ontology/Film> .\n  ?film dbo:country ?country .\n  FILTER (?country = \"Argentina\") .\n}\n```",
                "extracted_query": "SELECT ?film WHERE {\n  ?film a <http://dbpedia.org/ontology/Film> .\n  ?film dbo:country ?country .\n  FILTER (?country = \"Argentina\") .\n}",
                "generation_time": 10.036944150924683
            }
        ]
    },
    {
        "question_id": "203",
        "question": "How did Michael Jackson die?",
        "reference_query": "SELECT DISTINCT ?s WHERE { <http://dbpedia.org/resource/Michael_Jackson> <http://dbpedia.org/property/deathCause> ?s }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in JSON format.\n\nHere is the RDF data:\n```json\n{\n  \"MichaelJackson\": {\n    \"deathDate\": \"1982-07-25\"\n  }\n}\n```\n\nNote: You can assume that the death date is always July 25th of the year 1982.\nTo answer this question, we need to find information about Michael Jackson's death date and then determine how he died. We will use the `PREFIX rdf:` namespace to refer to the RDF data.\n\nSPARQL Query:\n```sparql\nSELECT ?date\nWHERE {\n  ?person rdf:type rdf:Person .\n  ?person rdf:value ?date .\n  FILTER(?date = \"19",
                "extracted_query": null,
                "generation_time": 32.067086935043335
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?causeOfDeath WHERE {\n  ?person wdt:P31 wd:Q5.\n  ?person wdt:P27 wd:Q6904.\n  ?person wdt:P834 ?causeOfDeath .\n}\n```",
                "extracted_query": "SELECT ?causeOfDeath WHERE {\n  ?person wdt:P31 wd:Q5.\n  ?person wdt:P27 wd:Q6904.\n  ?person wdt:P834 ?causeOfDeath .\n}",
                "generation_time": 13.081582069396973
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?cause\nWHERE {\n  ?subject a dbo:Person .\n  ?subject dbo:died ?cause .\n  FILTER (?cause = \"Michael Jackson\")\n}\n```",
                "extracted_query": "SELECT ?cause\nWHERE {\n  ?subject a dbo:Person .\n  ?subject dbo:died ?cause .\n  FILTER (?cause = \"Michael Jackson\")\n}",
                "generation_time": 8.561121463775635
            }
        ]
    },
    {
        "question_id": "197",
        "question": "Which U.S. state has been admitted latest?",
        "reference_query": "PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> SELECT DISTINCT ?uri WHERE { ?uri dct:subject dbc:States_of_the_United_States ; <http://dbpedia.org/property/admittancedate> ?x } ORDER BY DESC(?x) LIMIT 1",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in JSON format.\n\n```json\n{\n  \"results\": [\n    {\n      \"state\": \"Alabama\",\n      \"admission_date\": \"1906-01-01\"\n    },\n    {\n      \"state\": \"Alaska\",\n      \"admission_date\": \"1959-03-24\"\n    },\n    {\n      \"state\": \"Arizona\",\n      \"admission_date\": \"1872-01-01\"\n    },\n    ...\n  ]\n}\n```\n\nThe answer to this question is:\n```json\n{\n  \"results\": [\n    {\n      \"state\": \"Alabama\",\n      \"admission_date\": \"1906-0",
                "extracted_query": null,
                "generation_time": 31.923078060150146
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?state \nWHERE {\n  ?state wdt:P31 wd:Q2 .\n  FILTER NOT EXISTS { ?state wdt:P860 ?date . }\n}\nORDER BY DESC(?date)\nLIMIT 1;",
                "extracted_query": "SELECT ?state \nWHERE {\n  ?state wdt:P31 wd:Q2 .\n  FILTER NOT EXISTS { ?state wdt:P860 ?date . }",
                "generation_time": 11.771424293518066
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?state ?latestAdmissionDate\nWHERE {\n  GRAPH <http://example.org/ontology#> {\n    ?state a us:State .\n    ?state us:admissionDate ?latestAdmissionDate .\n  }\n  FILTER (?latestAdmissionDate > '2023-01-01')\n}\n```",
                "extracted_query": "SELECT ?state ?latestAdmissionDate\nWHERE {\n  GRAPH <http://example.org/ontology#> {\n    ?state a us:State .\n    ?state us:admissionDate ?latestAdmissionDate .\n  }\n  FILTER (?latestAdmissionDate > '2023-01-01')\n}",
                "generation_time": 14.687341213226318
            }
        ]
    },
    {
        "question_id": "196",
        "question": "Which classes does the Millepede belong to?",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?String WHERE { res:Millipede dbp:taxon ?String }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the form of a list, where each class is listed as a separate element.\n\nExample:\n```\nMammalia\nArachnida\nInsecta\nChordata\nEctothermic\nHemichordata\nOmnivore\n``` To solve this problem, we need to retrieve information about the Millepedes from a database that stores taxonomic data. We will use the `SELECT` statement to fetch the required information. \n\nHere's the SPARQL query to achieve this:\n\n```sparql\nPREFIX ex: <http://example.org/>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdf: <http://",
                "extracted_query": null,
                "generation_time": 32.09496259689331
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?class\nWHERE {\n  <http://example.org/millepede> rdfs:subClassOf ?class .\n}\n```",
                "extracted_query": "SELECT ?class\nWHERE {\n  <http://example.org/millepede> rdfs:subClassOf ?class .\n}",
                "generation_time": 7.558139324188232
            }
        ]
    },
    {
        "question_id": "188",
        "question": "Give me the homepage of Forbes.",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?string WHERE { res:Forbes foaf:homepage ?string }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in JSON format.\n```json\n{\n  \"query\": \"PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?homepage WHERE { ?person foaf:name ?name . FILTER (strstarts(?name,\"Forbes\") || strstarts(?name,\"Forbes\")) . ?person foaf:homepage ?homepage }\",\n  \"result\": {\n    \"data\": [\n      {\n        \"homepage\": \"https://www.forbes.com\"\n      }\n    ]\n  }\n}\n```\n\nNote: Replace the `?name` placeholder with the actual name of the person you want to retrieve their homepage from. Also, ensure that the `strstarts` function is properly implemented to handle cases",
                "extracted_query": "PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?homepage WHERE { ?person foaf:name ?name . FILTER (strstarts(?name,\"Forbes\") || strstarts(?name,\"Forbes\")) . ?person foaf:homepage ?homepage }",
                "generation_time": 32.06826424598694
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?homepage WHERE {\n  <http://www.forbes.com> <http://xmlns.com/foaf/0.1/homepage> ?homepage .\n}\n```",
                "extracted_query": "SELECT ?homepage WHERE {\n  <http://www.forbes.com> <http://xmlns.com/foaf/0.1/homepage> ?homepage .\n}",
                "generation_time": 8.95133900642395
            }
        ]
    },
    {
        "question_id": "187",
        "question": "Who is the husband of Amanda Palmer?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Amanda_Palmer> }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format:\n```\nSELECT ?person\nWHERE {\n  ?person <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/ns/person#Person>.\n  ?person <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Marriage>.\n  ?person <http://schema.org/Husband> ?husband.\n}\nLIMIT 10\n```\n\nNote: Replace `<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>` with the correct",
                "extracted_query": "SELECT ?person\nWHERE {\n  ?person <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/ns/person#Person>.\n  ?person <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Marriage>.\n  ?person <http://schema.org/Husband> ?husband.\n}",
                "generation_time": 32.09837245941162
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?husband WHERE {\n  <http://example.com/people/Amanda_Palmer> <http://xmlns.com/foaf/mbox> \"<mailto:aam@palmer.com>\" .\n}\n```",
                "extracted_query": "SELECT ?husband WHERE {\n  <http://example.com/people/Amanda_Palmer> <http://xmlns.com/foaf/mbox> \"<mailto:aam@palmer.com>\" .\n}",
                "generation_time": 10.765659809112549
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?person ?spouse\nWHERE {\n  ?person a :Person .\n  ?person rdfs:label \"Amanda Palmer\" .\n  ?person rdfs:type \"Person\" .\n  ?person hasSpouse ?spouse .\n}\n```",
                "extracted_query": "SELECT ?person ?spouse\nWHERE {\n  ?person a :Person .\n  ?person rdfs:label \"Amanda Palmer\" .\n  ?person rdfs:type \"Person\" .\n  ?person hasSpouse ?spouse .\n}",
                "generation_time": 11.2096426486969
            }
        ]
    },
    {
        "question_id": "176",
        "question": "Who painted The Storm on the Sea of Galilee?",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:The_Storm_on_the_Sea_of_Galilee dbo:author ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format:\n```\nSELECT ?name WHERE {\n  ?artist <http://www.w3.org/2000/01/rdf-schema#label> \"The Storm on the Sea of Galilee\"^^<http://www.w3.org/2000/01/rdf-schema#label>.\n}\n```\n\nNote: Replace `<http://www.w3.org/2000/01/rdf-schema#label>` with the actual URI of the label property used by the RDF schema. To solve this problem, you need to use the `?artist` pattern to match artists who have the label \"The Storm on the Sea of Galilee\". Then, you can filter the",
                "extracted_query": "SELECT ?name WHERE {\n  ?artist <http://www.w3.org/2000/01/rdf-schema#label> \"The Storm on the Sea of Galilee\"^^<http://www.w3.org/2000/01/rdf-schema#label>.\n}",
                "generation_time": 31.804163932800293
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?painter WHERE {\n  <The_Storm_on_the_Sea_of_Galilee> <http://example.org/paints_to> ?painter .\n}\n```",
                "extracted_query": "SELECT ?painter WHERE {\n  <The_Storm_on_the_Sea_of_Galilee> <http://example.org/paints_to> ?painter .\n}",
                "generation_time": 9.415607452392578
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?artist ?painting WHERE {\n  ?artist a dbo:Person .\n  ?painting dbo:painting ?paintingName .\n  ?painting dbo:artist ?artistName .\n  FILTER (?paintingName = \"The Storm on the Sea of Galilee\")\n}\n```",
                "extracted_query": "SELECT ?artist ?painting WHERE {\n  ?artist a dbo:Person .\n  ?painting dbo:painting ?paintingName .\n  ?painting dbo:artist ?artistName .\n  FILTER (?paintingName = \"The Storm on the Sea of Galilee\")\n}",
                "generation_time": 11.986417055130005
            }
        ]
    },
    {
        "question_id": "62",
        "question": "What is the highest place of Karakoram?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Karakoram dbp:highest ?uri }",
        "validated": false,
        "validated_by": null,
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format:\n```sparql\nSELECT ?place\nWHERE {\n  ?place a <http://example.org/place> .\n  ?place a <http://example.org/place> ;\n    <http://example.org/hasPlaceName> \"Karakorum\"^^<http://www.w3.org/2001/XMLSchema#string> .\n}\nORDER BY DESC(?place)\nLIMIT 1\n```\n\nNote: Replace `<http://example.org/place>` with the actual URI of the RDF resource representing the Karakoram place.\nThe answer to the question is **Karakorum**. ```sparql\nSELECT ?place\nWHERE {\n  ?place a <http://example.org/place> ;\n    <",
                "extracted_query": "SELECT ?place\nWHERE {\n  ?place a <http://example.org/place> .\n  ?place a <http://example.org/place> ;\n    <http://example.org/hasPlaceName> \"Karakorum\"^^<http://www.w3.org/2001/XMLSchema#string> .\n}\nORDER BY DESC(?place)\nLIMIT 1",
                "generation_time": 31.981451988220215
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?place WHERE {\n  <https://example.com/karakoram> <http://www.w3.org/2004/02/skos/core#prefLabel> ?label .\n  ?label rdfs:label ?place .\n}\n```",
                "extracted_query": "SELECT ?place WHERE {\n  <https://example.com/karakoram> <http://www.w3.org/2004/02/skos/core#prefLabel> ?label .\n  ?label rdfs:label ?place .\n}",
                "generation_time": 13.072444915771484
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?highestPlace\nWHERE {\n  ?place a <http://www.w3.org/2000/01/rdf-schema#Thing> .\n  ?place skos:prefLabel ?label .\n  FILTER (lang(?label) = \"en\") .\n  ?place skos:altLabel ?altLabel .\n  FILTER (lang(?altLabel) = \"en\") .\n  ?place dbo:name ?name .\n  FILTER (CONTAINS(STR(?name), \"Karakoram\")) .\n  ?place dbo:highestPlace ?highestPlace .\n  FILTER (CONTAINS(STR(?highestPlace), \"Karakoram\"))",
                "extracted_query": null,
                "generation_time": 27.765477895736694
            },
            {
                "level": 4,
                "model_name": "mistralai/Mistral-7B-Instruct-v0.3",
                "raw_query": "```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>\n\nSELECT DISTINCT ?mountain ?elevation\nWHERE {\n  ?mountain rdf:type d",
                "extracted_query": null,
                "generation_time": 303.05325651168823
            },
            {
                "level": 5,
                "model_name": "google/gemma-2-9b-it",
                "raw_query": "```sparql\nPREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>\nPREFIX schema: <http://schema.org/>\nPREFIX dbpedia: <http://dbpedia.org/ontology/>\n\nSELECT ?highestPlace\nWHERE {\n  ?mountain dbpedia:name \"Karakoram\" .\n  ?mountain dbpedia:highestPoint ?highestPlace .\n}\n```",
                "extracted_query": "PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>\nPREFIX schema: <http://schema.org/>\nPREFIX dbpedia: <http://dbpedia.org/ontology/>\n\nSELECT ?highestPlace\nWHERE {\n  ?mountain dbpedia:name \"Karakoram\" .\n  ?mountain dbpedia:highestPoint ?highestPlace .\n}",
                "generation_time": 322.10318303108215
            }
        ]
    },
    {
        "question_id": "173",
        "question": "When did Finland join the EU?",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?date WHERE { res:Finland dbp:accessioneudate ?date }",
        "validated": false,
        "validated_by": null,
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of an answer to the question.\n\nThe answer should include the date when Finland joined the EU.\nTo solve this problem, we need to retrieve information about the date when Finland joined the European Union. We can use the `SELECT` clause to specify the desired output and the `FROM` clause to indicate from which table we want to retrieve the data. Additionally, we need to use the `WHERE` clause to filter the records based on the country name \"Finland\" and the year 2019 as the joining year.\n\nHere's the SPARQL query that satisfies the given requirements:\n```\nPREFIX ex: <http://example.org/>\nSELECT ?date\nWHERE {\n  ex:joinYear \"",
                "extracted_query": null,
                "generation_time": 31.533901691436768
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?date\nWHERE {\n  <http://www.w3.org/ns/dcat#country> <http://data.vlaanderen.be/ns/persoon#geboortedatum> ?birthDate ;\n                                    <http://data.vlaanderen.be/ns/persoon#geboorteplaats> ?birthPlace .\n  FILTER regex(str(?birthPlace), \"Finland\")\n}\nLIMIT 10```",
                "extracted_query": "SELECT ?date\nWHERE {\n  <http://www.w3.org/ns/dcat#country> <http://data.vlaanderen.be/ns/persoon#geboortedatum> ?birthDate ;\n                                    <http://data.vlaanderen.be/ns/persoon#geboorteplaats> ?birthPlace .\n  FILTER regex(str(?birthPlace), \"Finland\")\n}\nLIMIT 10",
                "generation_time": 20.855271816253662
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?date\nWHERE {\n  ?country a <http://www.w3.org/2002/07/owl#Thing> .\n  ?country rdf:type <http://www.w3.org/2002/07/owl#Ontology> .\n  ?country a <http://www.w3.org/2002/07/owl#Ontology> .\n  ?country <http://www.w3.org/2002/07/owl#Ontology> .\n  FILTER (?country = \"Finland\") .\n  ?country <http://www.w3.org/20",
                "extracted_query": null,
                "generation_time": 27.695035219192505
            },
            {
                "level": 4,
                "model_name": "mistralai/Mistral-7B-Instruct-v0.3",
                "raw_query": "```sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT ?joinDate\nWHERE {\n  dbr:Finland dbo:jo",
                "extracted_query": null,
                "generation_time": 301.53081917762756
            },
            {
                "level": 5,
                "model_name": "google/gemma-2-9b-it",
                "raw_query": "```sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX schema: <http://schema.org/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT ?date\nWHERE {\n  <http://dbpedia.org/resource/Finland> dbo:dateJoinedEU ?date .\n}\n```",
                "extracted_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX schema: <http://schema.org/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT ?date\nWHERE {\n  <http://dbpedia.org/resource/Finland> dbo:dateJoinedEU ?date .\n}",
                "generation_time": 297.64406871795654
            }
        ]
    },
    {
        "question_id": "168",
        "question": "Which actors play in Big Bang Theory?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Big_Bang_Theory> <http://dbpedia.org/ontology/starring> ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to the top 10 actors who have played in at least one episode of Big Bang Theory.\n\nHere is an example of what the expected output would look like:\n```\nPREFIX ex: <http://example.org/>\nSELECT ?actor\nWHERE {\n  ?actor ex:playedIn \"Big Bang Theory\"\n}\nLIMIT 10\n``` To retrieve the top 10 actors who have played in at least one episode of Big Bang Theory, you can use the following SPARQL query:\n\n```sparql\nPREFIX ex: <http://example.org/>\n\nSELECT ?actor\nWHERE {\n  ?actor ex:playedIn \"Big Bang Theory\"\n} LIMIT 10\n```\n\nThis query will return a list",
                "extracted_query": "PREFIX ex: <http://example.org/>\n\nSELECT ?actor\nWHERE {\n  ?actor ex:playedIn \"Big Bang Theory\"\n} LIMIT 10",
                "generation_time": 31.963961839675903
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?actor WHERE {\n  ?show <http://www.bigbangtheory.com/hasActor> ?actor .\n}\n```",
                "extracted_query": "SELECT ?actor WHERE {\n  ?show <http://www.bigbangtheory.com/hasActor> ?actor .\n}",
                "generation_time": 6.899363279342651
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?actor ?character\nWHERE {\n  ?actor a dbo:Actor .\n  ?actor dbo:appearsIn ?work .\n  ?work a dbo:Work .\n  FILTER (?work rdf:type dbo:TVShow)\n  FILTER (?work rdfs:label = \"The Big Bang Theory\")\n  ?work dbo:character ?character .\n}\n```",
                "extracted_query": "SELECT ?actor ?character\nWHERE {\n  ?actor a dbo:Actor .\n  ?actor dbo:appearsIn ?work .\n  ?work a dbo:Work .\n  FILTER (?work rdf:type dbo:TVShow)\n  FILTER (?work rdfs:label = \"The Big Bang Theory\")\n  ?work dbo:character ?character .\n}",
                "generation_time": 16.13959574699402
            }
        ]
    },
    {
        "question_id": "166",
        "question": "Which computer scientist won an oscar?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/field> <http://dbpedia.org/resource/Computer_science> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Academy_Award> }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the form of a list of triples.\n\nThe answer to this question is:\n```sparql\nSELECT ?computerScientistName\nWHERE {\n  <http://dbpedia.org/resource/Computer_Science> <http://www.w3.org/ns/prov#wasSuccessful> \"Won\"^^<http://www.w3.org/ns/prov#Outcome>\n  ?computerScientistName <http://dbpedia.org/resource/Oscar_Wright> .\n}\nGROUP BY ?computerScientistName\nORDER BY DESC(?computerScientistName)\nLIMIT 10\n```\n\nExplanation: This query selects all names of computer scientists who have won an Oscar award from the DBpedia database. It uses the `DBpedia",
                "extracted_query": "SELECT ?computerScientistName\nWHERE {\n  <http://dbpedia.org/resource/Computer_Science> <http://www.w3.org/ns/prov#wasSuccessful> \"Won\"^^<http://www.w3.org/ns/prov#Outcome>\n  ?computerScientistName <http://dbpedia.org/resource/Oscar_Wright> .\n}\nGROUP BY ?computerScientistName\nORDER BY DESC(?computerScientistName)\nLIMIT 10",
                "generation_time": 32.07241463661194
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?computerScientist WHERE {\n  ?computerScientist wdt:P31 wd:Q28046.\n}\n```",
                "extracted_query": "SELECT ?computerScientist WHERE {\n  ?computerScientist wdt:P31 wd:Q28046.\n}",
                "generation_time": 7.565765857696533
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?person ?award\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:wonAward ?award .\n  FILTER (?award = \"Oscar\") .\n}\n```",
                "extracted_query": "SELECT ?person ?award\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:wonAward ?award .\n  FILTER (?award = \"Oscar\") .\n}",
                "generation_time": 9.125955581665039
            }
        ]
    },
    {
        "question_id": "160",
        "question": "Who wrote Harry Potter?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Harry_Potter> <http://dbpedia.org/property/author> ?uri }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format of \"Answer: <answer>\". \n\nNote: You can assume that there is already a dataset containing information about authors who have written books related to Harry Potter.\n\nSPARQL Query:\n```sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?author\nWHERE {\n  ?book rdf:type owl:Class .\n  ?book owl:about ?author .\n}\nORDER BY DESC(?author)\nLIMIT 10\n``` Answer: ```sparql\nSELECT ?author\nWHERE {",
                "extracted_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\n\nSELECT ?author\nWHERE {\n  ?book rdf:type owl:Class .\n  ?book owl:about ?author .\n}\nORDER BY DESC(?author)\nLIMIT 10",
                "generation_time": 32.0007598400116
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?author WHERE {\n  <http://www.example.com/harry-potter> <http://www.example.com/written-by> ?author .\n}\n```",
                "extracted_query": "SELECT ?author WHERE {\n  <http://www.example.com/harry-potter> <http://www.example.com/written-by> ?author .\n}",
                "generation_time": 8.717658758163452
            }
        ]
    },
    {
        "question_id": "158",
        "question": "Give me all writers that won the Nobel Prize in literature.",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be ordered by their publication year in descending order.\nSELECT ?w WHERE { ?w <http://www.w3.org/ns/sparql-results#count> 1 . ?w <http://www.w3.org/ns/sparql-results#result> \"Writers who have won the Nobel Prize in Literature\"^^xsd:string . ?w <http://www.w3.org/ns/sparql-results#result> ?r . ?r <http://www.w3.org/2004/05/improved-refs#author> ?a . ?a <http://www.w3.org/2004/05/improved-refs#name> ?n . ?n <http://",
                "extracted_query": null,
                "generation_time": 32.04579734802246
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?writer WHERE {\n  ?writer wdt:P31 wd:Q2 .\n}\n```",
                "extracted_query": "SELECT ?writer WHERE {\n  ?writer wdt:P31 wd:Q2 .\n}",
                "generation_time": 5.748388767242432
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?writer ?award\nWHERE {\n  ?writer a dbo:Person .\n  ?writer dbo:won NobelPrizeInLiterature ?award .\n}\n```",
                "extracted_query": "SELECT ?writer ?award\nWHERE {\n  ?writer a dbo:Person .\n  ?writer dbo:won NobelPrizeInLiterature ?award .\n}",
                "generation_time": 7.830792188644409
            }
        ]
    },
    {
        "question_id": "157",
        "question": "Give me English actors starring in Lovesick.",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lovesick_(1983_film)> dbo:starring ?uri . ?uri dbo:birthPlace ?city . ?city dbo:country <http://dbpedia.org/resource/United_Kingdom> }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to 10 results.\nSELECT ?actor WHERE { ?person a <http://www.w3.org/ns/sparql-results#results> . ?person <http://www.w3.org/2000/01/rdf-schema#label> \"Lovesick\"^^<http://www.w3.org/2000/01/rdf-schema#subClassOf>. ?person <http://www.w3.org/2000/01/rdf-schema#memberOf> ?actor . ?actor <http://www.w3.org/2000/01/rdf-schema#label> \"English actor\". ?actor <http://www.w3.org",
                "extracted_query": null,
                "generation_time": 31.829838752746582
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?actor WHERE {\n  ?movie rdf:type <http://www.example.com/movie> .\n  ?movie <http://www.example.com/starring> ?actor ;\n         <http://www.example.com/hasTitle> \"Lovesick\" .\n}\n```",
                "extracted_query": "SELECT ?actor WHERE {\n  ?movie rdf:type <http://www.example.com/movie> .\n  ?movie <http://www.example.com/starring> ?actor ;\n         <http://www.example.com/hasTitle> \"Lovesick\" .\n}",
                "generation_time": 13.313167572021484
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?actor ?name\nWHERE {\n  ?actor a :Actor .\n  ?actor :starredIn <http://example.org/lovesick> .\n  FILTER(?actor ?name)\n}\n```",
                "extracted_query": "SELECT ?actor ?name\nWHERE {\n  ?actor a :Actor .\n  ?actor :starredIn <http://example.org/lovesick> .\n  FILTER(?actor ?name)\n}",
                "generation_time": 9.863303899765015
            }
        ]
    },
    {
        "question_id": "155",
        "question": "What is the nick name of Baghdad?",
        "reference_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?nm WHERE { dbr:Baghdad foaf:nick ?nm }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in lowercase.\n\nThe answer to this question is:\n```sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dc: <http://purl.org/dc/terms/>\nSELECT ?nickName\nWHERE {\n  ?person rdf:type rdf:Person .\n  ?person dc:name \"Baghdad\" .\n}\n```\n\nExplanation: This SPARQL query retrieves the nickname of the person named \"Baghdad\". The answer is returned in lowercase as requested. ```sparql``` tags are used to enclose",
                "extracted_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dc: <http://purl.org/dc/terms/>\nSELECT ?nickName\nWHERE {\n  ?person rdf:type rdf:Person .\n  ?person dc:name \"Baghdad\" .\n}\n\n",
                "generation_time": 32.00490593910217
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?nickName \nWHERE { \n    <http://dbpedia.org/resource/Baghdad> rdfs:label ?name . \n    FILTER(lang(?name) = \"en\") \n    BIND(REPLACE(str(?name), \"(^|\\\\s)(Baghdad)(\\\\s|$)\", \"\", \"i\") AS ?nickName)\n}\n```",
                "extracted_query": "SELECT ?nickName \nWHERE { \n    <http://dbpedia.org/resource/Baghdad> rdfs:label ?name . \n    FILTER(lang(?name) = \"en\") \n    BIND(REPLACE(str(?name), \"(^|\\\\s)(Baghdad)(\\\\s|$)\", \"\", \"i\") AS ?nickName)\n}",
                "generation_time": 17.848961353302002
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?nickname WHERE {\n  ?s a <http://dbpedia.org/ontology/City> .\n  ?s <http://dbpedia.org/ontology/name> ?name .\n  FILTER (?name = \"Baghdad\") .\n  ?s <http://dbpedia.org/ontology/nickname> ?nickname .\n}\n```",
                "extracted_query": "SELECT ?nickname WHERE {\n  ?s a <http://dbpedia.org/ontology/City> .\n  ?s <http://dbpedia.org/ontology/name> ?name .\n  FILTER (?name = \"Baghdad\") .\n  ?s <http://dbpedia.org/ontology/nickname> ?nickname .\n}",
                "generation_time": 15.37646484375
            }
        ]
    },
    {
        "question_id": "150",
        "question": "In which city was the president of Montenegro born?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/title> dbr:President_of_Montenegro ; dbo:birthPlace ?uri . ?uri dbo:type dbr:Capital_city }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format:\n```\nSELECT ?city WHERE { ?person a <http://example.org/Person> . ?person <http://example.org/BornIn> ?city }\n```\n\nNote: Replace `<http://example.org/Person>` with the actual URI for the `Person` class.\nTo solve this problem, you need to know the name of the president of Montenegro. Let's assume that the president of Montenegro is Zoran \u0110in\u0111i\u0107.\n\nSPARQL Query:\n```sparql\nPREFIX ex: <http://example.org/>\n\nSELECT ?city WHERE {\n  ex:Person ex:born \"Zoran \u0110in\u0111i\u0107\" .\n  ex:Person ex:BornIn ex:city",
                "extracted_query": "SELECT ?city WHERE { ?person a <http://example.org/Person> . ?person <http://example.org/BornIn> ?city }",
                "generation_time": 31.855819940567017
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?city WHERE {\n  ?president a foaf:Person ;\n             foaf:name \"President of Montenegro\" ;\n             dbo:birthPlace ?city .\n}\n```",
                "extracted_query": "SELECT ?city WHERE {\n  ?president a foaf:Person ;\n             foaf:name \"President of Montenegro\" ;\n             dbo:birthPlace ?city .\n}",
                "generation_time": 9.419922828674316
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?city ?president WHERE {\n  ?president a :Person ;\n    ?birthCity ?birthPlace .\n  FILTER (?birthCity = \"Montenegro\")\n}\n```",
                "extracted_query": "SELECT ?city ?president WHERE {\n  ?president a :Person ;\n    ?birthCity ?birthPlace .\n  FILTER (?birthCity = \"Montenegro\")\n}",
                "generation_time": 8.55267882347107
            }
        ]
    },
    {
        "question_id": "149",
        "question": "Which U.S. state has the highest population density?",
        "reference_query": "SELECT ?uri WHERE { ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/ontology/capital> ?capital . ?uri <http://dbpedia.org/property/densityrank> ?density . OPTIONAL {?uri <http://www.w3.org/2000/01/rdf-schema#label> ?string. FILTER (lang(?string) = 'en') } } ORDER BY ASC(?density) LIMIT 1",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in JSON format.\n\nThe answer is:\n```json\n{\n  \"result\": {\n    \"state\": \"California\",\n    \"population_density\": 10258,\n    \"total_population\": 37749600\n  }\n}\n``` ```sparql\nSELECT ?state { ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2000/01/rdf-schema#State> . } WHERE { ?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http",
                "extracted_query": null,
                "generation_time": 31.52960753440857
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?state WHERE {\n  ?state <http://www.w3.org/ns/person#country> \"United States\" ;\n       <http://www.w3.org/ns/addressing#hasDensity> [ <http://www.w3.org/ns/addressing#unit> \"people/km\u00b2\" ] .\n}\nORDER BY DESC(?density)\nLIMIT 1```",
                "extracted_query": "SELECT ?state WHERE {\n  ?state <http://www.w3.org/ns/person#country> \"United States\" ;\n       <http://www.w3.org/ns/addressing#hasDensity> [ <http://www.w3.org/ns/addressing#unit> \"people/km\u00b2\" ] .\n}\nORDER BY DESC(?density)\nLIMIT 1",
                "generation_time": 17.869539499282837
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?state ?populationDensity\nWHERE {\n  GRAPH <http://example.org/population> {\n    ?state a <http://example.org/population/State> .\n    ?state population:population ?population .\n    FILTER ( ?population > 100000 )\n  }\n  ORDER BY DESC(?populationDensity)\n}\n```",
                "extracted_query": "SELECT ?state ?populationDensity\nWHERE {\n  GRAPH <http://example.org/population> {\n    ?state a <http://example.org/population/State> .\n    ?state population:population ?population .\n    FILTER ( ?population > 100000 )\n  }\n  ORDER BY DESC(?populationDensity)\n}",
                "generation_time": 15.925127267837524
            }
        ]
    },
    {
        "question_id": "25",
        "question": "What is the longest river in China?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/China> ; <http://dbpedia.org/property/length> ?l } ORDER BY DESC(?l) OFFSET 0 LIMIT 1",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to one row of data.\n\nThe answer should be returned as a list of triples, where each triple consists of the name of the river and its length in kilometers. The rivers are sorted by their length in descending order.\nSELECT ?river { ?river a :River ; <http://www.w3.org/2005/08/addressing/interlingus> \"China\"^^<http://www.w3.org/1999/02/22-rdf-syntax-ns#type> . } WHERE { ?river a :River . FILTER(?river != \"\") } ORDER BY DESC(?length) LIMIT 1 ```sparql\nSELECT ?river { ?river a :River ;",
                "extracted_query": "SELECT ?river { ?river a :River ; <http://www.w3.org/2005/08/addressing/interlingus> \"China\"^^<http://www.w3.org/1999/02/22-rdf-syntax-ns#type> . } WHERE { ?river a :River . FILTER(?river != \"\") }",
                "generation_time": 32.037312746047974
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?river WHERE {\n  ?river a waterway;\n        has_name \"Yangtze River\";\n        has_length_max .\n}\n```",
                "extracted_query": "SELECT ?river WHERE {\n  ?river a waterway;\n        has_name \"Yangtze River\";\n        has_length_max .\n}",
                "generation_time": 7.430084705352783
            }
        ]
    },
    {
        "question_id": "143",
        "question": "What is the area code of Berlin?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:Berlin dbo:areaCode ?string }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format:\n```\n<SPARQLQuery>\n  <PREFIX>example</PREFIX>\n  SELECT ?areaCode\n  WHERE {\n    ?city example:hasAreaCode ?areaCode .\n    FILTER(?city = \"Berlin\")\n  }\n</SPARQLQuery>\n``` To find the area code of Berlin, you can use the following SPARQL query:\n\n```sparql\nSELECT ?areaCode\nWHERE {\n  ?city example:hasAreaCode ?areaCode .\n  FILTER(?city = \"Berlin\")\n}\n``` \n\nThis query selects all city names that have an area code associated with them, specifically focusing on those cities located in Berlin. The result will be returned in the format provided. Note that",
                "extracted_query": "SELECT ?areaCode\nWHERE {\n  ?city example:hasAreaCode ?areaCode .\n  FILTER(?city = \"Berlin\")\n}",
                "generation_time": 32.0191490650177
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?area_code WHERE {\n  <Berlin> <http://www.w3.org/2001/XMLSchema#string> ?area_code .\n}\n```",
                "extracted_query": "SELECT ?area_code WHERE {\n  <Berlin> <http://www.w3.org/2001/XMLSchema#string> ?area_code .\n}",
                "generation_time": 8.399011611938477
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?areaCode\nWHERE {\n  ?place wdt:P31 wd:Q10777 .\n  ?place wdt:P17 wd:Q10778 .\n  FILTER(?place = \"Berlin\")\n  ?place wdt:P31 ?areaCode .\n}\n```",
                "extracted_query": "SELECT ?areaCode\nWHERE {\n  ?place wdt:P31 wd:Q10777 .\n  ?place wdt:P17 wd:Q10778 .\n  FILTER(?place = \"Berlin\")\n  ?place wdt:P31 ?areaCode .\n}",
                "generation_time": 14.662935972213745
            }
        ]
    },
    {
        "question_id": "140",
        "question": "How many scientists graduated from an Ivy League university?",
        "reference_query": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Scientist> ; <http://dbpedia.org/ontology/almaMater> ?university . ?university <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/Ivy_League> ; a <http://dbpedia.org/ontology/University> }",
        "validated": false,
        "validated_by": null,
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of \"Query: ```sparql ... ```\", without any formatting.\n\nThe answer to this question is 10.\nTo find out how many scientists graduated from an Ivy League university, we can use the following SPARQL query:\n```\nPREFIX ivy: <http://example.org/ivy/>\nSELECT ?num\nWHERE {\n  ?scientist ivy:graduatedFromIvyLeague .\n}\nGROUP BY ?scientist\nHAVING (?scientist IN (ivy:DoctoralStudent, ivy:PhD))\nLIMIT 10\n``` \n\nThis query uses the `PREFIX` keyword to specify the namespace for the `ivy` prefix, which contains information about Ivy League universities.",
                "extracted_query": "...",
                "generation_time": 32.05018639564514
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT (COUNT(DISTINCT ?scientist) AS INTEGER) WHERE {\n    ?university wdt:P31 wd:Ivy-League-universities.\n    ?university wdt:P570 ?scientist .\n}\n```",
                "extracted_query": "SELECT (COUNT(DISTINCT ?scientist) AS INTEGER) WHERE {\n    ?university wdt:P31 wd:Ivy-League-universities.\n    ?university wdt:P570 ?scientist .\n}",
                "generation_time": 12.154784917831421
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT (COUNT(?s) AS ?count)\nWHERE {\n  GRAPH ?g {\n    ?s a <http://dbpedia.org/ontology/Scientist> .\n    ?s <http://dbpedia.org/ontology/University> ?university .\n    FILTER(?university = \"Harvard University\"^^<http://www.w3.org/2001/XMLSchema#string> ||\n    ?university = \"Yale University\"^^<http://www.w3.org/2001/XMLSchema#string> ||\n    ?university = \"Columbia University\"^^<http://www.w3.org/2001/XMLSchema#string",
                "extracted_query": null,
                "generation_time": 27.801180362701416
            },
            {
                "level": 4,
                "model_name": "mistralai/Mistral-7B-Instruct-v0.3",
                "raw_query": "```sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT (COUNT(DI",
                "extracted_query": null,
                "generation_time": 184.0626401901245
            },
            {
                "level": 5,
                "model_name": "google/gemma-2-9b-it",
                "raw_query": "```sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT (COUNT(?scientist))\nWHERE {\n  ?scientist rdf:type dbo:Scientist .\n  ?scientist dbo:almaMater ?university .\n  ?university dbo:isPartOf ?league .\n  ?league rdfs:label \"Ivy League\" .\n}\n```",
                "extracted_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT (COUNT(?scientist))\nWHERE {\n  ?scientist rdf:type dbo:Scientist .\n  ?scientist dbo:almaMater ?university .\n  ?university dbo:isPartOf ?league .\n  ?league rdfs:label \"Ivy League\" .\n}",
                "generation_time": 266.3085718154907
            }
        ]
    },
    {
        "question_id": "139",
        "question": "Which professional surfers were born in Australia?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { { ?uri dbo:occupation res:Surfer ; dbo:birthPlace res:Australia } UNION { ?uri dbo:occupation res:Surfer ; dbo:birthPlace ?place . ?place dbo:country res:Australia } }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The output should be in the format of:\n```\n```sparql {\n  ?s <http://example.org/surfers#> ?p .\n}\n```\n\nNote: Replace `<http://example.org/surfers#>` with the actual URI of the RDF resource that contains the information about professional surfers.\nTo solve this problem, you need to know the specific RDF resource that contains the information about professional surfers. This could be a dataset like Wikipedia, a database of sports teams, or any other source that provides data on professional surfers.\n\nFor example, if we are using Wikipedia as an example, the SPARQL query would look something like this:\n\n```sparql\nPREFIX ex: <http://example.org/>\nSELECT ?",
                "extracted_query": "{\n  ?s <http://example.org/surfers#> ?p .\n}",
                "generation_time": 31.884373903274536
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?surfer WHERE {\n  ?surfer foaf:name \"professional surfer\" ;\n         dbo:bornIn \"Australia\".\n}\n```",
                "extracted_query": "SELECT ?surfer WHERE {\n  ?surfer foaf:name \"professional surfer\" ;\n         dbo:bornIn \"Australia\".\n}",
                "generation_time": 7.799033164978027
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?surfer ?birthPlace\nWHERE {\n  ?surfer a dbo:Person .\n  ?surfer dbo:born ?birthPlace .\n  FILTER (?birthPlace = \"Australia\")\n}\n```",
                "extracted_query": "SELECT ?surfer ?birthPlace\nWHERE {\n  ?surfer a dbo:Person .\n  ?surfer dbo:born ?birthPlace .\n  FILTER (?birthPlace = \"Australia\")\n}",
                "generation_time": 9.778532028198242
            }
        ]
    },
    {
        "question_id": "137",
        "question": "Give me all Dutch parties.",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Netherlands> }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to the first 10 results.\nSELECT ?party WHERE { ?person a <http://example.org/Party> . ?person <http://example.org/participatesIn> ?participation . ?participation <http://example.org/isPartOf> ?party . } LIMIT 10 ``` To retrieve all Dutch parties, you can use the following SPARQL query:\n\n```sparql\nPREFIX example: <http://example.org/>\n\nSELECT ?party\nWHERE {\n    ?person a <http://example.org/Party> .\n    ?person <http://example.org/participatesIn> ?participation .\n    ?participation <http://example.org/isPartOf> ?party .\n}\nLIMIT",
                "extracted_query": "SELECT ?party WHERE { ?person a <http://example.org/Party> . ?person <http://example.org/participatesIn> ?participation . ?participation <http://example.org/isPartOf> ?party . }\n\nPREFIX example: <http://example.org/>\n\nSELECT ?party\nWHERE {\n    ?person a <http://example.org/Party> .\n    ?person <http://example.org/participatesIn> ?participation .\n    ?participation <http://example.org/isPartOf> ?party .\n}",
                "generation_time": 32.06376361846924
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?party WHERE {\n  ?party wdt:P31 wd:Q5 .\n}\n```",
                "extracted_query": "SELECT ?party WHERE {\n  ?party wdt:P31 wd:Q5 .\n}",
                "generation_time": 5.756375312805176
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?party\nWHERE {\n  ?party a dutch:Party .\n}\n```",
                "extracted_query": "SELECT ?party\nWHERE {\n  ?party a dutch:Party .\n}",
                "generation_time": 4.8785223960876465
            }
        ]
    },
    {
        "question_id": "136",
        "question": "How many moons does Mars have?",
        "reference_query": "SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Mars> <http://dbpedia.org/property/satellites> ?n }",
        "validated": false,
        "validated_by": null,
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of \"Mars has X moons\". The answer should be an integer.\n\nThe input data is as follows:\n```\nPREFIX ex: <http://example.org/>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT ?numOfMoons\nWHERE {\n  ?ex:hasMoon ?moon .\n  ?moon ex:isA ex:Planet .\n  FILTER(?moon != ex:mars)\n}\n``` To find out how many moons",
                "extracted_query": "PREFIX ex: <http://example.org/>\nPREFIX owl: <http://www.w3.org/2002/07/owl#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT ?numOfMoons\nWHERE {\n  ?ex:hasMoon ?moon .\n  ?moon ex:isA ex:Planet .\n  FILTER(?moon != ex:mars)\n}",
                "generation_time": 32.0142035484314
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT (COUNT(?moon) AS ?moons)\nWHERE {\n  ?planet wdt:P31 wd:Mars.\n  ?planet wdt:P246 ?moon.\n}\n```",
                "extracted_query": "SELECT (COUNT(?moon) AS ?moons)\nWHERE {\n  ?planet wdt:P31 wd:Mars.\n  ?planet wdt:P246 ?moon.\n}",
                "generation_time": 10.1097252368927
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT (COUNT(?moon) AS ?count)\nWHERE {\n  GRAPH ?g {\n    ?moon a <http://www.w3.org/2000/01/rdf-schema#Resource> .\n    ?moon rdf:type <http://www.w3.org/2002/07/owl#Thing> .\n    ?moon rdfs:label ?label .\n    FILTER (?label = \"Moon\") .\n    ?moon :has_orbit ?planet .\n    ?planet a <http://www.w3.org/2002/07/owl#Thing> .\n    FILTER(?planet =",
                "extracted_query": null,
                "generation_time": 27.82691788673401
            },
            {
                "level": 4,
                "model_name": "mistralai/Mistral-7B-Instruct-v0.3",
                "raw_query": "```sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dct: <http://purl.org/dc/terms/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT COUNT(?moon) WHERE {\n  ?planet rdf:type dbo:Planet .",
                "extracted_query": null,
                "generation_time": 237.5973677635193
            },
            {
                "level": 5,
                "model_name": "google/gemma-2-9b-it",
                "raw_query": "```sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\n\nSELECT (COUNT(?moon) AS ?count)\nWHERE {\n  ?planet dbo:name \"Mars\" .\n  ?planet dbo:hasMoon ?moon .\n}\n```",
                "extracted_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\n\nSELECT (COUNT(?moon) AS ?count)\nWHERE {\n  ?planet dbo:name \"Mars\" .\n  ?planet dbo:hasMoon ?moon .\n}",
                "generation_time": 289.7049734592438
            }
        ]
    },
    {
        "question_id": "134",
        "question": "What is Batman's real name?",
        "reference_query": "SELECT DISTINCT ?label WHERE { <http://dbpedia.org/resource/Batman> <http://xmlns.com/foaf/0.1/name> ?label FILTER ( str(?label) != \"Batman\" ) }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of:\n```\n```sparql\nSELECT ?name\nWHERE {\n  ?person a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2000/01/rdf-schema#Person>.\n  ?person <http://www.w3.org/2004/02/skos/core#prefLabel> ?prefLabel.\n  FILTER(?prefLabel = \"Batman\").\n}\nLIMIT 1\n```\n\nNote: Replace `<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>` with the actual URI",
                "extracted_query": "SELECT ?name\nWHERE {\n  ?person a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2000/01/rdf-schema#Person>.\n  ?person <http://www.w3.org/2004/02/skos/core#prefLabel> ?prefLabel.\n  FILTER(?prefLabel = \"Batman\").\n}\nLIMIT 1",
                "generation_time": 31.54798126220703
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?realName \nWHERE {\n  <Batman> rdfs:label \"Batman\" .\n}\n```",
                "extracted_query": "SELECT ?realName \nWHERE {\n  <Batman> rdfs:label \"Batman\" .\n}",
                "generation_time": 5.980158805847168
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?name\nWHERE {\n  ?subject a dbo:Person .\n  ?subject dbo:name ?name .\n  FILTER(?name = \"Bruce Wayne\")\n}\n```",
                "extracted_query": "SELECT ?name\nWHERE {\n  ?subject a dbo:Person .\n  ?subject dbo:name ?name .\n  FILTER(?name = \"Bruce Wayne\")\n}",
                "generation_time": 8.550448417663574
            }
        ]
    },
    {
        "question_id": "132",
        "question": "What is Elon Musk famous for?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elon_Musk> <http://dbpedia.org/ontology/knownFor> ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to one answer.\n\nElon Musk is known for his leadership in the technology industry, particularly in the areas of artificial intelligence, space exploration, and renewable energy. He has also been involved in several controversies, including his controversial statements about climate change and his involvement in the SpaceX rocket launch.\nSELECT ?famousFor WHERE {\n  ?person a <http://www.w3.org/2000/01/rdf-schema#label> ?famousFor .\n  FILTER(?famousFor = \"Elon Musk\")\n} LIMIT 1\n```sparql\nSELECT ?famousFor WHERE {\n  ?person a <http://www.w3.org/2000/01/rdf-schema#",
                "extracted_query": "SELECT ?famousFor WHERE {\n  ?person a <http://www.w3.org/2000/01/rdf-schema#label> ?famousFor .\n  FILTER(?famousFor = \"Elon Musk\")\n}",
                "generation_time": 31.80640482902527
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?thing WHERE {\n  <https://www.wikidata.org/wiki/Q108437> rdfs:label \"Elon Musk\"@en.\n  ?thing wdt:P31 wd:Q5.\n}\n```",
                "extracted_query": "SELECT ?thing WHERE {\n  <https://www.wikidata.org/wiki/Q108437> rdfs:label \"Elon Musk\"@en.\n  ?thing wdt:P31 wd:Q5.\n}",
                "generation_time": 12.161027193069458
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?field ?value\nWHERE {\n  ?subject a dbo:Person .\n  ?subject dbo:famousFor ?field .\n  ?field dbo:hasValue ?value .\n}\n```",
                "extracted_query": "SELECT ?field ?value\nWHERE {\n  ?subject a dbo:Person .\n  ?subject dbo:famousFor ?field .\n  ?field dbo:hasValue ?value .\n}",
                "generation_time": 9.2948637008667
            }
        ]
    },
    {
        "question_id": "128",
        "question": "Who is the author of WikiLeaks?",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { res:WikiLeaks onto:author ?uri }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format:\n```\nauthor {\n  ?author .\n}\n```\n\nNote: You can assume that there is at least one author associated with WikiLeaks.\nHere's the SPARQL query to answer the question:\n\n```sparql\nSELECT ?author\nWHERE {\n  ?author wikileaks .\n}\n``` \n\nThis query selects all authors who are associated with the entity \"wikileaks\". Note that this query returns only the author information without any additional context or explanations. If you need more specific information about the author, please provide additional details. ```",
                "extracted_query": "SELECT ?author\nWHERE {\n  ?author wikileaks .\n}",
                "generation_time": 24.344237327575684
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?author WHERE {\n    <https://www.wikileaks.org> <http://xmlns.com/foaf/0.1/page> ?page .\n    ?page <http://www.w3.org/2004/02/skos/core#inScheme> <https://www.wikileaks.org/wiki/Scheme> .\n    ?scheme <http://www.w3.org/2004/02/skos/core#member> ?term .\n    ?term <http://www.w3.org/2004/02/skos/core#prefLabel> ?label .\n    FILTER (?label = \"WikiLeaks\")\n}\n```",
                "extracted_query": "SELECT ?author WHERE {\n    <https://www.wikileaks.org> <http://xmlns.com/foaf/0.1/page> ?page .\n    ?page <http://www.w3.org/2004/02/skos/core#inScheme> <https://www.wikileaks.org/wiki/Scheme> .\n    ?scheme <http://www.w3.org/2004/02/skos/core#member> ?term .\n    ?term <http://www.w3.org/2004/02/skos/core#prefLabel> ?label .\n    FILTER (?label = \"WikiLeaks\")\n}",
                "generation_time": 31.818304538726807
            }
        ]
    },
    {
        "question_id": "126",
        "question": "Sean Parnell was the governor of which U.S. state?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Sean_Parnell dbo:region ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in JSON format.\n\n```json\n{\n  \"answer\": {\n    \"query\": \"PREFIX schema: <http://schema.org/> PREFIX dcterms: <http://purl.org/dc/terms/> SELECT ?state WHERE { ?person schema:name 'Sean Parnell' . ?person schema:governor ?state . }\"\n  }\n}\n``` ```sparql\nPREFIX schema: <http://schema.org/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\n\nSELECT ?state \nWHERE { \n  ?person schema:name \"Sean Parnell\" .\n  ?person schema:governor ?state \n} \n``` ```json\n{\n  \"answer\": {\n    \"query\":",
                "extracted_query": "PREFIX schema: <http://schema.org/>\nPREFIX dcterms: <http://purl.org/dc/terms/>\n\nSELECT ?state \nWHERE { \n  ?person schema:name \"Sean Parnell\" .\n  ?person schema:governor ?state \n}",
                "generation_time": 32.051645278930664
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?state WHERE {\n  <http://example.com/people/Sean_Parnell> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q58647>. \n  <http://www.wikidata.org/entity/Q58647> <http://www.wikidata.org/prop/direct/p17> ?state.\n}\n```",
                "extracted_query": "SELECT ?state WHERE {\n  <http://example.com/people/Sean_Parnell> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q58647>. \n  <http://www.wikidata.org/entity/Q58647> <http://www.wikidata.org/prop/direct/p17> ?state.\n}",
                "generation_time": 23.152485847473145
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?state ?governor\nWHERE {\n  ?governor a dbo:Person .\n  ?governor dbo:name ?governorName .\n  ?governor dbo:governor ?governorState .\n  FILTER (?governorName = \"Sean Parnell\")\n}\n```",
                "extracted_query": "SELECT ?state ?governor\nWHERE {\n  ?governor a dbo:Person .\n  ?governor dbo:name ?governorName .\n  ?governor dbo:governor ?governorState .\n  FILTER (?governorName = \"Sean Parnell\")\n}",
                "generation_time": 11.327047348022461
            }
        ]
    },
    {
        "question_id": "125",
        "question": "How many years was the Ford Model T manufactured?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> PREFIX res: <http://dbpedia.org/resource/> SELECT ?years WHERE { res:Ford_Model_T dbo:productionEndYear ?end ; dbo:productionStartYear ?start. BIND ( ( year(xsd:date(?end)) - year(xsd:date(?start)) ) AS ?years) }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of:\n```sparql\nSELECT ?year\nWHERE {\n  ?modelT a model .\n  ?modelT modelYear ?year .\n}\nLIMIT 10\n```\n\nNote: Replace `model` with the actual namespace used to represent the Ford Model T. Also, ensure that the answer is returned as a list of years separated by commas without any spaces. To solve this problem, we need to retrieve information about the manufacturing history of the Ford Model T using SPARQL. We will start by selecting the year when the Ford Model T was first produced.\n\nHere's the SPARQL query to achieve this:\n\n```sparql\nSELECT ?year\nWHERE {\n  ?modelT a model .",
                "extracted_query": "SELECT ?year\nWHERE {\n  ?modelT a model .\n  ?modelT modelYear ?year .\n}\nLIMIT 10",
                "generation_time": 32.0272855758667
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT (COUNT(DISTINCT ?year) AS INTEGER) WHERE {\n  ?car a <http://dbpedia.org/ontology/Vehicle> ;\n       <http://www.w3.org/ns/prov#wasDerivedFrom> ?manufacturer .\n  ?manufacturer <http://dbpedia.org/property/yearOfIntroduction> ?year .\n}\n```",
                "extracted_query": "SELECT (COUNT(DISTINCT ?year) AS INTEGER) WHERE {\n  ?car a <http://dbpedia.org/ontology/Vehicle> ;\n       <http://www.w3.org/ns/prov#wasDerivedFrom> ?manufacturer .\n  ?manufacturer <http://dbpedia.org/property/yearOfIntroduction> ?year .\n}",
                "generation_time": 16.954697847366333
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT (COUNT(?year) AS ?years)\nWHERE {\n  ?year a dbo:Year .\n  FILTER (?year = \"Ford Model T\")\n}\n```",
                "extracted_query": "SELECT (COUNT(?year) AS ?years)\nWHERE {\n  ?year a dbo:Year .\n  FILTER (?year = \"Ford Model T\")\n}",
                "generation_time": 8.200703859329224
            }
        ]
    },
    {
        "question_id": "124",
        "question": "When was Carlo Giuliani shot?",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT xsd:date(?date) WHERE { res:Death_of_Carlo_Giuliani dbo:deathDate ?date }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of \"Year: <value>\", where <value> is the year when Carlo Giuliani was shot.\n\nThe answer to this question is 1987.\nTo solve this problem, we need to find the date when Carlo Giuliani was shot using the RDF data available on Wikipedia. We can use the `Wikipedia` namespace to retrieve information about Carlo Giuliani's death date.\n\nHere's the SPARQL query to achieve this:\n```sparql\nPREFIX wdt: <http://www.wikidata.org/prop/direct/>\nSELECT ?date\nWHERE {\n  ?item wdt:P32 wd:Q4605 .\n  FILTER(?item != 'Carlo Giuliani') .\n  FILTER(?item",
                "extracted_query": null,
                "generation_time": 32.03717064857483
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?date\nWHERE {\n  <http://example.com/persons/CarloGiuliani> dbo:wasShotOn ?date .\n}\n```",
                "extracted_query": "SELECT ?date\nWHERE {\n  <http://example.com/persons/CarloGiuliani> dbo:wasShotOn ?date .\n}",
                "generation_time": 8.25295090675354
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?date\nWHERE {\n  ?subject a dbo:Person .\n  ?subject dbo:shot ?date .\n  FILTER (?subject = \"Carlo Giuliani\")\n}\n```",
                "extracted_query": "SELECT ?date\nWHERE {\n  ?subject a dbo:Person .\n  ?subject dbo:shot ?date .\n  FILTER (?subject = \"Carlo Giuliani\")\n}",
                "generation_time": 8.564109563827515
            }
        ]
    },
    {
        "question_id": "123",
        "question": "Give me all animals that are extinct.",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Animal> ; <http://dbpedia.org/ontology/conservationStatus> \"EX\" }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in JSON format with each animal's name as a key-value pair.\n```json\n{\n  \"animals\": [\n    {\n      \"name\": \"Dinosaurs\"\n    },\n    {\n      \"name\": \"Penguins\"\n    },\n    {\n      \"name\": \"Elephants\"\n    }\n  ]\n}\n``` To achieve this, you can use the `EXISTS` clause to find animals that are not present in the current graph. Here is how you can write the SPARQL query:\n\n```sparql\nPREFIX ex: <http://example.org/>\nSELECT ?animal\nWHERE {\n  ?animal ex:dinosaur EXIST\n}\n```\n\nThis query will return all animals that do not exist in the current graph",
                "extracted_query": "PREFIX ex: <http://example.org/>\nSELECT ?animal\nWHERE {\n  ?animal ex:dinosaur EXIST\n}",
                "generation_time": 32.0568425655365
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?animal WHERE {\n  ?animal rdf:type owl:Extinct .\n}\n```",
                "extracted_query": "SELECT ?animal WHERE {\n  ?animal rdf:type owl:Extinct .\n}",
                "generation_time": 5.07653021812439
            }
        ]
    },
    {
        "question_id": "122",
        "question": "Who was the wife of President Lincoln?",
        "reference_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?uri ?string WHERE { dbr:Abraham_Lincoln onto:spouse ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the form of a list of triples.\n\nThe answer to this question is:\n```\nPREFIX person: <http://www.w3.org/ns/person#>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\nSELECT ?wife\nWHERE {\n  ?person a person:Person .\n  ?person dc:birthDate \"1809-02-07\"^^xsd:date .\n  ?person dc:deathDate \"1865-04-15\"^^xsd:date .\n  ?person dc:name \"Lincoln\"^^dc:Name .\n  ?person dc:spouse ?wife .\n}\nLIMIT 1\n``` \n\nNote that the answer has been",
                "extracted_query": "PREFIX person: <http://www.w3.org/ns/person#>\nPREFIX dc: <http://purl.org/dc/elements/1.1/>\nSELECT ?wife\nWHERE {\n  ?person a person:Person .\n  ?person dc:birthDate \"1809-02-07\"^^xsd:date .\n  ?person dc:deathDate \"1865-04-15\"^^xsd:date .\n  ?person dc:name \"Lincoln\"^^dc:Name .\n  ?person dc:spouse ?wife .\n}",
                "generation_time": 32.03810214996338
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?wife WHERE {\n  ?president rdfs:label \"Abraham Lincoln\"@en ;\n           dbo:wife ?wife .\n}\n```",
                "extracted_query": "SELECT ?wife WHERE {\n  ?president rdfs:label \"Abraham Lincoln\"@en ;\n           dbo:wife ?wife .\n}",
                "generation_time": 7.806896448135376
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?person ?spouse\nWHERE {\n  ?person a :Person .\n  ?person :spouse ?spouse .\n  FILTER(?spouse = \"Mary Todd Lincoln\")\n}\n```",
                "extracted_query": "SELECT ?person ?spouse\nWHERE {\n  ?person a :Person .\n  ?person :spouse ?spouse .\n  FILTER(?spouse = \"Mary Todd Lincoln\")\n}",
                "generation_time": 8.732274293899536
            }
        ]
    },
    {
        "question_id": "111",
        "question": "How many awards has Bertrand Russell?",
        "reference_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT (COUNT(?Awards) AS ?Counter) WHERE { dbr:Bertrand_Russell dbp:awards ?Awards }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format of \"Bertrand Russell has won X awards\". To solve this problem, we need to retrieve information about Bertrand Russell's awards from an external database or API. Since there is no direct SPARQL endpoint available for Bertrand Russell, we will use a hypothetical SPARQL endpoint that provides relevant data.\n\nLet's assume the hypothetical SPARQL endpoint URL is `http://example.org/awards` and it returns the following results:\n- Bertrand Russell has won 1 award\n- Bertrand Russell has won 2 awards\n\nThe SPARQL query would look like this:\n```\nPREFIX rdf: <http://www.w3.org/1999/02/22-r",
                "extracted_query": null,
                "generation_time": 32.03489971160889
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT (COUNT(DISTINCT ?award) AS INTEGER) WHERE {\n  ?person wdt:P39 wd:Q28071; \n    wdt:P569 / wd:Q24588 ?year;\n    wdt:P17 wd:Q1108.\n  ?award wdt:P31/wdt:P279*/wdt:P279/wd:PCP11/Q24588 .\n}\n```",
                "extracted_query": "SELECT (COUNT(DISTINCT ?award) AS INTEGER) WHERE {\n  ?person wdt:P39 wd:Q28071; \n    wdt:P569 / wd:Q24588 ?year;\n    wdt:P17 wd:Q1108.\n  ?award wdt:P31/wdt:P279*/wdt:P279/wd:PCP11/Q24588 .\n}",
                "generation_time": 24.484562397003174
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT (COUNT(?award) AS ?count)\nWHERE {\n  ?award rdf:type <http://www.w3.org/2000/01/rdf-schema#type> .\n  ?award rdfs:label \"Bertrand Russell Award\" .\n  ?award wdt:P31 wd:Q10000000 .\n}\n```",
                "extracted_query": "SELECT (COUNT(?award) AS ?count)\nWHERE {\n  ?award rdf:type <http://www.w3.org/2000/01/rdf-schema#type> .\n  ?award rdfs:label \"Bertrand Russell Award\" .\n  ?award wdt:P31 wd:Q10000000 .\n}",
                "generation_time": 17.058026790618896
            }
        ]
    },
    {
        "question_id": "117",
        "question": "Is Pamela Anderson a vegan?",
        "reference_query": "PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Pamela_Anderson a <http://dbpedia.org/class/yago/WikicatAmericanVegans> }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the form of a boolean value (true if Pamela Anderson is a vegan, false otherwise). Remember to use the appropriate prefixes for the names.\n\nPamela Anderson\n<http://www.w3.org/2001/rdf-schema#type> <http://schema.org/Vegan>\n```sparql\nSELECT ?isVegan\nWHERE {\n  ?person a <http://schema.org/Person>.\n  ?person <http://schema.org/name> \"Pamela Anderson\".\n  ?person <http://schema.org/isVegan> <http://schema.org/Vegan>.\n}\n```",
                "extracted_query": "SELECT ?isVegan\nWHERE {\n  ?person a <http://schema.org/Person>.\n  ?person <http://schema.org/name> \"Pamela Anderson\".\n  ?person <http://schema.org/isVegan> <http://schema.org/Vegan>.\n}",
                "generation_time": 27.133246183395386
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?x WHERE {\n  <http://www.example.com/people/PamelaAnderson> rdfs:label \"Pamela Anderson\" .\n  <http://www.example.com/people/PamelaAnderson> foaf:isPrimaryTopicOf ?y .\n  ?y rdf:type foaf:Document .\n  ?y schema:description ?description .\n  FILTER(CONTAINS(LCASE(str(?description)), \"vegan\"))\n}\n```",
                "extracted_query": "SELECT ?x WHERE {\n  <http://www.example.com/people/PamelaAnderson> rdfs:label \"Pamela Anderson\" .\n  <http://www.example.com/people/PamelaAnderson> foaf:isPrimaryTopicOf ?y .\n  ?y rdf:type foaf:Document .\n  ?y schema:description ?description .\n  FILTER(CONTAINS(LCASE(str(?description)), \"vegan\"))\n}",
                "generation_time": 20.84739899635315
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?veganStatus WHERE {\n  ?s a <http://dbpedia.org/ontology/Vegan>.\n  ?s ?p ?o .\n  FILTER regex(?p, \"Pamela Anderson\")\n}\n```",
                "extracted_query": "SELECT ?veganStatus WHERE {\n  ?s a <http://dbpedia.org/ontology/Vegan>.\n  ?s ?p ?o .\n  FILTER regex(?p, \"Pamela Anderson\")\n}",
                "generation_time": 10.051714897155762
            }
        ]
    },
    {
        "question_id": "59",
        "question": "Which space probes were sent into orbit around the sun?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?s WHERE { ?s dct:subject dbc:Missions_to_the_Sun ; rdf:type ?type FILTER ( ?type IN (dbo:Satellite, dbo:ArtificialSatellite) ) }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to the top 10 most recent space probes that have been launched into orbit around the sun.\n\nTo solve this problem, you need to use the `sun` namespace and retrieve the information about all space probes. Then, filter out those that are not in orbit around the sun using the `orbit` property. Finally, order the results by date of launch in descending order and limit them to the top 10 entries.\n\nHere is an example of how the query might look like:\n\n```sparql\nPREFIX ex: <http://example.org/>\nSELECT ?spaceProbes\nWHERE {\n  ?spaceProbes ex:sun ?sun .\n  FILTER NOT EXISTS { ?spaceProbes ex:orbit ?orbit .",
                "extracted_query": null,
                "generation_time": 32.0420126914978
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?probe WHERE {\n  ?probe rdf:type owl:Ontology ;\n         rdfs:label \"space probe\" .\n  ?probe dct:subject <http://www.w3.org/2006/time#sun> .\n}\n```",
                "extracted_query": "SELECT ?probe WHERE {\n  ?probe rdf:type owl:Ontology ;\n         rdfs:label \"space probe\" .\n  ?probe dct:subject <http://www.w3.org/2006/time#sun> .\n}",
                "generation_time": 12.517890214920044
            }
        ]
    },
    {
        "question_id": "113",
        "question": "Which German cities have more than 250000 inhabitants?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { { ?uri a <http://dbpedia.org/ontology/City> } UNION { ?uri a <http://dbpedia.org/ontology/Town> } ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> ; <http://dbpedia.org/ontology/populationTotal> ?population FILTER ( ?population > 250000 ) }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be ordered by population in descending order.\n\nTo solve this problem, you need to use the following prefixes:\n- `PREFIX` prefix1 = \"http://example.com/namespace1\"\n- `PREFIX` prefix2 = \"http://example.com/namespace2\"\n\nThe SPARQL query should select all cities that are German-speaking and have an inhabitant count greater than 250000. The result should be ordered by the city's population in descending order.\nSELECT ?city WHERE {\n  ?city a <http://example.com/City> .\n  ?city <http://example.com/hasPopulation> ?population .\n  FILTER(?population > 250000) .\n} ORDER BY ?",
                "extracted_query": "prefixes:\n- `PREFIX` prefix1 = \"http://example.com/namespace1\"\n- `PREFIX` prefix2 = \"http://example.com/namespace2\"\n\nThe SPARQL query should select all cities that are German-speaking and have an inhabitant count greater than 250000. The result should be ordered by the city's population in descending order.\nSELECT ?city WHERE {\n  ?city a <http://example.com/City> .\n  ?city <http://example.com/hasPopulation> ?population .\n  FILTER(?population > 250000) .\n}",
                "generation_time": 32.0606050491333
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?city WHERE {\n    ?city wdt:P31 wd:Q6498; \n          wdt:P17/wdt:P27/skos:Concept/xsd:integer > 250000 .\n}\n```",
                "extracted_query": "SELECT ?city WHERE {\n    ?city wdt:P31 wd:Q6498; \n          wdt:P17/wdt:P27/skos:Concept/xsd:integer > 250000 .\n}",
                "generation_time": 13.286604881286621
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?city ?population\nWHERE {\n  GRAPH <http://example.org/ontology#> {\n    ?city a dbo:City .\n    ?city dbo:population ?population .\n  }\n  FILTER(?population > 250000)\n}\n```",
                "extracted_query": "SELECT ?city ?population\nWHERE {\n  GRAPH <http://example.org/ontology#> {\n    ?city a dbo:City .\n    ?city dbo:population ?population .\n  }\n  FILTER(?population > 250000)\n}",
                "generation_time": 12.660929918289185
            }
        ]
    },
    {
        "question_id": "104",
        "question": "Who is the daughter of Robert Kennedy married to?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_F._Kennedy> <http://dbpedia.org/ontology/child> ?child . ?child <http://dbpedia.org/ontology/spouse> ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to one record.\n\nThe answer should not include any user-defined variables or predicates.\nTo solve this problem, you need to use the following SPARQL query:\n```\nSELECT ?person\nWHERE {\n  ?person <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2000/01/rdf-schema#Person>.\n  ?person <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.org/Person>.\n  ?person <http://www.w3.org/1999/02",
                "extracted_query": null,
                "generation_time": 32.04974031448364
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?daughter WHERE {\n  ?father rdf:type foaf:Person ;\n         foaf:male .\n  ?son rdf:type foaf:Person ;\n        foaf:male ;\n        foaf:knows ?mother ;\n        foaf:brother ?father .\n  ?mother rdf:type foaf:Person ;\n         foaf:female ;\n         foaf:wife ?husband .\n  ?husband rdf:type foaf:Person ;\n          foaf:marriedTo ?daughter .\n}\n```",
                "extracted_query": "SELECT ?daughter WHERE {\n  ?father rdf:type foaf:Person ;\n         foaf:male .\n  ?son rdf:type foaf:Person ;\n        foaf:male ;\n        foaf:knows ?mother ;\n        foaf:brother ?father .\n  ?mother rdf:type foaf:Person ;\n         foaf:female ;\n         foaf:wife ?husband .\n  ?husband rdf:type foaf:Person ;\n          foaf:marriedTo ?daughter .\n}",
                "generation_time": 24.5320086479187
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?spouse ?spouseName\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:father \"Robert Kennedy\" .\n  ?person dbo:spouse ?spouse .\n  FILTER (?spouse != \"Robert Kennedy\")\n  ?spouse a dbo:Person .\n  ?spouse dbo:name ?spouseName .\n}\n```",
                "extracted_query": "SELECT ?spouse ?spouseName\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:father \"Robert Kennedy\" .\n  ?person dbo:spouse ?spouse .\n  FILTER (?spouse != \"Robert Kennedy\")\n  ?spouse a dbo:Person .\n  ?spouse dbo:name ?spouseName .\n}",
                "generation_time": 15.062126636505127
            }
        ]
    },
    {
        "question_id": "10",
        "question": "How many students does the Free University of Amsterdam have?",
        "reference_query": "SELECT DISTINCT ?num WHERE { dbr:Vrije_Universiteit_Amsterdam <http://dbpedia.org/ontology/numberOfStudents> ?num }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format:\n```sparql\nSELECT ?numStudents {\n  ?student a <http://www.w3.org/ns/sparql-results#number> .\n  ?student <http://www.w3.org/2006/profile/vocab/student-profile#age> ?age .\n  ?age <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2004/02/skos/core#Student>\n}\nWHERE {\n  ?student a <http://www.w3.org/ns/sparql-results#number> .\n  ?student <http://www.w3.org/200",
                "extracted_query": null,
                "generation_time": 32.096449851989746
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT (COUNT(?student) AS ?num_students)\nWHERE {\n  ?university foaf:name \"Free University of Amsterdam\" .\n  ?university schema:hasStudent ?student .\n}\n```",
                "extracted_query": "SELECT (COUNT(?student) AS ?num_students)\nWHERE {\n  ?university foaf:name \"Free University of Amsterdam\" .\n  ?university schema:hasStudent ?student .\n}",
                "generation_time": 10.306187152862549
            }
        ]
    },
    {
        "question_id": "1",
        "question": "What is the revenue of IBM?",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?number WHERE { res:IBM onto:revenue ?number }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in dollars.\n\nThe SPARQL query should not include any LIMIT or OFFSET clauses.\nTo solve this problem, we need to use the `SELECT` clause to retrieve the desired information from the database. We can use the `PREFIX` keyword to specify the namespace URI for the `IBM` entity. Then, we can use the `FROM` keyword to specify the table name where the data is stored. Finally, we can use the `WHERE` clause to filter the results based on the given condition.\n\nHere's the SPARQL query:\n```\nPREFIX ibm: <http://example.org/ibm/>\nSELECT ?revenue\nWHERE {\n  ?entity ibm:hasRevenue ?revenue .\n}\nLIMIT",
                "extracted_query": "SELECT` clause to retrieve the desired information from the database. We can use the `PREFIX` keyword to specify the namespace URI for the `IBM` entity. Then, we can use the `FROM` keyword to specify the table name where the data is stored. Finally, we can use the `WHERE` clause to filter the results based on the given condition.\n\nHere's the SPARQL query:\n```\nPREFIX ibm: <http://example.org/ibm/>\nSELECT ?revenue\nWHERE {\n  ?entity ibm:hasRevenue ?revenue .\n}",
                "generation_time": 31.97222328186035
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?revenue \nWHERE {\n  <http://www.example.com/organizations#IBM> <http://www.example.com/revenues#hasRevenue> ?revenue .\n}\n```",
                "extracted_query": "SELECT ?revenue \nWHERE {\n  <http://www.example.com/organizations#IBM> <http://www.example.com/revenues#hasRevenue> ?revenue .\n}",
                "generation_time": 9.6568443775177
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?revenue\nWHERE {\n  ?company a <http://www.w3.org/2000/01/rdf-schema#type> .\n  ?company rdfs:label \"IBM\".\n  ?company rdfs:label \"IBM Corporation\".\n  ?company a <http://dbpedia.org/ontology/company> .\n  ?company dbo:revenue ?revenue .\n}\n```",
                "extracted_query": "SELECT ?revenue\nWHERE {\n  ?company a <http://www.w3.org/2000/01/rdf-schema#type> .\n  ?company rdfs:label \"IBM\".\n  ?company rdfs:label \"IBM Corporation\".\n  ?company a <http://dbpedia.org/ontology/company> .\n  ?company dbo:revenue ?revenue .\n}",
                "generation_time": 18.157379150390625
            }
        ]
    },
    {
        "question_id": "178",
        "question": "How many James Bond movies do exist?",
        "reference_query": "SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri dct:subject <http://dbpedia.org/resource/Category:James_Bond_films> }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to the number of James Bond movies released in the first half of 2017.\n\nTo solve this problem, you need to:\n1. Retrieve information about all James Bond movies.\n2. Filter out those that were released after January 1st, 2017.\n3. Count the total number of James Bond movies from these filtered results.\n\nPlease ensure that your answer is properly formatted using triple backticks (```sparql ... ```). To achieve the goal, you will use the following SPARQL query:\n\n```sparql\nSELECT ?numJamesBondMovies \nWHERE {\n  ?movie james:isA <http://www.w3.org/2000/01/rdf-schema",
                "extracted_query": "...",
                "generation_time": 31.969218492507935
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT (COUNT(?movie) AS ?count)\nWHERE {\n  ?movie wdt:P31 wd:Q2.\n}\n```",
                "extracted_query": "SELECT (COUNT(?movie) AS ?count)\nWHERE {\n  ?movie wdt:P31 wd:Q2.\n}",
                "generation_time": 7.332351922988892
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT (COUNT(?movie) AS ?count)\nWHERE {\n  ?movie a dbo:Movie .\n  FILTER (?movie rdfs:label = \"James Bond\")\n}\n```",
                "extracted_query": "SELECT (COUNT(?movie) AS ?count)\nWHERE {\n  ?movie a dbo:Movie .\n  FILTER (?movie rdfs:label = \"James Bond\")\n}",
                "generation_time": 8.574206352233887
            }
        ]
    },
    {
        "question_id": "129",
        "question": "Who does the voice of Bart Simpson?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bart_Simpson> <http://dbpedia.org/property/voiceactor> ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format:\n```\nSELECT ?name\nWHERE {\n  <http://example.org/simpsons> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type .\n  FILTER(?type = \"Person\") .\n  FILTER(?type != \"Organization\").\n  ?person a <http://example.org/simpsons#voice>.\n  ?person rdfs:label ?name .\n}\nLIMIT 10\n```\n\nNote: Replace `<http://example.org/simpsons>` with the actual URI of the SPARQL endpoint for the Simpsons dataset.\nTo solve this problem, we need to create a SPARQL query that retrieves the name",
                "extracted_query": "SELECT ?name\nWHERE {\n  <http://example.org/simpsons> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?type .\n  FILTER(?type = \"Person\") .\n  FILTER(?type != \"Organization\").\n  ?person a <http://example.org/simpsons#voice>.\n  ?person rdfs:label ?name .\n}",
                "generation_time": 31.772034406661987
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?voicerecording WHERE {\n  ?voicerecordedby a foaf:Agent ;\n                  foaf:mbox \"bart.simpson@example.com\" .\n  ?voicerecordedby foaf:voice ?voicerecording .\n}\n```",
                "extracted_query": "SELECT ?voicerecording WHERE {\n  ?voicerecordedby a foaf:Agent ;\n                  foaf:mbox \"bart.simpson@example.com\" .\n  ?voicerecordedby foaf:voice ?voicerecording .\n}",
                "generation_time": 14.44432520866394
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?person ?voice\nWHERE {\n  ?person a :VoiceActor .\n  ?person a :VoiceOf .\n  ?voice a :Voice .\n  FILTER (?voice = \"Bart Simpson\")\n}\n```",
                "extracted_query": "SELECT ?person ?voice\nWHERE {\n  ?person a :VoiceActor .\n  ?person a :VoiceOf .\n  ?voice a :Voice .\n  FILTER (?voice = \"Bart Simpson\")\n}",
                "generation_time": 10.261776447296143
            }
        ]
    },
    {
        "question_id": "183",
        "question": "Who was Tom Hanks married to?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { dbr:Tom_Hanks dbo:spouse ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to one person's marriage.\n\nTo solve this problem, you need to:\n1. Identify the subject of the question.\n2. Determine the predicate used in the question.\n3. Find the object of the question.\n4. Construct the SPARQL query that returns the desired information.\n\nPlease provide the SPARQL query for each step. To solve this problem, we will follow these steps:\n\n1. **Identify the subject of the question**: In this case, the subject is \"Tom Hanks\".\n2. **Determine the predicate used in the question**: The predicate here is \"married\" since the question asks about Tom Hanks' spouse.\n3. **Find the object of the question**: The object is",
                "extracted_query": null,
                "generation_time": 32.05626726150513
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?marriagePartner \nWHERE {\n  <http://www.example.com/tom-hanks> <http://xmlns.com/foaf/marriedWith> ?marriagePartner .\n}\n```",
                "extracted_query": "SELECT ?marriagePartner \nWHERE {\n  <http://www.example.com/tom-hanks> <http://xmlns.com/foaf/marriedWith> ?marriagePartner .\n}",
                "generation_time": 10.311686277389526
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?spouse\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:marriedTo ?spouse .\n  FILTER (?spouse = \"Tom Hanks\")\n}\n```",
                "extracted_query": "SELECT ?spouse\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:marriedTo ?spouse .\n  FILTER (?spouse = \"Tom Hanks\")\n}",
                "generation_time": 8.739099502563477
            }
        ]
    },
    {
        "question_id": "181",
        "question": "Through which countries does the Yenisei river flow?",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Yenisei_River <http://dbpedia.org/ontology/country> ?uri }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format of a single string.\n\nExample:\n```sparql\nSELECT ?country WHERE {\n  ?river rdfs:label \"Yenisei\" .\n  FILTER(?river != \"Yenisei\") .\n  FILTER(?river != \"Kamchatka\") .\n  ?river rdfs:label \"Yenisei\" .\n  ?river rdfs:label \"Kamchatka\" .\n}\n```\n\nNote: Replace the '?' placeholders with actual values as needed to match the specific country names you want to include in the result. ```sparql\nSELECT ?country WHERE {\n  ?river rdfs:label \"Yenisei\" .\n  FILTER(?river != \"Yenisei",
                "extracted_query": "SELECT ?country WHERE {\n  ?river rdfs:label \"Yenisei\" .\n  FILTER(?river != \"Yenisei\") .\n  FILTER(?river != \"Kamchatka\") .\n  ?river rdfs:label \"Yenisei\" .\n  ?river rdfs:label \"Kamchatka\" .\n}",
                "generation_time": 31.855129718780518
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?country WHERE {\n  <http://dbpedia.org/resource/Yenisei_river> <http://www.w3.org/2002/07/owl#sameAs> <http://dbpedia.org/resource/Yenisei_River> .\n  <http://dbpedia.org/resource/Yenisei_River> <http://dbpedia.org/property/country_of_origin> ?country .\n}\n```",
                "extracted_query": "SELECT ?country WHERE {\n  <http://dbpedia.org/resource/Yenisei_river> <http://www.w3.org/2002/07/owl#sameAs> <http://dbpedia.org/resource/Yenisei_River> .\n  <http://dbpedia.org/resource/Yenisei_River> <http://dbpedia.org/property/country_of_origin> ?country .\n}",
                "generation_time": 21.017696142196655
            }
        ]
    },
    {
        "question_id": "7",
        "question": "Give me all cars that are produced in Germany.",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Automobile> { ?uri <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Germany> } UNION { { ?uri <http://dbpedia.org/ontology/manufacturer> ?x } UNION { ?uri <http://dbpedia.org/property/manufacturer> ?x } { ?x <http://dbpedia.org/ontology/locationCountry> <http://dbpedia.org/resource/Germany> } UNION { ?x <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Germany> } } }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be ordered by year of production in descending order.\nSELECT ?car\nWHERE {\n  ?car a car .\n  ?car model ?model .\n  ?model country ?country .\n  FILTER(?country = \"Germany\")\n} ORDER BY DESC(?year) ```sparql\n```sparql\nSELECT ?car\nWHERE {\n  ?car a car .\n  ?car model ?model .\n  ?model country ?country .\n  FILTER(?country = \"Germany\")\n}\nORDER BY DESC(?year)\n```",
                "extracted_query": "",
                "generation_time": 22.414594173431396
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?car WHERE {\n    ?car a car ;\n         productionCountry \"Germany\" .\n}\n```",
                "extracted_query": "SELECT ?car WHERE {\n    ?car a car ;\n         productionCountry \"Germany\" .\n}",
                "generation_time": 5.74729061126709
            }
        ]
    },
    {
        "question_id": "135",
        "question": "When did Michael Jackson die?",
        "reference_query": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Michael_Jackson> <http://dbpedia.org/ontology/deathDate> ?date }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of:\n```\nWhen did Michael Jackson die?\nAnswer: [answer]\n```\n\nNote: Do not include any SPARQL statements that do not directly answer the question.\nTo find out when Michael Jackson died, you can use the following SPARQL query:\n\n```sparql\nSELECT ?date\nWHERE {\n  ?person a <http://xmlns.com/foaf/0.1/Marriage> .\n  ?person <http://xmlns.com/foaf/0.1/name> \"Michael Jackson\"^^<http://www.w3.org/2001/XMLSchema#string>\n  FILTER(?person != <http://xmlns.com/foaf/0.1/marriage>)",
                "extracted_query": null,
                "generation_time": 32.0601589679718
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?dateOfBirth WHERE {\n  <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xmlns.com/foaf/0.1/Person> .\n  <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/resource/Michael_Jackson> .\n  <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/resource/Artist> .\n  <http://www.w3.org/1999/02/22",
                "extracted_query": null,
                "generation_time": 34.37753248214722
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?date\nWHERE {\n  ?subject a dbo:Person .\n  ?subject dbo:died ?date .\n  FILTER (?subject = \"Michael Jackson\")\n}\n```",
                "extracted_query": "SELECT ?date\nWHERE {\n  ?subject a dbo:Person .\n  ?subject dbo:died ?date .\n  FILTER (?subject = \"Michael Jackson\")\n}",
                "generation_time": 8.566472291946411
            }
        ]
    },
    {
        "question_id": "50",
        "question": "What is the highest volcano in Africa?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Volcano> ; <http://dbpedia.org/ontology/locatedInArea> ?area . ?area dct:subject dbc:Countries_in_Africa . ?uri <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) LIMIT 1",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be ordered by the elevation of the volcano in meters.\n\nTo solve this problem, you need to:\n1. Identify the highest volcano in Africa.\n2. Return the results sorted by the elevation of the volcano in meters.\n3. Use the given prefixes: ```PREFIX africa: <http://example.org/africa#>```.\n4. Ensure that the result includes all relevant information from the African volcanoes dataset.\n\nThe African volcanoes dataset can be found at [this link](https://www.example.com/avd). Make sure to use the correct URL format when referring to external links.\n\nUse the following as your answer:\n```sparql\nSELECT ?volcano WHERE {\n  ?volcano a africa:Volcano .",
                "extracted_query": null,
                "generation_time": 31.798056840896606
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?volcano \nWHERE {\n  ?volcano rdf:type owl:Vulcan .\n} LIMIT 1```",
                "extracted_query": "SELECT ?volcano \nWHERE {\n  ?volcano rdf:type owl:Vulcan .\n} LIMIT 1",
                "generation_time": 6.646762371063232
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?volcano ?height\nWHERE {\n  ?volcano a <http://dbpedia.org/ontology/Volcano> .\n  ?volcano rdf:type <http://dbpedia.org/ontology/Mountain> .\n  ?volcano skos:prefLabel ?label .\n  FILTER(?label = \"Mount Kilimanjaro\") .\n  ?volcano skos:altLabel ?altLabel .\n  FILTER(?altLabel = \"Mount Kilimanjaro\") .\n  ?volcano rdfs:label ?height .\n  FILTER(?height = \"3962.43 m\") .\n}\n```",
                "extracted_query": "SELECT ?volcano ?height\nWHERE {\n  ?volcano a <http://dbpedia.org/ontology/Volcano> .\n  ?volcano rdf:type <http://dbpedia.org/ontology/Mountain> .\n  ?volcano skos:prefLabel ?label .\n  FILTER(?label = \"Mount Kilimanjaro\") .\n  ?volcano skos:altLabel ?altLabel .\n  FILTER(?altLabel = \"Mount Kilimanjaro\") .\n  ?volcano rdfs:label ?height .\n  FILTER(?height = \"3962.43 m\") .\n}",
                "generation_time": 26.271950244903564
            }
        ]
    },
    {
        "question_id": "39",
        "question": "Which poet wrote the most books?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Poet> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be ordered by the number of books written in descending order.\n\nTo solve this problem, you need to:\n1. Identify the subject of the question.\n2. Determine which resources are relevant to answering the question.\n3. Construct the SPARQL query that will retrieve the required information.\n4. Ensure that the query is properly formatted using triple backticks.\n5. Verify that the answer is returned correctly sorted by the number of books written. To solve the given problem, we need to follow these steps:\n\n### Step 1: Identify the Subject\nThe subject of the question is \"Which poet wrote the most books?\"\n\n### Step 2: Determine Relevant Resources\nFor this task, we don't have any specific resources related to poets",
                "extracted_query": null,
                "generation_time": 32.05592703819275
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?poet (COUNT(?book) AS ?booksWritten)\nWHERE {\n  ?book a book.\n  ?book writtenBy ?poet .\n}\nGROUP BY ?poet\nORDER BY DESC(?booksWritten)\nLIMIT 1;",
                "extracted_query": "SELECT ?poet (COUNT(?book) AS ?booksWritten)\nWHERE {\n  ?book a book.\n  ?book writtenBy ?poet .\n}",
                "generation_time": 12.383979320526123
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?poet ?count\nWHERE {\n  ?poet a dbo:Poet .\n  ?poet dbo:wrote ?book .\n  FILTER (?book != \"Unknown\")\n  ORDER BY DESC(?count)\n  LIMIT 1\n}\n```",
                "extracted_query": "SELECT ?poet ?count\nWHERE {\n  ?poet a dbo:Poet .\n  ?poet dbo:wrote ?book .\n  FILTER (?book != \"Unknown\")\n  ORDER BY DESC(?count)\n  LIMIT 1\n}",
                "generation_time": 10.850090265274048
            }
        ]
    },
    {
        "question_id": "83",
        "question": "Give me all gangsters from the prohibition era.",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation dbr:Gangster ; dct:subject dbc:Prohibition-era_gangsters }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be ordered by their age in descending order.\nSELECT ?gname WHERE {\n  ?gname a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://schema.gambling.com/gangster>.\n  FILTER(?gname != \"Gangster\").\n  ?gname rdfs:label ?gname .\n  ?gname rdfs:isDefinedBy <http://www.w3.org/2000/01/rdf-schema#ParentOf> <http://www.w3.org/2006/04/rdf-schema#Organization>.\n  ?gname <http://schema.gambling.com/g",
                "extracted_query": null,
                "generation_time": 31.799156665802002
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?gangster WHERE {\n    ?gangster a gangster ;\n              dbo:eraProhibition .\n}\n```",
                "extracted_query": "SELECT ?gangster WHERE {\n    ?gangster a gangster ;\n              dbo:eraProhibition .\n}",
                "generation_time": 6.4405272006988525
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?name ?alias ?age ?crime WHERE {\n  GRAPH <http://example.org/prohibition> {\n    ?s ?p ?o .\n  }\n  FILTER(?p = \"Gangster\")\n  FILTER(?o = \"Prohibition Era\")\n}\n```",
                "extracted_query": "SELECT ?name ?alias ?age ?crime WHERE {\n  GRAPH <http://example.org/prohibition> {\n    ?s ?p ?o .\n  }\n  FILTER(?p = \"Gangster\")\n  FILTER(?o = \"Prohibition Era\")\n}",
                "generation_time": 12.818573236465454
            }
        ]
    },
    {
        "question_id": "71",
        "question": "Give me all spacecrafts that flew to Mars.",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?s WHERE { ?s dct:subject dbc:Mars_rovers ; rdf:type ?type FILTER ( ?type IN (dbo:Satellite, dbo:ArtificialSatellite) ) }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to 10 results.\nSELECT ?spacecraft WHERE { ?spacecraft a :Spacecraft . ?spacecraft a :FlewToMars . } LIMIT 10 ``` \n\nNote: Replace `:` with the appropriate namespace prefix for the requested data type. In this case, it would be `:Spacecraft` if we were querying about spacecrafts. Also, ensure that the `a` predicate is used correctly in the query to match the given criteria. To solve this problem, you need to use the `spatial` namespace prefix for the `a` predicate, as it's commonly used for specifying spatial relationships. Here's how you can write the SPARQL query:\n\n```sparql\nPREFIX",
                "extracted_query": "SELECT ?spacecraft WHERE { ?spacecraft a :Spacecraft . ?spacecraft a :FlewToMars . }",
                "generation_time": 32.04351305961609
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?spacecraft WHERE {\n  ?spacecraft a <http://www.w3.org/ns/dcat#Spacecraft> ;\n               rdfs:label ?name .\n  ?spacecraft <http://example.com/marsFlewTo> \"true\"^^xsd:boolean .\n}\n```",
                "extracted_query": "SELECT ?spacecraft WHERE {\n  ?spacecraft a <http://www.w3.org/ns/dcat#Spacecraft> ;\n               rdfs:label ?name .\n  ?spacecraft <http://example.com/marsFlewTo> \"true\"^^xsd:boolean .\n}",
                "generation_time": 14.430914402008057
            }
        ]
    },
    {
        "question_id": "213",
        "question": "Show me all Czech movies.",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Czech_Republic> }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in JSON format with the movie title as the key and the country of origin as the value.\nSELECT ?title { ?movie a <http://www.w3.org/ns/sparql-results#movies> . ?movie <http://www.w3.org/ns/sparql-results#type> <http://www.example.com/czech-movies> . FILTER(?country = \"CZ\") . } LIMIT 10\n```json\n{\n  \"results\": [\n    {\n      \"title\": \"The Dark Knight\"\n    },\n    {\n      \"title\": \"Inception\"\n    },\n    {\n      \"title\": \"Pulp Fiction\"\n    },\n    {\n      \"title\": \"The Lord of the Rings\"",
                "extracted_query": null,
                "generation_time": 32.04554581642151
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?movie WHERE {\n  ?movie wdt:P31 wd:Q5 ;\n         wdt:P276 wd:Q408 .\n}\n```",
                "extracted_query": "SELECT ?movie WHERE {\n  ?movie wdt:P31 wd:Q5 ;\n         wdt:P276 wd:Q408 .\n}",
                "generation_time": 8.931990385055542
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?movie ?movieLabel ?movieYear\nWHERE {\n  ?movie a dbo:Movie .\n  ?movie dbo:language \"cs\".\n  ?movie dbo:title ?movieLabel .\n  ?movie dbo:year ?movieYear .\n}\n```",
                "extracted_query": "SELECT ?movie ?movieLabel ?movieYear\nWHERE {\n  ?movie a dbo:Movie .\n  ?movie dbo:language \"cs\".\n  ?movie dbo:title ?movieLabel .\n  ?movie dbo:year ?movieYear .\n}",
                "generation_time": 11.897610187530518
            }
        ]
    },
    {
        "question_id": "209",
        "question": "Give me all taikonauts.",
        "reference_query": "SELECT DISTINCT ?uri WHERE { { ?uri a <http://dbpedia.org/ontology/Astronaut> ; <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/People's_Republic_of_China> } UNION { ?uri a <http://dbpedia.org/ontology/Astronaut> ; <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/China> } }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in JSON format.\n```json\n{\n  \"results\": [\n    {\n      \"taikonaut\": \"John\",\n      \"mission\": \"Space Station-1\"\n    },\n    {\n      \"taikonaut\": \"Alice\",\n      \"mission\": \"Mars Exploration-2\"\n    }\n  ]\n}\n``` To retrieve all Taikonauts from the database, you can use the following SPARQL query:\n\n```sparql\nPREFIX taikonaut: <http://example.org/taikonaut/>\n\nSELECT ?taikonaut ?mission\nWHERE {\n  ?taikonaut taikonaut:hasMission ?mission .\n}\n```\n\nThis query will return all `taikonaut` objects that have a `",
                "extracted_query": "PREFIX taikonaut: <http://example.org/taikonaut/>\n\nSELECT ?taikonaut ?mission\nWHERE {\n  ?taikonaut taikonaut:hasMission ?mission .\n}",
                "generation_time": 32.07822346687317
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?taikonaut WHERE {\n  ?taikonaut wdt:P31 wd:Q2580.\n}\n```",
                "extracted_query": "SELECT ?taikonaut WHERE {\n  ?taikonaut wdt:P31 wd:Q2580.\n}",
                "generation_time": 7.3501646518707275
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?taikonaut\nWHERE {\n  ?taikonaut a dbo:Taikonaut .\n}\n```",
                "extracted_query": "SELECT ?taikonaut\nWHERE {\n  ?taikonaut a dbo:Taikonaut .\n}",
                "generation_time": 5.985911130905151
            }
        ]
    },
    {
        "question_id": "105",
        "question": "Which countries have more than ten volcanoes?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?x a <http://dbpedia.org/ontology/Volcano> ; <http://dbpedia.org/ontology/locatedInArea> ?uri . ?uri a <http://dbpedia.org/ontology/Country> } GROUP BY ?uri HAVING ( COUNT(?x) > 10 )",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be ordered by the number of volcanoes in descending order.\n\nHere is the RDF data structure:\n```json\n{\n  \"volcanoes\": [\n    {\n      \"name\": \"Mount Everest\",\n      \"type\": \"mountain\"\n    },\n    {\n      \"name\": \"K2\",\n      \"type\": \"mountain\"\n    },\n    {\n      \"name\": \"Etna\",\n      \"type\": \"volcano\"\n    }\n  ]\n}\n```\n\nNote: The answer to this question is not provided in the given JSON data.\nTo solve this problem, we need to retrieve information about volcanoes from the given JSON data and then count the number of volcanoes per country. Finally, we will sort these",
                "extracted_query": null,
                "generation_time": 32.09156632423401
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?country WHERE {\n  ?country rdfs:label \"volcano\"@en .\n}\n```",
                "extracted_query": "SELECT ?country WHERE {\n  ?country rdfs:label \"volcano\"@en .\n}",
                "generation_time": 5.741292715072632
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?country WHERE {\n  GRAPH ?g {\n    ?country a dbo:Country .\n    ?country dbo:hasVolcano ?volcano .\n    FILTER (COUNT(?volcano) > 10)\n  }\n}\n```",
                "extracted_query": "SELECT ?country WHERE {\n  GRAPH ?g {\n    ?country a dbo:Country .\n    ?country dbo:hasVolcano ?volcano .\n    FILTER (COUNT(?volcano) > 10)\n  }\n}",
                "generation_time": 11.332019329071045
            }
        ]
    },
    {
        "question_id": "52",
        "question": "Give me all movies with Tom Cruise.",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> PREFIX prop: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Film { ?uri prop:starring res:Tom_Cruise } UNION { ?uri onto:starring res:Tom_Cruise } OPTIONAL { ?uri rdfs:label ?string FILTER ( lang(?string) = \"en\" ) } }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in JSON format.\n```json\n{\n  \"results\": [\n    {\n      \"name\": \"Tom Cruise\",\n      \"movies\": [\"The Godfather\", \"Pulp Fiction\"]\n    }\n  ]\n}\n``` To retrieve all movies starring Tom Cruise using SPARQL, you can use the following query:\n\n```sparql\nPREFIX movie: <http://www.w3.org/ns/movie#>\nSELECT ?movie\nWHERE {\n  ?movie a movie:Movie .\n  ?movie movie:cast ?cruise .\n  ?cruise a movie:Cruise .\n  FILTER(?cruise = \"Tom Cruise\")\n}\n```\n\nThis query will return a list of movies that contain the actor Tom Cruise. If there are multiple movies",
                "extracted_query": "PREFIX movie: <http://www.w3.org/ns/movie#>\nSELECT ?movie\nWHERE {\n  ?movie a movie:Movie .\n  ?movie movie:cast ?cruise .\n  ?cruise a movie:Cruise .\n  FILTER(?cruise = \"Tom Cruise\")\n}",
                "generation_time": 32.016523361206055
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?movie WHERE {\n  ?movie a <http://www.example.com/movies> .\n  ?movie <http://www.example.com/actor> \"Tom Cruise\" .\n}\n```",
                "extracted_query": "SELECT ?movie WHERE {\n  ?movie a <http://www.example.com/movies> .\n  ?movie <http://www.example.com/actor> \"Tom Cruise\" .\n}",
                "generation_time": 9.871113777160645
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?movie ?movieTitle ?actor WHERE {\n  ?movie a dbo:Movie .\n  ?movie dbo:actor ?actor .\n  FILTER (?actor = \"Tom Cruise\")\n}\n```",
                "extracted_query": "SELECT ?movie ?movieTitle ?actor WHERE {\n  ?movie a dbo:Movie .\n  ?movie dbo:actor ?actor .\n  FILTER (?actor = \"Tom Cruise\")\n}",
                "generation_time": 9.310474395751953
            }
        ]
    },
    {
        "question_id": "102",
        "question": "When did Dracula's creator die?",
        "reference_query": "SELECT DISTINCT xsd:date(?date) WHERE { <http://dbpedia.org/resource/Count_Dracula> <http://dbpedia.org/ontology/creator> ?x . ?x <http://dbpedia.org/ontology/deathDate> ?date. }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format of \"X died on Y\". For example:\n```\nSELECT ?name WHERE {\n  ?creator a <http://example.org/creator>.\n  ?creator <http://example.org/died> ?date.\n}\n``` To find out when Dracula's creator died, we need to retrieve information about the creator of Dracula from an RDF graph. We can use the `?creator` property to specify that we want to look up the creator of Dracula.\n\nHere is the SPARQL query to achieve this:\n\n```sparql\nSELECT ?date WHERE {\n  ?creator a <http://example.org/creator>.\n  ?creator <http://example.org/died> ?date.\n}\n```",
                "extracted_query": "SELECT ?date WHERE {\n  ?creator a <http://example.org/creator>.\n  ?creator <http://example.org/died> ?date.\n}",
                "generation_time": 32.05825471878052
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?deathYear WHERE {\n  <http://dbpedia.org/resource/Vladimir_Nikolaevich_Strelets> dbo:creatorOf <http://dbpedia.org/resource/Dracula> ;\n    dbo:dateOfBirth \"1829-03-04\"^^xsd:date .\n  FILTER(SUBSTR(?deathYear, 7) = \"1895\")\n}\n```",
                "extracted_query": "SELECT ?deathYear WHERE {\n  <http://dbpedia.org/resource/Vladimir_Nikolaevich_Strelets> dbo:creatorOf <http://dbpedia.org/resource/Dracula> ;\n    dbo:dateOfBirth \"1829-03-04\"^^xsd:date .\n  FILTER(SUBSTR(?deathYear, 7) = \"1895\")\n}",
                "generation_time": 20.13457489013672
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?deathDate\nWHERE {\n  ?creator a dbo:Person .\n  ?creator dbo:created .\n  ?created dbo:deathDate ?deathDate .\n  FILTER (?creator = \"Dracula\")\n}\n```",
                "extracted_query": "SELECT ?deathDate\nWHERE {\n  ?creator a dbo:Person .\n  ?creator dbo:created .\n  ?created dbo:deathDate ?deathDate .\n  FILTER (?creator = \"Dracula\")\n}",
                "generation_time": 10.138844966888428
            }
        ]
    },
    {
        "question_id": "21",
        "question": "Who created English Wikipedia?",
        "reference_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Wikipedia> onto:author ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format of \"Answer: <answer>\"\n\nExample:\nAnswer: ```sparql\nSELECT ?creator \nWHERE { \n  ?entry wdt:P31 wd:<creator>. \n}\n```\n\nNote: Replace `<creator>` with the actual name of the person who created English Wikipedia. To create an SPARQL query that answers the question \"Who created English Wikipedia? \", we need to use the `wd:` prefix to refer to the W3C namespace for Wikipedia entries. We will also use the `?creator` pattern to match the specific property (`wd:P31`) associated with the entry.\n\nHere is the SPARQL query:\n\n```sparql\nPREFIX wd: <http://www.wikidata",
                "extracted_query": "SELECT ?creator \nWHERE { \n  ?entry wdt:P31 wd:<creator>. \n}",
                "generation_time": 32.01971435546875
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?creator WHERE {\n  ?wiki wdt:P31 wd:Q2.\n  ?wiki wdt:P574 ?creator .\n}\n```",
                "extracted_query": "SELECT ?creator WHERE {\n  ?wiki wdt:P31 wd:Q2.\n  ?wiki wdt:P574 ?creator .\n}",
                "generation_time": 8.313723802566528
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?creator ?wikiName\nWHERE {\n  ?creator wdt:P31 wd:Q10777777 .\n  ?wikiName wdt:P31 wd:Q10777778 .\n  FILTER(?wikiName = \"en:Wikipedia\")\n}\n```",
                "extracted_query": "SELECT ?creator ?wikiName\nWHERE {\n  ?creator wdt:P31 wd:Q10777777 .\n  ?wikiName wdt:P31 wd:Q10777778 .\n  FILTER(?wikiName = \"en:Wikipedia\")\n}",
                "generation_time": 14.304194450378418
            }
        ]
    },
    {
        "question_id": "34",
        "question": "Give me all female German chancellors.",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Chancellor_of_Germany dbp:incumbent ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to one gender and one name of a female chancellor from Germany.\nSELECT ?name WHERE {\n  ?person a <http://www.w3.org/ns/person#Person> .\n  ?person <http://www.w3.org/ns/person#gender> \"female\"^^<http://www.w3.org/2001/XMLSchema#string> .\n  ?person <http://www.w3.org/ns/person#title> \"German Chancellor\"^^<http://www.w3.org/2001/XMLSchema#string> .\n  ?person <http://www.w3.org/ns/person#birthDate> ?birthdate .\n  ?birthdate <http://www.w3.org/2001/XMLSchema#dateTime",
                "extracted_query": null,
                "generation_time": 31.53657341003418
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?person WHERE {\n    ?person wdt:P31 wd:Q5 ;\n           wdt:P27 wd:Q6 .\n    FILTER(lang(?person) = \"de\"^^xsd:string)\n}\n```",
                "extracted_query": "SELECT ?person WHERE {\n    ?person wdt:P31 wd:Q5 ;\n           wdt:P27 wd:Q6 .\n    FILTER(lang(?person) = \"de\"^^xsd:string)\n}",
                "generation_time": 11.44765019416809
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?person ?personLabel ?personType ?personURI\nWHERE {\n  ?person a :Person ;\n    ?personLabel a :PersonLabel ;\n    ?personType a :PersonType ;\n    ?personURI a :PersonURI .\n  FILTER (?personLabel = \"Chancellors\")\n  FILTER (?personType = \"Chancellor\")\n  FILTER (?person.name = \"Chancellors\")\n  FILTER (?person.nationality = \"German\")\n  FILTER (?person.gender = \"female\")\n}\n```",
                "extracted_query": "SELECT ?person ?personLabel ?personType ?personURI\nWHERE {\n  ?person a :Person ;\n    ?personLabel a :PersonLabel ;\n    ?personType a :PersonType ;\n    ?personURI a :PersonURI .\n  FILTER (?personLabel = \"Chancellors\")\n  FILTER (?personType = \"Chancellor\")\n  FILTER (?person.name = \"Chancellors\")\n  FILTER (?person.nationality = \"German\")\n  FILTER (?person.gender = \"female\")\n}",
                "generation_time": 22.307881832122803
            }
        ]
    },
    {
        "question_id": "145",
        "question": "Who owns Aldi?",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Aldi dbp:founders ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to one entity that owns Aldi.\n\nThe answer should be in the format:\n```\n<entity_name> <owner_entity>\n```\n\nFor example:\n```\nAldi <owner_Aldi>\n```\n\nPlease ensure that the query is written in SPARQL and does not include any unnecessary information. To solve this problem, we need to use the `?` operator to retrieve the owner of an entity. In this case, we want to find out who owns Aldi. We can achieve this by querying the `?owner_entity` property of the `?entity` property. \n\nHere's the SPARQL query to answer the question:\n\n```sparql\nSELECT ?owner_entity \nWHERE {",
                "extracted_query": null,
                "generation_time": 32.031329870224
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?owner \nWHERE {\n  <Aldi> <http://www.example.com/owns> ?owner .\n}\n```",
                "extracted_query": "SELECT ?owner \nWHERE {\n  <Aldi> <http://www.example.com/owns> ?owner .\n}",
                "generation_time": 7.116783380508423
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?owner ?name\nWHERE {\n  ?owner a dbo:Company .\n  ?owner dbo:owns ?store .\n  FILTER (?store = \"Aldi\")\n}\n```",
                "extracted_query": "SELECT ?owner ?name\nWHERE {\n  ?owner a dbo:Company .\n  ?owner dbo:owns ?store .\n  FILTER (?store = \"Aldi\")\n}",
                "generation_time": 8.929983854293823
            }
        ]
    },
    {
        "question_id": "154",
        "question": "Which books were written by Danielle Steel?",
        "reference_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri rdf:type onto:Book ; onto:author <http://dbpedia.org/resource/Danielle_Steel> }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to the top 10 most frequently cited authors in the field of literature.\n\nTo solve this problem, you need to:\n1. Identify the author's name using their first name.\n2. Retrieve the book titles associated with that author.\n3. Filter out any books written by other authors besides Danielle Steel.\n4. Limit the results to the top 10 most frequently cited authors in the field of literature.\n5. Return the result as a list of triples.\n\nPlease provide the SPARQL query for this task. ```sparql\nSELECT ?author (COUNT(?book) AS ?top_cited_books)\nWHERE {\n  ?author <http://www.w3.org/ns/books#hasAuthor> ?book .",
                "extracted_query": null,
                "generation_time": 32.10598397254944
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?book WHERE {\n  ?author a foaf:Person ;\n         foaf:name \"Danielle Steel\" .\n  ?book a foaf:Document ;\n         foaf:publisher \"Simon & Schuster\" ;\n         foaf:isPartOf ?author .\n}\n```",
                "extracted_query": "SELECT ?book WHERE {\n  ?author a foaf:Person ;\n         foaf:name \"Danielle Steel\" .\n  ?book a foaf:Document ;\n         foaf:publisher \"Simon & Schuster\" ;\n         foaf:isPartOf ?author .\n}",
                "generation_time": 14.190245628356934
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?book ?author WHERE {\n  ?book a dbo:Book .\n  ?book dbo:author ?author .\n  FILTER (?author = \"Danielle Steel\")\n}\n```",
                "extracted_query": "SELECT ?book ?author WHERE {\n  ?book a dbo:Book .\n  ?book dbo:author ?author .\n  FILTER (?author = \"Danielle Steel\")\n}",
                "generation_time": 8.763143301010132
            }
        ]
    },
    {
        "question_id": "198",
        "question": "Who was influenced by Socrates?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/influencedBy> <http://dbpedia.org/resource/Socrates> }",
        "validated": false,
        "validated_by": null,
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to the names of individuals who were influenced by Socrates.\n\nTo solve this problem, you need to:\n1. Identify all individuals who were influenced by Socrates.\n2. Return their names in alphabetical order.\n3. Ensure that the returned results are limited to 500 names.\n\nPlease provide the SPARQL query for this task. To solve the given problem, we will use the `PREFIX` and `SPOW` prefixes to refer to the individual's name and influence respectively. We will then construct a SPARQL query to find out which individuals were influenced by Socrates and return their names sorted alphabetically.\n\nHere is the SPARQL query:\n\n```sparql\nPREFIX spfo: <http",
                "extracted_query": null,
                "generation_time": 32.09135437011719
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?influencer WHERE {\n  ?influencer <http://www.w3.org/2002/07/owl#sameAs> <http://davidsonlab.cmu.edu/projects/socrates/> .\n}\n```",
                "extracted_query": "SELECT ?influencer WHERE {\n  ?influencer <http://www.w3.org/2002/07/owl#sameAs> <http://davidsonlab.cmu.edu/projects/socrates/> .\n}",
                "generation_time": 12.38202428817749
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?person ?influence\nWHERE {\n  ?person a :Person .\n  ?person a :InfluencedBy .\n  ?influence a :Influence .\n  FILTER (?influence = \"Socrates\")\n}\n```",
                "extracted_query": "SELECT ?person ?influence\nWHERE {\n  ?person a :Person .\n  ?person a :InfluencedBy .\n  ?influence a :Influence .\n  FILTER (?influence = \"Socrates\")\n}",
                "generation_time": 10.245168685913086
            },
            {
                "level": 4,
                "model_name": "mistralai/Mistral-7B-Instruct-v0.3",
                "raw_query": "```sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\nPREFIX dbo: <http://dbpedia.org/ontology/>\n\nSELECT DISTINCT ?person\nWHERE {\n  ?person",
                "extracted_query": null,
                "generation_time": 272.3198628425598
            },
            {
                "level": 5,
                "model_name": "google/gemma-2-9b-it",
                "raw_query": "```sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?influenced\nWHERE {\n  ?influenced dbo:influencedBy <http://dbpedia.org/resource/Socrates> .\n}\n```",
                "extracted_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT ?influenced\nWHERE {\n  ?influenced dbo:influencedBy <http://dbpedia.org/resource/Socrates> .\n}",
                "generation_time": 252.90732836723328
            }
        ]
    },
    {
        "question_id": "162",
        "question": "How deep is Lake Chiemsee?",
        "reference_query": "SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Chiemsee> <http://dbpedia.org/ontology/maximumDepth> ?n }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in meters.\n\nTo solve this problem, you need to:\n1. Identify the location of Lake Chiemsee.\n2. Calculate its depth based on geographical data.\n3. Return the result as a decimal value rounded to two decimal places.\n\nPlease provide the SPARQL query that meets these requirements. To address your request, we will follow these steps:\n\n1. **Identify the Location of Lake Chiemsee**: \n   - We need to find the coordinates of Lake Chiemsee using an online geocoding service like Google Maps API or another reliable source.\n\n2. **Calculate Depth Based on Geographical Data**:\n   - Once we have the coordinates, we can use them to calculate the lake's depth from the",
                "extracted_query": null,
                "generation_time": 32.044434785842896
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?depth \nWHERE {\n  <http://dbpedia.org/resource/Lake_Chiemsee> rdfs:label \"Lake Chiemsee\"@en.\n  <http://dbpedia.org/resource/Lake_Chiemsee> dbo:maximumDepth ?depth .\n}\n```",
                "extracted_query": "SELECT ?depth \nWHERE {\n  <http://dbpedia.org/resource/Lake_Chiemsee> rdfs:label \"Lake Chiemsee\"@en.\n  <http://dbpedia.org/resource/Lake_Chiemsee> dbo:maximumDepth ?depth .\n}",
                "generation_time": 13.741180181503296
            }
        ]
    },
    {
        "question_id": "212",
        "question": "Which companies work in the aerospace industry as well as in medicine?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri a dbo:Company ; dbo:industry dbr:Aerospace ; dbo:industry dbr:Medical }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be ordered by the number of companies that work in both industries.\n\nTo solve this problem, you need to:\n1. Identify all companies that work in the aerospace industry.\n2. Identify all companies that work in the medicine industry.\n3. Find the intersection of these two sets of companies.\n4. Count the number of companies that are present in both industries.\n5. Sort the resulting set of companies based on their count in descending order.\n6. Return the sorted list of companies.\n\nPlease provide the SPARQL query for this purpose. ```sparql\nSELECT ?company WHERE {\n  ?company a <http://example.org/Company> .\n  ?company <http://example.org/AerospaceIndustry> ?aero .",
                "extracted_query": null,
                "generation_time": 32.05314660072327
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?company WHERE {\n  ?company wdt:P31 wd:Q5 .\n  FILTER EXISTS { ?company wdt:P627 wd:Q4098 . }\n}\n```",
                "extracted_query": "SELECT ?company WHERE {\n  ?company wdt:P31 wd:Q5 .\n  FILTER EXISTS { ?company wdt:P627 wd:Q4098 . }\n}",
                "generation_time": 10.52904462814331
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?company\nWHERE {\n  ?company a <http://www.w3.org/2000/01/rdf-schema#type> .\n  ?company rdfs:label \"Aerospace Company\" .\n  ?company rdfs:label \"Medical Company\" .\n}\n```",
                "extracted_query": "SELECT ?company\nWHERE {\n  ?company a <http://www.w3.org/2000/01/rdf-schema#type> .\n  ?company rdfs:label \"Aerospace Company\" .\n  ?company rdfs:label \"Medical Company\" .\n}",
                "generation_time": 13.740967750549316
            }
        ]
    },
    {
        "question_id": "96",
        "question": "Which professional surfers were born on the Philippines?",
        "reference_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation dbr:Surfer ; dbo:birthPlace res:Philippines }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The query should include the following predicates:\n- `?person` of type `Person`\n- `?personOfBirth` of type `Date`\n- `?personBirthplace` of type `String`\n\nThe result should be ordered by the date in ascending order.\n\nTo solve this problem, you need to use the following data format:\n```\nPREFIX person: <http://www.w3.org/ns/person#>\nPREFIX schema: <http://schema.org/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX schema: <http://",
                "extracted_query": null,
                "generation_time": 32.04972529411316
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?surfer WHERE {\n  ?surfer dbo:birthPlace \"Philippines\" .\n}\n```",
                "extracted_query": "SELECT ?surfer WHERE {\n  ?surfer dbo:birthPlace \"Philippines\" .\n}",
                "generation_time": 5.9775378704071045
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?person ?birthPlace\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:born ?birthPlace .\n  FILTER (?birthPlace = \"Philippines\")\n}\n```",
                "extracted_query": "SELECT ?person ?birthPlace\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:born ?birthPlace .\n  FILTER (?birthPlace = \"Philippines\")\n}",
                "generation_time": 9.28391146659851
            }
        ]
    },
    {
        "question_id": "40",
        "question": "Who were the parents of Queen Victoria?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Queen_Victoria dbo:parent ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format:\n```\nSELECT ?parent\nWHERE {\n  ?person a <http://example.org/Person> .\n  ?person <http://example.org/isParentOf> <http://example.org/QueenVictoria>.\n}\n```\n\nNote: Replace `<http://example.org/Person>` with the actual URI for the Person class.\nSure! Here is the SPARQL query to answer the question \"Who were the parents of Queen Victoria?\":\n\n```sparql\nPREFIX example: <http://example.org/>\n\nSELECT ?parent\nWHERE {\n  ?person a example:Person .\n  ?person example:isParentOf example:QueenVictoria.\n}\n``` \n\nThis query uses the `example:` prefix to refer to",
                "extracted_query": "PREFIX example: <http://example.org/>\n\nSELECT ?parent\nWHERE {\n  ?person a example:Person .\n  ?person example:isParentOf example:QueenVictoria.\n}",
                "generation_time": 32.048731327056885
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?father ?mother WHERE {\n  <http://www.w3.org/People/Berners-Lee/card> rdfs:label \"Tim Berners-Lee\"@en .\n  <http://dbpedia.org/resource/Tim_Berners-Lee> dbo:parents ?father ;\n                                             dbo:children ?mother .\n}\n```",
                "extracted_query": "SELECT ?father ?mother WHERE {\n  <http://www.w3.org/People/Berners-Lee/card> rdfs:label \"Tim Berners-Lee\"@en .\n  <http://dbpedia.org/resource/Tim_Berners-Lee> dbo:parents ?father ;\n                                             dbo:children ?mother .\n}",
                "generation_time": 16.644289016723633
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?parent1 ?parent2\nWHERE {\n  ?subject a dbo:Person .\n  ?subject dbo:parent ?parent1 .\n  ?subject dbo:parent ?parent2 .\n  FILTER (?parent1 != ?parent2)\n  FILTER (?parent1 = \"Victoria\"^^<http://www.w3.org/2001/XMLSchema#string>\n  FILTER (?parent2 = \"Prince Edward\"^^<http://www.w3.org/2001/XMLSchema#string>\n}\n```",
                "extracted_query": "SELECT ?parent1 ?parent2\nWHERE {\n  ?subject a dbo:Person .\n  ?subject dbo:parent ?parent1 .\n  ?subject dbo:parent ?parent2 .\n  FILTER (?parent1 != ?parent2)\n  FILTER (?parent1 = \"Victoria\"^^<http://www.w3.org/2001/XMLSchema#string>\n  FILTER (?parent2 = \"Prince Edward\"^^<http://www.w3.org/2001/XMLSchema#string>\n}",
                "generation_time": 22.963220357894897
            }
        ]
    },
    {
        "question_id": "79",
        "question": "Are there any castles in the United States?",
        "reference_query": "PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> ASK WHERE { ?uri dct:subject dbc:Castles_in_the_United_States }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to the top 10 results.\n\nThe answer should include the name of each castle, its location, and whether it is located on the mainland or the islands.\nSELECT ?castleName ?location ?isOnMainland WHERE { ?castle a :Castle . ?castle rdfs:label ?castleName . ?castle rdfs:subClassOf <http://www.w3.org/2000/01/rdf-schema#Model> . ?castle rdfs:label ?location . FILTER(?location != \"United States\") . ?castle rdfs:label ?isOnMainland . FILTER(?isOnMainland != \"United States\"). } LIMIT 10 ``` To address your request, I",
                "extracted_query": "SELECT ?castleName ?location ?isOnMainland WHERE { ?castle a :Castle . ?castle rdfs:label ?castleName . ?castle rdfs:subClassOf <http://www.w3.org/2000/01/rdf-schema#Model> . ?castle rdfs:label ?location . FILTER(?location != \"United States\") . ?castle rdfs:label ?isOnMainland . FILTER(?isOnMainland != \"United States\"). }",
                "generation_time": 32.08164668083191
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?castle WHERE {\n  ?castle rdf:type owl:NamedIndividual ;\n         rdfs:label \"Castle\"@en .\n}\n```",
                "extracted_query": "SELECT ?castle WHERE {\n  ?castle rdf:type owl:NamedIndividual ;\n         rdfs:label \"Castle\"@en .\n}",
                "generation_time": 7.346054553985596
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?castle ?country WHERE {\n  ?castle rdf:type <http://www.w3.org/2000/01/rdf-schema#Class> .\n  ?castle rdf:type <http://www.wikidata.org/prop/direct/P100> .\n  FILTER (?castle wdt:P31 wd:Q10000000) .\n  FILTER (CONTAINS(?castle, \"United States\")) .\n}\n```",
                "extracted_query": "SELECT ?castle ?country WHERE {\n  ?castle rdf:type <http://www.w3.org/2000/01/rdf-schema#Class> .\n  ?castle rdf:type <http://www.wikidata.org/prop/direct/P100> .\n  FILTER (?castle wdt:P31 wd:Q10000000) .\n  FILTER (CONTAINS(?castle, \"United States\")) .\n}",
                "generation_time": 21.104818105697632
            }
        ]
    },
    {
        "question_id": "141",
        "question": "Which languages are spoken in Estonia?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spokenIn> <http://dbpedia.org/resource/Estonia> }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to the names of the languages that have at least 10 speakers.\n\nHere is an example of what the expected output would look like:\n```\nPREFIX ex: <http://example.org/>\nSELECT ?language\nWHERE {\n  ex:hasSpokenLanguage ?language .\n  FILTER(count(?language) >= 10)\n}\n``` To find out which languages are spoken in Estonia, you can use the following SPARQL query:\n\n```sparql\nPREFIX ex: <http://example.org/>\n\nSELECT DISTINCT ?language\nWHERE {\n  ex:hasSpokenLanguage ?language .\n  FILTER(count(?language) > 0)\n}\n``` \n\nThis query will return all distinct language codes that have at least one speaker",
                "extracted_query": "PREFIX ex: <http://example.org/>\n\nSELECT DISTINCT ?language\nWHERE {\n  ex:hasSpokenLanguage ?language .\n  FILTER(count(?language) > 0)\n}",
                "generation_time": 32.04188656806946
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?language WHERE {\n  ?country rdfs:label \"Estonia\"@en.\n  ?country wdt:P31 wd:Q5.\n  ?country wdt:P602 ?language .\n}\n```",
                "extracted_query": "SELECT ?language WHERE {\n  ?country rdfs:label \"Estonia\"@en.\n  ?country wdt:P31 wd:Q5.\n  ?country wdt:P602 ?language .\n}",
                "generation_time": 11.687244892120361
            }
        ]
    },
    {
        "question_id": "80",
        "question": "Give me a list of all critically endangered birds.",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri ?p WHERE { ?uri rdf:type dbo:Bird { ?uri dbo:conservationStatus \"CR\" } UNION { ?uri dct:subject dbc:Critically_endangered_animals } }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in JSON format.\n```json\n{\n  \"results\": [\n    {\n      \"name\": \"Hawks\",\n      \"status\": \"critically endangered\"\n    },\n    {\n      \"name\": \"Penguins\",\n      \"status\": \"endangered\"\n    },\n    {\n      \"name\": \"Dolphins\",\n      \"status\": \"threatened\"\n    }\n  ]\n}\n``` ```sparql\nSELECT ?bird { \n  ?bird a <BirdType> ; \n  <species> <Name> ;\n  <taxonStatus> <Status> ;\n  <threatLevel> <Threat> .\n} FILTER (?status = \"critically endangered\")\n```",
                "extracted_query": "SELECT ?bird { \n  ?bird a <BirdType> ; \n  <species> <Name> ;\n  <taxonStatus> <Status> ;\n  <threatLevel> <Threat> .\n} FILTER (?status = \"critically endangered\")",
                "generation_time": 30.327428102493286
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?bird WHERE {\n    ?bird rdf:type owl:CriticallyEndangered .\n}\n```",
                "extracted_query": "SELECT ?bird WHERE {\n    ?bird rdf:type owl:CriticallyEndangered .\n}",
                "generation_time": 5.513910293579102
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?bird ?conservationStatus\nWHERE {\n  ?bird a owl:Class .\n  ?bird owl:hasConservationStatus ?conservationStatus .\n  FILTER (regex(?conservationStatus, 'Critically Endangered'))\n}\n```",
                "extracted_query": "SELECT ?bird ?conservationStatus\nWHERE {\n  ?bird a owl:Class .\n  ?bird owl:hasConservationStatus ?conservationStatus .\n  FILTER (regex(?conservationStatus, 'Critically Endangered'))\n}",
                "generation_time": 10.412132501602173
            }
        ]
    },
    {
        "question_id": "159",
        "question": "Which countries are connected by the Rhine?",
        "reference_query": "PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { {<http://dbpedia.org/resource/Rhine> dbo:country ?uri } UNION {dbr:Rhine dbp:country ?uri} }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of a list of country names separated by commas.\n\nThe answer to this question is:\n```\n[{\"country\":\"Germany\"},{\"country\":\"France\"},{\"country\":\"Austria\"},{\"country\":\"Switzerland\"},{\"country\":\"Liechtenstein\"}]\n``` Here's the SPARQL query that answers the given question:\n\n```sparql\nSELECT ?country\nWHERE {\n  ?country rdfs:label \"Rhine\" .\n}\nGROUP BY ?country\nORDER BY DESC(?country)\nLIMIT 5\n``` \n\nThis query selects all countries labeled as \"Rhine\" from the RDF graph, groups them by country, orders them by descending order, and limits the output to the top 5 countries. The result will include the",
                "extracted_query": "SELECT ?country\nWHERE {\n  ?country rdfs:label \"Rhine\" .\n}\nGROUP BY ?country\nORDER BY DESC(?country)\nLIMIT 5",
                "generation_time": 32.04085636138916
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?country1 ?country2 \nWHERE {\n  ?river rdfs:type waterway .\n  ?river rdfs:label \"Rhine\" .\n  ?river dbo:hasSource ?source .\n  ?river dbo:hasDestination ?destination .\n  ?source rdf:type dbo:Citie .\n  ?destination rdf:type dbo:City .\n  ?source rdfs:label ?country1 .\n  ?destination rdfs:label ?country2 .\n}\n```",
                "extracted_query": "SELECT ?country1 ?country2 \nWHERE {\n  ?river rdfs:type waterway .\n  ?river rdfs:label \"Rhine\" .\n  ?river dbo:hasSource ?source .\n  ?river dbo:hasDestination ?destination .\n  ?source rdf:type dbo:Citie .\n  ?destination rdf:type dbo:City .\n  ?source rdfs:label ?country1 .\n  ?destination rdfs:label ?country2 .\n}",
                "generation_time": 22.39015221595764
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?country WHERE {\n  ?country a dbo:Country .\n  ?country dbo:connectedBy ?river .\n  FILTER (?river = \"Rhine\")\n}\n```",
                "extracted_query": "SELECT ?country WHERE {\n  ?country a dbo:Country .\n  ?country dbo:connectedBy ?river .\n  FILTER (?river = \"Rhine\")\n}",
                "generation_time": 8.578760385513306
            }
        ]
    },
    {
        "question_id": "107",
        "question": "Who was the father of Queen Elizabeth II?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT * WHERE { res:Elizabeth_II dbo:parent ?uri . ?uri <http://xmlns.com/foaf/0.1/gender> \"male\"@en }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format \"Answer: <answer>.\"\n\nExample:\n```sparql\nSELECT ?father\nWHERE {\n  ?person a <http://example.org/Person>.\n  ?person <http://example.org/family> <http://example.org/parentOf> ?father.\n}\n```\n\nNote: Replace `<answer>` with the actual name of the person who is the father of Queen Elizabeth II. ```sparql\nSELECT ?father\nWHERE {\n  ?person a <http://example.org/Person>.\n  ?person <http://example.org/family> <http://example.org/parentOf> ?father.\n}\n```",
                "extracted_query": "SELECT ?father\nWHERE {\n  ?person a <http://example.org/Person>.\n  ?person <http://example.org/family> <http://example.org/parentOf> ?father.\n}\n\nSELECT ?father\nWHERE {\n  ?person a <http://example.org/Person>.\n  ?person <http://example.org/family> <http://example.org/parentOf> ?father.\n}",
                "generation_time": 28.60058331489563
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?father WHERE {\n  ?queen rdfs:label \"Queen Elizabeth II\"@en ;\n         dbo:father ?father .\n}\n```",
                "extracted_query": "SELECT ?father WHERE {\n  ?queen rdfs:label \"Queen Elizabeth II\"@en ;\n         dbo:father ?father .\n}",
                "generation_time": 7.577362060546875
            }
        ]
    },
    {
        "question_id": "163",
        "question": "Give me all chemical elements.",
        "reference_query": "PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX owl: <http://www.w3.org/2002/07/owl#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type owl:Thing ; dct:subject dbc:Chemical_elements }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in JSON format with each element as a separate object with properties such as name, symbol, atomic number, and periodicity. Additionally, include a limit of 100 elements per page.\nHere is a list of chemical elements:\n```json\n[\n  {\n    \"name\": \"Hydrogen\",\n    \"symbol\": \"H\",\n    \"atomic_number\": 1,\n    \"periodicity\": \"I\"\n  },\n  {\n    \"name\": \"Helium\",\n    \"symbol\": \"He\",\n    \"atomic_number\": 2,\n    \"periodicity\": \"V\"\n  },\n  ...\n]\n``` To achieve this task, we will write a SPARQL query that retrieves all chemical elements",
                "extracted_query": null,
                "generation_time": 31.900755882263184
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?element WHERE {\n  ?element rdf:type owl:ChemicalElement .\n}\n```",
                "extracted_query": "SELECT ?element WHERE {\n  ?element rdf:type owl:ChemicalElement .\n}",
                "generation_time": 5.299557685852051
            }
        ]
    },
    {
        "question_id": "211",
        "question": "Give me all American presidents of the last 20 years.",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Person ; dct:subject dbc:Presidents_of_the_United_States ; dbo:activeYearsEndDate ?termEnd FILTER ( ( year(now()) - year(?termEnd) ) <= 20 ) }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be ordered by their birth year in descending order.\nSELECT ?p WHERE { ?p <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2000/01/rdf-schema#Person>. ?p <http://www.w3.org/2002/07/sparql-query#select> ?o . ?o <http://www.w3.org/2002/07/sparql-query#order> DESC(?b) } ORDER BY DESC(?b) ``` To answer your request, you need to retrieve information about American presidents from the last 20 years",
                "extracted_query": "SELECT ?p WHERE { ?p <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2000/01/rdf-schema#Person>. ?p <http://www.w3.org/2002/07/sparql-query#select> ?o . ?o <http://www.w3.org/2002/07/sparql-query#order> DESC(?b) }",
                "generation_time": 32.02834367752075
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?president WHERE {\n    ?president wdt:P31 wd:Q5 ;\n              wdt:P27 wd:Q6 .\n}\nLIMIT 20",
                "extracted_query": "SELECT ?president WHERE {\n    ?president wdt:P31 wd:Q5 ;\n              wdt:P27 wd:Q6 .\n}",
                "generation_time": 9.25813102722168
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?president WHERE {\n  ?president a :President ;\n    ?term :office ?office .\n    FILTER (?office = \"President of the United States\")\n    FILTER (?term = \"President\")\n    FILTER (?term IN (SELECT ?term WHERE {\n      ?term a :President .\n      FILTER (?term = \"President\")\n    })\n    FILTER (STR(?term) = \"President\")\n    FILTER (YEAR(?term) >= 2003)\n}\n```",
                "extracted_query": "SELECT ?president WHERE {\n  ?president a :President ;\n    ?term :office ?office .\n    FILTER (?office = \"President of the United States\")\n    FILTER (?term = \"President\")\n    FILTER (?term IN (SELECT ?term WHERE {\n      ?term a :President .\n      FILTER (?term = \"President\")\n    })\n    FILTER (STR(?term) = \"President\")\n    FILTER (YEAR(?term) >= 2003)\n}",
                "generation_time": 21.138432025909424
            }
        ]
    },
    {
        "question_id": "51",
        "question": "When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?rel WHERE { <http://dbpedia.org/resource/Worst_Case_Scenario_(film)> ?p ?o ; dbo:releaseDate ?rel FILTER contains(lcase(str(?o)), \"netherlands\") }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should include the date of release, the country of origin, and the title of the movie.\nTo solve this problem, you need to use the following SPARQL endpoint:\n```\nhttp://www.example.com/movies/WorstCaseScenario\n```\n\nThe expected output format is as follows:\n```\nSELECT ?date ?countryOfOrigin ?title WHERE {\n  ?movie a <http://example.org/Movie> .\n  ?movie <http://example.org/genre> \"worst case scenario\" .\n  ?movie <http://example.org/dateRelease> ?releaseDate .\n  ?movie <http://example.org/countryOfOrigin> ?countryOfOrigin .\n  ?movie <http://example.org/title> ?title",
                "extracted_query": null,
                "generation_time": 32.03082728385925
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?date\nWHERE {\n  <http://www.example.com/movies/Worst%20Case%20Scenario> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.example.com/movies/Movie> .\n  <http://www.example.com/movies/Worst%20Case%20Scenario> <http://www.example.com/movies/releaseDate> ?date .\n}\n```",
                "extracted_query": "SELECT ?date\nWHERE {\n  <http://www.example.com/movies/Worst%20Case%20Scenario> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.example.com/movies/Movie> .\n  <http://www.example.com/movies/Worst%20Case%20Scenario> <http://www.example.com/movies/releaseDate> ?date .\n}",
                "generation_time": 23.745151042938232
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?releaseDate\nWHERE {\n  ?movie a dbo:Movie .\n  ?movie dbo:hasReleaseDate ?releaseDate .\n  FILTER (?movie dbo:hasCountry \"Netherlands\") .\n  FILTER (?releaseDate != \"unknown\") .\n}\n```",
                "extracted_query": "SELECT ?releaseDate\nWHERE {\n  ?movie a dbo:Movie .\n  ?movie dbo:hasReleaseDate ?releaseDate .\n  FILTER (?movie dbo:hasCountry \"Netherlands\") .\n  FILTER (?releaseDate != \"unknown\") .\n}",
                "generation_time": 11.893948316574097
            }
        ]
    },
    {
        "question_id": "144",
        "question": "Whom did Lance Bass marry?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { {<http://dbpedia.org/resource/Lance_Bass> dbo:spouse ?uri} UNION {?uri dbo:spouse <http://dbpedia.org/resource/Lance_Bass>} }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of:\n```\nSELECT ?person WHERE {\n  ?person a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://xmlns.com/foaf/0.1/Marriage>.\n  ?person a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2004/02/skos/core#Person>.\n  ?person a <http://www.w3.org/2002/07/owl#sameAs> <http://www.w3.org/2006/",
                "extracted_query": null,
                "generation_time": 32.08811068534851
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?marriagePartner \nWHERE {\n  <http://www.example.com/lance-bass> <http://xmlns.com/foaf/marriedWith> ?marriagePartner .\n}\n```",
                "extracted_query": "SELECT ?marriagePartner \nWHERE {\n  <http://www.example.com/lance-bass> <http://xmlns.com/foaf/marriedWith> ?marriagePartner .\n}",
                "generation_time": 10.107990026473999
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?spouse\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:marriedTo ?spouse .\n  FILTER(?spouse = \"Lance Bass\")\n}\n```",
                "extracted_query": "SELECT ?spouse\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:marriedTo ?spouse .\n  FILTER(?spouse = \"Lance Bass\")\n}",
                "generation_time": 8.748687267303467
            }
        ]
    },
    {
        "question_id": "167",
        "question": "Which subsidiary of TUI Travel serves both Glasgow and Dublin?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/TUI_Travel> <http://dbpedia.org/ontology/subsidiary> ?uri . ?uri <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Glasgow_International_Airport> ; <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Dublin_Airport> }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format:\n```\nSELECT ?sub\nWHERE {\n  ?s <http://example.org/subsidiary> ?p .\n  ?p <http://example.org/serve> ?q .\n  FILTER(?q IN { \"Glasgow\", \"Dublin\" })\n}\n```\n\nNote: Replace `<http://example.org/subsidiary>` with the actual URI of the RDF resource representing TUI Travel's subsidiaries.\nTo solve this problem, you need to first find the SPARQL endpoint for TUI Travel's data. You can use the `spatial` prefix to specify that you want to retrieve triples from the TUI Travel namespace.\n\nHere is an example SPARQL query that retrieves all",
                "extracted_query": "SELECT ?sub\nWHERE {\n  ?s <http://example.org/subsidiary> ?p .\n  ?p <http://example.org/serve> ?q .\n  FILTER(?q IN { \"Glasgow\", \"Dublin\" }",
                "generation_time": 31.744526147842407
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?subsidiary WHERE {\n  ?subsidiary tui:operatesOn \"Glasgow\" .\n  ?subsidiary tui:operatesOn \"Dublin\" .\n}\n```",
                "extracted_query": "SELECT ?subsidiary WHERE {\n  ?subsidiary tui:operatesOn \"Glasgow\" .\n  ?subsidiary tui:operatesOn \"Dublin\" .\n}",
                "generation_time": 10.775256395339966
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?subsidiary\nWHERE {\n  ?subsidiary a :TUISubsidiary .\n  ?subsidiary :serves ?city .\n  FILTER (?city = \"Glasgow\" || ?city = \"Dublin\")\n  FILTER (?subsidiary = ?subsidiary1)\n}\n```",
                "extracted_query": "SELECT ?subsidiary\nWHERE {\n  ?subsidiary a :TUISubsidiary .\n  ?subsidiary :serves ?city .\n  FILTER (?city = \"Glasgow\" || ?city = \"Dublin\")\n  FILTER (?subsidiary = ?subsidiary1)\n}",
                "generation_time": 12.618982076644897
            }
        ]
    },
    {
        "question_id": "131",
        "question": "What languages are spoken in Pakistan?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pakistan> <http://dbpedia.org/ontology/language> ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to the top 10 most frequently occurring languages spoken in Pakistan.\n\nTo solve this problem, you need to use the following prefixes:\n- ```PREFIX : <http://example.org/>```\n- ```PREFIX :spatial <http://www.w3.org/2003/01/geo/wgs84_pos#>```\n\nThe answer should be returned as follows:\n```sparql\nSELECT ?lang\nWHERE {\n  ?s <http://example.org/lang> ?lang .\n  FILTER(?lang ~ \"^[^,]*$\") \n}\nGROUP BY ?lang\nORDER BY frequency DESC\nLIMIT 10\n``` To solve the given problem, we will create a SPARQL",
                "extracted_query": "SELECT ?lang\nWHERE {\n  ?s <http://example.org/lang> ?lang .\n  FILTER(?lang ~ \"^[^,]*$\") \n}\nGROUP BY ?lang\nORDER BY frequency DESC\nLIMIT 10",
                "generation_time": 32.05284523963928
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?language WHERE {\n  ?country rdfs:label \"Pakistan\"@en ;\n         dbo:spokenLanguage ?language .\n}\n```",
                "extracted_query": "SELECT ?language WHERE {\n  ?country rdfs:label \"Pakistan\"@en ;\n         dbo:spokenLanguage ?language .\n}",
                "generation_time": 7.3616249561309814
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?language\nWHERE {\n  ?s a <http://www.w3.org/2000/01/rdf-schema#type> .\n  ?s :language ?language .\n  FILTER (lang(?language) = \"Urdu\")\n}\n```\n\n```sparql\nSELECT ?language\nWHERE {\n  ?s a <http://www.w3.org/2000/01/rdf-schema#type> .\n  ?s :language ?language .\n  FILTER (lang(?language) = \"Urdu\")\n  FILTER (lang(?language) = \"English\")\n}\n```",
                "extracted_query": "SELECT ?language\nWHERE {\n  ?s a <http://www.w3.org/2000/01/rdf-schema#type> .\n  ?s :language ?language .\n  FILTER (lang(?language) = \"Urdu\")\n}\n\nSELECT ?language\nWHERE {\n  ?s a <http://www.w3.org/2000/01/rdf-schema#type> .\n  ?s :language ?language .\n  FILTER (lang(?language) = \"Urdu\")\n  FILTER (lang(?language) = \"English\")\n}",
                "generation_time": 27.22334909439087
            }
        ]
    },
    {
        "question_id": "120",
        "question": "Who is the daughter of Bill Clinton married to?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { dbr:Bill_Clinton dbo:child ?child . ?child dbo:spouse ?uri . ?uri rdfs:label ?string }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format:\n```\nSELECT ?daughter {\n  ?person a <http://example.org/Person> .\n  ?person <http://example.org/MarriedTo> ?son .\n  ?son <http://example.org/DaughterOf> ?daughter .\n}\nWHERE { \n  ?person a <http://example.org/Person> .\n  ?person <http://example.org/MarriedTo> ?son .\n  ?son <http://example.org/DaughterOf> ?daughter .\n}\n```\n\nNote: Replace `<http://example.org/Person>` with the actual URI of the RDF resource representing people.\nReplace `<http://example.org/MarriedTo>` with the appropriate predicate that represents",
                "extracted_query": "SELECT ?daughter {\n  ?person a <http://example.org/Person> .\n  ?person <http://example.org/MarriedTo> ?son .\n  ?son <http://example.org/DaughterOf> ?daughter .\n}\nWHERE { \n  ?person a <http://example.org/Person> .\n  ?person <http://example.org/MarriedTo> ?son .\n  ?son <http://example.org/DaughterOf> ?daughter .\n}",
                "generation_time": 32.032776832580566
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?daughter \nWHERE {\n  ?husband rdfs:label \"Bill Clinton\"@en ;\n         owl:sameAs wd:Q14906 .\n  ?wife rdfs:label \"Bill Clinton\"@en ;\n        owl:sameAs wd:Q14907 .\n  ?daughter rdfs:label ?name ;\n             owl:sameAs wd:Q15000 .\n}\n```",
                "extracted_query": "SELECT ?daughter \nWHERE {\n  ?husband rdfs:label \"Bill Clinton\"@en ;\n         owl:sameAs wd:Q14906 .\n  ?wife rdfs:label \"Bill Clinton\"@en ;\n        owl:sameAs wd:Q14907 .\n  ?daughter rdfs:label ?name ;\n             owl:sameAs wd:Q15000 .\n}",
                "generation_time": 20.785346508026123
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?spouse ?spouseName\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:marriedTo ?spouse .\n  FILTER (?spouse = \"Bill Clinton\")\n  FILTER (?spouseName = \"Hillary Clinton\")\n}\n```",
                "extracted_query": "SELECT ?spouse ?spouseName\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:marriedTo ?spouse .\n  FILTER (?spouse = \"Bill Clinton\")\n  FILTER (?spouseName = \"Hillary Clinton\")\n}",
                "generation_time": 11.342531204223633
            }
        ]
    },
    {
        "question_id": "164",
        "question": "Who was on the Apollo 11 mission?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Apollo_11> <http://dbpedia.org/property/crewMembers> ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to the names of astronauts who were part of the Apollo 11 mission.\n\nThe answer should be in JSON format as follows:\n{\n  \"result\": [\n    {\n      \"name\": \"Alan Shepard\"\n    },\n    {\n      \"name\": \"Ed White\"\n    },\n    {\n      \"name\": \"Eugene Cernan\"\n    }\n  ]\n} Here is the SPARQL query that answers the question:\n\n```sparql\nPREFIX schema: <http://schema.org/>\nSELECT ?name\nWHERE {\n  ?person a schema:Person .\n  ?person schema:mission \"Apollo 11\" .\n  FILTER(?person != $person)\n}\n```\n\nThis query uses the `schema`",
                "extracted_query": "PREFIX schema: <http://schema.org/>\nSELECT ?name\nWHERE {\n  ?person a schema:Person .\n  ?person schema:mission \"Apollo 11\" .\n  FILTER(?person != $person)\n}",
                "generation_time": 32.05887222290039
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?person WHERE {\n    ?mission rdf:type owl:NamedIndividual .\n    ?mission rdfs:label \"Apollo 11\" .\n    ?mission rdfs:seeAlso ?crew .\n    ?crew rdf:type owl:NamedIndividual ;\n          rdfs:label \"Crew of Apollo 11\" ;\n          owl:sameAs ?person .\n}\n```",
                "extracted_query": "SELECT ?person WHERE {\n    ?mission rdf:type owl:NamedIndividual .\n    ?mission rdfs:label \"Apollo 11\" .\n    ?mission rdfs:seeAlso ?crew .\n    ?crew rdf:type owl:NamedIndividual ;\n          rdfs:label \"Crew of Apollo 11\" ;\n          owl:sameAs ?person .\n}",
                "generation_time": 18.32731533050537
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?person ?role ?mission\nWHERE {\n  ?person a :Person .\n  ?person a :Astronaut .\n  ?person a :MemberOf ?mission .\n  ?mission a :ApolloMission .\n  FILTER(?mission = \"Apollo 11\")\n}\n```",
                "extracted_query": "SELECT ?person ?role ?mission\nWHERE {\n  ?person a :Person .\n  ?person a :Astronaut .\n  ?person a :MemberOf ?mission .\n  ?mission a :ApolloMission .\n  FILTER(?mission = \"Apollo 11\")\n}",
                "generation_time": 12.991363286972046
            }
        ]
    },
    {
        "question_id": "88",
        "question": "What is the wavelength of Indigo?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?n WHERE { dbr:Indigo dbo:wavelength ?n }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in nanometers.\n\nIndigo has a molar mass of 60.12 g/mol.\nThe atomic number of indigo is 7.\nThe chemical symbol of indigo is I2.\nTo find the wavelength of Indigo, we need to use its molar mass and atomic number. We can then convert the molar mass to nanometers using Avogadro's number (6.022 \u00d7 10^23 molecules/mol) and the speed of light in vacuum (3.00 \u00d7 10^8 meters/second). Finally, we can calculate the wavelength by dividing the molar mass by Avogadro's number and multiplying it by the speed of light. Let me",
                "extracted_query": null,
                "generation_time": 32.080912590026855
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?wavelength WHERE {\n  <http://example.org/indigo> rdfs:label \"Indigo\"@en.\n}\n```",
                "extracted_query": "SELECT ?wavelength WHERE {\n  <http://example.org/indigo> rdfs:label \"Indigo\"@en.\n}",
                "generation_time": 7.587661266326904
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?wavelength\nWHERE {\n  ?color a <http://www.w3.org/ns/color#Indigo> .\n  ?color <http://www.w3.org/ns/color#wavelength> ?wavelength .\n}\n```",
                "extracted_query": "SELECT ?wavelength\nWHERE {\n  ?color a <http://www.w3.org/ns/color#Indigo> .\n  ?color <http://www.w3.org/ns/color#wavelength> ?wavelength .\n}",
                "generation_time": 11.533719062805176
            }
        ]
    },
    {
        "question_id": "151",
        "question": "Give me all B-sides of the Ramones.",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?string WHERE { ?x dbo:musicalArtist res:Ramones ; dbo:bSide ?string }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in JSON format with the following structure:\n{\n  \"b_sides\": [\n    {\n      \"artist\": \"Ramones\",\n      \"title\": \"B-side\"\n    }\n  ]\n}\n\nNote: You can assume that there is an RDF graph containing information about artists, songs, and b-sides.\nTo solve this problem, we need to use the `SELECT` clause to retrieve the desired information from the RDF graph. We will start by selecting the artist and title of the Ramones song, which are stored as properties in the RDF graph. Then, we will select the b-sides of the Ramones song using the `SELECT` clause with the appropriate predicate and object. Finally, we will return the result in",
                "extracted_query": null,
                "generation_time": 32.0113205909729
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?song WHERE {\n  ?song rdf:type <http://dbpedia.org/ontology/Song> .\n  ?song dbpedia-owl:genre \"Ramones\" ;\n         dbpedia-owl:sameAs <https://en.wikipedia.org/wiki/Ramones_(band)> .\n}\n```",
                "extracted_query": "SELECT ?song WHERE {\n  ?song rdf:type <http://dbpedia.org/ontology/Song> .\n  ?song dbpedia-owl:genre \"Ramones\" ;\n         dbpedia-owl:sameAs <https://en.wikipedia.org/wiki/Ramones_(band)> .\n}",
                "generation_time": 14.899670839309692
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?song ?artist ?album WHERE {\n  GRAPH <http://example.org/music/> {\n    ?song a <http://dbpedia.org/ontology/Song>;\n    ?song <http://dbpedia.org/ontology/album> ?album .\n    ?song <http://dbpedia.org/ontology/artist> ?artist .\n    FILTER (?artist = \"Ramones\")\n    FILTER (?album = \"B-sides\")\n  }\n}\n```",
                "extracted_query": "SELECT ?song ?artist ?album WHERE {\n  GRAPH <http://example.org/music/> {\n    ?song a <http://dbpedia.org/ontology/Song>;\n    ?song <http://dbpedia.org/ontology/album> ?album .\n    ?song <http://dbpedia.org/ontology/artist> ?artist .\n    FILTER (?artist = \"Ramones\")\n    FILTER (?album = \"B-sides\")\n  }\n}",
                "generation_time": 20.70695209503174
            }
        ]
    },
    {
        "question_id": "63",
        "question": "Who was called Scarface?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri dbo:alias ?alias FILTER contains(lcase(?alias), \"scarface\") }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of:\n```sparql\nPREFIX person: <http://www.w3.org/ns/person#>\nSELECT ?name\nWHERE {\n  ?person a person:Person .\n  ?person person:name ?name .\n}\n```\n\nNote: Replace `http://www.w3.org/ns/person#` with the appropriate URI for the RDF vocabulary used by the SPARQL endpoint. Additionally, ensure that the SPARQL endpoint is properly configured to return results in the expected format. To solve this problem, you need to use the SPARQL endpoint provided in the question. Since the exact URL is not specified, I will assume it's a public endpoint accessible via a web browser.\n\nHere is the SPARQL query",
                "extracted_query": "PREFIX person: <http://www.w3.org/ns/person#>\nSELECT ?name\nWHERE {\n  ?person a person:Person .\n  ?person person:name ?name .\n}",
                "generation_time": 32.09177350997925
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?person WHERE {\n  ?person wdt:P31 wd:Q2.\n}\n```",
                "extracted_query": "SELECT ?person WHERE {\n  ?person wdt:P31 wd:Q2.\n}",
                "generation_time": 5.663087606430054
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?person ?name\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:givenName ?name .\n  FILTER (?name = \"Scarface\")\n}\n```",
                "extracted_query": "SELECT ?person ?name\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:givenName ?name .\n  FILTER (?name = \"Scarface\")\n}",
                "generation_time": 9.120276689529419
            }
        ]
    },
    {
        "question_id": "27",
        "question": "Which rivers flow into the North Sea?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> ; <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/North_Sea> }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of:\n```\nSELECT ?rivers\nWHERE {\n  ?river a river .\n  ?river rdfs:label ?name .\n  ?river rdfs:comment ?description .\n  ?river rdfs:isPartOf ?northSea .\n}\n```\n\nNote: Replace `river` with the actual RDF resource type representing rivers.\nTo solve this problem, we need to retrieve all the resources that are labeled as \"river\" from the namespace \"http://example.org/river\", filter them based on their label being \"North Sea\", and then join these resources using the \"rdfs:label\" property.\n\nHere is the SPARQL query to achieve this:\n\n```sparql\nPREFIX rdf: <",
                "extracted_query": "SELECT ?rivers\nWHERE {\n  ?river a river .\n  ?river rdfs:label ?name .\n  ?river rdfs:comment ?description .\n  ?river rdfs:isPartOf ?northSea .\n}",
                "generation_time": 32.073082447052
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?river\nWHERE {\n  ?river a river.\n  ?river flows_into <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q4685>.\n}\n```",
                "extracted_query": "SELECT ?river\nWHERE {\n  ?river a river.\n  ?river flows_into <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.wikidata.org/entity/Q4685>.\n}",
                "generation_time": 14.651274681091309
            }
        ]
    },
    {
        "question_id": "156",
        "question": "Where is Fort Knox located?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fort_Knox> <http://dbpedia.org/ontology/location> ?uri. ?uri a <http://dbpedia.org/ontology/Place>. }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in JSON format.\n\n```json\n{\n  \"answer\": {\n    \"location\": \"Fort Knox\"\n  }\n}\n``` ```sparql\nSELECT ?location\nWHERE { \n  ?entity a <http://example.org/Location> .\n  ?entity <http://example.org/isLocatedAt> ?location .\n}\n```",
                "extracted_query": "SELECT ?location\nWHERE { \n  ?entity a <http://example.org/Location> .\n  ?entity <http://example.org/isLocatedAt> ?location .\n}",
                "generation_time": 15.186821699142456
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?location WHERE {\n  <http://www.example.com/fort-knox> <http://www.example.com/location> ?location .\n}\n```",
                "extracted_query": "SELECT ?location WHERE {\n  <http://www.example.com/fort-knox> <http://www.example.com/location> ?location .\n}",
                "generation_time": 8.026456832885742
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?location\nWHERE {\n  ?location a <http://www.w3.org/2000/01/rdf-schema#Location> .\n  FILTER (?location = \"Fort Knox\")\n}\n```",
                "extracted_query": "SELECT ?location\nWHERE {\n  ?location a <http://www.w3.org/2000/01/rdf-schema#Location> .\n  FILTER (?location = \"Fort Knox\")\n}",
                "generation_time": 10.581887006759644
            }
        ]
    },
    {
        "question_id": "207",
        "question": "Which daughters of British earls died at the same place they were born at?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatDaughtersOfBritishEarls ; dbo:birthPlace ?x ; dbo:deathPlace ?y FILTER ( ?x = ?y ) }",
        "validated": false,
        "validated_by": null,
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in RDF format.\n\nThe question is about daughters of British earls who died at the same place they were born. The answer should be in RDF format.\nTo solve this problem, we need to use the following SPARQL query:\n```\n?earl a :EarlOf ?name .\n?name a :DaughterOf ?daughter .\n?daughter a :BornAt ?place .\n?earl a :IsA ?type .\n?type a :HasProperty ?property .\n?property a :Value ?value .\n?value a :IsA ?anotherType .\n?anotherType a :HasProperty ?anotherProperty .\n?anotherProperty a :Value ?anotherValue .\n?anotherValue a :IsA ?third",
                "extracted_query": null,
                "generation_time": 31.82608652114868
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?daughter WHERE {\n  ?earl a foaf:Person ;\n       foaf:named \"British Earl\" .\n  ?daughter a foaf:Person ;\n             foaf:knows ?earl ;\n             foaf:birthPlace ?placeOfBirth ;\n             foaf:deathPlace ?placeOfDeath .\n  FILTER(?placeOfBirth = ?placeOfDeath)\n}\n```",
                "extracted_query": "SELECT ?daughter WHERE {\n  ?earl a foaf:Person ;\n       foaf:named \"British Earl\" .\n  ?daughter a foaf:Person ;\n             foaf:knows ?earl ;\n             foaf:birthPlace ?placeOfBirth ;\n             foaf:deathPlace ?placeOfDeath .\n  FILTER(?placeOfBirth = ?placeOfDeath)\n}",
                "generation_time": 19.00161361694336
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?d ?p ?o\nWHERE {\n  GRAPH <http://example.org/ontology#> {\n    ?d a <http://example.org/ontology#Earl> .\n    ?d :died ?o .\n    ?d :born ?p .\n    FILTER (?p = <http://example.org/ontology#Place> )\n    FILTER (?o = <http://example.org/ontology#Place> )\n  }\n}\n```",
                "extracted_query": "SELECT ?d ?p ?o\nWHERE {\n  GRAPH <http://example.org/ontology#> {\n    ?d a <http://example.org/ontology#Earl> .\n    ?d :died ?o .\n    ?d :born ?p .\n    FILTER (?p = <http://example.org/ontology#Place> )\n    FILTER (?o = <http://example.org/ontology#Place> )\n  }\n}",
                "generation_time": 20.015809297561646
            },
            {
                "level": 4,
                "model_name": "mistralai/Mistral-7B-Instruct-v0.3",
                "raw_query": "```sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX foaf: <http://xmlns.com/foaf/0.1/>\nPREFIX dbp: <http://dbpedia.org/property/>\n\nSELECT DISTINCT ?daughter ?place\nWHERE {\n  ?daughter a dbo:",
                "extracted_query": null,
                "generation_time": 299.70014476776123
            },
            {
                "level": 5,
                "model_name": "google/gemma-2-9b-it",
                "raw_query": "```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbp: <http://dbpedia.org/property/>\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n\nSELECT ?subject ?name\nWHERE {\n  ?subject rdf:type dbo:Person .\n  ?subject dbo:father ?father .\n  ?father dbo:title dbo:Earl .\n  ?father dbo:nationality \"British\" .\n  ?subject dbo:mother ?mother .\n  ?mother dbo:title dbo:Countess .\n  ?subject dbo:birthDate ?birthDate .",
                "extracted_query": null,
                "generation_time": 476.89615964889526
            }
        ]
    },
    {
        "question_id": "24",
        "question": "How many emperors did China have?",
        "reference_query": "SELECT COUNT(DISTINCT ?uri AS ?uri) WHERE { ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Emperor_of_China> . }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of:\n```\nSELECT ?count {\n  ?person a <http://www.w3.org/2000/01/rdf-schema#Person> .\n  FILTER(?person instanceof <http://www.w3.org/2000/01/rdf-schema#Emperor>)\n  GROUP BY ?person\n}\nWHERE {\n  ?person a <http://www.w3.org/2000/01/rdf-schema#Person> .\n  FILTER(?person instanceof <http://www.w3.org/2000/01/rdf-schema#Emperor>)\n  LIMIT 100\n}\n``` To answer this question, we need to count the number",
                "extracted_query": "SELECT ?count {\n  ?person a <http://www.w3.org/2000/01/rdf-schema#Person> .\n  FILTER(?person instanceof <http://www.w3.org/2000/01/rdf-schema#Emperor>)\n  GROUP BY ?person\n}\nWHERE {\n  ?person a <http://www.w3.org/2000/01/rdf-schema#Person> .\n  FILTER(?person instanceof <http://www.w3.org/2000/01/rdf-schema#Emperor>)\n  LIMIT 100\n}",
                "generation_time": 32.01214051246643
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT (COUNT(?emperor) AS ?numEmperors)\nWHERE {\n  ?country ?p ?obj .\n  FILTER regex(str(?obj), \"China\", \"i\")\n}\nGROUP BY ?country\nORDER BY DESC(?numEmperors)```",
                "extracted_query": "SELECT (COUNT(?emperor) AS ?numEmperors)\nWHERE {\n  ?country ?p ?obj .\n  FILTER regex(str(?obj), \"China\", \"i\")\n}\nGROUP BY ?country\nORDER BY DESC(?numEmperors)",
                "generation_time": 13.295509099960327
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT (COUNT(?emperor) AS ?count)\nWHERE {\n  GRAPH <http://example.org/china> {\n    ?emperor a chinese:Emperor .\n  }\n}\n```",
                "extracted_query": "SELECT (COUNT(?emperor) AS ?count)\nWHERE {\n  GRAPH <http://example.org/china> {\n    ?emperor a chinese:Emperor .\n  }\n}",
                "generation_time": 9.33118224143982
            }
        ]
    },
    {
        "question_id": "133",
        "question": "What are the names of the Teenage Mutant Ninja Turtles?",
        "reference_query": "PREFIX foaf:<http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?s WHERE { <http://dbpedia.org/resource/Teenage_Mutant_Ninja_Turtles> <http://dbpedia.org/property/members> ?x . ?x foaf:givenName ?s }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in JSON format.\n\nThe answer should not contain any unnecessary information or formatting. Here is the list of turtles:\n```json\n[\n  \"King Cole\",\n  \"Rapunzel\",\n  \"Maurice\",\n  \"Otto\",\n  \"Tiger\"\n]\n``` To find the names of the Teenage Mutant Ninja Turtles, we need to retrieve data from the Turtle namespace. We can use the `turtle` prefix to specify this namespace. \n\nHere's the SPARQL query that will return the names of the turtles:\n\n```sparql\nPREFIX turtle: <http://www.w3.org/ns/turtle#>\nSELECT ?name\nWHERE {\n  ?t turtle:isA turtle:Turtle .",
                "extracted_query": null,
                "generation_time": 32.07270526885986
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?name \nWHERE {\n  ?turtle rdf:type owl:NamedIndividual ;\n         rdfs:label \"Teenage Mutant Ninja Turtle\" .\n  ?turtle <http://example.org/hasName> ?name .\n}\n```",
                "extracted_query": "SELECT ?name \nWHERE {\n  ?turtle rdf:type owl:NamedIndividual ;\n         rdfs:label \"Teenage Mutant Ninja Turtle\" .\n  ?turtle <http://example.org/hasName> ?name .\n}",
                "generation_time": 11.910202503204346
            }
        ]
    },
    {
        "question_id": "103",
        "question": "Where does Piccadilly start?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/routeStart> <http://dbpedia.org/resource/Piccadilly> }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format of \"Query: ```sparql [query] ```\". \n\nNote: You can assume that there is at least one node called \"Piccadilly\" in the graph.\n\nHere's the graph structure:\n```\n@prefix : <http://example.org/> .\n\n:Piccadilly {\n  :name \"Piccadilly\".\n}\n``` To find out where the node named \"Piccadilly\" starts, you would use the following SPARQL query:\n\n```sparql\nPREFIX : <http://example.org/>\n\nSELECT ?start\nWHERE {\n  :Piccadilly ?node .\n  ?node ?start .\n}\n``` \n\nThis query will return all nodes (`?node`) that have the label `Pic",
                "extracted_query": "[query]\n\nPREFIX : <http://example.org/>\n\nSELECT ?start\nWHERE {\n  :Piccadilly ?node .\n  ?node ?start .\n}",
                "generation_time": 32.049747467041016
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?start\nWHERE {\n  <Piccadilly> <http://www.example.org/startsAt> ?start .\n}\n```",
                "extracted_query": "SELECT ?start\nWHERE {\n  <Piccadilly> <http://www.example.org/startsAt> ?start .\n}",
                "generation_time": 7.34431266784668
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX ex: <http://example.org/ontology/>\nSELECT ?location WHERE {\n  ?location dbo:name \"Piccadilly\" .\n  FILTER(?location ex:startPoint)\n}\n```",
                "extracted_query": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX ex: <http://example.org/ontology/>\nSELECT ?location WHERE {\n  ?location dbo:name \"Piccadilly\" .\n  FILTER(?location ex:startPoint)\n}",
                "generation_time": 12.084660291671753
            }
        ]
    },
    {
        "question_id": "165",
        "question": "What is the name of the university where Obama's wife studied?",
        "reference_query": "SELECT DISTINCT ?s WHERE { <http://dbpedia.org/resource/Barack_Obama> <http://dbpedia.org/ontology/spouse> ?x . ?x <http://dbpedia.org/ontology/almaMater> ?s }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format:\n```\nSELECT ?universityName\nWHERE {\n  ?person a <http://example.org/University> .\n  ?person <http://example.org/hasStudent> <http://example.org/Obama> .\n  ?person <http://example.org/hasStudent> <http://example.org/wife> .\n  ?person <http://example.org/hasStudent> <http://example.org/study>\n}\n```\n\nNote: Replace `<http://example.org/University>` with the actual URI of the RDF graph containing the information about universities.\nSure! Here is the SPARQL query to answer the question:\n\n```sparql\nPREFIX example: <http://example.org/>\n\nSELECT ?",
                "extracted_query": "SELECT ?universityName\nWHERE {\n  ?person a <http://example.org/University> .\n  ?person <http://example.org/hasStudent> <http://example.org/Obama> .\n  ?person <http://example.org/hasStudent> <http://example.org/wife> .\n  ?person <http://example.org/hasStudent> <http://example.org/study>\n}",
                "generation_time": 32.05025768280029
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?university WHERE {\n  ?person rdfs:label \"Barack Obama\" ;\n         dbo:wife \"Michelle Obama\" .\n  ?person rdfs:label ?name .\n  ?person dbo:studiedIn ?university .\n}\n```",
                "extracted_query": "SELECT ?university WHERE {\n  ?person rdfs:label \"Barack Obama\" ;\n         dbo:wife \"Michelle Obama\" .\n  ?person rdfs:label ?name .\n  ?person dbo:studiedIn ?university .\n}",
                "generation_time": 13.044798851013184
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?university ?name\nWHERE {\n  ?university a dbo:University .\n  ?university dbo:hasDegree ?degree .\n  ?degree dbo:hasSubject ?subject .\n  ?subject dbo:hasName ?name .\n  FILTER (?name = \"Michelle Obama\")\n}\n```",
                "extracted_query": "SELECT ?university ?name\nWHERE {\n  ?university a dbo:University .\n  ?university dbo:hasDegree ?degree .\n  ?degree dbo:hasSubject ?subject .\n  ?subject dbo:hasName ?name .\n  FILTER (?name = \"Michelle Obama\")\n}",
                "generation_time": 13.174347400665283
            }
        ]
    },
    {
        "question_id": "108",
        "question": "When did Paraguay proclaim its independence?",
        "reference_query": "SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Paraguay> <http://dbpedia.org/ontology/foundingDate> ?date }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format of \"Query: ```sparql [query] ```\". Do not include any other information than what is necessary to run the query.\n\nExample output:\n```\nQuery: ```sparql\nSELECT ?date WHERE {\n  ?country a <http://www.w3.org/2005/08/addressing/pep#Country> .\n  FILTER(?country == \"Paraguay\") .\n  FILTER(?country == \"Paraguay\"^^<http://www.w3.org/1999/02/22-rdf-syntax-ns#type>) .\n  ?country <http://www.w3.org/2006/04/harfbuzz/Harfb",
                "extracted_query": "[query]",
                "generation_time": 32.102720499038696
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?date\nWHERE {\n  <https://example.com/paraguay> <http://www.w3.org/ns/prov#hadBeginning> ?beginning .\n  ?beginning <http://purl.org/dc/terms/date> ?date .\n}\n```",
                "extracted_query": "SELECT ?date\nWHERE {\n  <https://example.com/paraguay> <http://www.w3.org/ns/prov#hadBeginning> ?beginning .\n  ?beginning <http://purl.org/dc/terms/date> ?date .\n}",
                "generation_time": 13.287162065505981
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?date\nWHERE {\n  ?country a <http://www.w3.org/2000/01/rdf-schema#type> .\n  ?country <http://www.w3.org/2000/01/rdf-schema#label> \"Paraguay\" .\n  ?country <http://dbpedia.org/ontology/independenceDate> ?date .\n}\n```",
                "extracted_query": "SELECT ?date\nWHERE {\n  ?country a <http://www.w3.org/2000/01/rdf-schema#type> .\n  ?country <http://www.w3.org/2000/01/rdf-schema#label> \"Paraguay\" .\n  ?country <http://dbpedia.org/ontology/independenceDate> ?date .\n}",
                "generation_time": 18.365948915481567
            }
        ]
    },
    {
        "question_id": "15",
        "question": "How short is the shortest active NBA player?",
        "reference_query": "SELECT DISTINCT ?n WHERE { ?x a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/National_Basketball_Association> ; <http://dbpedia.org/ontology/height> ?n FILTER NOT EXISTS { ?x <http://dbpedia.org/ontology/activeYearsEndYear> ?d } } ORDER BY ASC(?n) OFFSET 0 LIMIT 1",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in millimeters.\n\nThe shortest active NBA player is 23 years old, plays for the Los Angeles Lakers, and has an average height of 6 feet 10 inches.\nSELECT ?player ?age ?height WHERE {\n  ?player <http://www.w3.org/2004/02/skos/core#active> .\n  ?player <http://www.w3.org/2004/02/skos/core#isDefinedBy> <http://www.w3.org/2001/XMLSchema#string>.\n  ?player <http://www.w3.org/2004/02/skos/core#inRole> <http://www.w3.org/",
                "extracted_query": null,
                "generation_time": 31.79486870765686
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?player WHERE {\n  ?player <http://www.w3.org/ns/prov#wasAttributedTo> <https://www.basketball-reference.com/players/s/stevensj01.html#stats>.\n}\n```",
                "extracted_query": "SELECT ?player WHERE {\n  ?player <http://www.w3.org/ns/prov#wasAttributedTo> <https://www.basketball-reference.com/players/s/stevensj01.html#stats>.\n}",
                "generation_time": 12.146474123001099
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?height\nWHERE {\n  ?player a <http://www.w3.org/2004/02/skos/core#> .\n  ?player rdfs:label \"Active NBA Player\" .\n  ?player skos:prefLabel ?playerLabel .\n  FILTER(?playerLabel = \"Active NBA Player\") .\n  ?player hasHeight ?height .\n  FILTER(?height > 0) .\n  ORDER BY ?height DESC\n  LIMIT 1\n}\n```",
                "extracted_query": "SELECT ?height\nWHERE {\n  ?player a <http://www.w3.org/2004/02/skos/core#> .\n  ?player rdfs:label \"Active NBA Player\" .\n  ?player skos:prefLabel ?playerLabel .\n  FILTER(?playerLabel = \"Active NBA Player\") .\n  ?player hasHeight ?height .\n  FILTER(?height > 0) .\n  ORDER BY ?height DESC\n  LIMIT 1\n}",
                "generation_time": 21.6756534576416
            }
        ]
    },
    {
        "question_id": "45",
        "question": "Where did Abraham Lincoln die?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to one answer.\n\nThe correct answer is:\n```\nPREFIX ex: <http://example.org/>\nSELECT ?location\nWHERE {\n  ex:hasDeathLocation ?person .\n  ?person ex:deathLocation ?location .\n}\nLIMIT 1\n``` To find out where Abraham Lincoln died, you can use the following SPARQL query:\n\n```sparql\nPREFIX ex: <http://example.org/>\n\nSELECT ?location\nWHERE {\n  ex:hasDeathLocation ?person .\n  ?person ex:deathLocation ?location .\n}\nLIMIT 1\n``` \n\nThis query will return the location where Abraham Lincoln died. Note that this query assumes that there are records in the database that have both `ex:hasDeath",
                "extracted_query": "PREFIX ex: <http://example.org/>\n\nSELECT ?location\nWHERE {\n  ex:hasDeathLocation ?person .\n  ?person ex:deathLocation ?location .\n}\nLIMIT 1",
                "generation_time": 32.088727712631226
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?location WHERE {\n  ?person rdfs:label \"Abraham Lincoln\"@en ;\n         dbo:deathPlace ?location .\n}\n```",
                "extracted_query": "SELECT ?location WHERE {\n  ?person rdfs:label \"Abraham Lincoln\"@en ;\n         dbo:deathPlace ?location .\n}",
                "generation_time": 7.624837398529053
            }
        ]
    },
    {
        "question_id": "82",
        "question": "When was Jack Wolfskin founded?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT xsd:date(?year) WHERE { res:Jack_Wolfskin dbo:foundingYear ?year }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format of \"Year: <date>\", where <date> is the year when Jack Wolfskin was founded.\n\nTo solve this problem, you need to:\n1. Identify the person's name: Jack Wolfskin\n2. Find out when he was founded: 1947\n\nUse the given prefixes: ```prefix sp : <http://example.org/>```\n\nThe correct answer is: Year: 1947\n```sparql\nPREFIX sp : <http://example.org/>\nSELECT ?year WHERE {\n  ?person sp:founded ?year .\n  FILTER(sp:isPerson ?person)\n}\n```",
                "extracted_query": "PREFIX sp : <http://example.org/>\nSELECT ?year WHERE {\n  ?person sp:founded ?year .\n  FILTER(sp:isPerson ?person)\n}",
                "generation_time": 28.827346563339233
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?dateOfBirth\nWHERE {\n  <http://www.jackwolfskin.com/> rdfs:label \"Jack Wolfskin\"@en.\n}\n```",
                "extracted_query": "SELECT ?dateOfBirth\nWHERE {\n  <http://www.jackwolfskin.com/> rdfs:label \"Jack Wolfskin\"@en.\n}",
                "generation_time": 8.958181381225586
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?foundingDate\nWHERE {\n  ?company a <http://dbpedia.org/ontology/Company> .\n  ?company rdf:type <http://dbpedia.org/ontology/Founded> .\n  ?company <http://dbpedia.org/ontology/Founded> ?foundingDate .\n  FILTER(?company = \"Jack Wolfskin\") .\n}\n```",
                "extracted_query": "SELECT ?foundingDate\nWHERE {\n  ?company a <http://dbpedia.org/ontology/Company> .\n  ?company rdf:type <http://dbpedia.org/ontology/Founded> .\n  ?company <http://dbpedia.org/ontology/Founded> ?foundingDate .\n  FILTER(?company = \"Jack Wolfskin\") .\n}",
                "generation_time": 16.694305658340454
            }
        ]
    },
    {
        "question_id": "9",
        "question": "In which city is the headquarter of Air China?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Air_China> <http://dbpedia.org/ontology/headquarter> ?uri . ?uri a <http://dbpedia.org/class/yago/City108524735> }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format:\n```sparql\nSELECT ?city {\n  ?company <http://www.w3.org/2000/01/rdf-schema#headquarters> ?city .\n}\nWHERE {\n  ?company <http://www.w3.org/2000/01/rdf-schema#name> \"Air China\"^^<http://www.w3.org/2000/01/rdf-schema#label>.\n}\n```\n\nThe returned query should not contain any prefixes or variables that are not used in the original question. Additionally, ensure that the query returns exactly one result, even if multiple cities have the same headquarters. ```sparql\nSELECT ?city {\n  ?company",
                "extracted_query": "SELECT ?city {\n  ?company <http://www.w3.org/2000/01/rdf-schema#headquarters> ?city .\n}\nWHERE {\n  ?company <http://www.w3.org/2000/01/rdf-schema#name> \"Air China\"^^<http://www.w3.org/2000/01/rdf-schema#label>.\n}",
                "generation_time": 31.789642095565796
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?city WHERE {\n  <http://www.example.com/airlines/AirChina> <http://www.example.com/cities/headquarters> ?city .\n}\n```",
                "extracted_query": "SELECT ?city WHERE {\n  <http://www.example.com/airlines/AirChina> <http://www.example.com/cities/headquarters> ?city .\n}",
                "generation_time": 9.166589260101318
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?city\nWHERE {\n  ?company a <http://dbpedia.org/ontology/Company> .\n  ?company hasHeadquarter ?hq .\n  ?hq a <http://dbpedia.org/ontology/Location> .\n  ?hq dbo:name ?city .\n  FILTER (lang(?city) = \"zh\")\n  FILTER (REGEX(?city, \"Air China\") )\n}\n```",
                "extracted_query": "SELECT ?city\nWHERE {\n  ?company a <http://dbpedia.org/ontology/Company> .\n  ?company hasHeadquarter ?hq .\n  ?hq a <http://dbpedia.org/ontology/Location> .\n  ?hq dbo:name ?city .\n  FILTER (lang(?city) = \"zh\")\n  FILTER (REGEX(?city, \"Air China\") )\n}",
                "generation_time": 18.1675808429718
            }
        ]
    },
    {
        "question_id": "201",
        "question": "What is the founding year of the brewery that produces Pilsner Urquell?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT xsd:date(?num) WHERE { <http://dbpedia.org/resource/Pilsner_Urquell> <http://dbpedia.org/property/brewery> ?uri . ?uri dbo:foundingYear ?num }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format:\n```sparql\nSELECT ?year \nWHERE { \n  ?brewery a <http://example.org/Brewery> . \n  ?brewery <http://example.org/produces> <http://example.org/Pilsner_Urquell>. \n  ?year ?brewery .\n}\n```\n\nNote: Replace `<http://example.org/Brewery>` with the actual URI of the RDF resource representing the brewery.\nSure! Here's the SPARQL query to answer the question:\n\n```sparql\nSELECT ?year \nWHERE { \n  ?brewery a <http://example.org/Brewery> . \n  ?brewery <http://example",
                "extracted_query": "SELECT ?year \nWHERE { \n  ?brewery a <http://example.org/Brewery> . \n  ?brewery <http://example.org/produces> <http://example.org/Pilsner_Urquell>. \n  ?year ?brewery .\n}",
                "generation_time": 31.62978172302246
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?year \nWHERE {\n  <PilsnerUrquell> <http://www.w3.org/2004/02/skos/core#inDefinedTermFor> <http://dbpedia.org/resource/Brewery> .\n  <PilsnerUrquell> <http://www.w3.org/2004/02/skos/core#hasWikidataID> \"Q167589\" .\n  <Q167589> <http://www.wikidata.org/prop/direct/P11> ?year ;\n           <http://www.wikidata.org/prop/direct/P17> <http://www.wikidata.org/entity",
                "extracted_query": null,
                "generation_time": 34.317447900772095
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?foundingYear\nWHERE {\n  ?brewery a dbo:BeerProductionLocation .\n  ?brewery dbo:produces ?beer .\n  ?beer dbo:name \"Pilsner Urquell\" .\n  ?brewery dbo:foundingYear ?foundingYear .\n}\n```",
                "extracted_query": "SELECT ?foundingYear\nWHERE {\n  ?brewery a dbo:BeerProductionLocation .\n  ?brewery dbo:produces ?beer .\n  ?beer dbo:name \"Pilsner Urquell\" .\n  ?brewery dbo:foundingYear ?foundingYear .\n}",
                "generation_time": 13.374846458435059
            }
        ]
    },
    {
        "question_id": "171",
        "question": "When did the Boston Tea Party take place?",
        "reference_query": "SELECT DISTINCT ?d WHERE { <http://dbpedia.org/resource/Boston_Tea_Party> <http://dbpedia.org/property/date> ?d }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of a SELECT statement.\n\nThe answer to this question is:\n1773-09-03\n\nSPARQL Query:\nSELECT ?date\nWHERE {\n  ?event a <http://www.w3.org/2005/08/addressing/sparql/direct> ;\n         <http://www.w3.org/2006/04/addressing/conceptual#addressing> ?place .\n  ?place a <http://www.w3.org/2005/08/addressing/sparql/direct> ;\n         <http://www.w3.org/2006/04/addressing/conceptual#addressing>",
                "extracted_query": null,
                "generation_time": 32.0504093170166
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?date\nWHERE {\n  <http://example.org/boston-tea-party> dbo:dateOccurred ?date .\n}\n```",
                "extracted_query": "SELECT ?date\nWHERE {\n  <http://example.org/boston-tea-party> dbo:dateOccurred ?date .\n}",
                "generation_time": 7.057435989379883
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?date\nWHERE {\n  ?event a dbo:BostonTeaParty .\n  ?event dbo:date ?date .\n}\n```",
                "extracted_query": "SELECT ?date\nWHERE {\n  ?event a dbo:BostonTeaParty .\n  ?event dbo:date ?date .\n}",
                "generation_time": 7.093438148498535
            }
        ]
    },
    {
        "question_id": "182",
        "question": "Which animals are critically endangered?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Animal> ; <http://dbpedia.org/ontology/conservationStatus> \"CR\" }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in JSON format.\n\nExample:\n```sparql\nPREFIX ex: <http://example.org/>\nSELECT ?animal\nWHERE {\n  ?animal ex:criticallyEndangered .\n}\n```\n\n```json\n{\n  \"query\": \"PREFIX ex: <http://example.org/> SELECT ?animal WHERE { ?animal ex:criticallyEndangered }\",\n  \"answer\": \"[{'animal': 'giraffe'}]\"\n}\n``` \n\nNote: Replace `ex` with the actual namespace prefix used by your RDF data store. ```sparql``` is not required to return the answer, but it can be included if needed. ```answer``` should be replaced with the expected JSON response from the SPARQL query.\nTo solve",
                "extracted_query": "PREFIX ex: <http://example.org/>\nSELECT ?animal\nWHERE {\n  ?animal ex:criticallyEndangered .\n}\n\n",
                "generation_time": 31.807056188583374
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?animal WHERE {\n  ?animal rdf:type owl:CriticallyEndangered .\n}\n```",
                "extracted_query": "SELECT ?animal WHERE {\n  ?animal rdf:type owl:CriticallyEndangered .\n}",
                "generation_time": 5.520005226135254
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?animal ?status\nWHERE {\n  ?animal a <http://www.w3.org/2002/07/owl#Thing> .\n  ?animal rdfs:label ?label .\n  ?animal <http://www.iucnredlist.org/api/v1/species/status> ?status .\n  FILTER(?status = \"Critically Endangered\")\n}\n```",
                "extracted_query": "SELECT ?animal ?status\nWHERE {\n  ?animal a <http://www.w3.org/2002/07/owl#Thing> .\n  ?animal rdfs:label ?label .\n  ?animal <http://www.iucnredlist.org/api/v1/species/status> ?status .\n  FILTER(?status = \"Critically Endangered\")\n}",
                "generation_time": 18.152902841567993
            }
        ]
    },
    {
        "question_id": "13",
        "question": "Which politicians were married to a German?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Politician> ; <http://dbpedia.org/ontology/spouse> ?spouse { ?spouse <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?spouse <http://dbpedia.org/ontology/birthPlace> ?p . ?p <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to the top 10 results.\n\nTo solve this problem, you need to:\n1. Identify all politicians who have been married to Germany.\n2. Filter out those politicians who are not married to Germany.\n3. Return only the top 10 results.\n\nThe SPARQL query should use the `SELECT` clause to retrieve the desired information and the `LIMIT` clause to limit the number of results returned. Ensure that the prefix is correctly applied in the query string.\n\nHere's an example of how the query might look like:\n\n```sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <",
                "extracted_query": null,
                "generation_time": 32.054951429367065
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?politician WHERE {\n  ?politician <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/class/yago/Politician> .\n  ?politician <http://www.w3.org/1999/02/22-rdf-syntax-ns#hasPartner> ?partner .\n  ?partner <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/resource/Germany> .\n}\n```",
                "extracted_query": "SELECT ?politician WHERE {\n  ?politician <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/class/yago/Politician> .\n  ?politician <http://www.w3.org/1999/02/22-rdf-syntax-ns#hasPartner> ?partner .\n  ?partner <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/resource/Germany> .\n}",
                "generation_time": 30.231438159942627
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?politician ?spouse ?nationality\nWHERE {\n  ?politician a dbo:Person .\n  ?politician dbo:marriedTo ?spouse .\n  FILTER (?spouse rdfs:label = \"German\" )\n}\n```",
                "extracted_query": "SELECT ?politician ?spouse ?nationality\nWHERE {\n  ?politician a dbo:Person .\n  ?politician dbo:marriedTo ?spouse .\n  FILTER (?spouse rdfs:label = \"German\" )\n}",
                "generation_time": 10.088385820388794
            }
        ]
    },
    {
        "question_id": "114",
        "question": "How big is the earth's diameter?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT (( xsd:double(?radius) * 2 ) AS ?diameter) WHERE { res:Earth dbo:meanRadius ?radius }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in meters.\n\nThe Earth's diameter can be calculated using the formula:\ndiameter = 2 * pi * radius\n\nWhere pi is approximately equal to 3.14159.\nHere is one possible implementation of this query in Python using the `sparqlapi` library:\n\n```python\nfrom sparqlapi import SPARQLWrapper, QueryFactory\n\n# Create a SPARQL wrapper object\nsparql = SPARQLWrapper(\"http://example.com/sparql\")\n\n# Define the query\nquery = \"\"\"\nSELECT ?radius ?diameter WHERE {\n  ?object a <http://www.w3.org/2000/01/rdf-schema#Person> .\n  ?object <",
                "extracted_query": null,
                "generation_time": 32.05174946784973
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?diameter WHERE {\n  <http://www.w3.org/2009/sparql-ds/testdata/diameters> rdfs:label \"Earth diameters\" .\n}\n```",
                "extracted_query": "SELECT ?diameter WHERE {\n  <http://www.w3.org/2009/sparql-ds/testdata/diameters> rdfs:label \"Earth diameters\" .\n}",
                "generation_time": 10.781655311584473
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?diameter\nWHERE {\n  ?earth rdfs:label \"Earth\".\n  ?earth rdfs:description \"The third planet from the Sun\".\n  ?earth a dbo:Planet.\n  ?earth dbo:diameter ?diameter .\n}\n```",
                "extracted_query": "SELECT ?diameter\nWHERE {\n  ?earth rdfs:label \"Earth\".\n  ?earth rdfs:description \"The third planet from the Sun\".\n  ?earth a dbo:Planet.\n  ?earth dbo:diameter ?diameter .\n}",
                "generation_time": 11.601645708084106
            }
        ]
    },
    {
        "question_id": "92",
        "question": "Is the wife of President Obama called Michelle?",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX onto: <http://dbpedia.org/ontology/> ASK WHERE { res:Barack_Obama onto:spouse ?spouse . ?spouse rdfs:label ?name FILTER regex(?name, \"Michelle\") }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the form of a list of triples.\n\nExample:\n```\nPREFIX ex: <http://example.org/>\nSELECT ?wife ?name\nWHERE {\n  ex:PresidentObama ex:wife ex:Michelle .\n}\n```\n\nNote: You can assume that the `ex` prefix is defined elsewhere in your SPARQL setup.\nTo solve this problem, we need to retrieve information about the spouse of the President of the United States using the `ex:PresidentObama` predicate. We will then filter out any instances where the spouse's name is \"Michelle\". Finally, we will return the results as a list of triples.\n\nHere is the SPARQL query to achieve this:\n\n```sparql\nPREFIX ex: <http://",
                "extracted_query": "PREFIX ex: <http://example.org/>\nSELECT ?wife ?name\nWHERE {\n  ex:PresidentObama ex:wife ex:Michelle .\n}",
                "generation_time": 32.05211067199707
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?wife WHERE {\n  <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> rdfs:subClassOf [ rdf:type owl:Restriction ;\n      owl:onProperty <http://xmlns.com/foaf/0.1/wife> ;\n      owl:someValuesFrom \"Michelle Obama\" .\n  ]\n}\n```",
                "extracted_query": "SELECT ?wife WHERE {\n  <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> rdfs:subClassOf [ rdf:type owl:Restriction ;\n      owl:onProperty <http://xmlns.com/foaf/0.1/wife> ;\n      owl:someValuesFrom \"Michelle Obama\" .\n  ]\n}",
                "generation_time": 19.688206434249878
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?wife ?name\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:spouse ?wife .\n  ?wife dbo:name ?name .\n  FILTER(?person = \"President Obama\")\n}\n```",
                "extracted_query": "SELECT ?wife ?name\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:spouse ?wife .\n  ?wife dbo:name ?name .\n  FILTER(?person = \"President Obama\")\n}",
                "generation_time": 10.78312873840332
            }
        ]
    },
    {
        "question_id": "194",
        "question": "Which U.S. state has the abbreviation MN?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri a yago:WikicatStatesOfTheUnitedStates ; <http://dbpedia.org/property/postalabbreviation> \"MN\"^^<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in JSON format.\n\n```json\n{\n  \"answer\": {\n    \"query\": \"PREFIX us: <http://www.w3.org/ns/ufa#> \\nSELECT ?state WHERE {\\n  ?state us:abbreviation \\\"MN\\\" .\\n}\\n\"\n  }\n}\n``` ```sparql\nPREFIX us: <http://www.w3.org/ns/ufa#>\n\nSELECT ?state \nWHERE { \n  ?state us:abbreviation \"MN\" \n}\n``` ```json\n{\n  \"answer\": {\n    \"query\": \"PREFIX us: <http://www.w3.org/ns/ufa#>\\nSELECT ?state\\nWHERE{\\n?state us:abbreviation \\\"MN\\\"",
                "extracted_query": "PREFIX us: <http://www.w3.org/ns/ufa#>\n\nSELECT ?state \nWHERE { \n  ?state us:abbreviation \"MN\" \n}",
                "generation_time": 32.03962421417236
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?state WHERE {\n  <MN> dbo:abbreviation \"MN\" .\n}\n```",
                "extracted_query": "SELECT ?state WHERE {\n  <MN> dbo:abbreviation \"MN\" .\n}",
                "generation_time": 5.166102170944214
            }
        ]
    },
    {
        "question_id": "175",
        "question": "When did Muhammad die?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT xsd:date(?date) WHERE { res:Muhammad dbo:deathDate ?date }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of:\n```\nWhen did Muhammad die?\n```\n\nNote: You may assume that Muhammad is the subject of the query.\nTo solve this problem, we need to retrieve information about Muhammad's death date from a database or API. Since there isn't an official source providing Muhammad's death date, I will use a hypothetical database or API that provides such data.\n\nLet's assume that Muhammad's death date can be found using a specific API endpoint or by querying a database table named `death_dates`. For demonstration purposes, let's create a hypothetical SPARQL query using a hypothetical database schema.\n\nHere's the SPARQL query:\n\n```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT",
                "extracted_query": null,
                "generation_time": 32.033435106277466
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?dateOfBirth WHERE {\n  <http://dbpedia.org/resource/Muhammad> <http://www.w3.org/2002/07/owl#sameAs> <http://dbpedia.org/resource/Muhammad> .\n  <http://dbpedia.org/resource/Muhammad> <http://dbpedia.org/property/birth_date> ?dateOfBirth .\n}\n```",
                "extracted_query": "SELECT ?dateOfBirth WHERE {\n  <http://dbpedia.org/resource/Muhammad> <http://www.w3.org/2002/07/owl#sameAs> <http://dbpedia.org/resource/Muhammad> .\n  <http://dbpedia.org/resource/Muhammad> <http://dbpedia.org/property/birth_date> ?dateOfBirth .\n}",
                "generation_time": 19.472392320632935
            }
        ]
    },
    {
        "question_id": "26",
        "question": "What is the atmosphere of the Moon composed of?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moon> <http://dbpedia.org/property/atmosphereComposition> ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in JSON format.\n\nHere's the data structure:\n- `moon`: A property that contains information about the Moon.\n- `atmosphere`: A property that contains information about the atmosphere of the Moon.\n- `spatial`: A property that contains information about the location of the Moon.\n- `name`: A property that contains information about the name of the Moon.\n- `type`: A property that contains information about the type of the Moon.\n- `properties`: A list of properties related to the Moon.\n- `location`: A list of locations where the Moon can be found.\n\nThe answer should be in JSON format as follows:\n```json\n{\n  \"query\": \"SELECT ?atmosphere WHERE { ?moon",
                "extracted_query": null,
                "generation_time": 32.01735877990723
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?atmosphere WHERE {\n  <https://w3id.org/okn/o/s#Moon> <http://www.w3.org/2004/02/skos/core#hasTopConcept> ?atmosphere .\n}\n```",
                "extracted_query": "SELECT ?atmosphere WHERE {\n  <https://w3id.org/okn/o/s#Moon> <http://www.w3.org/2004/02/skos/core#hasTopConcept> ?atmosphere .\n}",
                "generation_time": 13.275542497634888
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?atmosphere ?percentage\nWHERE {\n  ?moon a <http://www.w3.org/2000/01/rdf-schema#Resource> .\n  ?moon rdfs:label \"Moon\" .\n  ?moon :atmosphere ?atmosphere .\n  FILTER(?atmosphere = \"atmosphere\") .\n  ?atmosphere a <http://www.w3.org/2000/01/rdf-schema#Resource> .\n  ?atmosphere rdfs:label \"atmosphere\" .\n  ?atmosphere :percentage ?percentage .\n}\n```",
                "extracted_query": "SELECT ?atmosphere ?percentage\nWHERE {\n  ?moon a <http://www.w3.org/2000/01/rdf-schema#Resource> .\n  ?moon rdfs:label \"Moon\" .\n  ?moon :atmosphere ?atmosphere .\n  FILTER(?atmosphere = \"atmosphere\") .\n  ?atmosphere a <http://www.w3.org/2000/01/rdf-schema#Resource> .\n  ?atmosphere rdfs:label \"atmosphere\" .\n  ?atmosphere :percentage ?percentage .\n}",
                "generation_time": 24.232136249542236
            }
        ]
    },
    {
        "question_id": "60",
        "question": "Who is the governor of Texas?",
        "reference_query": "PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?string WHERE { res:Texas dbp:governor ?string }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to one row containing the name of the governor.\n\nThe governor's name must be in JSON format and should not contain any special characters or spaces. The governor's state should also be included as a separate column in the result set.\nTo solve this problem, you need to use the `spatial` namespace and retrieve the information about the governor from the `governor` property. Ensure that the governor's name is returned in JSON format and does not include any special characters or spaces. Additionally, ensure that the governor's state is included as a separate column in the result set. Here is an example SPARQL query that satisfies these requirements:\n```\nPREFIX g: <http://example.org/g/>\nSELECT ?name",
                "extracted_query": null,
                "generation_time": 32.09115672111511
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?governor WHERE {\n  ?state a owl:Thing ;\n         rdfs:label \"Texas\"@en .\n  ?governor rdfs:label \"Governor\"@en ;\n            dbo:governedBy ?state .\n}\n```",
                "extracted_query": "SELECT ?governor WHERE {\n  ?state a owl:Thing ;\n         rdfs:label \"Texas\"@en .\n  ?governor rdfs:label \"Governor\"@en ;\n            dbo:governedBy ?state .\n}",
                "generation_time": 12.825473070144653
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?governor\nWHERE {\n  ?governor a dbo:Person .\n  ?governor dbo:governorOf ?state .\n  FILTER (?state = \"Texas\")\n}\n```",
                "extracted_query": "SELECT ?governor\nWHERE {\n  ?governor a dbo:Person .\n  ?governor dbo:governorOf ?state .\n  FILTER (?state = \"Texas\")\n}",
                "generation_time": 8.415689945220947
            }
        ]
    },
    {
        "question_id": "110",
        "question": "Which movies did Kurosawa direct?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Akira_Kurosawa }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in JSON format.\n\nHere is the movie information:\n```json\n[\n  {\n    \"title\": \"Reservoir Dogs\",\n    \"director\": \"James Cameron\"\n  },\n  {\n    \"title\": \"The Godfather\",\n    \"director\": \"Francis Ford Coppola\"\n  },\n  {\n    \"title\": \"Forrest Gump\",\n    \"director\": \"Robert Zemeckis\"\n  }\n]\n``` To answer this question, we need to retrieve the director of each movie from the provided list. We can achieve this by using the `SELECT` clause in our SPARQL query. Here's how you can write the query:\n\n```sparql\nPREFIX film: <http://www.w3.org",
                "extracted_query": null,
                "generation_time": 32.047635078430176
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?movie WHERE {\n  ?director wdt:P31 wd:Q28 . # Q28 is the PIAK movie director entity.\n  ?movie wdt:P574 ?director .\n}\n```",
                "extracted_query": "SELECT ?movie WHERE {\n  ?director wdt:P31 wd:Q28 . # Q28 is the PIAK movie director entity.\n  ?movie wdt:P574 ?director .\n}",
                "generation_time": 11.691751956939697
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?movie ?director WHERE {\n  ?movie a dbo:Movie .\n  ?movie dbo:directedBy ?director .\n  FILTER (?director = \"Kurosawa\")\n}\n```",
                "extracted_query": "SELECT ?movie ?director WHERE {\n  ?movie a dbo:Movie .\n  ?movie dbo:directedBy ?director .\n  FILTER (?director = \"Kurosawa\")\n}",
                "generation_time": 9.127719163894653
            }
        ]
    },
    {
        "question_id": "206",
        "question": "What was the name of the famous battle in 1836 in San Antonio?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri a dbo:MilitaryConflict ; dbo:place dbr:San_Antonio ; dbo:date ?date FILTER ( ?date > \"1835-12-31T00:00:00Z\"^^xsd:dateTime ) FILTER ( ?date <= \"1836-12-31T00:00:00Z\"^^xsd:dateTime ) }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in JSON format.\n\n```json\n{\n  \"answer\": \"San Antonio Battle\"\n}\n``` ```sparql\nSELECT ?name\nWHERE {\n  ?event a <http://www.w3.org/ns/sparql-results#dataset> .\n  ?event <http://www.w3.org/2005/07/owl#sameAs> <http://en.wikipedia.org/wiki/San%27Antonio_Battle>.\n  ?event <http://www.w3.org/2005/07/owl#label> ?name.\n}\n``` ```json\n{\n  \"answer\": \"San Antonio Battle\"\n}",
                "extracted_query": "SELECT ?name\nWHERE {\n  ?event a <http://www.w3.org/ns/sparql-results#dataset> .\n  ?event <http://www.w3.org/2005/07/owl#sameAs> <http://en.wikipedia.org/wiki/San%27Antonio_Battle>.\n  ?event <http://www.w3.org/2005/07/owl#label> ?name.\n}",
                "generation_time": 28.857147693634033
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?battleName \nWHERE {\n    ?battle a foaf:Battle ;\n            foaf:name ?battleName ;\n            dct:title \"The Battle of San Antonio\" .\n}\n```",
                "extracted_query": "SELECT ?battleName \nWHERE {\n    ?battle a foaf:Battle ;\n            foaf:name ?battleName ;\n            dct:title \"The Battle of San Antonio\" .\n}",
                "generation_time": 9.51020336151123
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?battleName\nWHERE {\n  ?battle a <http://dbpedia.org/ontology/Battle> .\n  ?battle <http://dbpedia.org/ontology/date> ?date .\n  FILTER (?date = \"1836-03-01\") .\n  ?battle <http://dbpedia.org/ontology/location> ?location .\n  FILTER (?location = \"San Antonio\") .\n}\n```",
                "extracted_query": "SELECT ?battleName\nWHERE {\n  ?battle a <http://dbpedia.org/ontology/Battle> .\n  ?battle <http://dbpedia.org/ontology/date> ?date .\n  FILTER (?date = \"1836-03-01\") .\n  ?battle <http://dbpedia.org/ontology/location> ?location .\n  FILTER (?location = \"San Antonio\") .\n}",
                "generation_time": 18.989887952804565
            }
        ]
    },
    {
        "question_id": "97",
        "question": "Give me the official websites of actors of the television show Charmed.",
        "reference_query": "PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charmed> onto:starring ?actors . ?actors foaf:homepage ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in JSON format with the keys \"actors\" and \"urls\".\n\nHere is an example of what the expected output would look like:\n```json\n{\n  \"actors\": [\"www.example.com/charmed-actor1\", \"www.example.com/charmed-actor2\"],\n  \"urls\": [\n    \"www.example.com/charmed-actor1\",\n    \"www.example.com/charmed-actor2\"\n  ]\n}\n```\n\nNote: Replace `www.example.com/charmed-actorX` with the actual URL of the actor's official website.\nTo achieve this task, we need to use the `SELECT` clause to retrieve the required information from the database. We will join the `characters` table",
                "extracted_query": null,
                "generation_time": 31.792030811309814
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?website WHERE {\n  ?actor wdt:P31 wd:Q27048; \n         wdt:P576 ?show.\n  VALUES (?show) { wd:Q190806 } .\n  ?actor wdt:P1082 ?website .\n}\n```",
                "extracted_query": "SELECT ?website WHERE {\n  ?actor wdt:P31 wd:Q27048; \n         wdt:P576 ?show.\n  VALUES (?show) { wd:Q190806 } .\n  ?actor wdt:P1082 ?website .\n}",
                "generation_time": 16.064146995544434
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?website\nWHERE {\n  ?actor a :Actor ;\n    ?actor :officialWebsite ?website .\n}\n```",
                "extracted_query": "SELECT ?website\nWHERE {\n  ?actor a :Actor ;\n    ?actor :officialWebsite ?website .\n}",
                "generation_time": 6.549947023391724
            }
        ]
    },
    {
        "question_id": "20",
        "question": "How many calories does a baguette have?",
        "reference_query": "SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Baguette> <http://dbpedia.org/property/calories> ?n }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format of \"Baguette has X calories\". Assume that the database is structured as follows:\n- Baguette: ?baguette\n- Calories: ?calories\n\nThe answer to this question is 130.\nTo solve this problem, we need to retrieve the number of calories contained in a baguette from the given database schema.\n\nHere's the SPARQL query to achieve this:\n\n```sparql\nSELECT ?calories\nWHERE {\n  ?baguette a <Baguette> .\n  ?baguette <Calories> ?calories .\n}\n```\n\nThis query selects the `?calories` property from the `Baguette` class where it matches the",
                "extracted_query": "SELECT ?calories\nWHERE {\n  ?baguette a <Baguette> .\n  ?baguette <Calories> ?calories .\n}",
                "generation_time": 32.04712748527527
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT (COUNT(?calories) AS ?total_calories)\nWHERE {\n  ?baguette <http://www.example.com/baguette> <http://www.example.com/calories> ?calories .\n}\n```",
                "extracted_query": "SELECT (COUNT(?calories) AS ?total_calories)\nWHERE {\n  ?baguette <http://www.example.com/baguette> <http://www.example.com/calories> ?calories .\n}",
                "generation_time": 11.467881202697754
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT (COUNT(?calories)) AS ?count\nWHERE {\n  ?s a <http://example.org/food/Baguette> .\n  ?s :calories ?calories .\n}\n```",
                "extracted_query": "SELECT (COUNT(?calories)) AS ?count\nWHERE {\n  ?s a <http://example.org/food/Baguette> .\n  ?s :calories ?calories .\n}",
                "generation_time": 9.282817602157593
            }
        ]
    },
    {
        "question_id": "169",
        "question": "Give me all libraries established before 1400.",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Library> ; <http://dbpedia.org/property/established> ?year FILTER ( ?year < 1400 ) }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of a list of triples, each containing the library name as the subject and \"http://www.w3.org/2005/08/addressing/1.1/library\" as the predicate. Ensure that the query is case-insensitive and returns results sorted by library name in alphabetical order.\nSELECT ?library WHERE { ?library a :Library ; <http://www.w3.org/2005/08/addressing/1.1/library> ?prefix . FILTER(?prefix != \"http://www.w3.org/2005/08/addressing/1.1/library\") } ORDER BY ?library ```sparql\n```sparql\nPREFIX : <http://",
                "extracted_query": "",
                "generation_time": 31.79276967048645
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?library WHERE {\n    ?library wdt:P31 wd:Q2 ;\n           p:P1400_before 1900 .\n}\n```",
                "extracted_query": "SELECT ?library WHERE {\n    ?library wdt:P31 wd:Q2 ;\n           p:P1400_before 1900 .\n}",
                "generation_time": 8.961772680282593
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?library ?libraryName ?establishmentYear\nWHERE {\n  ?library a dbo:Library .\n  ?library dbo:established ?establishmentYear .\n  FILTER (?establishmentYear < 1400)\n}\n```",
                "extracted_query": "SELECT ?library ?libraryName ?establishmentYear\nWHERE {\n  ?library a dbo:Library .\n  ?library dbo:established ?establishmentYear .\n  FILTER (?establishmentYear < 1400)\n}",
                "generation_time": 10.426560163497925
            }
        ]
    },
    {
        "question_id": "38",
        "question": "Give me all Frisian islands that belong to the Netherlands.",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatFrisianIslands ; dbo:country res:Netherlands }",
        "validated": false,
        "validated_by": null,
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be presented in JSON format.\n```json\n{\n  \"query\": ```sparql\n    SELECT ?island\n    WHERE {\n      ?island a <http://www.w3.org/2000/01/rdf-schema#isPartOf> <http://www.w3.org/2006/04/turtle#Frisia>\n      FILTER(?island != <http://www.w3.org/2006/04/turtle#Netherlands>)\n    }\n    UNION {\n      ?island a <http://www.w3.org/2000/01/rdf-schema#isPartOf> <http://www.w3.org/20",
                "extracted_query": "SELECT ?island\n    WHERE {\n      ?island a <http://www.w3.org/2000/01/rdf-schema#isPartOf> <http://www.w3.org/2006/04/turtle#Frisia>\n      FILTER(?island != <http://www.w3.org/2006/04/turtle#Netherlands>)\n    }",
                "generation_time": 31.77026915550232
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?island WHERE {\n  ?island wdt:P31 wd:Netherlands .\n  FILTER(lang(?island) = \"fr\")\n}\n```",
                "extracted_query": "SELECT ?island WHERE {\n  ?island wdt:P31 wd:Netherlands .\n  FILTER(lang(?island) = \"fr\")\n}",
                "generation_time": 8.502986669540405
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?island ?country\nWHERE {\n  ?island a <http://www.w3.org/2000/01/rdf-schema#type> .\n  ?island rdf:type <http://www.w3.org/2002/07/owl#Thing> .\n  ?island skos:prefLabel ?label .\n  FILTER (lang(?label) = \"nl\") .\n  ?island skos:altLabel ?altLabel .\n  FILTER (lang(?altLabel) = \"nl\") .\n  ?island dbo:location ?location .\n  FILTER (CONTAINS(STR(?location), \"Netherlands\")) .",
                "extracted_query": null,
                "generation_time": 27.76398539543152
            },
            {
                "level": 4,
                "model_name": "mistralai/Mistral-7B-Instruct-v0.3",
                "raw_query": "```sparql\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX dbr: <http://dbpedia.org/resource/>\n\nSELECT DISTINCT ?island\nWHERE {\n  ?island rdf:type dbo:Island .\n  ?island dbo:isPartOf dbr:Nether",
                "extracted_query": null,
                "generation_time": 254.8346085548401
            },
            {
                "level": 5,
                "model_name": "google/gemma-2-9b-it",
                "raw_query": "```sparql\nPREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>\nPREFIX schema: <http://schema.org/>\n\nSELECT ?islandLabel\nWHERE {\n  ?island dbo:country ?netherlands .\n  ?island dbo:name ?islandName .\n  FILTER (regex(?islandName, \"Frisian\", \"i\"))\n  ?netherlands dbo:name \"Netherlands\" .\n}\n```",
                "extracted_query": "PREFIX dbo: <http://dbpedia.org/ontology/>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>\nPREFIX schema: <http://schema.org/>\n\nSELECT ?islandLabel\nWHERE {\n  ?island dbo:country ?netherlands .\n  ?island dbo:name ?islandName .\n  FILTER (regex(?islandName, \"Frisian\", \"i\"))\n  ?netherlands dbo:name \"Netherlands\" .\n}",
                "generation_time": 450.7760260105133
            }
        ]
    },
    {
        "question_id": "192",
        "question": "Which museum exhibits The Scream by Munch?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Scream dbo:museum ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "Ensure that the query is written in the correct format and follows the guidelines provided.\n\nThe answer should be formatted as follows:\n```\n(MATCH (museum {name \"The Scream\"}) \n    WHERE {\n        ?museum a <http://xmlns.com/foaf/0.1/Museum> .\n        FILTER (?museum <http://xmlns.com/foaf/0.1/name \"Munch\" >)\n        FILTER (?museum <http://xmlns.com/foaf/0.1/exhibits \"The Scream\" >)\n    }\n    RETURN DISTINCT ?museum\n    LIMIT 1\n```\n\nNote: Replace `http://xmlns.com/foaf/0.1/Museum` with the",
                "extracted_query": null,
                "generation_time": 32.04286432266235
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?museum WHERE {\n  <http://www.w3.org/2002/07/owl#Thing> rdfs:label \"The Scream\" .\n  <http://www.w3.org/2002/07/owl#Thing> owl:sameAs <https://en.wikipedia.org/wiki/The_Scream> .\n  <https://en.wikipedia.org/wiki/The_Scream> wdt:P31 wd:CreativeWork.\n  <https://en.wikipedia.org/wiki/The_Scream> wdt:P574 ?museum .\n}\n```",
                "extracted_query": "SELECT ?museum WHERE {\n  <http://www.w3.org/2002/07/owl#Thing> rdfs:label \"The Scream\" .\n  <http://www.w3.org/2002/07/owl#Thing> owl:sameAs <https://en.wikipedia.org/wiki/The_Scream> .\n  <https://en.wikipedia.org/wiki/The_Scream> wdt:P31 wd:CreativeWork.\n  <https://en.wikipedia.org/wiki/The_Scream> wdt:P574 ?museum .\n}",
                "generation_time": 28.124903678894043
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?museum ?exhibition\nWHERE {\n  ?exhibition a museum:Museum .\n  ?exhibition museum:exhibits ?scream .\n  ?scream a <http://www.w3.org/ns/exhibit> .\n}\n```",
                "extracted_query": "SELECT ?museum ?exhibition\nWHERE {\n  ?exhibition a museum:Museum .\n  ?exhibition museum:exhibits ?scream .\n  ?scream a <http://www.w3.org/ns/exhibit> .\n}",
                "generation_time": 11.15772271156311
            }
        ]
    },
    {
        "question_id": "78",
        "question": "When was the De Beers company founded?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT xsd:date(?date) WHERE { res:De_Beers dbo:foundingYear ?date }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of \"query\":\n\n```sparql\nSELECT ?year WHERE {\n  ?companyDeBeers a <http://example.org/company> ;\n         <http://example.org/established> ?year .\n}\n```\n\nThe year is expected to be in ISO 8601 format (e.g., 2023-04-05). Ensure that the returned results are ordered by the year in descending order.\nTo solve this problem, you need to use the `PREFIX` prefix to specify the namespace for the company information. In this case, we will use the `http://example.org/company` as the prefix.\n\nHere's how you can write the SPARQL query:\n\n```",
                "extracted_query": "SELECT ?year WHERE {\n  ?companyDeBeers a <http://example.org/company> ;\n         <http://example.org/established> ?year .\n}",
                "generation_time": 31.791938066482544
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?dateOfBirth\nWHERE {\n  <http://www.example.com/DeBeers> <http://www.w3.org/ns/prov#wasFoundedBy> <http://www.example.com/Founders>.\n  <http://www.example.com/Founders> <http://www.w3.org/2002/07/owl#sameAs> <http://www.example.com/FoundersDateOfBirth>.\n  <http://www.example.com/FoundersDateOfBirth> <http://www.w3.org/2002/07/owl#hasValue> ?dateOfBirth.\n}\n```",
                "extracted_query": "SELECT ?dateOfBirth\nWHERE {\n  <http://www.example.com/DeBeers> <http://www.w3.org/ns/prov#wasFoundedBy> <http://www.example.com/Founders>.\n  <http://www.example.com/Founders> <http://www.w3.org/2002/07/owl#sameAs> <http://www.example.com/FoundersDateOfBirth>.\n  <http://www.example.com/FoundersDateOfBirth> <http://www.w3.org/2002/07/owl#hasValue> ?dateOfBirth.\n}",
                "generation_time": 30.010552406311035
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?foundingDate\nWHERE {\n  ?company a dbo:Company .\n  ?company dbo:founded ?foundingDate .\n}\n```",
                "extracted_query": "SELECT ?foundingDate\nWHERE {\n  ?company a dbo:Company .\n  ?company dbo:founded ?foundingDate .\n}",
                "generation_time": 7.435296058654785
            }
        ]
    },
    {
        "question_id": "19",
        "question": "Who became president after JFK died?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/property/presidentEnd> ?x . ?uri <http://dbpedia.org/property/presidentStart> ?x; a <http://dbpedia.org/ontology/Person>. }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format of \"SPARQL query as described above\".\n\nThe correct answer is:\n```\nPREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nPREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nPREFIX xsd: <http://www.w3.org/2001/XMLSchema#>\n\nSELECT ?person\nWHERE {\n  ?person a <http://www.example.com/person>.\n  FILTER(?person != <http://www.example.com/johnson>).\n  ?person rdfs:label \"President\".\n  FILTER(regex(?person, \"<http://www.example",
                "extracted_query": null,
                "generation_time": 32.04881310462952
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?president \nWHERE {\n  ?president wdt:P30 wd:Q2796184.\n}\n```",
                "extracted_query": "SELECT ?president \nWHERE {\n  ?president wdt:P30 wd:Q2796184.\n}",
                "generation_time": 7.80598521232605
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?person ?when ?who\nWHERE {\n  ?person a :Person .\n  ?person a :President .\n  ?person ?when ?when .\n  ?person ?who ?who .\n  FILTER(?when = \"1963-10-22\")\n}\n```",
                "extracted_query": "SELECT ?person ?when ?who\nWHERE {\n  ?person a :Person .\n  ?person a :President .\n  ?person ?when ?when .\n  ?person ?who ?who .\n  FILTER(?when = \"1963-10-22\")\n}",
                "generation_time": 13.552630424499512
            }
        ]
    },
    {
        "question_id": "190",
        "question": "Who are the parents of the wife of Juan Carlos I?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Juan_Carlos_I_of_Spain dbo:spouse ?x . ?x dbo:parent ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format:\n```\nSELECT ?parent\nWHERE {\n  ?person a <http://example.org/Person> ;\n         <http://example.org/WifeOf> ?wife .\n  FILTER(?wife = <http://example.org/JuanCarlosI>)\n  ?person a <http://example.org/ParentOf> ?parent .\n}\n```\n\nNote: Replace `<http://example.org/Person>` with the actual URI of the RDF resource representing the person.\nSure, here is the SPARQL query that satisfies the given question:\n\n```sparql\nPREFIX ex: <http://example.org/>\n\nSELECT ?parent\nWHERE {\n  ?person ex:wifeOf ex:JuanCarlosI .\n  FILTER(ex:",
                "extracted_query": "SELECT ?parent\nWHERE {\n  ?person a <http://example.org/Person> ;\n         <http://example.org/WifeOf> ?wife .\n  FILTER(?wife = <http://example.org/JuanCarlosI>)\n  ?person a <http://example.org/ParentOf> ?parent .\n}",
                "generation_time": 31.92305636405945
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?father ?mother \nWHERE {\n  <Juan_Carlos_I> rdfs:label \"Juan_III_of_Spain\"@en ;\n                  dbo:wife <wife_of_Juan_Carlos_I> .\n  ?father rdfs:label \"Father\"@es ;\n          dbo:child ?son .\n  ?son rdfs:label \"Son\"@es .\n  ?mother rdfs:label \"Mother\"@es .\n}\n```",
                "extracted_query": "SELECT ?father ?mother \nWHERE {\n  <Juan_Carlos_I> rdfs:label \"Juan_III_of_Spain\"@en ;\n                  dbo:wife <wife_of_Juan_Carlos_I> .\n  ?father rdfs:label \"Father\"@es ;\n          dbo:child ?son .\n  ?son rdfs:label \"Son\"@es .\n  ?mother rdfs:label \"Mother\"@es .\n}",
                "generation_time": 21.766598224639893
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?person ?relation ?subject\nWHERE {\n  ?person a :Person .\n  ?person ?relation ?subject .\n  FILTER(?subject = <http://dbpedia.org/resource/Juan_Carlos_I> )\n  FILTER(?relation = <http://dbpedia.org/ontology/spouse> )\n  FILTER(?subject = <http://dbpedia.org/resource/Infanta_Cristina_of_Spain> )\n}\n```",
                "extracted_query": "SELECT ?person ?relation ?subject\nWHERE {\n  ?person a :Person .\n  ?person ?relation ?subject .\n  FILTER(?subject = <http://dbpedia.org/resource/Juan_Carlos_I> )\n  FILTER(?relation = <http://dbpedia.org/ontology/spouse> )\n  FILTER(?subject = <http://dbpedia.org/resource/Infanta_Cristina_of_Spain> )\n}",
                "generation_time": 19.649144172668457
            }
        ]
    },
    {
        "question_id": "174",
        "question": "Who is the novelist of the work a song of ice and fire?",
        "reference_query": "PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?Novelist WHERE { dbr:A_Song_of_Ice_and_Fire dbp:author ?Novelist }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format:\n```sparql\nSELECT ?novel\nWHERE {\n  ?work a songOfIceAndFire .\n  ?work a novel .\n}\nLIMIT 1\n```\n\nNote: Replace `songOfIceAndFire` with the actual title of the work \"Song of Ice and Fire\" by George R.R. Martin. ```sparql\nSELECT ?novel\nWHERE {\n  ?work a songOfIceAndFire .\n  ?work a novel .\n}\nLIMIT 1\n```",
                "extracted_query": "SELECT ?novel\nWHERE {\n  ?work a songOfIceAndFire .\n  ?work a novel .\n}\nLIMIT 1\n\nSELECT ?novel\nWHERE {\n  ?work a songOfIceAndFire .\n  ?work a novel .\n}\nLIMIT 1",
                "generation_time": 22.857311487197876
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?author WHERE {\n  <http://example.com/work/a-song-of-ice-and-fire> <http://www.example.com/hasAuthor> ?author .\n}\n```",
                "extracted_query": "SELECT ?author WHERE {\n  <http://example.com/work/a-song-of-ice-and-fire> <http://www.example.com/hasAuthor> ?author .\n}",
                "generation_time": 9.188206672668457
            }
        ]
    },
    {
        "question_id": "189",
        "question": "In which studio did the Beatles record their first album?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX db: <http://dbpedia.org/> SELECT ?studio WHERE { ?album dbo:artist dbr:The_Beatles ; rdf:type dbo:Album ; dbo:releaseDate ?date ; dbp:studio ?studio } ORDER BY ASC(?date) LIMIT 1",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The output should be in the format:\n```\nSELECT ?studio WHERE {\n  ?album . \n  ?album <http://dbpedia.org/resource/Beatles_album> ?studio .\n}\n```\n\nNote: You can assume that the database schema includes a table named \"Albums\" with columns \"title\" and \"artist\".\nTo solve this problem, we need to retrieve information about the first album recorded by the Beatles from the database. We will use the `DBPedia` service to get the title of the album and then filter it based on the artist.\n\nHere is the SPARQL query to achieve this:\n\n```sparql\nSELECT ?studio WHERE {\n  ?album <http://dbpedia.org/resource/Beatles_album>",
                "extracted_query": "SELECT ?studio WHERE {\n  ?album . \n  ?album <http://dbpedia.org/resource/Beatles_album> ?studio .\n}",
                "generation_time": 32.07653307914734
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?studio WHERE {\n  ?album a foaf:Document ;\n         foaf:name \"The Beatles - Please Please Me\" .\n  ?album foaf:isPartOf ?recordings .\n  ?recordings foaf:isPartOf ?studio .\n}\n```",
                "extracted_query": "SELECT ?studio WHERE {\n  ?album a foaf:Document ;\n         foaf:name \"The Beatles - Please Please Me\" .\n  ?album foaf:isPartOf ?recordings .\n  ?recordings foaf:isPartOf ?studio .\n}",
                "generation_time": 13.741089105606079
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?studio ?album\nWHERE {\n  ?album a album;\n  ?album studio ?studio.\n  FILTER(?studio = \"Apple Studios\")\n}\n```",
                "extracted_query": "SELECT ?studio ?album\nWHERE {\n  ?album a album;\n  ?album studio ?studio.\n  FILTER(?studio = \"Apple Studios\")\n}",
                "generation_time": 8.203398942947388
            }
        ]
    },
    {
        "question_id": "152",
        "question": "Which beer brewing companies are located in North-Rhine Westphalia?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?company WHERE { ?company dct:subject dbc:Companies_based_in_North_Rhine-Westphalia ; rdf:type dbo:Brewery }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The query should use the `?` notation to reference the RDF subject.\n\nThe answer should be presented as a list of distinct beer brewing company names separated by commas.\nSELECT DISTINCT ?companyName\nWHERE {\n  ?beerBrewingCompany rdfs:label ?companyLabel .\n  FILTER(?companyLabel = \"Beer Baking Companies\")\n  FILTER(?companyLabel IN (?brewingCompanies))\n} LIMIT 1000\nORDER BY DESC(?companyLabel) ```sparql\nSELECT DISTINCT ?companyName\nWHERE {\n  ?beerBrewingCompany rdfs:label ?companyLabel .\n  FILTER(?companyLabel = \"Beer Baking Companies\")\n  FILTER(?companyLabel IN (?brewingCompanies))\n} LIMIT 100",
                "extracted_query": "SELECT DISTINCT ?companyName\nWHERE {\n  ?beerBrewingCompany rdfs:label ?companyLabel .\n  FILTER(?companyLabel = \"Beer Baking Companies\")\n  FILTER(?companyLabel IN (?brewingCompanies))\n}\n\nSELECT DISTINCT ?companyName\nWHERE {\n  ?beerBrewingCompany rdfs:label ?companyLabel .\n  FILTER(?companyLabel = \"Beer Baking Companies\")\n  FILTER(?companyLabel IN (?brewingCompanies))\n}",
                "generation_time": 32.05396246910095
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?beerCompany WHERE {\n  ?beerCompany a brewery ;\n                location \"North-Rhine Westphalia\" .\n}\n```",
                "extracted_query": "SELECT ?beerCompany WHERE {\n  ?beerCompany a brewery ;\n                location \"North-Rhine Westphalia\" .\n}",
                "generation_time": 7.382610559463501
            }
        ]
    },
    {
        "question_id": "94",
        "question": "When did princess Diana die?",
        "reference_query": "SELECT DISTINCT xsd:date(?d) WHERE { <http://dbpedia.org/resource/Diana,_Princess_of_Wales> <http://dbpedia.org/ontology/deathDate> ?d }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format of:\n```\nSELECT ?date\nWHERE {\n  ?person a <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/2000/01/rdf-schema#Person>.\n  ?person <http://www.w3.org/2004/02/skos/core#prefersTo> <http://www.w3.org/2006/05/addressing/direct>.\n  ?person <http://www.w3.org/2006/05/addressing/direct#name> \"Princess Diana\".\n  ?person <http://",
                "extracted_query": null,
                "generation_time": 32.05952525138855
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?dateOfBirth WHERE {\n  <http://dbpedia.org/resource/Princess_Diana> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person> .\n  <http://dbpedia.org/resource/Princess_Diana> <http://xmlns.com/foaf/0.1/birthDate> ?dateOfBirth .\n}\n```",
                "extracted_query": "SELECT ?dateOfBirth WHERE {\n  <http://dbpedia.org/resource/Princess_Diana> <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person> .\n  <http://dbpedia.org/resource/Princess_Diana> <http://xmlns.com/foaf/0.1/birthDate> ?dateOfBirth .\n}",
                "generation_time": 22.66802668571472
            }
        ]
    },
    {
        "question_id": "8",
        "question": "Who founded Intel?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Intel> <http://dbpedia.org/property/founders> ?uri }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in the format of \"Founders [first name] [last name]\".\nTo solve this problem, you need to:\n1. Identify the entity that founded Intel\n2. Retrieve information about this entity from an external database or API\n3. Extract the first name and last name of the founder\n4. Format the result as specified\n\nPlease provide the SPARQL query for this task.\n\nSPARQL Query:\n```sparql\nPREFIX ex: <http://example.org/>\nSELECT ?founderName ?founderLastName WHERE {\n  ex:FoundedIntel ?intel .\n  ex:FounderOfIntel ?founder .\n}\n``` To solve the problem, we will follow these steps:\n\n1. **Identify the",
                "extracted_query": "PREFIX ex: <http://example.org/>\nSELECT ?founderName ?founderLastName WHERE {\n  ex:FoundedIntel ?intel .\n  ex:FounderOfIntel ?founder .\n}",
                "generation_time": 31.811352729797363
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?founder WHERE {\n  ?intel a <http://www.w3.org/2002/07/owl#Thing> ;\n         rdfs:label \"Intel\"@en .\n  ?founder rdfs:label \"Intel's founder\"@en .\n}\n```",
                "extracted_query": "SELECT ?founder WHERE {\n  ?intel a <http://www.w3.org/2002/07/owl#Thing> ;\n         rdfs:label \"Intel\"@en .\n  ?founder rdfs:label \"Intel's founder\"@en .\n}",
                "generation_time": 14.216437816619873
            }
        ]
    },
    {
        "question_id": "95",
        "question": "Who is the youngest player in the Premier League?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:team ?team . ?league dbo:league res:Premier_League . ?league dbo:team ?team . ?uri dbo:birthDate ?date } ORDER BY DESC(?date) LIMIT 1",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to the names of players who are not from England.\n\nTo solve this problem, you need to:\n1. Identify all players in the Premier League.\n2. Filter out players from England.\n3. Sort these players by age in descending order.\n4. Return only the first name of each player.\n\nPlease provide the SPARQL query that accomplishes this task. To solve the given problem, we will follow these steps:\n\n1. **Identify all players in the Premier League** using the `SELECT` clause.\n2. **Filter out players from England** using the `WHERE` clause.\n3. **Sort these players by age in descending order** using the `ORDER BY` clause.\n4. **Return only",
                "extracted_query": null,
                "generation_time": 32.01609516143799
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?player WHERE {\n  ?player <http://www.w3.org/ns/prov#wasAttributedTo> <https://www.transfermarkt.com/premier-league/en/players/basics>.\n  FILTER (?player <http://www.w3.org/ns/person#age> <http://www.w3.org/2002/07/owl#zero>)\n}\n```",
                "extracted_query": "SELECT ?player WHERE {\n  ?player <http://www.w3.org/ns/prov#wasAttributedTo> <https://www.transfermarkt.com/premier-league/en/players/basics>.\n  FILTER (?player <http://www.w3.org/ns/person#age> <http://www.w3.org/2002/07/owl#zero>)\n}",
                "generation_time": 19.031543016433716
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?player ?age\nWHERE {\n  GRAPH <http://example.org/premierleague> {\n    ?player a <http://example.org/premierleague/Player> .\n    ?player <http://example.org/premierleague/age> ?age .\n  }\n  FILTER (?age < 21)\n}\n```",
                "extracted_query": "SELECT ?player ?age\nWHERE {\n  GRAPH <http://example.org/premierleague> {\n    ?player a <http://example.org/premierleague/Player> .\n    ?player <http://example.org/premierleague/age> ?age .\n  }\n  FILTER (?age < 21)\n}",
                "generation_time": 15.360566139221191
            }
        ]
    },
    {
        "question_id": "119",
        "question": "Which instruments does Cat Stevens play?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cat_Stevens> <http://dbpedia.org/ontology/instrument> ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in JSON format.\n\nHere is the RDF data structure:\n```json\n{\n  \"category\": \"Instrument\",\n  \"items\": [\n    {\n      \"name\": \"Guitar\"\n    },\n    {\n      \"name\": \"Piano\"\n    }\n  ]\n}\n```\n\nNote: You are not allowed to use any external libraries or packages for this task.\nTo solve this problem, we need to extract the information about the instruments played by Cat Stevens from the given RDF data. We can achieve this by querying the `category` property of the `Instrument` class and selecting the values associated with it.\n\nHere's the SPARQL query that will return the desired result:\n\n```sparql\nSELECT ?instrument\nWHERE {",
                "extracted_query": null,
                "generation_time": 31.800240993499756
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?instrument \nWHERE {\n  <http://www.example.com/artist> <http://www.example.com/instruments> ?instrument .\n}\n```",
                "extracted_query": "SELECT ?instrument \nWHERE {\n  <http://www.example.com/artist> <http://www.example.com/instruments> ?instrument .\n}",
                "generation_time": 8.034517526626587
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?instrument WHERE {\n  ?instrument a :Instrument .\n  FILTER regex(?instrument, \"Cat Stevens\")\n}\n```",
                "extracted_query": "SELECT ?instrument WHERE {\n  ?instrument a :Instrument .\n  FILTER regex(?instrument, \"Cat Stevens\")\n}",
                "generation_time": 6.342213869094849
            }
        ]
    },
    {
        "question_id": "115",
        "question": "How many rivers and lakes are in South Carolina?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT (COUNT(DISTINCT ?uri) AS ?count) WHERE { { ?uri dbo:location dbr:South_Carolina ; rdf:type dbo:Lake } UNION { ?uri dct:subject dbc:Rivers_and_streams_of_South_Carolina } }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to the number of rivers and lakes in South Carolina.\n\nTo solve this problem, you need to:\n1. Identify all rivers and lakes in South Carolina.\n2. Count the total number of rivers and lakes.\n3. Return the count as a single value.\n\nPlease provide the SPARQL query that accomplishes these tasks using the given prefixes. ```prefix wfo: <http://www.w3.org/2004/02/skos/core#>\nprefix foaf: <http://xmlns.com/foaf/0.1/>\nprefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>\nprefix owl: <http://www.w3.org",
                "extracted_query": null,
                "generation_time": 32.053810358047485
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT (COUNT(?river) AS ?rivers)\nWHERE {\n  ?river wdt:P31 wd:Q5 .\n}\nUNION\nSELECT (COUNT(?lake) AS ?lakes)\nWHERE {\n  ?lake wdt:P31 wd:Q5 .\n}",
                "extracted_query": "SELECT (COUNT(?river) AS ?rivers)\nWHERE {\n  ?river wdt:P31 wd:Q5 .\n}\n\nSELECT (COUNT(?lake) AS ?lakes)\nWHERE {\n  ?lake wdt:P31 wd:Q5 .\n}",
                "generation_time": 14.207821130752563
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT (COUNT(?river) + COUNT(?lake)) AS ?total\nWHERE {\n  GRAPH <http://example.org/ontology#> {\n    ?river rdf:type <http://example.org/ontology#River> .\n    ?river <http://example.org/ontology#location> <http://example.org/ontology#SouthCarolina> .\n  }\n  GRAPH <http://example.org/ontology#> {\n    ?lake rdf:type <http://example.org/ontology#Lake> .\n    ?lake <http://example.org/ontology#location> <http://example.org/ontology#SouthCarolina> .\n  }\n}",
                "extracted_query": "SELECT (COUNT(?river) + COUNT(?lake)) AS ?total\nWHERE {\n  GRAPH <http://example.org/ontology#> {\n    ?river rdf:type <http://example.org/ontology#River> .\n    ?river <http://example.org/ontology#location> <http://example.org/ontology#SouthCarolina> .\n  }",
                "generation_time": 27.3665828704834
            }
        ]
    },
    {
        "question_id": "116",
        "question": "Who was called Rodzilla?",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://xmlns.com/foaf/0.1/nick> \"Rodzilla\"@en }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be limited to one entity named \"Rodzilla\" who has been called by someone.\n\nHere is an example of how the answer might look like:\n```\n```sparql\nPREFIX ex: <http://example.org/>\nSELECT ?name WHERE {\n  ?entity ex:calledRodzilla .\n}\nLIMIT 1\n```sparql\n``` \n\nNote: Replace `<http://example.org/>` with the actual URI of your RDF graph. ```sparql``` tags are used in SPARQL queries to indicate that they are part of a SPARQL query rather than just providing information about the results.\nTo solve this problem, we need to find all entities that have the property `ex:calledRodzilla`. We can use the",
                "extracted_query": "PREFIX ex: <http://example.org/>\nSELECT ?name WHERE {\n  ?entity ex:calledRodzilla .\n}\nLIMIT 1\n\n",
                "generation_time": 32.037413358688354
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?person WHERE {\n  ?person wdt:P31 wd:Q2.\n}\n```",
                "extracted_query": "SELECT ?person WHERE {\n  ?person wdt:P31 wd:Q2.\n}",
                "generation_time": 5.738882064819336
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?person ?name\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:name ?name .\n  FILTER regex(?name, 'Rodzilla')\n}\n```",
                "extracted_query": "SELECT ?person ?name\nWHERE {\n  ?person a dbo:Person .\n  ?person dbo:name ?name .\n  FILTER regex(?name, 'Rodzilla')\n}",
                "generation_time": 9.116544723510742
            }
        ]
    },
    {
        "question_id": "138",
        "question": "Give me the capitals of all countries in Africa.",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> SELECT DISTINCT ?uri WHERE { ?country dct:subject dbc:Countries_in_Africa ; dbo:capital ?uri }",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The capital cities of African countries should be returned as a list of triples, each containing the country name and its corresponding capital city. The result should be sorted alphabetically by country name.\nSELECT ?country ?capital\nWHERE {\n  ?country a africa:Country .\n  ?country a africa:HasCapital ?capital .\n} ORDER BY ?country ```sparql``` SELECT ?country ?capital WHERE { ?country a africa:Country . ?country a africa:HasCapital ?capital } ORDER BY ?country ```",
                "extracted_query": "",
                "generation_time": 21.994239568710327
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?capital WHERE {\n  ?country rdfs:label \"Africa\"@en ;\n          dbo:capital ?capital .\n}\n```",
                "extracted_query": "SELECT ?capital WHERE {\n  ?country rdfs:label \"Africa\"@en ;\n          dbo:capital ?capital .\n}",
                "generation_time": 7.1167333126068115
            }
        ]
    },
    {
        "question_id": "177",
        "question": "Which bridges are of the same type as the Manhattan Bridge?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?bridge WHERE { dbr:Manhattan_Bridge dbo:type ?type . ?bridge dbo:type ?type ; rdf:type dbo:Bridge }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format:\n```\n<result>\n  <query>\n    <prefix>my: </prefix>\n    <subject>my:bridge</subject>\n    <predicate>my:type</predicate>\n    <object>my:theManhattanBridge</object>\n  </query>\n</result>\n```\n\nNote: Replace `<prefix>` with the appropriate prefix for your dataset.\nTo solve this problem, we need to retrieve information about bridges that belong to the same type as the Manhattan Bridge. We can achieve this by querying the RDF graph using SPARQL.\n\nHere's how you can write the SPARQL query:\n\n```sparql\nPREFIX my: <http://example.org/my#>\n\nSELECT ?bridge\nWHERE",
                "extracted_query": null,
                "generation_time": 32.075336933135986
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?bridgeType WHERE {\n    <ManhattanBridge> <type> ?bridgeType .\n}\n```",
                "extracted_query": "SELECT ?bridgeType WHERE {\n    <ManhattanBridge> <type> ?bridgeType .\n}",
                "generation_time": 5.871526718139648
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?bridge ?bridgeType\nWHERE {\n  GRAPH <http://example.org/bridges> {\n    ?bridge a bridge:Bridge .\n    ?bridge bridge:type ?bridgeType .\n    FILTER ( ?bridge bridge:name = \"Manhattan Bridge\" )\n  }\n  \n  ?bridgeType a bridge:BridgeType .\n  FILTER ( ?bridgeType bridge:name = \"Suspension Bridge\" )\n}\n```",
                "extracted_query": "SELECT ?bridge ?bridgeType\nWHERE {\n  GRAPH <http://example.org/bridges> {\n    ?bridge a bridge:Bridge .\n    ?bridge bridge:type ?bridgeType .\n    FILTER ( ?bridge bridge:name = \"Manhattan Bridge\" )\n  }\n  \n  ?bridgeType a bridge:BridgeType .\n  FILTER ( ?bridgeType bridge:name = \"Suspension Bridge\" )\n}",
                "generation_time": 18.531773567199707
            }
        ]
    },
    {
        "question_id": "101",
        "question": "How many companies were founded by the founder of Facebook?",
        "reference_query": "SELECT (COUNT(DISTINCT ?x) AS ?c) WHERE { <http://dbpedia.org/resource/Facebook> <http://dbpedia.org/ontology/foundedBy> ?uri . ?x <http://dbpedia.org/ontology/foundedBy> ?uri }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format:\n```\nSELECT ?count\nWHERE {\n  ?company <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/ns/facebook#Company>.\n  FILTER(?company != \"Facebook\").\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n  ?company <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/ns/facebook#Founder>.\n  FILTER(?company != \"Facebook\").\n  ?founder <http://www.w3.org/19",
                "extracted_query": "SELECT ?count\nWHERE {\n  ?company <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://www.w3.org/ns/facebook#Company>.\n  FILTER(?company != \"Facebook\").\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }",
                "generation_time": 31.8153178691864
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT (COUNT(DISTINCT ?company) AS INTEGER) \nWHERE {\n    ?company wdt:P31 wd:Q2.\n    ?company wdt:P19 ?founder.\n    FILTER(?founder = wd:Q67840).\n}\n```",
                "extracted_query": "SELECT (COUNT(DISTINCT ?company) AS INTEGER) \nWHERE {\n    ?company wdt:P31 wd:Q2.\n    ?company wdt:P19 ?founder.\n    FILTER(?founder = wd:Q67840).\n}",
                "generation_time": 14.20754861831665
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nPREFIX fb: <http://dbpedia.org/ontology/fb#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT (COUNT(?company))\nWHERE {\n  ?company fb:foundedBy ?founder .\n  ?founder fb:name ?founderName .\n  ?founder fb:name dbo:sameAs fb:founder .\n  FILTER(?founderName = \"Mark Zuckerberg\")\n}\n```",
                "extracted_query": "PREFIX fb: <http://dbpedia.org/ontology/fb#>\nPREFIX dbo: <http://dbpedia.org/ontology/>\nSELECT (COUNT(?company))\nWHERE {\n  ?company fb:foundedBy ?founder .\n  ?founder fb:name ?founderName .\n  ?founder fb:name dbo:sameAs fb:founder .\n  FILTER(?founderName = \"Mark Zuckerberg\")\n}",
                "generation_time": 18.164869785308838
            }
        ]
    },
    {
        "question_id": "14",
        "question": "Show me hiking trails in the Grand Canyon where there's no danger of flash floods.",
        "reference_query": "SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/trailheads> <http://dbpedia.org/resource/Grand_Canyon> FILTER NOT EXISTS { ?uri <http://dbpedia.org/property/hazards> <http://dbpedia.org/resource/Flash_flood> } }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The query should use the `hiking` namespace to refer to hiking trails and the `flash_floods` namespace to refer to flash floods.\nTo solve this problem, you need to:\n1. Use the `hiking` namespace to find hiking trails.\n2. Filter out any hiking trails that have flash floods as their consequence.\n3. Return only those hiking trails that do not contain any flash floods.\n\nHere is an example of how your answer might look like:\n\n```sparql\nSELECT ?trail\nWHERE {\n  ?trail hiker .\n  FILTER NOT EXISTS { ?trail flash_floods }\n}\n```\n\nThis query will return all hiking trails where there are no flash floods as consequences. Note that it does not include any trail",
                "extracted_query": "SELECT ?trail\nWHERE {\n  ?trail hiker .\n  FILTER NOT EXISTS { ?trail flash_floods }\n}",
                "generation_time": 31.790940046310425
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?trail_name WHERE {\n  ?trail rdfs:label ?trail_name ;\n         dct:hasPart ?section ;\n         dct:isPartOf <https://www.nps.gov/grca/planyourvisit/index.htm> .\n  FILTER NOT EXISTS { ?section dct:hasPart ?flash_flood_section . }\n}\n```",
                "extracted_query": "SELECT ?trail_name WHERE {\n  ?trail rdfs:label ?trail_name ;\n         dct:hasPart ?section ;\n         dct:isPartOf <https://www.nps.gov/grca/planyourvisit/index.htm> .\n  FILTER NOT EXISTS { ?section dct:hasPart ?flash_flood_section . }\n}",
                "generation_time": 16.744789600372314
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?trailName ?trailDescription WHERE {\n  GRAPH ?g {\n    ?trailName a <http://www.w3.org/2000/01/rdf-schema#Resource> .\n    ?trailName <http://example.org/hiking/trail> ?trailDescription .\n    FILTER (?trailName = \"Grand Canyon Trail\")\n    FILTER (NOT EXISTS {\n      ?trailName <http://example.org/hiking/flashflood> ?floodDate .\n      ?floodDate <http://example.org/flashflood/danger> \"No Danger\"\n    })\n  }\n}\n```",
                "extracted_query": "SELECT ?trailName ?trailDescription WHERE {\n  GRAPH ?g {\n    ?trailName a <http://www.w3.org/2000/01/rdf-schema#Resource> .\n    ?trailName <http://example.org/hiking/trail> ?trailDescription .\n    FILTER (?trailName = \"Grand Canyon Trail\")\n    FILTER (NOT EXISTS {\n      ?trailName <http://example.org/hiking/flashflood> ?floodDate .\n      ?floodDate <http://example.org/flashflood/danger> \"No Danger\"\n    })\n  }\n}",
                "generation_time": 26.664104223251343
            }
        ]
    },
    {
        "question_id": "87",
        "question": "Which book has the most pages?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book ; dbo:numberOfPages ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be ordered by the number of pages in descending order.\n\nThe answer to this question is:\n```\nSELECT ?book { ?book <http://example.org/book> <http://example.org/page-number> 100 } ORDER BY DESC(?pageNumber) LIMIT 1\n``` ```sparql\nSELECT ?book { ?book <http://example.org/book> <http://example.org/page-number> 100 } ORDER BY DESC(?pageNumber) LIMIT 1\n```",
                "extracted_query": "SELECT ?book { ?book <http://example.org/book> <http://example.org/page-number> 100 } ORDER BY DESC(?pageNumber) LIMIT 1",
                "generation_time": 22.221930742263794
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?book ?pages WHERE {\n    ?book a <http://example.org/book> .\n    ?book <http://example.org/hasPages> ?pages .\n}\nORDER BY DESC(?pages)\nLIMIT 1;",
                "extracted_query": "SELECT ?book ?pages WHERE {\n    ?book a <http://example.org/book> .\n    ?book <http://example.org/hasPages> ?pages .\n}",
                "generation_time": 11.482878684997559
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?book ?pages\nWHERE {\n  ?book a dbo:Book .\n  ?book dbo:numberOfPages ?pages .\n  FILTER (?pages > 100 )\n}\n```",
                "extracted_query": "SELECT ?book ?pages\nWHERE {\n  ?book a dbo:Book .\n  ?book dbo:numberOfPages ?pages .\n  FILTER (?pages > 100 )\n}",
                "generation_time": 9.318321228027344
            }
        ]
    },
    {
        "question_id": "148",
        "question": "What is the largest state in the United States?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dct:subject dbc:States_of_the_United_States ; rdf:type dbo:AdministrativeRegion ; dbo:areaTotal ?area } ORDER BY DESC(?area) OFFSET 0 LIMIT 1",
        "validated": true,
        "validated_by": "google/gemma-2-2b-it",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The answer should be in JSON format.\n\n```json\n{\n  \"answer\": {\n    \"state\": \"California\",\n    \"population\": 3980264,\n    \"area\": 17520\n  }\n}\n``` ```sparql\nSELECT ?state ?population ?area\nWHERE {\n  ?state a :State ;\n         :Population ?population .\n  FILTER(?population > 0)\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n  SERVICE wikibase:prefix . \n  SERVICE wikibase:br . \n  ?state rdfs:label ?label .\n  ?state wikibase:capital ?capital .\n  ?state wikibase",
                "extracted_query": "SELECT ?state ?population ?area\nWHERE {\n  ?state a :State ;\n         :Population ?population .\n  FILTER(?population > 0)\n  SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }",
                "generation_time": 31.802624464035034
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?state WHERE {\n  ?state wdt:P31 wd:United_States.\n  FILTER(lang(?state) = \"en\").\n  OPTIONAL { ?state wdt:P2486 ?largest_state_population. }\n}\nORDER BY DESC(?largest_state_population)\nLIMIT 1```",
                "extracted_query": "SELECT ?state WHERE {\n  ?state wdt:P31 wd:United_States.\n  FILTER(lang(?state) = \"en\").\n  OPTIONAL { ?state wdt:P2486 ?largest_state_population. }\n}\nORDER BY DESC(?largest_state_population)\nLIMIT 1",
                "generation_time": 15.361307144165039
            }
        ]
    },
    {
        "question_id": "43",
        "question": "Give me the websites of companies with more than 500000 employees.",
        "reference_query": "PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT distinct ?web WHERE { ?sub dbo:numberOfEmployees ?obj . ?sub foaf:homepage ?web FILTER( xsd:integer(?obj) > 500000 ) . }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be ordered by the number of employees in descending order.\nSELECT ?website WHERE {\n  ?company a company:Company .\n  ?company employeeCount > 500000 .\n  FILTER(?employeeCount gt 1)\n} ORDER BY DESC(employeeCount) ``` To solve this problem, we need to write a SPARQL query that retrieves the websites of companies with more than 500,000 employees. We will use the `company` namespace to identify these companies and filter them based on their employee count. Finally, we'll sort the results by the number of employees in descending order.\n\nHere's how you can formulate the SPARQL query:\n\n```sparql\nPREFIX company: <http://",
                "extracted_query": "SELECT ?website WHERE {\n  ?company a company:Company .\n  ?company employeeCount > 500000 .\n  FILTER(?employeeCount gt 1)\n}",
                "generation_time": 32.06521654129028
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?companyWebsite WHERE {\n    ?company wdt:P31 wd:Q24896; # Q24896 is the entity representing \"companies\"\n    rdfs:label ?companyLabel;\n    wikibase:wikiPageWikiText ?pageContent.\n    FILTER(CONTAINS(str(?pageContent), \"more than 500000 employees\")).\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}\n```",
                "extracted_query": "SELECT ?companyWebsite WHERE {\n    ?company wdt:P31 wd:Q24896; # Q24896 is the entity representing \"companies\"\n    rdfs:label ?companyLabel;\n    wikibase:wikiPageWikiText ?pageContent.\n    FILTER(CONTAINS(str(?pageContent), \"more than 500000 employees\")).\n    SERVICE wikibase:label { bd:serviceParam wikibase:language \"[AUTO_LANGUAGE],en\". }\n}",
                "generation_time": 24.97563409805298
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?website\nWHERE {\n  GRAPH <http://example.org/company> {\n    ?company rdf:type <http://example.org/company> .\n    ?company rdfs:label ?label .\n    ?company owl:sameAs ?url .\n    FILTER (COUNT(?employee) > 500000)\n  }\n}\n```",
                "extracted_query": "SELECT ?website\nWHERE {\n  GRAPH <http://example.org/company> {\n    ?company rdf:type <http://example.org/company> .\n    ?company rdfs:label ?label .\n    ?company owl:sameAs ?url .\n    FILTER (COUNT(?employee) > 500000)\n  }\n}",
                "generation_time": 16.503753185272217
            }
        ]
    },
    {
        "question_id": "179",
        "question": "What were the names of the three ships by Columbus?",
        "reference_query": "PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type dbo:Ship ; dct:subject dbc:Christopher_Columbus ; dct:subject dbc:Exploration_ships }",
        "validated": true,
        "validated_by": "mistralai/Mistral-7B-Instruct-v0.3",
        "queries": [
            {
                "level": 1,
                "model_name": "Qwen/Qwen2.5-0.5B-Instruct",
                "raw_query": "The result should be in the format:\n```\nSELECT ?shipName\nWHERE {\n  ?ship a ship .\n  FILTER(?ship == \"Columbus\")\n}\nLIMIT 3\n``` To retrieve the names of the three ships that belong to Christopher Columbus, you can use the following SPARQL query:\n\n```sparql\nPREFIX ship: <http://www.w3.org/ns/sparql-results#>\n\nSELECT DISTINCT ?shipName\nWHERE {\n  ?ship a ship .\n  FILTER(?ship == \"Columbus\")\n}\nLIMIT 3\n```\n\nThis query will return the names of the three ships associated with Christopher Columbus. The `FILTER` clause ensures that only ships named \"Columbus\" are included in the results",
                "extracted_query": "PREFIX ship: <http://www.w3.org/ns/sparql-results#>\n\nSELECT DISTINCT ?shipName\nWHERE {\n  ?ship a ship .\n  FILTER(?ship == \"Columbus\")\n}\nLIMIT 3",
                "generation_time": 32.09456133842468
            },
            {
                "level": 2,
                "model_name": "Qwen/Qwen2.5-1.5B-Instruct",
                "raw_query": "```sparql\nSELECT ?shipName \nWHERE {\n  ?ship a ship;\n       captain \"Columbus\";\n       name ?shipName .\n}\nLIMIT 3```",
                "extracted_query": "SELECT ?shipName \nWHERE {\n  ?ship a ship;\n       captain \"Columbus\";\n       name ?shipName .\n}\nLIMIT 3",
                "generation_time": 8.272394180297852
            },
            {
                "level": 3,
                "model_name": "google/gemma-2-2b-it",
                "raw_query": "```sparql\nSELECT ?shipName\nWHERE {\n  ?shipName a :Ship .\n  ?shipName :Columbus .\n}\nLIMIT 3\n```",
                "extracted_query": "SELECT ?shipName\nWHERE {\n  ?shipName a :Ship .\n  ?shipName :Columbus .\n}\nLIMIT 3",
                "generation_time": 7.251262187957764
            }
        ]
    }
]