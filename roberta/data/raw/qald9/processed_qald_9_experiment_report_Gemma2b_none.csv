question_id,question,model,quantization,generated_query,reference_query,time_taken,parsed_generated_query,is_syntax_valid,is_execution_valid,bleu_score,macro_f1
99,What is the time zone of Salt Lake City?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the time zone of Salt Lake City?
Answer:  The time zone of Salt Lake City is Mountain Standard Time (MST).

```sparql
SELECT ?timeZone
WHERE {
  ?city a dbo:City .
  ?city dbo:timeZone ?timeZone .
  FILTER(?city = ""Salt Lake City"")
}
```

**Explanation:**

1. **`SELECT ?timeZone`**: This line specifies that we want to retrieve the value of the variable `?timeZone`.
2. **`WHERE { ... }`**: This block defines the conditions for the query to return results.
3. **`?city a dbo:City`**: This line indicates that we are looking for a ""city"" entity that is an instance of the ""dbo:City"" class.
4. **`?city dbo:timeZone ?timeZone`**: This line specifies that we are looking for a ""city"" entity that has a property ""dbo:timeZone"" with a value that we want to retrieve.
5. **`FILTER(?city = ""Salt Lake City"")`**: This line filters the results to only include cities with the name ""Salt Lake City"".


Let me know if you have any other questions. 
",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Salt_Lake_City <http://dbpedia.org/ontology/timeZone> ?uri },47.80431890487671,"SELECT ?timeZone
WHERE {
  ?city a dbo:City .
  ?city dbo:timeZone ?timeZone .
  FILTER(?city = ""Salt Lake City"")
}",False,True,5.0437883815744365e-155,0.14285714285714288
98,Who killed Caesar?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who killed Caesar?
```sparql
SELECT DISTINCT ?person ?relationship ?time
WHERE {
  ?person a dbo:Person .
  ?person dbo:killed ?time .
  FILTER (?time = ""44 BC"")
  FILTER (?relationship = ""killed"")
}
```
",PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> SELECT DISTINCT ?uri WHERE { ?uri dct:subject dbc:Assassins_of_Julius_Caesar },11.249277591705322,"SELECT DISTINCT ?person ?relationship ?time
WHERE {
  ?person a dbo:Person .
  ?person dbo:killed ?time .
  FILTER (?time = ""44 BC"")
  FILTER (?relationship = ""killed"")
}",False,True,5.359624986283916e-155,0.15625
86,What is the highest mountain in Germany?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the highest mountain in Germany?
Answer: The highest mountain in Germany is the Zugspitze.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?mountain
WHERE {
  ?mountain dbo:name ""Zugspitze"" .
}
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia Ontology (dbo) and RDF Schema (rdfs). This makes it easier to refer to specific properties and classes.
2. **SELECT Clause:** We specify that we want to retrieve a single value, which we will call ?mountain.
3. **WHERE Clause:** This clause contains the query logic.
   - **?mountain dbo:name ""Zugspitze""**: This line searches for a resource with the property dbo:name and whose value is ""Zugspitze"". 

This query will return a single result, which is the name of the highest mountain in Germany. 
",PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri rdf:type onto:Mountain ; onto:elevation ?elevation ; onto:locatedInArea <http://dbpedia.org/resource/Germany> } ORDER BY DESC(?elevation) LIMIT 1,42.5012149810791,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?mountain
WHERE {
  ?mountain dbo:name ""Zugspitze"" .
}",True,True,1.619003680903809e-78,0.21621621621621623
84,Which American presidents were in office during the Vietnam War?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which American presidents were in office during the Vietnam War?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?president ?startYear ?endYear
WHERE {
  ?president dbo:inOffice ?startYear .
  FILTER (?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?startYear = ""1964-01-01"" || ?start",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> SELECT ?uri WHERE { ?uri dct:subject dbc:Presidents_of_the_United_States . res:Vietnam_War dbo:commander ?uri },77.85939836502075,,False,False,,
81,Butch Otter is the governor of which U.S. state?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Butch Otter is the governor of which U.S. state?
Answer:  The answer is likely to be a U.S. state that Butch Otter has served as governor of. 

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?state
WHERE {
  ?person dbo:name ""Butch Otter"" .
  ?person dbo:governor ?state .
}
```
",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/class/yago/WikicatStatesOfTheUnitedStates> ; <http://dbpedia.org/property/governor> <http://dbpedia.org/resource/Butch_Otter> },18.23591160774231,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?state
WHERE {
  ?person dbo:name ""Butch Otter"" .
  ?person dbo:governor ?state .
}",True,True,4.777946850498661e-155,0.14814814814814814
73,How many gold medals did Michael Phelps win at the 2008 Olympics?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many gold medals did Michael Phelps win at the 2008 Olympics?
Answer: 8

```sparql
SELECT (COUNT(?goldMedal)) AS ?count
WHERE {
  ?athlete a dbo:Person .
  ?athlete dbo:OlympicMedal ?goldMedal .
  FILTER(?goldMedal = ""2008"")
  FILTER(?athlete = ""Michael Phelps"")
}
```

```
SELECT (COUNT(?goldMedal)) AS ?count
WHERE {
  ?athlete a dbo:Person .
  ?athlete dbo:OlympicMedal ?goldMedal .
  FILTER(?goldMedal = ""2008"")
  FILTER(?athlete = ""Michael Phelps"")
}
```

```sparql
SELECT (COUNT(?goldMedal)) AS ?count
WHERE {
  ?athlete a dbo:Person .
  ?athlete dbo:OlympicMedal ?goldMedal .
  FILTER(?goldMedal = ""2008"")
  FILTER(?athlete = ""Michael Phelps"")
}
```

```sparql
SELECT (COUNT(?goldMedal)) AS ?count
WHERE {
  ?athlete a dbo:Person .
  ?athlete dbo:OlympicMedal ?goldMedal .
  FILTER(?goldMedal = ""2008"")
  FILTER(?athlete = ""Michael Phelps"")
}
```

```sparql
SELECT (COUNT(?goldMedal)) AS ?count
WHERE {
  ?athlete a dbo:Person .
  ?athlete dbo:OlympicMedal ?goldMedal .
  FILTER(?goldMedal = ""2008"")
  FILTER(?athlete = ""Michael Phelps"")
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for the DBpedia namespace (`dbo:`) and the specific property we're interested in (`?goldMedal`).
2. **Query:** The query uses a `SELECT` clause to retrieve the count of `?goldMedal` values.
3.","PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT Count(?sub) as ?c WHERE { ?sub dbo:goldMedalist dbr:Michael_Phelps . filter (contains (str(?sub), ""2008"") && contains (str(?sub), ""Olympics"")) }",80.04020833969116,"SELECT (COUNT(?goldMedal)) AS ?count
WHERE {
  ?athlete a dbo:Person .
  ?athlete dbo:OlympicMedal ?goldMedal .
  FILTER(?goldMedal = ""2008"")
  FILTER(?athlete = ""Michael Phelps"")
}

SELECT (COUNT(?goldMedal)) AS ?count
WHERE {
  ?athlete a dbo:Person .
  ?athlete dbo:OlympicMedal ?goldMedal .
  FILTER(?goldMedal = ""2008"")
  FILTER(?athlete = ""Michael Phelps"")
}

SELECT (COUNT(?goldMedal)) AS ?count
WHERE {
  ?athlete a dbo:Person .
  ?athlete dbo:OlympicMedal ?goldMedal .
  FILTER(?goldMedal = ""2008"")
  FILTER(?athlete = ""Michael Phelps"")
}

SELECT (COUNT(?goldMedal)) AS ?count
WHERE {
  ?athlete a dbo:Person .
  ?athlete dbo:OlympicMedal ?goldMedal .
  FILTER(?goldMedal = ""2008"")
  FILTER(?athlete = ""Michael Phelps"")
}",False,False,2.4957986594494052e-155,0.13043478260869565
66,Which artists were born on the same date as Rachel Stevens?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which artists were born on the same date as Rachel Stevens?
Answer:  The query should return a list of artists born on the same date as Rachel Stevens.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:birthDate ?birthDate .
  FILTER (?birthDate = ""1976-03-18"")
  ?artist dbo:name ?name .
  FILTER (?name = ""Rachel Stevens"")
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia Ontology (`dbo:`) and RDF Schema (`rdfs:`) to make the query easier to read and understand.
2. **SELECT DISTINCT ?artist:** This line specifies that we want to retrieve a unique list of artists.
3. **WHERE clause:** This is where the query logic resides.
   - **?artist dbo:birthDate ?birthDate:** This line retrieves the birth date of each artist using the `dbo:birthDate` property.
   - **FILTER (?birthDate = ""1976-03-18""):** This filters the results to only include artists whose birth date is ""1976-03-18"".
   - **?artist dbo:name ?name:** This line retrieves the name of each artist using the `dbo:name` property.
   - **FILTER (?name = ""Rachel Stevens""):** This filters the results to only include artists whose name is ""Rachel Stevens"".

This query effectively retrieves the names of all artists born on the same date as Rachel Stevens. 
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri a dbo:Artist . dbr:Rachel_Stevens dbo:birthDate ?birthdate . ?uri dbo:birthDate ?birthdate },68.18081998825073,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:birthDate ?birthDate .
  FILTER (?birthDate = ""1976-03-18"")
  ?artist dbo:name ?name .
  FILTER (?name = ""Rachel Stevens"")
}",True,True,0.12045422179467957,0.25
64,What is the profession of Frank Herbert?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the profession of Frank Herbert?
Answer:  Author

```sparql
SELECT ?profession
WHERE {
  ?author a dbo:Person .
  ?author dbo:profession ?profession .
  FILTER(?profession = ""Author"")
}
```
",PREFIX dbpedia2: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:Frank_Herbert dbpedia2:occupation ?string },9.579923391342165,"SELECT ?profession
WHERE {
  ?author a dbo:Person .
  ?author dbo:profession ?profession .
  FILTER(?profession = ""Author"")
}",False,True,5.359624986283916e-155,0.15384615384615385
6,Are Taiko some kind of Japanese musical instrument?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Are Taiko some kind of Japanese musical instrument?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?instrument WHERE {
  ?instrument dbo:hasPart ?part .
  FILTER regex(?part, ""Taiko"")
  FILTER regex(?part, ""Japanese musical instrument"")
}
```
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia and our example ontology. This makes the query easier to read and understand.
2. **SELECT:** We specify that we want to retrieve the value of the variable `?instrument`.
3. **WHERE:** This clause defines the conditions for the query to return results.
4. **?instrument dbo:hasPart ?part:** This line indicates that we are looking for statements where the `?instrument` is linked to a part using the `dbo:hasPart` property.
5. **FILTER regex(?part, ""Taiko"")**: This line filters the results to include only statements where the `?part` is a string containing ""Taiko"".
6. **FILTER regex(?part, ""Japanese musical instrument"")**: This line filters the results to include only statements where the `?part` is a string containing ""Japanese musical instrument"".


This query will return a list of all the instruments that have ""Taiko"" or ""Japanese musical instrument"" as a part. 


",ASK WHERE { <http://dbpedia.org/resource/Taiko> a <http://dbpedia.org/class/yago/WikicatJapaneseMusicalInstruments> },56.12027263641357,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?instrument WHERE {
  ?instrument dbo:hasPart ?part .
  FILTER regex(?part, ""Taiko"")
  FILTER regex(?part, ""Japanese musical instrument"")
}",True,True,4.13918559701879e-155,0.11538461538461539
56,How many seats does the home stadium of FC Porto have?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many seats does the home stadium of FC Porto have?
Answer: The query should return the number of seats in the home stadium of FC Porto.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?numberOfSeats
WHERE {
  ?club dbo:homeStadium ?stadium .
  ?stadium dbo:numberOfSeats ?numberOfSeats .
  FILTER (?club = ""FC Porto"")
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia Ontology (`dbo:`) and RDF (`rdf:`) to make the query easier to read and understand.
2. **SELECT Clause:** We specify that we want to retrieve the value of the variable `?numberOfSeats`.
3. **WHERE Clause:** This clause contains the main logic of the query:
   - **?club dbo:homeStadium ?stadium:** This line retrieves the home stadium of the club using the `dbo:homeStadium` property.
   - **?stadium dbo:numberOfSeats ?numberOfSeats:** This line retrieves the number of seats for the stadium using the `dbo:numberOfSeats` property.
   - **FILTER (?club = ""FC Porto""):** This line filters the results to only include the information about FC Porto's home stadium.

This query effectively retrieves the number of seats from the DBpedia Knowledge Graph for the home stadium of FC Porto. 
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX db: <http://dbpedia.org/> SELECT ?capacity WHERE { { dbr:FC_Porto dbo:ground ?ground . ?ground dbo:capacity ?capacity } UNION { dbr:FC_Porto dbo:ground ?ground . ?ground dbp:capacity ?capacity } },59.47815823554993,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?numberOfSeats
WHERE {
  ?club dbo:homeStadium ?stadium .
  ?stadium dbo:numberOfSeats ?numberOfSeats .
  FILTER (?club = ""FC Porto"")
}",True,True,0.08058372020664,0.22222222222222224
49,Which frequent flyer program has the most airlines?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which frequent flyer program has the most airlines?
Answer:  The query should return the name of the frequent flyer program with the most airlines.


```sparql
PREFIX dbp: <http://dbpedia.org/ontology/>
SELECT ?program
WHERE {
  ?program dbp:name ?name .
  FILTER (regex(?name, ""Frequent Flyer Program"") )
  FILTER (dbp:airlineCount(?program) > 10)
}
```



**Explanation:**

1. **Prefix Definition:**
   - `PREFIX dbp: <http://dbpedia.org/ontology/>`: This line defines the prefix ""dbp"" to refer to the DBpedia Ontology.

2. **SELECT Clause:**
   - `SELECT ?program`: This line specifies that we want to retrieve the value of the variable `?program`, which will represent the name of the frequent flyer program.

3. **WHERE Clause:**
   - `?program dbp:name ?name .`: This line retrieves the name of the frequent flyer program using the `dbp:name` property.
   - `FILTER (regex(?name, ""Frequent Flyer Program"") )`: This line filters the results to include only those programs whose names contain the string ""Frequent Flyer Program"".
   - `FILTER (dbp:airlineCount(?program) > 10) `: This line filters the results to include only those programs that have more than 10 airlines associated with them.


Let me know if you have any other questions. 
",SELECT ?uri WHERE { ?airline <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline> . ?airline <http://dbpedia.org/property/frequentFlyer> ?uri. } GROUP BY ?uri ORDER BY DESC(COUNT(DISTINCT ?airline)) OFFSET 0 LIMIT 1,61.50409364700317,"PREFIX dbp: <http://dbpedia.org/ontology/>
SELECT ?program
WHERE {
  ?program dbp:name ?name .
  FILTER (regex(?name, ""Frequent Flyer Program"") )
  FILTER (dbp:airlineCount(?program) > 10)
}",True,True,4.597413477391656e-155,0.125
44,Which European countries have a constitutional monarchy?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which European countries have a constitutional monarchy?
```sparql
SELECT DISTINCT ?country
WHERE {
  ?country a dbo:ConstitutionalMonarchy .
}
```
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dct:subject dbc:Countries_in_Europe ; dbo:governmentType dbr:Constitutional_monarchy },5.803233861923218,"SELECT DISTINCT ?country
WHERE {
  ?country a dbo:ConstitutionalMonarchy .
}",False,True,1.866567757550146e-155,0.14285714285714285
42,Which countries have places with more than two caves?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which countries have places with more than two caves?
```sparql
SELECT DISTINCT ?country
WHERE {
  ?country a dbo:Country .
  ?country dbo:hasPlace ?place .
  ?place dbo:hasCave ?cave .
  FILTER (COUNT(?cave) > 2)
}
```
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 ),11.960802555084229,"SELECT DISTINCT ?country
WHERE {
  ?country a dbo:Country .
  ?country dbo:hasPlace ?place .
  ?place dbo:hasCave ?cave .
  FILTER (COUNT(?cave) > 2)
}",False,False,4.402140744990259e-155,0.20930232558139533
4,"Which airports are located in California, USA?",google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which airports are located in California, USA?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?airport WHERE {
  ?airport dbo:location ?location .
  FILTER (regex(?location, ""California, USA""))
}
```
",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Airport> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/California> } UNION { ?uri <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/California> } UNION { ?uri <http://dbpedia.org/ontology/city> ?city . ?city <http://dbpedia.org/ontology/isPartOf> <http://dbpedia.org/resource/California> } UNION { ?uri <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/California> } },11.904151916503906,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?airport WHERE {
  ?airport dbo:location ?location .
  FILTER (regex(?location, ""California, USA""))
}",True,True,2.119966103588302e-155,0.15151515151515152
37,What are the nicknames of San Francisco?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the nicknames of San Francisco?
Answer:  
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
SELECT ?nickname
WHERE {
  ?city dbpedia:name ""San Francisco"" .
  ?city dbpedia:nickname ?nickname .
}
```
",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX foaf:<http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?string WHERE { res:San_Francisco foaf:nick ?string },11.42668914794922,"PREFIX dbpedia: <http://dbpedia.org/ontology/>
SELECT ?nickname
WHERE {
  ?city dbpedia:name ""San Francisco"" .
  ?city dbpedia:nickname ?nickname .
}",True,True,5.4925306713204074e-155,0.17857142857142858
32,What is Angela Merkel’s birth name?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is Angela Merkel’s birth name?
Answer: Angela Merkel’s birth name is **Ursula Angela Merkel**.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?birthName
WHERE {
  ?person dbo:name ?birthName .
  FILTER regex(?birthName, ""Ursula Angela Merkel"")
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia Ontology (dbo) and RDF Schema (rdfs). This makes it easier to refer to specific properties and classes.
2. **SELECT Clause:** We specify that we want to retrieve the value of the property `?birthName`.
3. **WHERE Clause:** This clause contains the search criteria:
   - `?person dbo:name ?birthName`: This line retrieves the birth name of a person by matching the `dbo:name` property with the `?birthName` variable.
   - `FILTER regex(?birthName, ""Ursula Angela Merkel"")`: This line filters the results to only include those where the `?birthName` matches the string ""Ursula Angela Merkel"". 


Let me know if you have any other questions. 
",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?string WHERE { res:Angela_Merkel dbp:birthName ?string },51.17953824996948,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?birthName
WHERE {
  ?person dbo:name ?birthName .
  FILTER regex(?birthName, ""Ursula Angela Merkel"")
}",True,True,5.287667392736108e-155,0.16129032258064516
31,Who is the mayor of Berlin?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the mayor of Berlin?
```sparql
SELECT ?person
WHERE {
  ?person dbpedia:city ""Berlin"" .
  ?person dbpedia:jobTitle ""Mayor"" .
}
```
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Berlin dbp:leader ?uri },8.333993434906006,"SELECT ?person
WHERE {
  ?person dbpedia:city ""Berlin"" .
  ?person dbpedia:jobTitle ""Mayor"" .
}",False,False,5.117896846873718e-155,0.17391304347826086
29,Which countries in the European Union adopted the Euro?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which countries in the European Union adopted the Euro?
```sparql
SELECT DISTINCT ?country
WHERE {
  ?country a dbo:Country .
  ?country dbo:currency ?currency .
  FILTER (?currency = ""EUR"") .
  FILTER (STR(?country) = ""EU"") .
}
```
","SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Euro> } UNION { ?uri <http://dbpedia.org/property/currencyCode> ""EUR""@en } }",11.91821312904358,"SELECT DISTINCT ?country
WHERE {
  ?country a dbo:Country .
  ?country dbo:currency ?currency .
  FILTER (?currency = ""EUR"") .
  FILTER (STR(?country) = ""EU"") .
}",False,True,5.72773290480137e-155,0.20000000000000004
23,Which software has been published by Mean Hamster Software?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which software has been published by Mean Hamster Software?
Answer:  The software published by Mean Hamster Software is **[Software Name]**

**Query:**
```sparql
SELECT ?softwareName
WHERE {
  ?software  dbo:publishedBy ?publisher .
  FILTER regex(?publisher, ""Mean Hamster Software"")
  ?software dbo:name ?softwareName .
}
LIMIT 1
```

**Explanation:**

1. **`SELECT ?softwareName`**: This line specifies that we want to retrieve the value of the variable `?softwareName`.
2. **`WHERE { ... }`**: This block defines the conditions for the query to return results.
3. **`?software dbo:publishedBy ?publisher`**: This line retrieves the `dbo:publishedBy` property of the `?software` resource and associates it with the `?publisher` resource.
4. **`FILTER regex(?publisher, ""Mean Hamster Software"")`**: This line filters the results to only include resources where the `?publisher` property contains the string ""Mean Hamster Software"".
5. **`?software dbo:name ?softwareName`**: This line retrieves the `dbo:name` property of the `?software` resource and associates it with the `?softwareName` variable.
6. **`LIMIT 1`**: This line limits the results to only the first matching resource.


","PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> PREFIX prop: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Software { ?uri prop:publisher ""Mean Hamster Software""@en } UNION { ?uri onto:publisher res:Mean_Hamster_Software } }",55.145734548568726,"SELECT ?softwareName
WHERE {
  ?software  dbo:publishedBy ?publisher .
  FILTER regex(?publisher, ""Mean Hamster Software"")
  ?software dbo:name ?softwareName .
}
LIMIT 1",False,True,2.687641376318485e-155,0.13953488372093026
68,Which country was Bill Gates born in?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which country was Bill Gates born in?
```sparql
SELECT ?country
WHERE {
  ?person a dbo:Person .
  ?person dbo:born ?birthPlace .
  ?birthPlace dbo:country ?country .
  FILTER (?person = ""Bill Gates"")
}
```
```
```",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?country WHERE { { dbr:Bill_Gates dbo:birthPlace ?birthPlace . ?birthPlace dbo:country ?country } UNION { dbr:Bill_Gates dbo:birthPlace ?birthPlace . ?birthPlace dbo:isPartOf ?place . ?place dbo:country ?country } },12.183867692947388,"SELECT ?country
WHERE {
  ?person a dbo:Person .
  ?person dbo:born ?birthPlace .
  ?birthPlace dbo:country ?country .
  FILTER (?person = ""Bill Gates"")
}",False,True,0.10090826073958994,0.19999999999999998
22,How many grand-children did Jacques Cousteau have?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many grand-children did Jacques Cousteau have?
Answer: 
```sparql
SELECT (COUNT(?grandchild) AS ?count)
WHERE {
  ?person a dbo:Person .
  ?person dbo:grandchild ?grandchild .
  FILTER(?person = ""Jacques Cousteau"")
}
```
",SELECT COUNT(DISTINCT ?y AS ?y) WHERE { <http://dbpedia.org/resource/Jacques_Cousteau> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/ontology/child> ?y . },11.57936143875122,"SELECT (COUNT(?grandchild) AS ?count)
WHERE {
  ?person a dbo:Person .
  ?person dbo:grandchild ?grandchild .
  FILTER(?person = ""Jacques Cousteau"")
}",False,True,5.642092463903971e-155,0.20689655172413793
214,Give me all professional skateboarders from Sweden.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all professional skateboarders from Sweden.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?skater ?name
WHERE {
  ?skater dbo:profession ?profession .
  FILTER (regex(?profession, ""skateboarding"", ""i""))
  FILTER (CONTAINS(?skater, ""Sweden""))
}
```
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia and our example ontology. This makes the query easier to read and understand.
2. **SELECT Clause:** We specify that we want to retrieve the values of the `?skater` and `?name` variables.
3. **WHERE Clause:** This is the core of the query. It contains the conditions that must be met for a result to be returned.
    * **?skater dbo:profession ?profession:** This line retrieves the `?skater` and the value of the `?profession` property.
    * **FILTER (regex(?profession, ""skateboarding"", ""i"")):** This filters the results to only include professions that contain the word ""skateboarding"" (case-insensitive).
    * **FILTER (CONTAINS(?skater, ""Sweden"")):** This further filters the results to only include skaters whose name contains the word ""Sweden"".


This query will return a list of professional skateboarders from Sweden. 


",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation dbr:Skateboarder { ?uri dbo:birthPlace dbr:Sweden } UNION { ?uri dbo:birthPlace ?place . ?place dbo:country dbr:Sweden } },58.33139991760254,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?skater ?name
WHERE {
  ?skater dbo:profession ?profession .
  FILTER (regex(?profession, ""skateboarding"", ""i""))
  FILTER (CONTAINS(?skater, ""Sweden""))
}",True,False,0.08783335753897117,0.1951219512195122
210,Which monarchs of the United Kingdom were married to a German?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which monarchs of the United Kingdom were married to a German?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?monarch ?spouse ?spouseNationality
WHERE {
  ?monarch dbo:marriedTo ?spouse .
  FILTER (?spouse rdfs:label = ""German"")
}
```
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatMonarchsOfTheUnitedKingdom ; dbo:spouse ?spouse . ?spouse dbo:birthPlace res:Germany },17.078634023666382,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?monarch ?spouse ?spouseNationality
WHERE {
  ?monarch dbo:marriedTo ?spouse .
  FILTER (?spouse rdfs:label = ""German"")
}",False,False,0.12044751064842082,0.21428571428571427
199,Give me all Argentine films.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all Argentine films.
```sparql
SELECT DISTINCT ?film
WHERE {
  ?film rdf:type <http://dbpedia.org/ontology/Film> .
  FILTER lang(?film) = ""es"" .
  FILTER lang(?film) = ""ar"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { { ?uri rdf:type yago:ArgentineFilms } UNION { ?uri rdf:type dbo:Film { ?uri dbo:country res:Argentina } UNION { ?uri dbp:country ""Argentina""@en } } }",12.112708806991575,"SELECT DISTINCT ?film
WHERE {
  ?film rdf:type <http://dbpedia.org/ontology/Film> .
  FILTER lang(?film) = ""es"" .
  FILTER lang(?film) = ""ar"" .
}",False,False,1.9910537022348236e-155,0.15384615384615383
203,How did Michael Jackson die?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How did Michael Jackson die?
```sparql
SELECT ?deathCause
WHERE {
  ?subject a dbo:Person .
  ?subject dbo:died ?deathDate .
  ?deathDate dbo:cause ?deathCause .
}
```
```
```",SELECT DISTINCT ?s WHERE { <http://dbpedia.org/resource/Michael_Jackson> <http://dbpedia.org/property/deathCause> ?s },10.45052433013916,"SELECT ?deathCause
WHERE {
  ?subject a dbo:Person .
  ?subject dbo:died ?deathDate .
  ?deathDate dbo:cause ?deathCause .
}",False,True,5.1945147945938015e-155,0.2
197,Which U.S. state has been admitted latest?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which U.S. state has been admitted latest?
Answer: The latest admitted U.S. state is **Hawaii**.


```sparql
SELECT ?state
WHERE {
  ?state a dbo:State .
  ?state dbo:admissionDate ?admissionDate .
  FILTER (?admissionDate > '2019-01-01')
}
LIMIT 1
```



**Explanation:**

1. **`SELECT ?state`**: This line specifies that we want to retrieve the value of the variable `?state`, which will represent the name of the U.S. state.
2. **`WHERE { ... }`**: This block defines the conditions for the query to return results.
3. **`?state a dbo:State`**: This line indicates that we are looking for a resource that has the property `dbo:State` associated with it.
4. **`?state dbo:admissionDate ?admissionDate`**: This line specifies that we are looking for a resource that has a property `dbo:admissionDate` associated with it.
5. **`FILTER (?admissionDate > '2019-01-01')`**: This line filters the results to only include resources where the `?admissionDate` is later than '2019-01-01'.
6. **`LIMIT 1`**: This line limits the results to only the first matching resource, which will be the latest admitted U.S. state.


This query retrieves the latest admitted U.S. state by filtering for resources with a `dbo:admissionDate` after '2019-01-01'. 
",PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> SELECT DISTINCT ?uri WHERE { ?uri dct:subject dbc:States_of_the_United_States ; <http://dbpedia.org/property/admittancedate> ?x } ORDER BY DESC(?x) LIMIT 1,65.34950375556946,"SELECT ?state
WHERE {
  ?state a dbo:State .
  ?state dbo:admissionDate ?admissionDate .
  FILTER (?admissionDate > '2019-01-01')
}
LIMIT 1",False,True,5.2303479752959395e-155,0.16216216216216214
196,Which classes does the Millepede belong to?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which classes does the Millepede belong to?
Answer:  
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT DISTINCT ?class
WHERE {
  ?s dbo:is_a ?class .
  FILTER(?s = ""Millepede"")
}
```
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for the DBpedia Ontology (dbo) and RDF (rdf) namespaces. This makes it easier to refer to specific properties and classes.
2. **SELECT DISTINCT ?class:** This line specifies that we want to retrieve a unique list of class names.
3. **WHERE clause:** This is where the query logic resides.
   - **?s dbo:is_a ?class:** This line uses the `dbo:is_a` property to find all classes that the subject (represented by `?s`) belongs to.
   - **FILTER(?s = ""Millepede""):** This filter ensures that we only retrieve classes where the subject is ""Millepede"".


Let me know if you have any other questions. 
",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?String WHERE { res:Millipede dbp:taxon ?String },48.645323514938354,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT DISTINCT ?class
WHERE {
  ?s dbo:is_a ?class .
  FILTER(?s = ""Millepede"")
}",True,True,6.709616501577743e-155,0.20000000000000004
188,Give me the homepage of Forbes.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me the homepage of Forbes.
Answer: 
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?homepage
WHERE {
  ?s dbo:homepage ?homepage .
  FILTER regex(?homepage, ""forbes\.com"")
}
```
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia Ontology (dbo) and FOAF (for representing social and organizational entities).
2. **SELECT Clause:** We specify that we want to retrieve the value of the variable `?homepage`.
3. **WHERE Clause:**
   - **?s dbo:homepage ?homepage:** This line retrieves the homepage of any entity (`?s`) and stores it in the variable `?homepage`.
   - **FILTER regex(?homepage, ""forbes\.com""):** This line filters the results to only include homepages that contain ""forbes.com"" in their URL.

This query effectively retrieves the homepage of Forbes by matching the homepage property with the ""forbes.com"" pattern. 


",PREFIX res: <http://dbpedia.org/resource/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?string WHERE { res:Forbes foaf:homepage ?string },44.31169867515564,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
SELECT ?homepage
WHERE {
  ?s dbo:homepage ?homepage .
  FILTER regex(?homepage, ""forbes\.com"")
}",False,False,0.17181529671327242,0.2413793103448276
187,Who is the husband of Amanda Palmer?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the husband of Amanda Palmer?
Answer:  The husband of Amanda Palmer is **Danny Carey**.


```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
SELECT ?person ?spouse
WHERE {
  ?person dbpedia:spouse ?spouse .
  FILTER(?spouse = ""Danny Carey"")
}
```



**Explanation:**

1. **Prefix Definition:**
   - `PREFIX dbpedia: <http://dbpedia.org/ontology/>`: This line defines a prefix for the DBpedia ontology, making it easier to reference its properties.

2. **SELECT Clause:**
   - `SELECT ?person ?spouse`: This specifies that we want to retrieve two variables: `?person` (representing the person) and `?spouse` (representing their spouse).

3. **WHERE Clause:**
   - `?person dbpedia:spouse ?spouse .`: This line matches any triples where `?person` is the subject and `dbpedia:spouse` is the predicate, connecting them to a `?spouse` object.
   - `FILTER(?spouse = ""Danny Carey"")`: This filters the results to only include those where the `?spouse` variable is equal to ""Danny Carey"".


This query effectively searches the DBpedia Knowledge Graph for any individuals named ""Amanda Palmer"" and their spouses, then filters the results to find the husband, ""Danny Carey"". 
",SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Amanda_Palmer> },54.06714749336243,"PREFIX dbpedia: <http://dbpedia.org/ontology/>
SELECT ?person ?spouse
WHERE {
  ?person dbpedia:spouse ?spouse .
  FILTER(?spouse = ""Danny Carey"")
}",True,True,5.1945147945938015e-155,0.1739130434782609
176,Who painted The Storm on the Sea of Galilee?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who painted The Storm on the Sea of Galilee?
Answer:  The Storm on the Sea of Galilee is a painting by **[Artist Name]**

**Query:**
```sparql
SELECT ?artist
WHERE {
  ?artist a dbo:Painting .
  ?painting dbo:title ""The Storm on the Sea of Galilee"" .
  ?painting dbo:artist ?artist .
}
```

**Explanation:**

1. **`SELECT ?artist`**: This line specifies that we want to retrieve the value of the variable `?artist`, which will represent the name of the artist.
2. **`WHERE { ... }`**: This block defines the conditions for the query to return results.
3. **`?artist a dbo:Painting`**: This line indicates that we are looking for an entity that is a member of the `dbo:Painting` class.
4. **`?painting dbo:title ""The Storm on the Sea of Galilee""`**: This line specifies that the `?painting` variable should have the property `dbo:title` with the value ""The Storm on the Sea of Galilee"".
5. **`?painting dbo:artist ?artist`**: This line specifies that the `?painting` variable should have the property `dbo:artist` with a value that is the same as the `?artist` variable.


This query will return a single result, which is the name of the artist who painted ""The Storm on the Sea of Galilee"". 
",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:The_Storm_on_the_Sea_of_Galilee dbo:author ?uri },55.8380982875824,"SELECT ?artist
WHERE {
  ?artist a dbo:Painting .
  ?painting dbo:title ""The Storm on the Sea of Galilee"" .
  ?painting dbo:artist ?artist .
}",False,True,4.447844384793538e-155,0.12903225806451615
62,What is the highest place of Karakoram?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the highest place of Karakoram?
Answer: The highest place of Karakoram is **Mount Everest**.


```sparql
SELECT ?place
WHERE {
  ?place a dbo:Mountain .
  ?place dbo:highestPoint ?highestPoint .
  ?highestPoint dbo:name ?highestPointName .
  FILTER(?highestPointName = ""Mount Everest"")
}
```



**Explanation:**

1. **`SELECT ?place`**: This line specifies that we want to retrieve the value of the variable `?place`, which will represent the name of the highest place.
2. **`WHERE { ... }`**: This block defines the conditions for the query to return results.
3. **`?place a dbo:Mountain`**: This line indicates that the variable `?place` should be a member of the `dbo:Mountain` class.
4. **`?place dbo:highestPoint ?highestPoint`**: This line specifies that the variable `?place` should have a property `dbo:highestPoint` with a value `?highestPoint`.
5. **`?highestPoint dbo:name ?highestPointName`**: This line specifies that the variable `?highestPoint` should have a property `dbo:name` with a value `?highestPointName`.
6. **`FILTER(?highestPointName = ""Mount Everest"")`**: This line filters the results to only include the highest point that has the name ""Mount Everest"".


This query retrieves the name of the highest place in the Karakoram mountain range. 
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Karakoram dbp:highest ?uri },61.38931393623352,"SELECT ?place
WHERE {
  ?place a dbo:Mountain .
  ?place dbo:highestPoint ?highestPoint .
  ?highestPoint dbo:name ?highestPointName .
  FILTER(?highestPointName = ""Mount Everest"")
}",False,True,4.65988169467104e-155,0.13793103448275862
173,When did Finland join the EU?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When did Finland join the EU?
Answer: 2004

```sparql
SELECT ?date
WHERE {
  ?country a dbo:Country .
  ?country dbo:joinedEU ?date .
  FILTER (?country = ""Finland"")
}
```

**Explanation:**

1. **`SELECT ?date`**: This line specifies that we want to retrieve a value for the variable `?date`.
2. **`WHERE { ... }`**: This block defines the conditions for the query.
3. **`?country a dbo:Country`**: This line identifies the subject of the query as a ""country"" entity.
4. **`?country dbo:joinedEU ?date`**: This line specifies that the subject has a property called ""joinedEU"" which is linked to a date.
5. **`FILTER (?country = ""Finland"")`**: This line filters the results to only include entries where the country is Finland.

This query retrieves the date when Finland joined the EU from the DBpedia Knowledge Graph. 
",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?date WHERE { res:Finland dbp:accessioneudate ?date },40.011741399765015,"SELECT ?date
WHERE {
  ?country a dbo:Country .
  ?country dbo:joinedEU ?date .
  FILTER (?country = ""Finland"")
}",False,True,2.8442409087371782e-78,0.1851851851851852
168,Which actors play in Big Bang Theory?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which actors play in Big Bang Theory?
```sparql
SELECT DISTINCT ?actor ?character
WHERE {
  ?actor a dbo:Person .
  ?actor dbo:appearsIn ?work .
  ?work dbo:title ?workTitle .
  FILTER (?workTitle = ""Big Bang Theory"") .
  ?work dbo:character ?character .
}
```
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia: `dbpedia:` and `dbo:` for the DBpedia and database ontology respectively.
2. **SELECT Clause:** We select the `?actor` and `?character` variables to retrieve the actor's name and the character they play.
3. **WHERE Clause:**
   - **`?actor a dbo:Person`:** This line specifies that we are looking for actors who are represented by the `dbo:Person` class.
   - **`?actor dbo:appearsIn ?work`:** This line specifies that we are looking for actors who have appeared in a work.
   - **`?work dbo:title ?workTitle`:** This line specifies that we are looking for the title of the work.
   - **`FILTER (?workTitle = ""Big Bang Theory"")`:** This line filters the results to only include works with the title ""Big Bang Theory"".
   - **`?work dbo:character ?character`:** This line specifies that we are looking for the character played by the actor.

This query retrieves a list of unique actors who have appeared in the ""Big Bang Theory"" and their corresponding characters. 


",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Big_Bang_Theory> <http://dbpedia.org/ontology/starring> ?uri },64.04386758804321,"SELECT DISTINCT ?actor ?character
WHERE {
  ?actor a dbo:Person .
  ?actor dbo:appearsIn ?work .
  ?work dbo:title ?workTitle .
  FILTER (?workTitle = ""Big Bang Theory"") .
  ?work dbo:character ?character .
}",False,True,4.884188340600192e-155,0.17241379310344826
166,Which computer scientist won an oscar?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which computer scientist won an oscar?
Answer:  The query should return the name of the computer scientist who won an Oscar.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?person
WHERE {
  ?person dbo:wins ?award .
  ?award dbo:category rdfs:label ""Oscar"" .
}
```
",SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/field> <http://dbpedia.org/resource/Computer_science> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Academy_Award> },20.83870506286621,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?person
WHERE {
  ?person dbo:wins ?award .
  ?award dbo:category rdfs:label ""Oscar"" .
}",False,False,4.777946850498661e-155,0.14814814814814814
160,Who wrote Harry Potter?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who wrote Harry Potter?
Answer: J.K. Rowling

```sparql
SELECT ?author
WHERE {
  ?author a dbo:Person .
  ?author dbo:name ?name .
  FILTER regex(?name, ""Harry Potter"") .
}
```
",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Harry_Potter> <http://dbpedia.org/property/author> ?uri },10.650721549987791,"SELECT ?author
WHERE {
  ?author a dbo:Person .
  ?author dbo:name ?name .
  FILTER regex(?name, ""Harry Potter"") .
}",False,True,5.0437883815744365e-155,0.18181818181818182
158,Give me all writers that won the Nobel Prize in literature.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all writers that won the Nobel Prize in literature.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?writer ?award
WHERE {
  ?writer dbo:wins ?award .
  FILTER(?award = ""Nobel Prize in Literature"")
}
```
",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> },15.775264978408812,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?writer ?award
WHERE {
  ?writer dbo:wins ?award .
  FILTER(?award = ""Nobel Prize in Literature"")
}",True,True,4.550160538169341e-155,0.13333333333333333
157,Give me English actors starring in Lovesick.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me English actors starring in Lovesick.
Answer: 
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
SELECT ?actor ?movie
WHERE {
  ?actor dbo:appearsIn ?movie .
  FILTER (?movie = ""Lovesick"")
}
```
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia's ontology (dbo) and RDF Schema (rdfs). This makes it easier to refer to specific properties and classes.
2. **SELECT Clause:** We specify that we want to retrieve the actor's name and the movie title.
3. **WHERE Clause:** This is the core of the query. It contains a pattern matching mechanism.
   - **?actor dbo:appearsIn ?movie:** This line matches any statements where an actor is mentioned and appears in a movie.
   - **FILTER (?movie = ""Lovesick""):** This filters the results to only include movies with the title ""Lovesick"".


This query will return a list of unique actors who have appeared in the movie ""Lovesick"". 


",PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lovesick_(1983_film)> dbo:starring ?uri . ?uri dbo:birthPlace ?city . ?city dbo:country <http://dbpedia.org/resource/United_Kingdom> },52.754815340042114,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
SELECT ?actor ?movie
WHERE {
  ?actor dbo:appearsIn ?movie .
  FILTER (?movie = ""Lovesick"")
}",True,True,2.6625419886703727e-78,0.22857142857142856
155,What is the nick name of Baghdad?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the nick name of Baghdad?
Answer: The nickname of Baghdad is **""The Capital of Mesopotamia""**.


```sparql
SELECT ?nickname
WHERE {
  ?city dbo:name ""Baghdad"" .
  ?city dbo:nickname ?nickname .
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia:
   - `dbpedia:` for DBpedia entities and properties.
   - `dbo:` for the DBpedia ontology.

2. **SELECT Clause:** We specify that we want to retrieve a single variable, `?nickname`, which will hold the nickname.

3. **WHERE Clause:**
   - `?city dbo:name ""Baghdad""`: This line retrieves the DBpedia entity for ""Baghdad"" and its corresponding property ""dbo:name"".
   - `?city dbo:nickname ?nickname`: This line retrieves the DBpedia entity for ""Baghdad"" and its corresponding property ""dbo:nickname"".

**Note:** The query assumes that the DBpedia knowledge graph contains information about the nickname of Baghdad. 


Let me know if you have any other questions. 
",PREFIX dbr: <http://dbpedia.org/resource/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?nm WHERE { dbr:Baghdad foaf:nick ?nm },45.29447340965271,"SELECT ?nickname
WHERE {
  ?city dbo:name ""Baghdad"" .
  ?city dbo:nickname ?nickname .
}",False,True,5.527118757926412e-155,0.1818181818181818
150,In which city was the president of Montenegro born?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which city was the president of Montenegro born?
Answer: The answer is expected to be a city.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/resource/>
SELECT ?city WHERE {
  ?person dbo:birthCity ?city .
  FILTER (lang(?city) = ""en"")
  FILTER (dbp:PersonLabel(?person) = ""Montenegro"")
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia Ontology (`dbo:`) and DBpedia Resource (`dbp:`) to simplify the query.
2. **SELECT Clause:** We specify that we want to retrieve the value of the `?city` variable.
3. **WHERE Clause:** This clause contains the main logic of the query:
   - `?person dbo:birthCity ?city` : This line retrieves the birth city of a person using the `dbo:birthCity` property.
   - `FILTER (lang(?city) = ""en"")`: This filters the results to include only cities with English language.
   - `FILTER (dbp:PersonLabel(?person) = ""Montenegro"")`: This filters the results to include only cities associated with the person labeled as ""Montenegro"".


This query will return a single result, the city where the president of Montenegro was born. 
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/title> dbr:President_of_Montenegro ; dbo:birthPlace ?uri . ?uri dbo:type dbr:Capital_city },54.661855936050415,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/resource/>
SELECT ?city WHERE {
  ?person dbo:birthCity ?city .
  FILTER (lang(?city) = ""en"")
  FILTER (dbp:PersonLabel(?person) = ""Montenegro"")
}",True,True,0.14728212724124626,0.23684210526315788
149,Which U.S. state has the highest population density?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which U.S. state has the highest population density?
Answer: The query should return the name of the U.S. state with the highest population density.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?state
WHERE {
  ?state dbo:populationDensity ?density .
  FILTER (?density > 100)
  FILTER (?state = ""United States"")
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia Ontology (dbo) and RDF (rdf) to make the query easier to read and understand.
2. **SELECT Clause:** We specify that we want to retrieve the value of the variable `?state`, which will represent the name of the state.
3. **WHERE Clause:** This clause contains the main logic of the query:
   - **?state dbo:populationDensity ?density:** This line retrieves the population density of a state using the `dbo:populationDensity` property.
   - **FILTER (?density > 100):** This filter ensures that we only consider states with a population density greater than 100.
   - **FILTER (?state = ""United States""):** This filter ensures that we only consider the population density of the United States.


Let me know if you have any other questions. 
",SELECT ?uri WHERE { ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/ontology/capital> ?capital . ?uri <http://dbpedia.org/property/densityrank> ?density . OPTIONAL {?uri <http://www.w3.org/2000/01/rdf-schema#label> ?string. FILTER (lang(?string) = 'en') } } ORDER BY ASC(?density) LIMIT 1,59.69455027580261,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?state
WHERE {
  ?state dbo:populationDensity ?density .
  FILTER (?density > 100)
  FILTER (?state = ""United States"")
}",True,True,4.5977803308688376e-155,0.17391304347826086
25,What is the longest river in China?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the longest river in China?
```sparql
SELECT ?riverName ?riverLength
WHERE {
  ?riverName a dbo:River .
  ?riverName dbo:length ?riverLength .
  FILTER (?riverLength > 6000)
  FILTER (lang(?riverName) = ""zh"")
  FILTER (CONTAINS(?riverName, ""长江""))
}
```
",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/China> ; <http://dbpedia.org/property/length> ?l } ORDER BY DESC(?l) OFFSET 0 LIMIT 1,15.608453273773192,"SELECT ?riverName ?riverLength
WHERE {
  ?riverName a dbo:River .
  ?riverName dbo:length ?riverLength .
  FILTER (?riverLength > 6000)
  FILTER (lang(?riverName) = ""zh"")
  FILTER (CONTAINS(?riverName, ""长江""))
}",False,True,4.506889438070446e-155,0.12820512820512822
143,What is the area code of Berlin?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the area code of Berlin?
Answer: 
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?areaCode
WHERE {
  ?city dbo:location ?location .
  FILTER (?location = ""Berlin"")
  ?location dbo:areaCode ?areaCode .
}
```
```",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:Berlin dbo:areaCode ?string },13.7108416557312,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?areaCode
WHERE {
  ?city dbo:location ?location .
  FILTER (?location = ""Berlin"")
  ?location dbo:areaCode ?areaCode .
}",True,True,2.972520735696054e-78,0.26666666666666666
140,How many scientists graduated from an Ivy League university?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many scientists graduated from an Ivy League university?
DBpedia: https://dbpedia.org/

```sparql
SELECT (COUNT(?person) AS ?count)
WHERE {
  ?person a dbo:Person .
  ?person dbo:graduatedFrom ?university .
  FILTER(?university = ""Harvard University""^^<http://www.w3.org/2001/XMLSchema#string> || 
  ?university = ""Yale University""^^<http://www.w3.org/2001/XMLSchema#string> || 
  ?university = ""Columbia University""^^<http://www.w3.org/2001/XMLSchema#string> || 
  ?university = ""Princeton University""^^<http://www.w3.org/2001/XMLSchema#string> || 
  ?university = ""Brown University""^^<http://www.w3.org/2001/XMLSchema#string> || 
  ?university = ""Cornell University""^^<http://www.w3.org/2001/XMLSchema#string> || 
  ?university = ""University of Pennsylvania""^^<http://www.w3.org/2001/XMLSchema#string> )
}
```

**Explanation:**

1. **SELECT (COUNT(?person) AS ?count):** This line selects the count of all persons and assigns it to the variable `?count`.
2. **WHERE { ... }:** This clause defines the conditions for the query.
3. **?person a dbo:Person:** This line specifies that the subject of the query should be a person.
4. **?person dbo:graduatedFrom ?university:** This line specifies that the subject should have a property called `dbo:graduatedFrom` and the object should be a university.
5. **FILTER(?university = """,SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Scientist> ; <http://dbpedia.org/ontology/almaMater> ?university . ?university <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/Ivy_League> ; a <http://dbpedia.org/ontology/University> },76.02073884010315,"SELECT (COUNT(?person) AS ?count)
WHERE {
  ?person a dbo:Person .
  ?person dbo:graduatedFrom ?university .
  FILTER(?university = ""Harvard University""^^<http://www.w3.org/2001/XMLSchema#string> || 
  ?university = ""Yale University""^^<http://www.w3.org/2001/XMLSchema#string> || 
  ?university = ""Columbia University""^^<http://www.w3.org/2001/XMLSchema#string> || 
  ?university = ""Princeton University""^^<http://www.w3.org/2001/XMLSchema#string> || 
  ?university = ""Brown University""^^<http://www.w3.org/2001/XMLSchema#string> || 
  ?university = ""Cornell University""^^<http://www.w3.org/2001/XMLSchema#string> || 
  ?university = ""University of Pennsylvania""^^<http://www.w3.org/2001/XMLSchema#string> )
}",False,True,4.323697452106654e-155,0.17777777777777776
139,Which professional surfers were born in Australia?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which professional surfers were born in Australia?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?surfer ?birthPlace
WHERE {
  ?surfer dbo:birthDate ?birth.
  FILTER (?birthLocation = ""Australia"")
  FILTER (dbo:profession = ""Surfer"")
}
```
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia and our example ontology. This makes the query easier to read and understand.
2. **SELECT Clause:** We specify that we want to retrieve the values of the `?surfer` and `?birthPlace` variables.
3. **WHERE Clause:** This is the core of the query. It contains the following steps:
   - **?surfer dbo:birthDate ?birth:** This line retrieves the surfer's name using the `?surfer` variable and their birth date using the `dbo:birthDate` property.
   - **FILTER (?birthLocation = ""Australia""):** This filters the results to only include surfers whose birth location is ""Australia"".
   - **FILTER (dbo:profession = ""Surfer""):** This further filters the results to only include surfers who are professionals.

This query will return a list of unique surfers who were born in Australia and are professional surfers. 


",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { { ?uri dbo:occupation res:Surfer ; dbo:birthPlace res:Australia } UNION { ?uri dbo:occupation res:Surfer ; dbo:birthPlace ?place . ?place dbo:country res:Australia } },54.608351707458496,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?surfer ?birthPlace
WHERE {
  ?surfer dbo:birthDate ?birth.
  FILTER (?birthLocation = ""Australia"")
  FILTER (dbo:profession = ""Surfer"")
}",True,True,0.07485559169179122,0.175
137,Give me all Dutch parties.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all Dutch parties.
```sparql
SELECT DISTINCT ?party
WHERE {
  ?party a dbo:PoliticalParty .
  FILTER lang(?party) = ""nl"" .
}
```
",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Netherlands> },7.972338676452637,"SELECT DISTINCT ?party
WHERE {
  ?party a dbo:PoliticalParty .
  FILTER lang(?party) = ""nl"" .
}",False,False,7.293108985295422e-155,0.24999999999999994
136,How many moons does Mars have?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many moons does Mars have?
Answer: 2

```sparql
SELECT (COUNT(?moon) AS ?count)
WHERE {
  ?moon a dbo:Moon .
  FILTER(?moon = ""Mars"")
}
```

**Explanation:**

1. **`SELECT (COUNT(?moon) AS ?count)`**: This line selects the count of the `?moon` variable and assigns it the alias `?count`.
2. **`WHERE { ... }`**: This clause defines the conditions for the query to be satisfied.
3. **`?moon a dbo:Moon`**: This line specifies that the variable `?moon` should be a resource with the property `dbo:Moon`.
4. **`FILTER(?moon = ""Mars"")`**: This line filters the results to only include resources that have the value ""Mars"" for the property `?moon`.


This query retrieves the number of moons associated with Mars by counting the number of occurrences of the ""Mars"" resource in the DBpedia Knowledge Graph. 
",SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Mars> <http://dbpedia.org/property/satellites> ?n },39.918280601501465,"SELECT (COUNT(?moon) AS ?count)
WHERE {
  ?moon a dbo:Moon .
  FILTER(?moon = ""Mars"")
}",False,True,5.74340400309589e-155,0.18181818181818182
134,What is Batman's real name?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is Batman's real name?
```sparql
SELECT ?realName
WHERE {
  ?person a dbo:Person .
  ?person dbo:name ?realName .
  FILTER(?realName = ""Bruce Wayne"")
}
```
","SELECT DISTINCT ?label WHERE { <http://dbpedia.org/resource/Batman> <http://xmlns.com/foaf/0.1/name> ?label FILTER ( str(?label) != ""Batman"" ) }",9.912840843200684,"SELECT ?realName
WHERE {
  ?person a dbo:Person .
  ?person dbo:name ?realName .
  FILTER(?realName = ""Bruce Wayne"")
}",False,True,5.1945147945938015e-155,0.14285714285714285
132,What is Elon Musk famous for?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is Elon Musk famous for?
```sparql
SELECT ?famousFor
WHERE {
  ?person a dbo:Person .
  ?person dbo:famousFor ?famousFor .
}
```
",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elon_Musk> <http://dbpedia.org/ontology/knownFor> ?uri },7.422014474868774,"SELECT ?famousFor
WHERE {
  ?person a dbo:Person .
  ?person dbo:famousFor ?famousFor .
}",False,True,5.969061643530969e-155,0.22222222222222224
128,Who is the author of WikiLeaks?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the author of WikiLeaks?
Answer: Julian Assange

```sparql
SELECT ?author
WHERE {
  ?author wdt:P31 wd:Q10477777 .
}
```
",PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { res:WikiLeaks onto:author ?uri },8.431451082229614,"SELECT ?author
WHERE {
  ?author wdt:P31 wd:Q10477777 .
}",False,False,2.9772448312487847e-155,0.18181818181818182
126,Sean Parnell was the governor of which U.S. state?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Sean Parnell was the governor of which U.S. state?
Answer: Sean Parnell was the governor of **Alaska**.

```sparql
SELECT ?state
WHERE {
  ?person a dbo:Person .
  ?person dbo:governor ?state .
  FILTER (?person = ""Sean Parnell"") .
}
```

```
SELECT ?state
WHERE {
  ?person a dbo:Person .
  ?person dbo:governor ?state .
  FILTER (?person = ""Sean Parnell"") .
  FILTER (?state = ""Alaska"") .
}
```

```
SELECT DISTINCT ?state
WHERE {
  ?person a dbo:Person .
  ?person dbo:governor ?state .
  FILTER (?person = ""Sean Parnell"") .
}
```

```
SELECT DISTINCT ?state
WHERE {
  ?person a dbo:Person .
  ?person dbo:governor ?state .
  FILTER (?person = ""Sean Parnell"") .
  FILTER (?state = ""Alaska"") .
}
```

```
SELECT DISTINCT ?state
WHERE {
  ?person a dbo:Person .
  ?person dbo:governor ?state .
  FILTER (?person = ""Sean Parnell"") .
  FILTER (?state = ""Alaska"") .
}
```



**Explanation:**

1. **Identify relevant properties:** We need to find the ""governor"" property of the person ""Sean Parnell"".
2. **Structure the query:**
   - **SELECT ?state:** This specifies that we want to retrieve the value of the ""state"" property.
   - **WHERE:** This clause defines the conditions for matching results.
   - **?person a dbo:Person:** This matches the ""person"" entity with the ""dbo:Person"" type.
   - **?person dbo:governor ?state:** This matches the ""person"" entity with the ""governor"" property and the corresponding ""state"" value.
   - **",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Sean_Parnell dbo:region ?uri },75.52320432662964,"SELECT ?state
WHERE {
  ?person a dbo:Person .
  ?person dbo:governor ?state .
  FILTER (?person = ""Sean Parnell"") .
}",False,True,4.905470711005226e-155,0.14285714285714288
125,How many years was the Ford Model T manufactured?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many years was the Ford Model T manufactured?
Answer: The Ford Model T was manufactured from 1908 to 1927.


```sparql
SELECT (COUNT(?year) AS ?years)
WHERE {
  ?year a dbo:Year .
  ?year ?property ?value .
  FILTER (?property = ""manufacturedFrom"" && ?value = ""1908"")
  FILTER (?property = ""manufacturedTo"" && ?value = ""1927"")
}
```

**Explanation:**

1. **SELECT (COUNT(?year) AS ?years):** This line selects the count of the years and assigns it to the variable `?years`.
2. **WHERE { ... }:** This clause defines the conditions for the query.
3. **?year a dbo:Year:** This line specifies that the variable `?year` should be a property of the `dbo:Year` class.
4. **?year ?property ?value:** This line specifies that the variable `?year` should have a property `?property` with a value `?value`.
5. **FILTER (?property = ""manufacturedFrom"" && ?value = ""1908""):** This line filters the results to include only years where the property is ""manufacturedFrom"" and the value is ""1908"".
6. **FILTER (?property = ""manufacturedTo"" && ?value = ""1927""):** This line filters the results to include only years where the property is ""manufacturedTo"" and the value is ""1927"".

This query retrieves the number of years the Ford Model T was manufactured by counting the occurrences of the ""manufacturedFrom"" and ""manufacturedTo"" properties. 


",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> PREFIX res: <http://dbpedia.org/resource/> SELECT ?years WHERE { res:Ford_Model_T dbo:productionEndYear ?end ; dbo:productionStartYear ?start. BIND ( ( year(xsd:date(?end)) - year(xsd:date(?start)) ) AS ?years) },68.11476731300354,"SELECT (COUNT(?year) AS ?years)
WHERE {
  ?year a dbo:Year .
  ?year ?property ?value .
  FILTER (?property = ""manufacturedFrom"" && ?value = ""1908"")
  FILTER (?property = ""manufacturedTo"" && ?value = ""1927"")
}",False,True,5.0274387714082416e-155,0.12765957446808512
124,When was Carlo Giuliani shot?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When was Carlo Giuliani shot?
Answer: The DBpedia Knowledge Graph does not contain information about the date of Carlo Giuliani's shooting.


**SPARQL Query:**

```sparql
SELECT ?date
WHERE {
  ?subject a dbo:Person .
  ?subject dbo:shot ?date .
}
LIMIT 1
```

**Explanation:**

1. **`SELECT ?date`**: This line specifies that we want to retrieve a value for the variable `?date`.
2. **`WHERE { ... }`**: This block defines the conditions for the query.
3. **`?subject a dbo:Person`**: This line indicates that we are looking for a subject that is a dbo:Person.
4. **`?subject dbo:shot ?date`**: This line specifies that the subject has a property called `dbo:shot` with a value that we want to retrieve.
5. **`LIMIT 1`**: This line limits the results to only one row.


**Note:** This query is designed to retrieve the date of Carlo Giuliani's shooting. However, the DBpedia Knowledge Graph does not contain this information. 
",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT xsd:date(?date) WHERE { res:Death_of_Carlo_Giuliani dbo:deathDate ?date },46.00209879875183,"SELECT ?date
WHERE {
  ?subject a dbo:Person .
  ?subject dbo:shot ?date .
}
LIMIT 1",False,True,5.859491021246916e-155,0.1923076923076923
123,Give me all animals that are extinct.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all animals that are extinct.
```
SELECT ?animal
WHERE {
  ?animal a dbo:Animal .
  FILTER(?animal wdt:P31> ""extinct"")
}
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia: `dbp:` for DBpedia, and `rdf:` for RDF.
2. **SELECT Clause:** We use `SELECT ?animal` to retrieve the name of the animal.
3. **WHERE Clause:**
   - `?animal a dbo:Animal` specifies that we are looking for entities with the property `dbo:Animal`.
   - `FILTER(?animal wdt:P31> ""extinct"")` filters the results to only include animals with the property `wdt:P31` (which stands for ""extinct"" in the W3C's Web Ontology Language) set to ""extinct"".

This query retrieves all the animals in the DBpedia Knowledge Graph that have the property `wdt:P31` set to ""extinct"". 


","SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Animal> ; <http://dbpedia.org/ontology/conservationStatus> ""EX"" }",41.79778337478638,"prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all animals that are extinct.
```
SELECT ?animal
WHERE {
  ?animal a dbo:Animal .
  FILTER(?animal wdt:P31> ""extinct"")
}",False,False,3.549225288188377e-155,0.10638297872340427
122,Who was the wife of President Lincoln?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the wife of President Lincoln?
Answer: Mary Todd Lincoln

```sparql
SELECT ?person ?spouse
WHERE {
  ?person a dbo:Person .
  ?person dbo:spouse ?spouse .
  FILTER (?spouse = ""Mary Todd Lincoln"")
}
```
",PREFIX dbr: <http://dbpedia.org/resource/> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?uri ?string WHERE { dbr:Abraham_Lincoln onto:spouse ?uri },10.24898624420166,"SELECT ?person ?spouse
WHERE {
  ?person a dbo:Person .
  ?person dbo:spouse ?spouse .
  FILTER (?spouse = ""Mary Todd Lincoln"")
}",False,True,4.777946850498661e-155,0.13793103448275862
111,How many awards has Bertrand Russell?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many awards has Bertrand Russell?
Answer: The query should return the number of awards won by Bertrand Russell.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?award))
WHERE {
  ?subject dbo:award ?award .
  ?subject dbo:name ""Bertrand Russell"" .
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia Ontology (`dbo:`) and RDF Schema (`rdfs:`) to make the query easier to read and understand.
2. **SELECT Clause:** We use `SELECT (COUNT(?award))` to select the count of awards.
3. **WHERE Clause:**
   - `?subject dbo:award ?award` : This line specifies that we are looking for awards associated with a subject. The subject is represented by `?subject`. The `dbo:award` property links the subject to the award.
   - `?subject dbo:name ""Bertrand Russell""`: This line ensures that we are only considering awards associated with Bertrand Russell. 

This query will return a single value, the number of awards won by Bertrand Russell. 
",PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT (COUNT(?Awards) AS ?Counter) WHERE { dbr:Bertrand_Russell dbp:awards ?Awards },51.91961073875427,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?award))
WHERE {
  ?subject dbo:award ?award .
  ?subject dbo:name ""Bertrand Russell"" .
}",False,True,5.287667392736108e-155,0.15625
117,Is Pamela Anderson a vegan?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Pamela Anderson a vegan?
```sparql
SELECT ?veganStatus
WHERE {
  ?subject a dbo:Person .
  ?subject dbo:isVegan ?veganStatus .
  FILTER(?subject = ""Pamela Anderson"")
}
```
",PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Pamela_Anderson a <http://dbpedia.org/class/yago/WikicatAmericanVegans> },9.546408414840698,"SELECT ?veganStatus
WHERE {
  ?subject a dbo:Person .
  ?subject dbo:isVegan ?veganStatus .
  FILTER(?subject = ""Pamela Anderson"")
}",False,True,5.1945147945938015e-155,0.16666666666666666
59,Which space probes were sent into orbit around the sun?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which space probes were sent into orbit around the sun?
```sparql
SELECT ?probe
WHERE {
  ?probe rdf:type <http://dbpedia.org/ontology/SpaceProbe> .
  ?probe rdf:type <http://dbpedia.org/ontology/Spacecraft> .
  ?probe a <http://dbpedia.org/ontology/Spacecraft> .
  FILTER(?probe rdf:type <http://dbpedia.org/ontology/Spacecraft> )
}
```
```
```","PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?s WHERE { ?s dct:subject dbc:Missions_to_the_Sun ; rdf:type ?type FILTER ( ?type IN (dbo:Satellite, dbo:ArtificialSatellite) ) }",20.514567375183105,"SELECT ?probe
WHERE {
  ?probe rdf:type <http://dbpedia.org/ontology/SpaceProbe> .
  ?probe rdf:type <http://dbpedia.org/ontology/Spacecraft> .
  ?probe a <http://dbpedia.org/ontology/Spacecraft> .
  FILTER(?probe rdf:type <http://dbpedia.org/ontology/Spacecraft> )
}",False,False,3.809327469561673e-155,0.15789473684210525
113,Which German cities have more than 250000 inhabitants?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which German cities have more than 250000 inhabitants?
```sparql
SELECT ?city ?population
WHERE {
  ?city a dbo:City .
  ?city dbo:population ?population .
  FILTER (?population > 250000)
}
```
```
```",SELECT DISTINCT ?uri WHERE { { ?uri a <http://dbpedia.org/ontology/City> } UNION { ?uri a <http://dbpedia.org/ontology/Town> } ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> ; <http://dbpedia.org/ontology/populationTotal> ?population FILTER ( ?population > 250000 ) },10.400273084640505,"SELECT ?city ?population
WHERE {
  ?city a dbo:City .
  ?city dbo:population ?population .
  FILTER (?population > 250000)
}",False,True,3.352743298097415e-155,0.23529411764705882
104,Who is the daughter of Robert Kennedy married to?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the daughter of Robert Kennedy married to?
Answer:  The daughter of Robert Kennedy married to is a unique answer.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?spouse
WHERE {
  ?person dbo:father ""Robert Kennedy"" .
  ?person dbo:spouse ?spouse .
  FILTER (?spouse = ""Robert Kennedy"")
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia Ontology (dbo) and RDF Schema (rdfs). This makes it easier to refer to specific properties and classes.
2. **SELECT Clause:** We specify that we want to retrieve a single value, which we'll call `?spouse`.
3. **WHERE Clause:** This is where the query logic resides.
   - **?person dbo:father ""Robert Kennedy""**: This line identifies the person we're interested in. It uses the `dbo:father` property to link the person to Robert Kennedy.
   - **?person dbo:spouse ?spouse**: This line identifies the spouse of the person. It uses the `dbo:spouse` property to link the person to their spouse.
   - **FILTER (?spouse = ""Robert Kennedy"")**: This line filters the results to only include spouses who are the same as Robert Kennedy.


**Important Notes:**

* This query assumes that the DBpedia Knowledge Graph contains information about Robert Kennedy's family and his spouse.
* The query retrieves the spouse of Robert Kennedy, not necessarily the daughter of Robert Kennedy. 



Let me know if you have any other questions. 
",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_F._Kennedy> <http://dbpedia.org/ontology/child> ?child . ?child <http://dbpedia.org/ontology/spouse> ?uri },69.78916931152344,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?spouse
WHERE {
  ?person dbo:father ""Robert Kennedy"" .
  ?person dbo:spouse ?spouse .
  FILTER (?spouse = ""Robert Kennedy"")
}",True,True,4.506889438070446e-155,0.16129032258064516
10,How many students does the Free University of Amsterdam have?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many students does the Free University of Amsterdam have?
Answer: The query should return the number of students associated with the Free University of Amsterdam.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT (COUNT(?student))
WHERE {
  ?university dbo:name ""Free University of Amsterdam"" .
  ?university dbo:hasDepartment ?department .
  ?department dbo:hasStudents ?student .
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia and our example ontology. This makes the query easier to read and understand.
2. **SELECT:** We use the `SELECT` clause to specify that we want to count the number of students.
3. **WHERE:** The `WHERE` clause contains the conditions that must be satisfied for a result to be returned.
4. **?university:** This variable represents the Free University of Amsterdam.
5. **dbo:name:** This property specifies that we are looking for the name of the university.
6. **dbo:hasDepartment:** This property links the university to its departments.
7. **dbo:hasStudents:** This property links the department to the number of students it has.

This query retrieves the number of students associated with the Free University of Amsterdam by traversing the relationships between the university, its departments, and the students within those departments. 


",SELECT DISTINCT ?num WHERE { dbr:Vrije_Universiteit_Amsterdam <http://dbpedia.org/ontology/numberOfStudents> ?num },56.8326518535614,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT (COUNT(?student))
WHERE {
  ?university dbo:name ""Free University of Amsterdam"" .
  ?university dbo:hasDepartment ?department .
  ?department dbo:hasStudents ?student .
}",False,True,4.177908019702813e-155,0.13793103448275862
1,What is the revenue of IBM?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the revenue of IBM?
Answer: 
```sparql
SELECT ?revenue
WHERE {
  ?company a dbo:Company .
  ?company dbo:revenue ?revenue .
}
```
```
```",PREFIX res: <http://dbpedia.org/resource/> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?number WHERE { res:IBM onto:revenue ?number },8.561759233474731,"SELECT ?revenue
WHERE {
  ?company a dbo:Company .
  ?company dbo:revenue ?revenue .
}",False,True,5.527118757926412e-155,0.1818181818181818
178,How many James Bond movies do exist?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many James Bond movies do exist?
```sparql
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie a dbo:Movie .
  FILTER(?movie = ""James Bond"")
}
```
",SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri dct:subject <http://dbpedia.org/resource/Category:James_Bond_films> },8.121718168258667,"SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie a dbo:Movie .
  FILTER(?movie = ""James Bond"")
}",False,True,5.859491021246916e-155,0.1923076923076923
129,Who does the voice of Bart Simpson?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who does the voice of Bart Simpson?
Answer: Nancy Cartwright

```sparql
SELECT ?person ?voice
WHERE {
  ?person a dbo:Person .
  ?person dbo:voice ?voice .
  FILTER (?voice = ""Nancy Cartwright"")
}
```
",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bart_Simpson> <http://dbpedia.org/property/voiceactor> ?uri },10.109184503555298,"SELECT ?person ?voice
WHERE {
  ?person a dbo:Person .
  ?person dbo:voice ?voice .
  FILTER (?voice = ""Nancy Cartwright"")
}",False,True,4.905470711005226e-155,0.1739130434782609
183,Who was Tom Hanks married to?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was Tom Hanks married to?
Answer:  The DBpedia Knowledge Graph should return a list of all the people Tom Hanks has been married to.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?spouse
WHERE {
  ?person dbo:marriedTo ?spouse .
  FILTER (regex(?spouse, ""Tom Hanks"", ""i""))
}
```



**Explanation:**

1. **Prefix:** We start by defining a prefix for DBpedia: `dbo: <http://dbpedia.org/ontology/>`. This makes it easier to refer to DBpedia concepts in the query.

2. **SELECT:** We use `SELECT ?spouse` to specify that we want to retrieve the value of the `spouse` variable.

3. **WHERE:** The `WHERE` clause contains the query logic.

4. **?person dbo:marriedTo ?spouse:** This line matches any statements where `?person` is a person and `?spouse` is their spouse.

5. **FILTER (regex(?spouse, ""Tom Hanks"", ""i"")):** This filter ensures that only matches where the `?spouse` is a person named ""Tom Hanks"". The `regex` function checks if the `?spouse` matches the given pattern.

**In summary:** This query searches for statements in the DBpedia Knowledge Graph where a person is married to someone named ""Tom Hanks"". 


",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { dbr:Tom_Hanks dbo:spouse ?uri },55.31623864173889,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?spouse
WHERE {
  ?person dbo:marriedTo ?spouse .
  FILTER (regex(?spouse, ""Tom Hanks"", ""i""))
}",True,True,3.271341557643298e-78,0.2413793103448276
181,Through which countries does the Yenisei river flow?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Through which countries does the Yenisei river flow?
Answer: The Yenisei river flows through Russia.


```sparql
SELECT DISTINCT ?country
WHERE {
  ?river a dbo:River .
  ?river dbo:flowsThrough ?country .
  FILTER(?country = ""Russia"")
}
```



**Explanation:**

1. **`SELECT DISTINCT ?country`**: This line specifies that we want to retrieve a unique list of countries.
2. **`WHERE { ... }`**: This block defines the conditions for the query.
3. **`?river a dbo:River`**: This line identifies the ""river"" entity as a ""dbo:River"" using the DBpedia ontology.
4. **`?river dbo:flowsThrough ?country`**: This line identifies the ""flowsThrough"" property of the river and links it to a ""country"" entity.
5. **`FILTER(?country = ""Russia"")`**: This line filters the results to only include countries where the ""country"" property is equal to ""Russia"".


This query retrieves all unique countries where the Yenisei river flows, which is ""Russia"" in this case. 
",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Yenisei_River <http://dbpedia.org/ontology/country> ?uri },45.12332582473755,"SELECT DISTINCT ?country
WHERE {
  ?river a dbo:River .
  ?river dbo:flowsThrough ?country .
  FILTER(?country = ""Russia"")
}",False,True,6.53175655370481e-155,0.1851851851851852
7,Give me all cars that are produced in Germany.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all cars that are produced in Germany.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?carName ?carManufacturer WHERE {
  ?carName dbo:producedIn ?country .
  FILTER (?country = ""Germany"")
  ?carName dbo:manufacturer ?carManufacturer .
}
```
",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Automobile> { ?uri <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Germany> } UNION { { ?uri <http://dbpedia.org/ontology/manufacturer> ?x } UNION { ?uri <http://dbpedia.org/property/manufacturer> ?x } { ?x <http://dbpedia.org/ontology/locationCountry> <http://dbpedia.org/resource/Germany> } UNION { ?x <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Germany> } } },17.518702268600464,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?carName ?carManufacturer WHERE {
  ?carName dbo:producedIn ?country .
  FILTER (?country = ""Germany"")
  ?carName dbo:manufacturer ?carManufacturer .
}",True,True,1.814240144076689e-155,0.1111111111111111
135,When did Michael Jackson die?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When did Michael Jackson die?
```sparql
SELECT ?date
WHERE {
  ?subject a dbo:Person .
  ?subject dbo:died ?date .
  FILTER(?subject = ""Michael Jackson"")
}
```
```
```",SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Michael_Jackson> <http://dbpedia.org/ontology/deathDate> ?date },8.924967050552368,"SELECT ?date
WHERE {
  ?subject a dbo:Person .
  ?subject dbo:died ?date .
  FILTER(?subject = ""Michael Jackson"")
}",False,True,2.8442409087371782e-78,0.22727272727272727
50,What is the highest volcano in Africa?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the highest volcano in Africa?
Answer: The highest volcano in Africa is Mount Kilimanjaro.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?volcano ?height
WHERE {
  ?volcano dbo:name ""Mount Kilimanjaro"" .
  ?volcano dbo:height ?height .
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia Ontology (dbo) and RDF (rdf) to make the query easier to read and understand.
2. **SELECT Clause:** We specify that we want to retrieve the values of the variables `?volcano` and `?height`.
3. **WHERE Clause:** This clause contains the main logic of the query.
   - **?volcano dbo:name ""Mount Kilimanjaro""**: This line searches for a volcano with the name ""Mount Kilimanjaro"" using the `dbo:name` property.
   - **?volcano dbo:height ?height**: This line searches for the height of the volcano using the `dbo:height` property.

This query will return a single result, containing the name of the volcano and its height. 


",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Volcano> ; <http://dbpedia.org/ontology/locatedInArea> ?area . ?area dct:subject dbc:Countries_in_Africa . ?uri <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) LIMIT 1,52.453643560409546,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?volcano ?height
WHERE {
  ?volcano dbo:name ""Mount Kilimanjaro"" .
  ?volcano dbo:height ?height .
}",True,True,4.262603598537533e-155,0.13513513513513511
39,Which poet wrote the most books?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which poet wrote the most books?
```sparql
SELECT ?poet ?count
WHERE {
  ?poet a dbo:Poet .
  ?poet dbo:wrote ?book .
  FILTER (?book != ""The Odyssey"")
  ORDER BY DESC(?count)
  LIMIT 1
}
```
```
```",SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Poet> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1,11.974382162094116,"SELECT ?poet ?count
WHERE {
  ?poet a dbo:Poet .
  ?poet dbo:wrote ?book .
  FILTER (?book != ""The Odyssey"")
  ORDER BY DESC(?count)
  LIMIT 1
}",False,False,6.90831539083572e-155,0.2195121951219512
83,Give me all gangsters from the prohibition era.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all gangsters from the prohibition era.
Answer: 
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
SELECT ?name ?occupation WHERE {
  ?name dbo:occupation ?occupation .
  FILTER (?occupation = ""Gangster""^^<http://www.w3.org/2001/XMLSchema#string> )
  FILTER (?occupation = ""Prohibition Era""^^<http://www.w3.org/2001/XMLSchema#string> )
}
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia's ontology (dbo), RDF Schema (rdfs), and OWL (owl). This makes the query easier to read and understand.
2. **SELECT Clause:** We specify that we want to retrieve the ""name"" and ""occupation"" of the gangsters.
3. **WHERE Clause:** This clause contains the main logic of the query.
    * **?name dbo:occupation ?occupation:** This line retrieves the name of the person and their occupation.
    * **FILTER (?occupation = ""Gangster""^^<http://www.w3.org/2001/XMLSchema#string> )**: This filters the results to only include occupations that are ""Gangster"".
    * **FILTER (?occupation = ""Prohibition Era""^^<http://www.w3.org/2001/XMLSchema#string> )**: This further filters the results to only include occupations that are ""Prohibition Era"".


**Note:** This query assumes that DBpedia has a good representation of gangsters and their occupations during the Prohibition Era. 


",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation dbr:Gangster ; dct:subject dbc:Prohibition-era_gangsters },75.54462623596191,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
SELECT ?name ?occupation WHERE {
  ?name dbo:occupation ?occupation .
  FILTER (?occupation = ""Gangster""^^<http://www.w3.org/2001/XMLSchema#string> )
  FILTER (?occupation = ""Prohibition Era""^^<http://www.w3.org/2001/XMLSchema#string> )
}",True,True,0.1050176352370787,0.1904761904761905
71,Give me all spacecrafts that flew to Mars.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all spacecrafts that flew to Mars.
```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
SELECT ?spacecraft
WHERE {
  ?spacecraft dbo:name ?name .
  ?spacecraft dbo:destination ?destination .
  FILTER (?destination = ""Mars"")
}
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for the DBpedia Ontology (dbo), RDF Schema (rdfs), and OWL (owl). This makes the query easier to read and understand.
2. **SELECT Clause:** We use the `SELECT` clause to specify that we want to retrieve the value of the variable `?spacecraft`.
3. **WHERE Clause:** The `WHERE` clause contains the conditions that must be met for a result to be returned.
    * **?spacecraft dbo:name ?name:** This line retrieves the spacecraft's name using the `dbo:name` property.
    * **?spacecraft dbo:destination ?destination:** This line retrieves the spacecraft's destination using the `dbo:destination` property.
    * **FILTER (?destination = ""Mars""):** This line filters the results to only include spacecraft that have a destination of ""Mars"".


This query will return a list of all spacecraft that have flown to Mars. 
","PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?s WHERE { ?s dct:subject dbc:Mars_rovers ; rdf:type ?type FILTER ( ?type IN (dbo:Satellite, dbo:ArtificialSatellite) ) }",61.13567662239075,"prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all spacecrafts that flew to Mars.
```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
SELECT ?spacecraft
WHERE {
  ?spacecraft dbo:name ?name .
  ?spacecraft dbo:destination ?destination .
  FILTER (?destination = ""Mars"")
}",False,False,0.05591310122526068,0.1095890410958904
213,Show me all Czech movies.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Show me all Czech movies.
```sparql
SELECT DISTINCT ?movieLabel
WHERE {
  ?movieLabel dbo:hasFilm ?film .
  FILTER(?film rdfs:label = ""Czech film"")
}
```
",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Czech_Republic> },8.968970537185669,"SELECT DISTINCT ?movieLabel
WHERE {
  ?movieLabel dbo:hasFilm ?film .
  FILTER(?film rdfs:label = ""Czech film"")
}",False,False,6.968148412761692e-155,0.2
209,Give me all taikonauts.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all taikonauts.
Answer: 
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?taikonaut
WHERE {
  ?taikonaut dbo:name ?name .
}
```
",SELECT DISTINCT ?uri WHERE { { ?uri a <http://dbpedia.org/ontology/Astronaut> ; <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/People's_Republic_of_China> } UNION { ?uri a <http://dbpedia.org/ontology/Astronaut> ; <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/China> } },9.421916961669922,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?taikonaut
WHERE {
  ?taikonaut dbo:name ?name .
}",True,True,3.4779103877657187e-155,0.2
105,Which countries have more than ten volcanoes?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which countries have more than ten volcanoes?
```
SELECT ?country
WHERE {
  ?country a dbo:Country .
  ?country dbo:hasVolcano ?volcano .
  FILTER (COUNT(?volcano) > 10)
}
```
",SELECT DISTINCT ?uri WHERE { ?x a <http://dbpedia.org/ontology/Volcano> ; <http://dbpedia.org/ontology/locatedInArea> ?uri . ?uri a <http://dbpedia.org/ontology/Country> } GROUP BY ?uri HAVING ( COUNT(?x) > 10 ),9.735127687454224,"prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which countries have more than ten volcanoes?
```
SELECT ?country
WHERE {
  ?country a dbo:Country .
  ?country dbo:hasVolcano ?volcano .
  FILTER (COUNT(?volcano) > 10)
}",False,False,3.6373109341716718e-155,0.11666666666666667
52,Give me all movies with Tom Cruise.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all movies with Tom Cruise.
```sparql
SELECT DISTINCT ?movie
WHERE {
  ?movie a dbo:Movie .
  ?movie dbo:star ?actor .
  FILTER regex(?actor, ""Tom Cruise"")
}
```
","PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> PREFIX prop: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Film { ?uri prop:starring res:Tom_Cruise } UNION { ?uri onto:starring res:Tom_Cruise } OPTIONAL { ?uri rdfs:label ?string FILTER ( lang(?string) = ""en"" ) } }",9.212383270263672,"SELECT DISTINCT ?movie
WHERE {
  ?movie a dbo:Movie .
  ?movie dbo:star ?actor .
  FILTER regex(?actor, ""Tom Cruise"")
}",False,True,1.3253802823310574e-155,0.12765957446808512
102,When did Dracula's creator die?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When did Dracula's creator die?
Answer: 
```sparql
SELECT ?deathDate
WHERE {
  ?person a dbo:Person .
  ?person dbo:creator ?creator .
  ?creator dbo:deathDate ?deathDate .
}
```
```

**Explanation:**

1. **Identify relevant properties:**
   - `dbo:Person`: Represents the entity ""person"".
   - `dbo:creator`: Represents the relationship ""creator"".
   - `dbo:deathDate`: Represents the property ""death date"".

2. **Structure the query:**
   - `SELECT ?deathDate`: Selects the value of the `deathDate` property.
   - `WHERE { ... }`: Defines the conditions for matching results.
   - `?person a dbo:Person`: Matches entities with the `dbo:Person` type.
   - `?person dbo:creator ?creator`: Matches the creator of the person.
   - `?creator dbo:deathDate ?deathDate`: Matches the death date of the creator.

3. **Output the query:**
   - The query retrieves the `deathDate` property for the creator of the person.


This query assumes that the DBpedia Knowledge Graph contains information about Dracula's creator and their death date. 
",SELECT DISTINCT xsd:date(?date) WHERE { <http://dbpedia.org/resource/Count_Dracula> <http://dbpedia.org/ontology/creator> ?x . ?x <http://dbpedia.org/ontology/deathDate> ?date. },50.26959156990051,"SELECT ?deathDate
WHERE {
  ?person a dbo:Person .
  ?person dbo:creator ?creator .
  ?creator dbo:deathDate ?deathDate .
}",False,True,5.4925306713204074e-155,0.20833333333333334
21,Who created English Wikipedia?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who created English Wikipedia?
```sparql
SELECT ?person ?wiki
WHERE {
  ?person wdt:P31 wd:Q10677777 .
  ?wiki wdt:P31 wd:Q10677777 .
  FILTER (?wiki = ""en:Wikipedia"")
}
```
```
```",PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Wikipedia> onto:author ?uri },14.711604595184326,"SELECT ?person ?wiki
WHERE {
  ?person wdt:P31 wd:Q10677777 .
  ?wiki wdt:P31 wd:Q10677777 .
  FILTER (?wiki = ""en:Wikipedia"")
}",False,False,5.0437883815744365e-155,0.14814814814814817
34,Give me all female German chancellors.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all female German chancellors.
```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/resource/>
SELECT ?person ?personLabel ?personType WHERE {
  ?person dbp:name ""Chancellors of Germany"" .
  ?person dbo:gender ""female"" .
  ?person dbo:personType dbp:Chancellor .
}
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia and its resources.
   - `dbo:` represents DBpedia Ontology.
   - `dbp:` represents DBpedia resource.

2. **SELECT Clause:** We specify the variables we want to retrieve:
   - `?person`: The name of the person.
   - `?personLabel`: The label of the person.
   - `?personType`: The type of the person.

3. **WHERE Clause:** This clause contains the search conditions:
   - `?person dbp:name ""Chancellors of Germany""`: This selects individuals who have the property ""name"" with the value ""Chancellors of Germany"".
   - `?person dbo:gender ""female""`: This selects individuals with the property ""gender"" and the value ""female"".
   - `?person dbo:personType dbp:Chancellor`: This selects individuals with the property ""personType"" and the value ""Chancellor"".

4. **Unique Results:** The query uses the `SELECT` clause to retrieve unique results.


This query will return a list of all female German chancellors in the DBpedia Knowledge Graph. 
",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Chancellor_of_Germany dbp:incumbent ?uri },66.10041046142578,"prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all female German chancellors.
```
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/resource/>
SELECT ?person ?personLabel ?personType WHERE {
  ?person dbp:name ""Chancellors of Germany"" .
  ?person dbo:gender ""female"" .
  ?person dbo:personType dbp:Chancellor .
}",False,False,4.078822478198005e-155,0.12068965517241378
145,Who owns Aldi?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who owns Aldi?
Answer: The company that owns Aldi is called Schwarz Group.

```sparql
SELECT ?company
WHERE {
  ?company a dbo:Company .
  ?company dbo:owns ?store .
  ?store dbo:name ""Aldi"" .
}
```

```sparql
SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company .
  ?company dbo:owns ?store .
  ?store dbo:name ""Aldi"" .
}
```

```sparql
SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company .
  ?company dbo:owns ?store .
  FILTER(?store = ""Aldi"")
}
```

```sparql
SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company .
  ?company dbo:owns ?store .
  FILTER(?store = ""Aldi"")
  FILTER(?company = ""Schwarz Group"")
}
```

```sparql
SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company .
  ?company dbo:owns ?store .
  FILTER(?store = ""Aldi"")
  FILTER(?company = ""Schwarz Group"")
  FILTER(?store = ""Aldi"")
}
```



**Explanation:**

1. **Identify relevant properties:** We need to find a company that owns a store named ""Aldi"".
2. **Structure the query:**
   - **SELECT ?company:** This specifies that we want to retrieve the value of the variable `?company`.
   - **WHERE:** This clause defines the conditions for matching results.
   - **?company a dbo:Company:** This matches the `?company` variable to a resource that is a dbo:Company.
   - **?company dbo:owns ?store:** This matches the `?company` variable to a resource that owns a resource",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Aldi dbp:founders ?uri },78.27942609786987,"SELECT ?company
WHERE {
  ?company a dbo:Company .
  ?company dbo:owns ?store .
  ?store dbo:name ""Aldi"" .
}

SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company .
  ?company dbo:owns ?store .
  ?store dbo:name ""Aldi"" .
}

SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company .
  ?company dbo:owns ?store .
  FILTER(?store = ""Aldi"")
}

SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company .
  ?company dbo:owns ?store .
  FILTER(?store = ""Aldi"")
  FILTER(?company = ""Schwarz Group"")
}

SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company .
  ?company dbo:owns ?store .
  FILTER(?store = ""Aldi"")
  FILTER(?company = ""Schwarz Group"")
  FILTER(?store = ""Aldi"")
}",False,False,2.700296626657081e-155,0.15625
154,Which books were written by Danielle Steel?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which books were written by Danielle Steel?
```sparql
SELECT ?book
WHERE {
  ?book a dbo:Book .
  ?book dbo:author ?author .
  FILTER regex(?author, ""Danielle Steel"")
}
```
",PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri rdf:type onto:Book ; onto:author <http://dbpedia.org/resource/Danielle_Steel> },8.612132787704468,"SELECT ?book
WHERE {
  ?book a dbo:Book .
  ?book dbo:author ?author .
  FILTER regex(?author, ""Danielle Steel"")
}",False,True,3.64976231092857e-155,0.12121212121212122
198,Who was influenced by Socrates?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was influenced by Socrates?
```sparql
SELECT ?person ?influence
WHERE {
  ?person a dbo:Person .
  ?person dbo:influencedBy ?influence .
  FILTER (?influence = ""Socrates"")
}
```
```",SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/influencedBy> <http://dbpedia.org/resource/Socrates> },9.056585311889648,"SELECT ?person ?influence
WHERE {
  ?person a dbo:Person .
  ?person dbo:influencedBy ?influence .
  FILTER (?influence = ""Socrates"")
}",False,True,5.0437883815744365e-155,0.18181818181818182
162,How deep is Lake Chiemsee?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How deep is Lake Chiemsee?
Answer: The depth of Lake Chiemsee is 100 meters.

```sparql
SELECT ?depth
WHERE {
  ?lake rdf:type <http://dbpedia.org/ontology/Lake>.
  ?lake dbpedia:depth ?depth .
}
```

**Explanation:**

1. **`SELECT ?depth`**: This line specifies that we want to retrieve the value of the variable `?depth`.
2. **`WHERE { ... }`**: This block defines the conditions for the query to return results.
3. **`?lake rdf:type <http://dbpedia.org/ontology/Lake>`**: This line checks if the subject is a lake.
4. **`?lake dbpedia:depth ?depth`**: This line checks if the subject has a property called `dbpedia:depth` and retrieves the value of that property.

This query will return a single result, the depth of Lake Chiemsee. 
",SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Chiemsee> <http://dbpedia.org/ontology/maximumDepth> ?n },39.37687778472901,"SELECT ?depth
WHERE {
  ?lake rdf:type <http://dbpedia.org/ontology/Lake>.
  ?lake dbpedia:depth ?depth .
}",False,False,6.223629500679345e-155,0.22222222222222224
212,Which companies work in the aerospace industry as well as in medicine?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which companies work in the aerospace industry as well as in medicine?
```sparql
SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company .
  ?company dbo:worksIn ?industry .
  FILTER (?industry = ""Aerospace"") .
  ?company dbo:worksIn ?industry .
  FILTER (?industry = ""Medicine"") .
}
```
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia: `dbpedia:` and `dbo:` for convenience.
2. **SELECT DISTINCT:** We use `SELECT DISTINCT ?company` to retrieve only unique company names.
3. **WHERE Clause:**
   - `?company a dbo:Company`: This line specifies that we are looking for entities that are instances of the `dbo:Company` class.
   - `?company dbo:worksIn ?industry`: This line specifies that we are looking for companies that have a `dbo:worksIn` property with a value for the `?industry` variable.
   - `FILTER (?industry = ""Aerospace"")`: This line filters the results to include only companies that work in the ""Aerospace"" industry.
   - `FILTER (?industry = ""Medicine"")`: This line filters the results to include only companies that work in the ""Medicine"" industry.

This query effectively identifies companies that are involved in both the aerospace and medicine industries. 


",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri a dbo:Company ; dbo:industry dbr:Aerospace ; dbo:industry dbr:Medical },56.23355770111084,"SELECT DISTINCT ?company
WHERE {
  ?company a dbo:Company .
  ?company dbo:worksIn ?industry .
  FILTER (?industry = ""Aerospace"") .
  ?company dbo:worksIn ?industry .
  FILTER (?industry = ""Medicine"") .
}",False,True,6.08970970641905e-155,0.21212121212121213
96,Which professional surfers were born on the Philippines?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which professional surfers were born on the Philippines?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?surfer ?birthPlace
WHERE {
  ?surfer dbo:birthDate ?birth.
  FILTER (?birth. dbo:location = ""Philippines"")
}
```
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia and our example ontology. This makes the query easier to read and understand.
2. **SELECT Clause:** We specify that we want to retrieve the values of the `?surfer` and `?birthPlace` variables.
3. **WHERE Clause:** This clause contains the filtering condition.
   - `?surfer dbo:birthDate ?birth` : This line retrieves the surfer's birth date using the `dbo:birthDate` property.
   - `FILTER (?birth. dbo:location = ""Philippines"")`: This line filters the results to only include surfers whose birth date is associated with the Philippines.

This query will return a list of professional surfers who were born in the Philippines. 


",PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation dbr:Surfer ; dbo:birthPlace res:Philippines },44.3760039806366,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?surfer ?birthPlace
WHERE {
  ?surfer dbo:birthDate ?birth.
  FILTER (?birth. dbo:location = ""Philippines"")
}",False,False,0.14569814203855377,0.19999999999999998
40,Who were the parents of Queen Victoria?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who were the parents of Queen Victoria?
Answer:  The parents of Queen Victoria are Prince Edward, Duke of Kent and Strathearn and Princess Victoria.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?parent1 ?parent2
WHERE {
  ?subject dbo:parent ?parent1 .
  ?subject dbo:parent ?parent2 .
  FILTER regex(?parent1, ""Prince Edward, Duke of Kent and Strathearn"")
  FILTER regex(?parent2, ""Princess Victoria"")
}
```



**Explanation:**

1. **Prefix:** We start by defining the prefix for DBpedia: `PREFIX dbo: <http://dbpedia.org/ontology/>`. This makes it easier to refer to DBpedia properties.

2. **SELECT:** We specify the variables we want to retrieve: `?parent1` and `?parent2`.

3. **WHERE:** This clause contains the main logic of the query.

   * **?subject dbo:parent ?parent1:** This line retrieves the parents of the subject using the `dbo:parent` property. The subject is assumed to be Queen Victoria.
   * **?subject dbo:parent ?parent2:** This line retrieves the parents of the subject again, using the `dbo:parent` property.
   * **FILTER regex(?parent1, ""Prince Edward, Duke of Kent and Strathearn"")**: This line filters the results to include only parents whose name contains ""Prince Edward, Duke of Kent and Strathearn"".
   * **FILTER regex(?parent2, ""Princess Victoria"")**: This line filters the results to include only parents whose name contains ""Princess Victoria"".

4. **Unique Results:** The query uses the `FILTER` clause to ensure that only unique parents are returned.


Let me know if you have any other questions. 
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Queen_Victoria dbo:parent ?uri },76.00889754295349,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?parent1 ?parent2
WHERE {
  ?subject dbo:parent ?parent1 .
  ?subject dbo:parent ?parent2 .
  FILTER regex(?parent1, ""Prince Edward, Duke of Kent and Strathearn"")
  FILTER regex(?parent2, ""Princess Victoria"")
}",True,True,2.163812360373297e-78,0.21621621621621623
79,Are there any castles in the United States?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Are there any castles in the United States?
```sparql
SELECT ?castle
WHERE {
  ?castle dbo:hasName ""Castle"" .
  FILTER(?castle dbo:hasLocation ""United States"") .
}
```
",PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> ASK WHERE { ?uri dct:subject dbc:Castles_in_the_United_States },8.150909662246704,"SELECT ?castle
WHERE {
  ?castle dbo:hasName ""Castle"" .
  FILTER(?castle dbo:hasLocation ""United States"") .
}",False,False,5.3448396730677054e-155,0.125
141,Which languages are spoken in Estonia?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which languages are spoken in Estonia?
```sparql
SELECT ?language
WHERE {
  ?language a dbo:Language .
  FILTER (?language = ""est"")
}
```
",SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spokenIn> <http://dbpedia.org/resource/Estonia> },6.698843002319336,"SELECT ?language
WHERE {
  ?language a dbo:Language .
  FILTER (?language = ""est"")
}",False,True,5.969061643530969e-155,0.2
80,Give me a list of all critically endangered birds.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me a list of all critically endangered birds.
```
SELECT ?birdName
WHERE {
  ?birdName a dbo:Bird .
  ?birdName dbo:conservationStatus ?conservationStatus .
  FILTER (?conservationStatus = ""Critically Endangered"") .
}
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia: `dbp:`, `rdf:`, `dbo:`, and `owl:`.
2. **SELECT Clause:** We use `SELECT ?birdName` to retrieve the name of each bird.
3. **WHERE Clause:**
   - `?birdName a dbo:Bird`: This line specifies that we are looking for entities that are instances of the `dbo:Bird` class.
   - `?birdName dbo:conservationStatus ?conservationStatus`: This line specifies that we are looking for the `conservationStatus` property of each bird.
   - `FILTER (?conservationStatus = ""Critically Endangered"")`: This line filters the results to only include birds with a `conservationStatus` value of ""Critically Endangered"".

This query retrieves a list of all unique bird names that have a `conservationStatus` property with the value ""Critically Endangered"". 


","PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri ?p WHERE { ?uri rdf:type dbo:Bird { ?uri dbo:conservationStatus ""CR"" } UNION { ?uri dct:subject dbc:Critically_endangered_animals } }",47.62726926803589,"prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me a list of all critically endangered birds.
```
SELECT ?birdName
WHERE {
  ?birdName a dbo:Bird .
  ?birdName dbo:conservationStatus ?conservationStatus .
  FILTER (?conservationStatus = ""Critically Endangered"") .
}",False,False,3.3523603773965668e-155,0.09375
159,Which countries are connected by the Rhine?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which countries are connected by the Rhine?
Answer: Germany, France, Switzerland

```sparql
SELECT DISTINCT ?country1 ?country2
WHERE {
  ?country1 a dbo:Country .
  ?country1 dbo:borders ?country2 .
  FILTER (?country2 = ""Germany"")
}
```

```sparql
SELECT DISTINCT ?country1 ?country2
WHERE {
  ?country1 a dbo:Country .
  ?country1 dbo:borders ?country2 .
  FILTER (?country2 = ""France"")
}
```

```sparql
SELECT DISTINCT ?country1 ?country2
WHERE {
  ?country1 a dbo:Country .
  ?country1 dbo:borders ?country2 .
  FILTER (?country2 = ""Switzerland"")
}
```

```sparql
SELECT DISTINCT ?country1 ?country2
WHERE {
  ?country1 a dbo:Country .
  ?country1 dbo:borders ?country2 .
  FILTER (?country2 = ""Germany"")
  FILTER (?country2 = ""France"")
  FILTER (?country2 = ""Switzerland"")
}
```

```sparql
SELECT DISTINCT ?country1 ?country2
WHERE {
  ?country1 a dbo:Country .
  ?country1 dbo:borders ?country2 .
  FILTER (?country2 = ""Germany"")
  FILTER (?country2 = ""France"")
  FILTER (?country2 = ""Switzerland"")
  FILTER (?country2 = ""Austria"")
}
```


```sparql
SELECT DISTINCT ?country1 ?country2
WHERE {
  ?country1 a dbo:Country .
  ?country1 dbo:borders ?country2 .
  FILTER (?country2 = ""Germany"")
  FILTER (?country2 = ""France"")
  FILTER (?country2 = ""Switzerland"")
  FILTER (?country2 = ""Austria"")
  FILTER (?country",PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { {<http://dbpedia.org/resource/Rhine> dbo:country ?uri } UNION {dbr:Rhine dbp:country ?uri} },80.33702445030212,"SELECT DISTINCT ?country1 ?country2
WHERE {
  ?country1 a dbo:Country .
  ?country1 dbo:borders ?country2 .
  FILTER (?country2 = ""Germany"")
}

SELECT DISTINCT ?country1 ?country2
WHERE {
  ?country1 a dbo:Country .
  ?country1 dbo:borders ?country2 .
  FILTER (?country2 = ""France"")
}

SELECT DISTINCT ?country1 ?country2
WHERE {
  ?country1 a dbo:Country .
  ?country1 dbo:borders ?country2 .
  FILTER (?country2 = ""Switzerland"")
}

SELECT DISTINCT ?country1 ?country2
WHERE {
  ?country1 a dbo:Country .
  ?country1 dbo:borders ?country2 .
  FILTER (?country2 = ""Germany"")
  FILTER (?country2 = ""France"")
  FILTER (?country2 = ""Switzerland"")
}

SELECT DISTINCT ?country1 ?country2
WHERE {
  ?country1 a dbo:Country .
  ?country1 dbo:borders ?country2 .
  FILTER (?country2 = ""Germany"")
  FILTER (?country2 = ""France"")
  FILTER (?country2 = ""Switzerland"")
  FILTER (?country2 = ""Austria"")
}",False,False,2.5945787348695876e-155,0.12820512820512822
107,Who was the father of Queen Elizabeth II?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the father of Queen Elizabeth II?
Answer: King George VI

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?father WHERE {
  ?subject dbo:father ?father .
  ?subject dbo:name ""Queen Elizabeth II"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT * WHERE { res:Elizabeth_II dbo:parent ?uri . ?uri <http://xmlns.com/foaf/0.1/gender> ""male""@en }",12.241989374160768,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?father WHERE {
  ?subject dbo:father ?father .
  ?subject dbo:name ""Queen Elizabeth II"" .
}",True,True,3.057039813233982e-78,0.25
163,Give me all chemical elements.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all chemical elements.
```sparql
SELECT DISTINCT ?elementLabel
WHERE {
  ?elementLabel rdf:type <http://dbpedia.org/ontology/ChemicalElement> .
}
```
",PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX owl: <http://www.w3.org/2002/07/owl#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type owl:Thing ; dct:subject dbc:Chemical_elements },7.822707176208496,"SELECT DISTINCT ?elementLabel
WHERE {
  ?elementLabel rdf:type <http://dbpedia.org/ontology/ChemicalElement> .
}",True,True,2.222770504497334e-155,0.20689655172413793
211,Give me all American presidents of the last 20 years.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all American presidents of the last 20 years.
Answer: 
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?president
WHERE {
  ?president dbo:name ""American President"" .
  FILTER (?president = dbo:PresidentOfUnitedStates)
  FILTER (?president dbo:term ""President of the United States"")
  FILTER (?president dbo:term ""United States"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""USA"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?president dbo:term ""United States of America"")
  FILTER (?",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Person ; dct:subject dbc:Presidents_of_the_United_States ; dbo:activeYearsEndDate ?termEnd FILTER ( ( year(now()) - year(?termEnd) ) <= 20 ) },78.71616387367249,,False,False,,
51,When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?
Answer: I cannot provide you with that information. 

**Explanation:**

1. **Identify relevant properties:** We need to find the release date of the movie ""Worst Case Scenario"" in the Netherlands. 
2. **Structure the query:**
    * Use the DBpedia ontology to find the movie entity.
    * Use the `releaseDate` property to find the release date.
    * Use the `location` property to find the location (Netherlands).

**SPARQL Query:**

```sparql
SELECT ?releaseDate
WHERE {
  ?movie a dbo:Movie .
  ?movie dbo:title ""Worst Case Scenario"" .
  ?movie dbo:releaseDate ?releaseDate .
  FILTER (?releaseDate rdfs:label ""Netherlands""^^<http://www.w3.org/2001/XMLSchema#string>).
}
``` 


**Note:** This query assumes that the DBpedia ontology has information about the movie ""Worst Case Scenario"" and its release date in the Netherlands. 
","PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?rel WHERE { <http://dbpedia.org/resource/Worst_Case_Scenario_(film)> ?p ?o ; dbo:releaseDate ?rel FILTER contains(lcase(str(?o)), ""netherlands"") }",44.5136353969574,"SELECT ?releaseDate
WHERE {
  ?movie a dbo:Movie .
  ?movie dbo:title ""Worst Case Scenario"" .
  ?movie dbo:releaseDate ?releaseDate .
  FILTER (?releaseDate rdfs:label ""Netherlands""^^<http://www.w3.org/2001/XMLSchema#string>).
}",False,False,3.6307455826051263e-155,0.13953488372093023
144,Whom did Lance Bass marry?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whom did Lance Bass marry?
Answer:  The answer is the name of the person Lance Bass married.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/resource/>
SELECT ?spouse
WHERE {
  ?person dbo:marriedTo ?spouse .
  FILTER (lang(?spouse) = ""en"")
}
```



**Explanation:**

1. **Prefixes:**
   - `dbo:` and `dbp:` are prefixes used to shorten the names of the DBpedia ontology and DBpedia resource classes, respectively.

2. **SELECT Clause:**
   - `SELECT ?spouse`: This clause specifies that we want to retrieve the value of the variable `?spouse`, which will represent the name of Lance Bass's spouse.

3. **WHERE Clause:**
   - `?person dbo:marriedTo ?spouse`: This line matches the DBpedia data where a person is married to another person.
   - `FILTER (lang(?spouse) = ""en"")`: This line filters the results to only include matches where the spouse's language is English.

**In summary:** The query searches for all individuals named ""Lance Bass"" and their spouses, filtering for English-language spouses. 


",SELECT DISTINCT ?uri WHERE { {<http://dbpedia.org/resource/Lance_Bass> dbo:spouse ?uri} UNION {?uri dbo:spouse <http://dbpedia.org/resource/Lance_Bass>} },53.71501445770264,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/resource/>
SELECT ?spouse
WHERE {
  ?person dbo:marriedTo ?spouse .
  FILTER (lang(?spouse) = ""en"")
}",True,True,4.905470711005226e-155,0.13793103448275862
167,Which subsidiary of TUI Travel serves both Glasgow and Dublin?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which subsidiary of TUI Travel serves both Glasgow and Dublin?
Answer: 
```sparql
SELECT ?subsidiary
WHERE {
  ?subsidiary a dbo:Company .
  ?subsidiary dbo:hasSubsidiary ?subsidiary2 .
  ?subsidiary2 dbo:hasLocation ?location .
  FILTER (?location = ""Glasgow"" || ?location = ""Dublin"")
  FILTER (?subsidiary2 = ""TUI Travel"" )
}
```
```

**Explanation:**

1. **Identify relevant properties:**
   - `a dbo:Company`:  This property identifies the entity as a company.
   - `dbo:hasSubsidiary`: This property links a company to its subsidiaries.
   - `dbo:hasLocation`: This property links a location to a specific place.

2. **Structure the query:**
   - **SELECT ?subsidiary:** This line specifies that we want to retrieve the name of the subsidiary.
   - **WHERE { ... }:** This block defines the conditions for matching results.
   - **?subsidiary a dbo:Company:** This line ensures that the entity being searched for is a company.
   - **?subsidiary dbo:hasSubsidiary ?subsidiary2:** This line links the subsidiary to its parent company.
   - **?subsidiary2 dbo:hasLocation ?location:** This line links the subsidiary to its location.
   - **FILTER (?location = ""Glasgow"" || ?location = ""Dublin""):** This line filters the results to include only locations that are either ""Glasgow"" or ""Dublin"".
   - **FILTER (?subsidiary2 = ""TUI Travel""):** This line filters the results to include only subsidiaries of TUI Travel.

3. **Output the query:**
   ```sparql
   SELECT ?subsidiary
   WHERE {
     ?subsidiary a dbo:Company .
     ?subsidiary dbo:hasSubsidiary ?subsidiary2 .
",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/TUI_Travel> <http://dbpedia.org/ontology/subsidiary> ?uri . ?uri <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Glasgow_International_Airport> ; <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Dublin_Airport> },80.32618713378906,"SELECT ?subsidiary
WHERE {
  ?subsidiary a dbo:Company .
  ?subsidiary dbo:hasSubsidiary ?subsidiary2 .
  ?subsidiary2 dbo:hasLocation ?location .
  FILTER (?location = ""Glasgow"" || ?location = ""Dublin"")
  FILTER (?subsidiary2 = ""TUI Travel"" )
}",False,True,4.039187183453553e-155,0.14285714285714285
131,What languages are spoken in Pakistan?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What languages are spoken in Pakistan?
```sparql
SELECT ?language
WHERE {
  ?country a dbo:Country .
  ?country dbo:spokenLanguages ?language .
  FILTER (?country = ""Pakistan"")
}
```
",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pakistan> <http://dbpedia.org/ontology/language> ?uri },9.31977915763855,"SELECT ?language
WHERE {
  ?country a dbo:Country .
  ?country dbo:spokenLanguages ?language .
  FILTER (?country = ""Pakistan"")
}",False,True,5.1945147945938015e-155,0.18181818181818182
120,Who is the daughter of Bill Clinton married to?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the daughter of Bill Clinton married to?
Answer:  The daughter of Bill Clinton married to is a unique answer.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?spouse
WHERE {
  ?person dbo:marriedTo ?spouse .
  FILTER regex(?spouse, ""Bill Clinton"")
  FILTER regex(?spouse, ""Bill Clinton"")
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia Ontology (`dbo:`) and RDF Schema (`rdfs:`) to make the query easier to read and understand.
2. **SELECT Clause:** We specify that we want to retrieve the value of the `?spouse` variable.
3. **WHERE Clause:** This clause contains the main logic of the query:
   - **?person dbo:marriedTo ?spouse:** This line matches any statements where a person is married to another entity.
   - **FILTER regex(?spouse, ""Bill Clinton""):** This filters the results to only include marriages where the spouse is ""Bill Clinton"".
   - **FILTER regex(?spouse, ""Bill Clinton""):** This filters the results to only include marriages where the spouse is ""Bill Clinton"".

**Note:** The query assumes that the DBpedia Knowledge Graph contains information about Bill Clinton's marriages. 


Let me know if you have any other questions. 
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { dbr:Bill_Clinton dbo:child ?child . ?child dbo:spouse ?uri . ?uri rdfs:label ?string },61.35985851287842,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?spouse
WHERE {
  ?person dbo:marriedTo ?spouse .
  FILTER regex(?spouse, ""Bill Clinton"")
  FILTER regex(?spouse, ""Bill Clinton"")
}",True,True,0.1903430968442275,0.25641025641025644
164,Who was on the Apollo 11 mission?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was on the Apollo 11 mission?
```sparql
SELECT ?person ?mission
WHERE {
  ?person a dbo:Person .
  ?person dbo:participatedIn ?mission .
  FILTER(?mission = ""Apollo 11"")
}
```
",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Apollo_11> <http://dbpedia.org/property/crewMembers> ?uri },10.007776975631714,"SELECT ?person ?mission
WHERE {
  ?person a dbo:Person .
  ?person dbo:participatedIn ?mission .
  FILTER(?mission = ""Apollo 11"")
}",False,True,5.0437883815744365e-155,0.18181818181818182
88,What is the wavelength of Indigo?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the wavelength of Indigo?
Answer: The wavelength of Indigo is 435-495 nm.


```sparql
SELECT ?wavelength
WHERE {
  ?color a <http://dbpedia.org/ontology/Color> .
  ?color <http://dbpedia.org/ontology/wavelength> ?wavelength .
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia:
   - `prefix dbp: <http://dbpedia.org/ontology/>`
   - `prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> `

2. **SELECT Clause:** We specify that we want to retrieve the value of the `wavelength` property.

3. **WHERE Clause:**
   - `?color a <http://dbpedia.org/ontology/Color>`: This line defines the subject of our query as a `Color` object.
   - `?color <http://dbpedia.org/ontology/wavelength> ?wavelength`: This line specifies the relationship between the `Color` object and the `wavelength` property.

**Note:** This query assumes that the DBpedia Knowledge Graph contains information about colors and their wavelengths. 


Let me know if you have any other questions. 
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?n WHERE { dbr:Indigo dbo:wavelength ?n },56.561249017715454,"SELECT ?wavelength
WHERE {
  ?color a <http://dbpedia.org/ontology/Color> .
  ?color <http://dbpedia.org/ontology/wavelength> ?wavelength .
}",True,True,5.527118757926412e-155,0.1818181818181818
151,Give me all B-sides of the Ramones.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all B-sides of the Ramones.
Answer: 
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?songTitle
WHERE {
  ?song dbo:title ""Ramones"" .
  ?song dbo:isBside ""true"" .
}
```
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?string WHERE { ?x dbo:musicalArtist res:Ramones ; dbo:bSide ?string },23.926208972930908,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?songTitle
WHERE {
  ?song dbo:title ""Ramones"" .
  ?song dbo:isBside ""true"" .
}",True,True,0.1423071532720465,0.19444444444444445
63,Who was called Scarface?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was called Scarface?
Answer: Tony Montana

```sparql
SELECT ?person ?name
WHERE {
  ?person a dbo:Person .
  ?person dbo:name ?name .
  ?person dbo:nickname ""Scarface"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri dbo:alias ?alias FILTER contains(lcase(?alias), ""scarface"") }",11.358875274658203,"SELECT ?person ?name
WHERE {
  ?person a dbo:Person .
  ?person dbo:name ?name .
  ?person dbo:nickname ""Scarface"" .
}",False,True,5.0437883815744365e-155,0.16
27,Which rivers flow into the North Sea?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which rivers flow into the North Sea?
```sparql
SELECT DISTINCT ?river
WHERE {
  ?river a dbo:River .
  ?river dbo:flowsTo ?sea .
  ?sea dbo:name ""North Sea"" .
}
```
",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> ; <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/North_Sea> },9.689178943634031,"SELECT DISTINCT ?river
WHERE {
  ?river a dbo:River .
  ?river dbo:flowsTo ?sea .
  ?sea dbo:name ""North Sea"" .
}",False,True,6.455962524053653e-155,0.23999999999999996
156,Where is Fort Knox located?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where is Fort Knox located?
```sparql
SELECT ?location
WHERE {
  ?location dbpedia:location ""Fort Knox"" .
}
```
",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fort_Knox> <http://dbpedia.org/ontology/location> ?uri. ?uri a <http://dbpedia.org/ontology/Place>. },5.807649612426758,"SELECT ?location
WHERE {
  ?location dbpedia:location ""Fort Knox"" .
}",False,False,5.607479438626032e-155,0.19999999999999998
207,Which daughters of British earls died at the same place they were born at?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which daughters of British earls died at the same place they were born at?
Answer: This question requires a query that retrieves information about daughters of British earls and their places of death. 

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?daughter ?placeOfBirth ?placeOfDeath
WHERE {
  ?daughter dbo:hasFather dbo:isEarl ?earl .
  ?daughter dbo:hasPlaceOfBirth ?placeOfBirth .
  ?daughter dbo:hasPlaceOfDeath ?placeOfDeath .
  FILTER (?placeOfDeath = ?placeOfBirth)
}
```
```
```",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatDaughtersOfBritishEarls ; dbo:birthPlace ?x ; dbo:deathPlace ?y FILTER ( ?x = ?y ) },26.48455786705017,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?daughter ?placeOfBirth ?placeOfDeath
WHERE {
  ?daughter dbo:hasFather dbo:isEarl ?earl .
  ?daughter dbo:hasPlaceOfBirth ?placeOfBirth .
  ?daughter dbo:hasPlaceOfDeath ?placeOfDeath .
  FILTER (?placeOfDeath = ?placeOfBirth)
}",False,False,0.1050176352370787,0.19565217391304346
24,How many emperors did China have?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many emperors did China have?
Answer: The query should retrieve the number of emperors mentioned in the DBpedia Knowledge Graph.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT (COUNT(?emperor)) AS ?count
WHERE {
  ?emperor dbo:name ""Emperor"" .
}
```



**Explanation:**

1. **Prefix:** We start by defining a prefix for DBpedia: `PREFIX dbo: <http://dbpedia.org/ontology/>`. This makes it easier to refer to DBpedia entities and properties.

2. **SELECT:** We use `SELECT (COUNT(?emperor)) AS ?count` to select the count of emperors. The `?emperor` variable represents the entity we are counting.

3. **WHERE:** The `WHERE` clause filters the results. 
   - `?emperor dbo:name ""Emperor"" .` This condition checks for all entities with the property `dbo:name` and the value ""Emperor"". 

**Note:** This query assumes that the DBpedia Knowledge Graph contains information about emperors. 


Let me know if you have any other questions. 
",SELECT COUNT(DISTINCT ?uri AS ?uri) WHERE { ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Emperor_of_China> . },45.80405688285828,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT (COUNT(?emperor)) AS ?count
WHERE {
  ?emperor dbo:name ""Emperor"" .
}",False,True,7.55874475436192e-155,0.23999999999999996
133,What are the names of the Teenage Mutant Ninja Turtles?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the names of the Teenage Mutant Ninja Turtles?
Answer: Leonardo, Donatello, Raphael, Michelangelo

```sparql
SELECT ?name
WHERE {
  ?turtle rdf:type <http://dbpedia.org/ontology/TeenageMutantNinjaTurtle> .
  ?turtle rdf:label ?name .
}
LIMIT 10
```
",PREFIX foaf:<http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?s WHERE { <http://dbpedia.org/resource/Teenage_Mutant_Ninja_Turtles> <http://dbpedia.org/property/members> ?x . ?x foaf:givenName ?s },12.763550996780396,"SELECT ?name
WHERE {
  ?turtle rdf:type <http://dbpedia.org/ontology/TeenageMutantNinjaTurtle> .
  ?turtle rdf:label ?name .
}
LIMIT 10",True,True,5.859491021246916e-155,0.2
103,Where does Piccadilly start?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where does Piccadilly start?
Answer: The starting point of Piccadilly is the intersection of Piccadilly Circus and Shaftesbury Avenue.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?location
WHERE {
  ?location dbo:name ""Piccadilly"" .
  ?location dbo:location ""Piccadilly Circus"" .
  ?location dbo:location ""Shaftesbury Avenue"" .
}
```
",SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/routeStart> <http://dbpedia.org/resource/Piccadilly> },21.25198531150818,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?location
WHERE {
  ?location dbo:name ""Piccadilly"" .
  ?location dbo:location ""Piccadilly Circus"" .
  ?location dbo:location ""Shaftesbury Avenue"" .
}",True,True,4.262352868760118e-155,0.15384615384615383
165,What is the name of the university where Obama's wife studied?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the name of the university where Obama's wife studied?
Answer: The answer is the name of the university where Michelle Obama studied.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?universityName
WHERE {
  ?university ex:isLocatedIn ?location .
  ?location dbo:name ?locationName .
  ?person dbo:name ?personName .
  ?person dbo:marriedTo ?spouse .
  ?spouse dbo:name ?spouseName .
  FILTER(?personName = ""Michelle Obama"")
  FILTER(?locationName = ""Harvard University"")
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia and our example ontology. This makes it easier to refer to specific properties.
2. **SELECT:** We specify that we want to retrieve the value of the variable `?universityName`.
3. **WHERE:** This clause contains the main logic of the query.
   - **?university ex:isLocatedIn ?location:** This line retrieves the university where the person is located.
   - **?location dbo:name ?locationName:** This line retrieves the name of the location.
   - **?person dbo:name ?personName:** This line retrieves the name of the person.
   - **?person dbo:marriedTo ?spouse:** This line retrieves the spouse of the person.
   - **?spouse dbo:name ?spouseName:** This line retrieves the name of the spouse.
   - **FILTER(?personName = ""Michelle Obama""):** This line filters the results to only include the person named ""Michelle Obama"".
   - **FILTER(?locationName = ""Harvard University""):** This line filters the results to only include the location named ""Harvard University"".

**Note:** This query assumes that the DBpedia Knowledge Graph contains information about the location of Michelle",SELECT DISTINCT ?s WHERE { <http://dbpedia.org/resource/Barack_Obama> <http://dbpedia.org/ontology/spouse> ?x . ?x <http://dbpedia.org/ontology/almaMater> ?s },77.56032752990723,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?universityName
WHERE {
  ?university ex:isLocatedIn ?location .
  ?location dbo:name ?locationName .
  ?person dbo:name ?personName .
  ?person dbo:marriedTo ?spouse .
  ?spouse dbo:name ?spouseName .
  FILTER(?personName = ""Michelle Obama"")
  FILTER(?locationName = ""Harvard University"")
}",True,True,3.5950312170181187e-155,0.12820512820512822
108,When did Paraguay proclaim its independence?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When did Paraguay proclaim its independence?
Answer: The query should return the date of the proclamation of independence for Paraguay.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?date
WHERE {
  ?country dbo:declaredIndependence ?date .
  FILTER(?country = ""Paraguay"")
}
```
",SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Paraguay> <http://dbpedia.org/ontology/foundingDate> ?date },16.868741512298584,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?date
WHERE {
  ?country dbo:declaredIndependence ?date .
  FILTER(?country = ""Paraguay"")
}",True,True,2.7175094755457666e-78,0.20833333333333334
15,How short is the shortest active NBA player?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How short is the shortest active NBA player?
Answer: The shortest active NBA player is 5'6"".


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?height
WHERE {
  ?player dbo:height ?height .
  FILTER (?height rdfs:label = ""height"" )
  FILTER (?height  dbo:isHeightOf  ?player)
  FILTER (?player dbo:active = TRUE)
  FILTER (?player dbo:name = ""shortest active NBA player"")
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia Ontology (dbo) and RDF Schema (rdfs). This makes it easier to refer to specific properties and classes.
2. **SELECT:** We specify that we want to retrieve the value of the `?height` variable.
3. **WHERE:** This clause contains the search conditions.
    * **?player dbo:height ?height:** This line retrieves the height of a player using the `dbo:height` property.
    * **FILTER (?height rdfs:label = ""height""):** This filters the results to only include height values with the label ""height"".
    * **FILTER (?height dbo:isHeightOf ?player):** This filters the results to only include height values that are associated with a specific player.
    * **FILTER (?player dbo:active = TRUE):** This filters the results to only include active players.
    * **FILTER (?player dbo:name = ""shortest active NBA player""):** This filters the results to only include players whose name is ""shortest active NBA player"".


This query will return the height of the shortest active NBA player. 


",SELECT DISTINCT ?n WHERE { ?x a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/National_Basketball_Association> ; <http://dbpedia.org/ontology/height> ?n FILTER NOT EXISTS { ?x <http://dbpedia.org/ontology/activeYearsEndYear> ?d } } ORDER BY ASC(?n) OFFSET 0 LIMIT 1,75.20498085021973,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?height
WHERE {
  ?player dbo:height ?height .
  FILTER (?height rdfs:label = ""height"" )
  FILTER (?height  dbo:isHeightOf  ?player)
  FILTER (?player dbo:active = TRUE)
  FILTER (?player dbo:name = ""shortest active NBA player"")
}",False,False,3.6426579016949087e-155,0.0925925925925926
45,Where did Abraham Lincoln die?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did Abraham Lincoln die?
Answer:  The DBpedia Knowledge Graph provides information about Abraham Lincoln's death location. 

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?location
WHERE {
  ?person dbo:deathPlace ?location .
  FILTER regex(?location, ""United States"")
  FILTER lang(?location) = ""en""
  FILTER (dbo:deathPlace( ?person) = ""Lincoln"")
}
```
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri },19.567031621932983,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?location
WHERE {
  ?person dbo:deathPlace ?location .
  FILTER regex(?location, ""United States"")
  FILTER lang(?location) = ""en""
  FILTER (dbo:deathPlace( ?person) = ""Lincoln"")
}",False,False,2.494130347358982e-78,0.2222222222222222
82,When was Jack Wolfskin founded?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When was Jack Wolfskin founded?
```
SELECT ?foundingDate
WHERE {
  ?company a dbo:Company .
  ?company dbo:founded ?foundingDate .
}
```
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT xsd:date(?year) WHERE { res:Jack_Wolfskin dbo:foundingYear ?year },7.690531015396118,"prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When was Jack Wolfskin founded?
```
SELECT ?foundingDate
WHERE {
  ?company a dbo:Company .
  ?company dbo:founded ?foundingDate .
}",False,False,3.3999706075993257e-155,0.0851063829787234
9,In which city is the headquarter of Air China?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which city is the headquarter of Air China?
Answer: Beijing

```sparql
SELECT ?city
WHERE {
  ?company a dbo:Airline .
  ?company dbo:headquarters ?city .
  FILTER(?city = ""Beijing"")
}
```
",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Air_China> <http://dbpedia.org/ontology/headquarter> ?uri . ?uri a <http://dbpedia.org/class/yago/City108524735> },9.366501092910768,"SELECT ?city
WHERE {
  ?company a dbo:Airline .
  ?company dbo:headquarters ?city .
  FILTER(?city = ""Beijing"")
}",False,True,5.931400068694656e-155,0.24999999999999994
201,What is the founding year of the brewery that produces Pilsner Urquell?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the founding year of the brewery that produces Pilsner Urquell?
Answer: 1842


```sparql
SELECT ?foundingYear
WHERE {
  ?brewery a dbo:BeerProductionLocation .
  ?brewery dbo:founded ?foundingYear .
  FILTER(?foundingYear > 1840)
}
```
",PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT xsd:date(?num) WHERE { <http://dbpedia.org/resource/Pilsner_Urquell> <http://dbpedia.org/property/brewery> ?uri . ?uri dbo:foundingYear ?num },13.781661748886108,"SELECT ?foundingYear
WHERE {
  ?brewery a dbo:BeerProductionLocation .
  ?brewery dbo:founded ?foundingYear .
  FILTER(?foundingYear > 1840)
}",False,True,5.667113443314699e-155,0.17857142857142855
171,When did the Boston Tea Party take place?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When did the Boston Tea Party take place?
Answer: The Boston Tea Party took place on **December 16, 1773**.


```sparql
SELECT ?date
WHERE {
  ?event a dbo:Event .
  ?event dbo:date ?date .
  FILTER (?date = ""December 16, 1773"")
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia: `dbpedia:` and `dbo:` for convenience.
2. **SELECT Clause:** We specify that we want to retrieve a single variable, `?date`, which will hold the date of the event.
3. **WHERE Clause:** This clause contains the main logic of the query:
   - **`?event a dbo:Event`:** This line identifies the event as a dbo:Event.
   - **`?event dbo:date ?date`:** This line specifies that the event has a property called `dbo:date` which holds the date.
   - **`FILTER (?date = ""December 16, 1773"")`:** This line filters the results to only include events where the `?date` property is equal to ""December 16, 1773"".


This query effectively searches the DBpedia Knowledge Graph for events with the property `dbo:date` and filters the results to only include the event that corresponds to the Boston Tea Party on December 16, 1773. 
",SELECT DISTINCT ?d WHERE { <http://dbpedia.org/resource/Boston_Tea_Party> <http://dbpedia.org/property/date> ?d },64.26874947547913,"SELECT ?date
WHERE {
  ?event a dbo:Event .
  ?event dbo:date ?date .
  FILTER (?date = ""December 16, 1773"")
}",False,True,4.905470711005226e-155,0.16666666666666666
182,Which animals are critically endangered?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which animals are critically endangered?
```sparql
SELECT DISTINCT ?animal
WHERE {
  ?animal dbpedia:criticalThreatLevel ""Critically Endangered"" .
}
```
","SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Animal> ; <http://dbpedia.org/ontology/conservationStatus> ""CR"" }",6.613400459289551,"SELECT DISTINCT ?animal
WHERE {
  ?animal dbpedia:criticalThreatLevel ""Critically Endangered"" .
}",False,False,7.478986131155753e-155,0.23809523809523808
13,Which politicians were married to a German?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which politicians were married to a German?
```sparql
SELECT ?politician ?spouseNationality WHERE {
  ?politician a dbo:Person .
  ?politician dbo:marriedTo ?spouse .
  FILTER (?spouse a dbo:Person && ?spouse dbo:nationality German)
}
```
",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Politician> ; <http://dbpedia.org/ontology/spouse> ?spouse { ?spouse <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?spouse <http://dbpedia.org/ontology/birthPlace> ?p . ?p <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } },11.215126514434814,"SELECT ?politician ?spouseNationality WHERE {
  ?politician a dbo:Person .
  ?politician dbo:marriedTo ?spouse .
  FILTER (?spouse a dbo:Person && ?spouse dbo:nationality German)
}",False,False,4.311028830153823e-155,0.21212121212121213
114,How big is the earth's diameter?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How big is the earth's diameter?
Answer: The Earth's diameter is approximately 12,742 kilometers.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?diameter
WHERE {
  ?earth dbo:diameter ?diameter .
}
```
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT (( xsd:double(?radius) * 2 ) AS ?diameter) WHERE { res:Earth dbo:meanRadius ?radius },12.501025199890137,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?diameter
WHERE {
  ?earth dbo:diameter ?diameter .
}",True,True,2.0489274805111115e-78,0.22580645161290322
92,Is the wife of President Obama called Michelle?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is the wife of President Obama called Michelle?
```sparql
SELECT ?wife ?spouse
WHERE {
  ?spouse a dbo:Person .
  ?spouse dbo:spouse ?wife .
  ?wife dbo:givenName ""Michelle"" .
  ?spouse dbo:name ?spouseName .
  FILTER(?spouseName = ""Michelle Obama"")
}
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia: `dbpedia:` and `rdf:` for consistency.
2. **SELECT Clause:** We specify the variables we want to retrieve: `?wife` and `?spouse`.
3. **WHERE Clause:** This clause contains the main logic of the query:
   - `?spouse a dbo:Person`: This line identifies the `spouse` variable as a person.
   - `?spouse dbo:spouse ?wife`: This line establishes a relationship between the `spouse` and `wife` variables.
   - `?wife dbo:givenName ""Michelle""`: This line retrieves the `givenName` property of the `wife` variable and checks if it's ""Michelle"".
   - `?spouse dbo:name ?spouseName`: This line retrieves the `name` property of the `spouse` variable and stores it in `spouseName`.
   - `FILTER(?spouseName = ""Michelle Obama"")`: This line filters the results to only include the `spouse` variable whose name is ""Michelle Obama"".

This query effectively retrieves the name of the wife of President Obama. 


","PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX onto: <http://dbpedia.org/ontology/> ASK WHERE { res:Barack_Obama onto:spouse ?spouse . ?spouse rdfs:label ?name FILTER regex(?name, ""Michelle"") }",65.71226835250854,"SELECT ?wife ?spouse
WHERE {
  ?spouse a dbo:Person .
  ?spouse dbo:spouse ?wife .
  ?wife dbo:givenName ""Michelle"" .
  ?spouse dbo:name ?spouseName .
  FILTER(?spouseName = ""Michelle Obama"")
}",False,True,5.498436173236756e-155,0.13157894736842105
194,Which U.S. state has the abbreviation MN?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which U.S. state has the abbreviation MN?
Answer: Minnesota

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/resource/>
SELECT DISTINCT ?state
WHERE {
  ?state dbo:name dbp:MN .
}
```
","SELECT DISTINCT ?uri WHERE { ?uri a yago:WikicatStatesOfTheUnitedStates ; <http://dbpedia.org/property/postalabbreviation> ""MN""^^<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> }",13.22725749015808,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/resource/>
SELECT DISTINCT ?state
WHERE {
  ?state dbo:name dbp:MN .
}",True,True,6.7393716283177006e-155,0.2
175,When did Muhammad die?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When did Muhammad die?
Answer: The DBpedia Knowledge Graph does not contain information about the date of death for Muhammad. 


**SPARQL Query:**

```sparql
SELECT ?deathDate
WHERE {
  ?person a dbo:Person .
  ?person dbo:died ?deathDate .
  FILTER (lang(?deathDate) = ""en"")
}
LIMIT 1
```

**Explanation:**

1. **`SELECT ?deathDate`**: This line specifies that we want to retrieve a single value, which we'll call `?deathDate`.
2. **`WHERE { ... }`**: This block defines the conditions for the query to return results.
3. **`?person a dbo:Person`**: This line indicates that we're looking for a subject that is a ""Person"" entity.
4. **`?person dbo:died ?deathDate`**: This line specifies that we're looking for a relationship between the subject and a property called ""died"". The result of this relationship is stored in the variable `?deathDate`.
5. **`FILTER (lang(?deathDate) = ""en"")`**: This line filters the results to only include dates in English.
6. **`LIMIT 1`**: This line limits the query to return only the first result, which is the date of death. 


**Note:** This query is designed to retrieve the date of death for a person. Since the question asks for the date of death for Muhammad, the query will return a result if it exists. 


",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT xsd:date(?date) WHERE { res:Muhammad dbo:deathDate ?date },65.11149001121521,"SELECT ?deathDate
WHERE {
  ?person a dbo:Person .
  ?person dbo:died ?deathDate .
  FILTER (lang(?deathDate) = ""en"")
}
LIMIT 1",False,True,4.905470711005226e-155,0.13333333333333333
26,What is the atmosphere of the Moon composed of?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the atmosphere of the Moon composed of?
Answer: The atmosphere of the Moon is composed of mostly **anhydrous water vapor** and **carbon dioxide**.


```sparql
SELECT ?atmosphereComponent ?componentValue
WHERE {
  ?moon a dbo:Moon .
  ?moon dbo:atmosphere ?atmosphere .
  ?atmosphere a dbo:Atmosphere .
  ?atmosphere dbo:component ?component .
  ?component a dbo:Component .
  FILTER(?component = ""anhydrous water vapor"")
  FILTER(?component = ""carbon dioxide"")
}
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for the DBpedia namespace and the relevant classes:
   - `dbo:` for DBpedia Ontology
   - `?` for variable placeholder

2. **SELECT Clause:** We specify the variables we want to retrieve:
   - `?atmosphereComponent`: The name of the component
   - `?componentValue`: The value of the component

3. **WHERE Clause:** This clause contains the main logic of the query:
   - `?moon a dbo:Moon`: We select the Moon as the subject of the query.
   - `?moon dbo:atmosphere ?atmosphere`: We select the Moon's atmosphere as the object of the query.
   - `?atmosphere a dbo:Atmosphere`: We select the atmosphere as the object of the query.
   - `?atmosphere dbo:component ?component`: We select the components of the atmosphere as the object of the query.
   - `?component a dbo:Component`: We select the components as the object of the query.
   - `FILTER(?component = ""anhydrous water vapor"")`: We filter the results to include only components with the value ""anhydrous water vapor"".
   - `FILTER(?component = ""carbon dioxide"")`: We filter the results to include only components with the value ""carbon dioxide"".

This query retrieves",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moon> <http://dbpedia.org/property/atmosphereComposition> ?uri },82.99772310256958,"SELECT ?atmosphereComponent ?componentValue
WHERE {
  ?moon a dbo:Moon .
  ?moon dbo:atmosphere ?atmosphere .
  ?atmosphere a dbo:Atmosphere .
  ?atmosphere dbo:component ?component .
  ?component a dbo:Component .
  FILTER(?component = ""anhydrous water vapor"")
  FILTER(?component = ""carbon dioxide"")
}",False,True,3.591703461242313e-155,0.12903225806451613
60,Who is the governor of Texas?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the governor of Texas?
```sparql
SELECT ?governor
WHERE {
  ?governor dbpedia:isPerson .
  ?governor dbpedia:hasPosition dbpedia:GovernorOf .
  FILTER(?governor = ""Texas"")
}
```
",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?string WHERE { res:Texas dbp:governor ?string },10.040334939956663,"SELECT ?governor
WHERE {
  ?governor dbpedia:isPerson .
  ?governor dbpedia:hasPosition dbpedia:GovernorOf .
  FILTER(?governor = ""Texas"")
}",False,False,5.541564466373977e-155,0.16
110,Which movies did Kurosawa direct?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which movies did Kurosawa direct?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?movie
WHERE {
  ?movie dbo:directedBy ?director .
  ?director dbo:name ?directorName .
  FILTER (?directorName = ""Akira Kurosawa"")
}
```
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Akira_Kurosawa },18.25409483909607,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?movie
WHERE {
  ?movie dbo:directedBy ?director .
  ?director dbo:name ?directorName .
  FILTER (?directorName = ""Akira Kurosawa"")
}",True,True,0.12586347848916266,0.18918918918918917
206,What was the name of the famous battle in 1836 in San Antonio?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What was the name of the famous battle in 1836 in San Antonio?
Answer: The query should return the name of the battle.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?battleName
WHERE {
  ?event rdfs:label ""Famous Battle in San Antonio 1836"" .
  ?event dbo:location ""San Antonio"" .
  ?event dbo:date ""1836"" .
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia Ontology (`dbo:`) and RDF Schema (`rdfs:`) to make the query easier to read and understand.
2. **SELECT Clause:** We specify that we want to retrieve the value of the variable `?battleName`.
3. **WHERE Clause:** This clause contains the search criteria:
   - `?event rdfs:label ""Famous Battle in San Antonio 1836""`: This line searches for events with the label ""Famous Battle in San Antonio 1836"".
   - `?event dbo:location ""San Antonio""`: This line ensures that the event is located in San Antonio.
   - `?event dbo:date ""1836""`: This line confirms that the event took place in 1836.

This query effectively searches for events with the specified label, location, and date, and returns the name of the battle. 


","PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri a dbo:MilitaryConflict ; dbo:place dbr:San_Antonio ; dbo:date ?date FILTER ( ?date > ""1835-12-31T00:00:00Z""^^xsd:dateTime ) FILTER ( ?date <= ""1836-12-31T00:00:00Z""^^xsd:dateTime ) }",65.24118089675903,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?battleName
WHERE {
  ?event rdfs:label ""Famous Battle in San Antonio 1836"" .
  ?event dbo:location ""San Antonio"" .
  ?event dbo:date ""1836"" .
}",True,True,0.09559448181846322,0.16666666666666666
97,Give me the official websites of actors of the television show Charmed.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me the official websites of actors of the television show Charmed.
Answer: 
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?website
WHERE {
  ?actor dbo:name ""Charmed"" .
  ?actor dbo:officialWebsite ?website .
}
```
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia and our example ontology. This makes the query easier to read and understand.
2. **SELECT Clause:** We specify that we want to retrieve a single value, which is the official website URL.
3. **WHERE Clause:** This clause contains the main logic of the query.
   - **?actor dbo:name ""Charmed""**: This line selects all actors whose name is ""Charmed"". This is a placeholder for the actual name of the show.
   - **?actor dbo:officialWebsite ?website**: This line selects the official website of each actor.

**Note:** This query assumes that the DBpedia knowledge graph contains information about actors and their official websites. 


",PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charmed> onto:starring ?actors . ?actors foaf:homepage ?uri },47.23877596855164,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?website
WHERE {
  ?actor dbo:name ""Charmed"" .
  ?actor dbo:officialWebsite ?website .
}",True,True,4.253951754115691e-155,0.2
20,How many calories does a baguette have?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many calories does a baguette have?
Answer: The DBpedia Knowledge Graph does not contain information about the calories of a baguette. 

**Query:**
```sparql
SELECT (COUNT(?calorie)) AS ?calories
WHERE {
  ?item a dbo:Food .
  ?item dbo:calories ?calorie .
}
```

**Explanation:**

1. **SELECT (COUNT(?calorie)) AS ?calories:** This line selects the count of the `?calorie` variable and assigns it the alias `?calories`.
2. **WHERE { ... }:** This block defines the query's conditions.
3. **?item a dbo:Food:** This clause specifies that the subject (`?item`) is a thing that has the property `dbo:Food`.
4. **?item dbo:calories ?calorie:** This clause specifies that the subject (`?item`) has the property `dbo:calories` and the value is represented by the variable `?calorie`.


**Note:** This query is designed to retrieve the number of calories associated with a food item. However, it does not specifically target baguettes. 
",SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Baguette> <http://dbpedia.org/property/calories> ?n },45.68534684181213,"SELECT (COUNT(?calorie)) AS ?calories
WHERE {
  ?item a dbo:Food .
  ?item dbo:calories ?calorie .
}",False,True,5.541564466373977e-155,0.1904761904761905
169,Give me all libraries established before 1400.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all libraries established before 1400.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/resource/>
SELECT DISTINCT ?library
WHERE {
  ?library dbo:establishedBefore ?date .
  FILTER (?date > ""1400-01-01""^^<http://www.w3.org/2001/XMLSchema#date>)
}
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia's ontology and resource.
   - `dbo:` represents the DBpedia ontology.
   - `dbp:` represents the DBpedia resource.

2. **SELECT DISTINCT ?library:** This line specifies that we want to retrieve unique library names.

3. **WHERE clause:** This clause contains the query logic.
   - `?library dbo:establishedBefore ?date` : This line retrieves the library name (`?library`) and its corresponding `dbo:establishedBefore` property (`?date`) which represents the date of establishment.
   - `FILTER (?date > ""1400-01-01""^^<http://www.w3.org/2001/XMLSchema#date>)` : This filter ensures that only dates before 1400 are considered.

**Note:** This query assumes that the DBpedia Knowledge Graph contains information about library establishment dates. 


",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Library> ; <http://dbpedia.org/property/established> ?year FILTER ( ?year < 1400 ) },60.71241807937622,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/resource/>
SELECT DISTINCT ?library
WHERE {
  ?library dbo:establishedBefore ?date .
  FILTER (?date > ""1400-01-01""^^<http://www.w3.org/2001/XMLSchema#date>)
}",True,True,6.288131685209581e-155,0.17647058823529413
38,Give me all Frisian islands that belong to the Netherlands.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all Frisian islands that belong to the Netherlands.
Answer: 
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?islandName ?islandCountry
WHERE {
  ?island ex:belongsTo ?country .
  FILTER (?country = ""Netherlands"")
  ?island dbo:name ?islandName .
}
```
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia and our example ontology. This makes it easier to refer to specific properties and classes.
2. **SELECT Clause:** We specify that we want to retrieve the `?islandName` and `?islandCountry` variables.
3. **WHERE Clause:** This is the core of the query. It contains the following steps:
   - **`?island ex:belongsTo ?country`:** This line retrieves all islands (`?island`) that have a relationship with a country (`?country`) using the `ex:belongsTo` property.
   - **`FILTER (?country = ""Netherlands"")`:** This filters the results to only include islands where the `?country` is equal to ""Netherlands"".
   - **`?island dbo:name ?islandName`:** This line retrieves the name of the island (`?islandName`) using the `dbo:name` property.

This query effectively retrieves all Frisian islands that are part of the Netherlands. 


",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatFrisianIslands ; dbo:country res:Netherlands },61.59271240234375,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?islandName ?islandCountry
WHERE {
  ?island ex:belongsTo ?country .
  FILTER (?country = ""Netherlands"")
  ?island dbo:name ?islandName .
}",True,True,0.12586347848916266,0.175
192,Which museum exhibits The Scream by Munch?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which museum exhibits The Scream by Munch?
```sparql
SELECT DISTINCT ?museum ?exhibition
WHERE {
  ?museum a dbo:Museum .
  ?exhibition dbo:exhibits ?artwork .
  ?artwork dbo:title ""The Scream"" .
  ?artwork dbo:artist ""Edvard Munch"" .
}
```
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Scream dbo:museum ?uri },12.866257429122925,"SELECT DISTINCT ?museum ?exhibition
WHERE {
  ?museum a dbo:Museum .
  ?exhibition dbo:exhibits ?artwork .
  ?artwork dbo:title ""The Scream"" .
  ?artwork dbo:artist ""Edvard Munch"" .
}",False,True,5.359624986283916e-155,0.16129032258064516
78,When was the De Beers company founded?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When was the De Beers company founded?
Answer: The De Beers company was founded in 1888.


```sparql
SELECT ?foundingYear
WHERE {
  ?company a dbo:Company .
  ?company dbo:founded ?foundingYear .
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for the DBpedia namespace (`dbo:`).
2. **SELECT Clause:** We specify that we want to retrieve a single variable, `?foundingYear`.
3. **WHERE Clause:**
   - **`?company a dbo:Company`:** This line selects all instances of the `dbo:Company` class.
   - **`?company dbo:founded ?foundingYear`:** This line selects the property `dbo:founded` and associates it with the variable `?foundingYear`.

This query effectively searches the DBpedia Knowledge Graph for instances of the `dbo:Company` class and retrieves the value of the `dbo:founded` property for each instance. 


Let me know if you have any other questions. 
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT xsd:date(?date) WHERE { res:De_Beers dbo:foundingYear ?date },46.90161633491516,"SELECT ?foundingYear
WHERE {
  ?company a dbo:Company .
  ?company dbo:founded ?foundingYear .
}",False,True,5.117896846873718e-155,0.16666666666666666
19,Who became president after JFK died?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who became president after JFK died?
```sparql
SELECT ?person ?startDate
WHERE {
  ?person a dbo:Person .
  ?person dbo:died ?startDate .
  FILTER (?startDate = ""1963-11-22"")
  FILTER (?person = ""John F. Kennedy"")
}
```
```
SELECT DISTINCT ?person ?startDate
WHERE {
  ?person a dbo:Person .
  ?person dbo:died ?startDate .
  FILTER (?startDate = ""1963-11-22"")
  FILTER (?person = ""John F. Kennedy"")
}
```
```
SELECT DISTINCT ?person ?startDate
WHERE {
  ?person a dbo:Person .
  ?person dbo:died ?startDate .
  FILTER (?startDate = ""1963-11-22"")
  FILTER (?person = ""John F. Kennedy"")
}
```
```sparql
SELECT DISTINCT ?person ?startDate
WHERE {
  ?person a dbo:Person .
  ?person dbo:died ?startDate .
  FILTER (?startDate = ""1963-11-22"")
  FILTER (?person = ""John F. Kennedy"")
}
```
**Explanation:**

1. **Identify relevant properties:**
   - `a dbo:Person`: This property indicates that the subject is a person.
   - `dbo:died`: This property indicates the date of death.

2. **Structure the query:**
   - `SELECT DISTINCT ?person ?startDate`: This selects the unique person and their date of death.
   - `WHERE { ... }`: This defines the conditions for the query.
   - `?person a dbo:Person`: This matches the subject with the `dbo:Person` class.
   - `?person dbo:died ?startDate`: This matches the subject with the `dbo",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/property/presidentEnd> ?x . ?uri <http://dbpedia.org/property/presidentStart> ?x; a <http://dbpedia.org/ontology/Person>. },80.97482943534851,"SELECT ?person ?startDate
WHERE {
  ?person a dbo:Person .
  ?person dbo:died ?startDate .
  FILTER (?startDate = ""1963-11-22"")
  FILTER (?person = ""John F. Kennedy"")
}

SELECT DISTINCT ?person ?startDate
WHERE {
  ?person a dbo:Person .
  ?person dbo:died ?startDate .
  FILTER (?startDate = ""1963-11-22"")
  FILTER (?person = ""John F. Kennedy"")
}",False,False,4.143285835425497e-155,0.2121212121212121
190,Who are the parents of the wife of Juan Carlos I?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the parents of the wife of Juan Carlos I?
Answer: The parents of the wife of Juan Carlos I are:
* Juan Carlos I's wife's father
* Juan Carlos I's wife's mother

**SPARQL Query:**

```sparql
SELECT ?father ?mother
WHERE {
  ?wife wdt:P31 wd:Q10477777 .
  ?wife wdt:P17 wd:Q10477778 .
  ?wife wdt:P18 wd:Q10477779 .
  ?wife wdt:P19 wd:Q10477800 .
  ?wife wdt:P20 wd:Q10477801 .
  ?wife wdt:P21 wd:Q10477802 .
  ?wife wdt:P22 wd:Q10477803 .
  ?wife wdt:P23 wd:Q10477804 .
  ?wife wdt:P24 wd:Q10477805 .
  ?wife wdt:P25 wd:Q10477806 .
  ?wife wdt:P26 wd:Q10477807 .
  ?wife wdt:P27 wd:Q10477808 .
  ?wife wdt:P28 wd:Q10477809 .
  ?wife wdt:P29 wd:Q10477810 .
  ?wife wdt:P30 wd:Q10477811 .
  ?wife wdt:P31 wd:Q104",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Juan_Carlos_I_of_Spain dbo:spouse ?x . ?x dbo:parent ?uri },83.89446473121643,,False,False,,
174,Who is the novelist of the work a song of ice and fire?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the novelist of the work a song of ice and fire?
Answer: George R. R. Martin

**SPARQL Query:**

```sparql
SELECT ?author
WHERE {
  ?author a dbo:Person .
  ?work a dbo:Work .
  ?work dbo:title ""A Song of Ice and Fire"" .
  ?author dbo:work ?work .
}
LIMIT 1
```

**Explanation:**

1. **`SELECT ?author`**: This line specifies that we want to retrieve the value of the variable `?author`, which will represent the author's name.
2. **`WHERE { ... }`**: This block defines the conditions for the query to return a result.
3. **`?author a dbo:Person`**: This line indicates that the `?author` variable should be a person, based on the `dbo:Person` property.
4. **`?work a dbo:Work`**: This line indicates that the `?work` variable should be a work, based on the `dbo:Work` property.
5. **`?work dbo:title ""A Song of Ice and Fire""`**: This line specifies that the `?work` variable should have the title ""A Song of Ice and Fire"".
6. **`?author dbo:work ?work`**: This line links the `?author` and `?work` variables, indicating that the `?author` is the author of the `?work`.
7. **`LIMIT 1`**: This line limits the query to return only the first matching result, ensuring that we only retrieve the author of the work.

This query effectively searches the DBpedia Knowledge Graph for the author of the work ""A Song of Ice and Fire"" by linking the author to the work through their shared property. 
",PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?Novelist WHERE { dbr:A_Song_of_Ice_and_Fire dbp:author ?Novelist },79.15078997612,"SELECT ?author
WHERE {
  ?author a dbo:Person .
  ?work a dbo:Work .
  ?work dbo:title ""A Song of Ice and Fire"" .
  ?author dbo:work ?work .
}
LIMIT 1",False,True,4.023062361861117e-155,0.125
189,In which studio did the Beatles record their first album?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which studio did the Beatles record their first album?
Answer: Abbey Road Studios

```sparql
SELECT DISTINCT ?studio
WHERE {
  ?studio rdf:type <http://dbpedia.org/ontology/Studio> .
  ?album rdf:type <http://dbpedia.org/ontology/Album> .
  ?album dbpedia:recordedIn ?studio .
  FILTER(?studio = ""Abbey Road Studios"")
}
```
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX db: <http://dbpedia.org/> SELECT ?studio WHERE { ?album dbo:artist dbr:The_Beatles ; rdf:type dbo:Album ; dbo:releaseDate ?date ; dbp:studio ?studio } ORDER BY ASC(?date) LIMIT 1,17.91511821746826,"SELECT DISTINCT ?studio
WHERE {
  ?studio rdf:type <http://dbpedia.org/ontology/Studio> .
  ?album rdf:type <http://dbpedia.org/ontology/Album> .
  ?album dbpedia:recordedIn ?studio .
  FILTER(?studio = ""Abbey Road Studios"")
}",False,False,1.1488765932586974e-78,0.14285714285714285
152,Which beer brewing companies are located in North-Rhine Westphalia?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which beer brewing companies are located in North-Rhine Westphalia?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/resource/>
SELECT ?company WHERE {
  ?company dbo:name dbp:location ""North-Rhine Westphalia"".
}
```
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?company WHERE { ?company dct:subject dbc:Companies_based_in_North_Rhine-Westphalia ; rdf:type dbo:Brewery },13.652668476104736,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/resource/>
SELECT ?company WHERE {
  ?company dbo:name dbp:location ""North-Rhine Westphalia"".
}",False,False,0.25422767839857935,0.24242424242424243
94,When did princess Diana die?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When did princess Diana die?
Answer: 2017-08-31

```sparql
SELECT ?date
WHERE {
  ?person a dbo:Person .
  ?person dbo:died ?date .
  FILTER(?person = ""Diana, Princess of Wales"")
}
```
```
```","SELECT DISTINCT xsd:date(?d) WHERE { <http://dbpedia.org/resource/Diana,_Princess_of_Wales> <http://dbpedia.org/ontology/deathDate> ?d }",14.113707065582275,"SELECT ?date
WHERE {
  ?person a dbo:Person .
  ?person dbo:died ?date .
  FILTER(?person = ""Diana, Princess of Wales"")
}",False,True,4.905470711005226e-155,0.16
8,Who founded Intel?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who founded Intel?
Answer: Andrew Grove

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?founder
WHERE {
  ?founder dbo:name ""Andrew Grove"" .
}
```
",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Intel> <http://dbpedia.org/property/founders> ?uri },16.25583553314209,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT ?founder
WHERE {
  ?founder dbo:name ""Andrew Grove"" .
}",True,True,5.359624986283916e-155,0.18181818181818182
95,Who is the youngest player in the Premier League?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the youngest player in the Premier League?
Answer: I need to find the player with the youngest age in the Premier League.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?player ?age
WHERE {
  ?player dbo:birthDate ?age .
  FILTER (?age > 0)
  FILTER (dbo:age(?player) = min(?age))
}
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia and our example ontology.
2. **SELECT:** We specify that we want to retrieve the player and their age.
3. **WHERE:** This clause contains the main logic of the query.
   - **?player dbo:birthDate ?age:** This line retrieves the player's birth date and stores it in the variable `?age`.
   - **FILTER (?age > 0):** This ensures that we only consider ages that are greater than 0.
   - **FILTER (dbo:age(?player) = min(?age)):** This filters the results to only include the player with the youngest age.

This query will return a single result, which is the player with the youngest age in the Premier League. 


",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:team ?team . ?league dbo:league res:Premier_League . ?league dbo:team ?team . ?uri dbo:birthDate ?date } ORDER BY DESC(?date) LIMIT 1,55.7968590259552,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?player ?age
WHERE {
  ?player dbo:birthDate ?age .
  FILTER (?age > 0)
  FILTER (dbo:age(?player) = min(?age))
}",True,False,0.09535915765646813,0.20454545454545456
119,Which instruments does Cat Stevens play?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which instruments does Cat Stevens play?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?instrument
WHERE {
  ?artist dbo:plays ?instrument .
  FILTER regex(?instrument, ""guitar"")
}
```
",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cat_Stevens> <http://dbpedia.org/ontology/instrument> ?uri },16.47702193260193,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?instrument
WHERE {
  ?artist dbo:plays ?instrument .
  FILTER regex(?instrument, ""guitar"")
}",True,True,5.0437883815744365e-155,0.16666666666666666
115,How many rivers and lakes are in South Carolina?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many rivers and lakes are in South Carolina?
```sparql
SELECT (COUNT(?river) + COUNT(?lake)) AS ""Total Number of Rivers and Lakes""
WHERE {
  ?river rdf:type <http://dbpedia.org/ontology/River> .
  ?river db:location ?location .
  FILTER (CONTAINS(?location, ""South Carolina""))
}
UNION
SELECT (COUNT(?river) + COUNT(?lake)) AS ""Total Number of Rivers and Lakes""
WHERE {
  ?lake rdf:type <http://dbpedia.org/ontology/Lake> .
  ?lake db:location ?location .
  FILTER (CONTAINS(?location, ""South Carolina""))
}
```

**Explanation:**

1. **Identify relevant properties:** We need to identify properties that link entities to the concept of ""river"" or ""lake"" and to the location of these entities.
2. **Structure the query:**
   - We use the `SELECT` clause to retrieve the count of rivers and lakes.
   - We use the `WHERE` clause to filter the results based on the properties and their values.
   - We use the `UNION` clause to combine the results from two separate queries.
   - We use the `FILTER` clause to restrict the results to entities located in South Carolina.

**Note:** This query assumes that the DBpedia Knowledge Graph contains information about rivers and lakes with the properties `rdf:type`, `db:location`, and `CONTAINS`. 


",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT (COUNT(DISTINCT ?uri) AS ?count) WHERE { { ?uri dbo:location dbr:South_Carolina ; rdf:type dbo:Lake } UNION { ?uri dct:subject dbc:Rivers_and_streams_of_South_Carolina } },65.42787194252014,"SELECT (COUNT(?river) + COUNT(?lake)) AS ""Total Number of Rivers and Lakes""
WHERE {
  ?river rdf:type <http://dbpedia.org/ontology/River> .
  ?river db:location ?location .
  FILTER (CONTAINS(?location, ""South Carolina""))
}
UNION
SELECT (COUNT(?river) + COUNT(?lake)) AS ""Total Number of Rivers and Lakes""
WHERE {
  ?lake rdf:type <http://dbpedia.org/ontology/Lake> .
  ?lake db:location ?location .
  FILTER (CONTAINS(?location, ""South Carolina""))
}",False,False,4.2405338926119485e-155,0.12727272727272726
116,Who was called Rodzilla?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was called Rodzilla?
Answer:  The DBpedia Knowledge Graph should return a list of all individuals who have been called Rodzilla.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?person WHERE {
  ?person dbo:name ""Rodzilla"" .
}
```



**Explanation:**

1. **Prefix:** We start by defining a prefix for DBpedia: `dbo: <http://dbpedia.org/ontology/>`. This makes it easier to refer to DBpedia properties in the query.

2. **SELECT:** We use `SELECT ?person` to specify that we want to retrieve a variable named `?person` which will hold the name of the individual.

3. **WHERE:** We use `WHERE` to define the conditions for the query.

4. **?person dbo:name ""Rodzilla"":** This is the core of the query. We are looking for individuals (`?person`) where the `dbo:name` property is set to the string ""Rodzilla"". 


Let me know if you have any other questions. 
","SELECT DISTINCT ?uri WHERE { ?uri <http://xmlns.com/foaf/0.1/nick> ""Rodzilla""@en }",47.54290533065796,"PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?person WHERE {
  ?person dbo:name ""Rodzilla"" .
}",True,True,6.223629500679345e-155,0.2105263157894737
138,Give me the capitals of all countries in Africa.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me the capitals of all countries in Africa.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?country ?capital
WHERE {
  ?country dbo:capital ?capital .
  FILTER (regex(?capital, ""^[A-Za-z]+$""))
}
```
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia and our example ontology (if applicable).
2. **SELECT Clause:** We specify the variables we want to retrieve: `?country` (the country name) and `?capital` (the capital city).
3. **WHERE Clause:** This is the core of the query.
   - `?country dbo:capital ?capital` : This line matches triples where the subject is a country and the predicate is ""capital"" and the object is a city.
   - `FILTER (regex(?capital, ""^[A-Za-z]+$""))`: This filters the results to only include capitals that consist of only letters (no numbers or special characters).

This query retrieves the country name and its corresponding capital city from the DBpedia Knowledge Graph. 


",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> SELECT DISTINCT ?uri WHERE { ?country dct:subject dbc:Countries_in_Africa ; dbo:capital ?uri },51.10843706130981,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?country ?capital
WHERE {
  ?country dbo:capital ?capital .
  FILTER (regex(?capital, ""^[A-Za-z]+$""))
}",True,True,0.18036773584578106,0.2647058823529412
177,Which bridges are of the same type as the Manhattan Bridge?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which bridges are of the same type as the Manhattan Bridge?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/resource/>
SELECT DISTINCT ?bridgeType WHERE {
  ?bridge dbp:name ""Manhattan Bridge"" .
  ?bridge dbo:type ?bridgeType .
  FILTER (regex(?bridgeType, ""Manhattan Bridge"", ""i""))
}
```
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?bridge WHERE { dbr:Manhattan_Bridge dbo:type ?type . ?bridge dbo:type ?type ; rdf:type dbo:Bridge },18.004374980926514,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/resource/>
SELECT DISTINCT ?bridgeType WHERE {
  ?bridge dbp:name ""Manhattan Bridge"" .
  ?bridge dbo:type ?bridgeType .
  FILTER (regex(?bridgeType, ""Manhattan Bridge"", ""i""))
}",True,True,0.18797772744870717,0.2926829268292683
101,How many companies were founded by the founder of Facebook?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many companies were founded by the founder of Facebook?
Input: DBpedia Knowledge Graph

```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT (COUNT(?company))
WHERE {
  ?company dbpedia:foundedBy dbo:person/dbpedia:name ?founder .
  ?founder dbpedia:name ?name .
  FILTER (regex(?name, ""Mark Zuckerberg"", ""i""))
}
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia and its ontology.
2. **SELECT:** We specify that we want to count the number of companies.
3. **WHERE:** This clause contains the filtering conditions.
   - **?company dbpedia:foundedBy dbo:person/dbpedia:name ?founder:** This line retrieves all companies where the founder is mentioned.
   - **?founder dbpedia:name ?name:** This line retrieves the name of the founder.
   - **FILTER (regex(?name, ""Mark Zuckerberg"", ""i"")):** This line filters the results to only include companies founded by Mark Zuckerberg.

This query will return a single value representing the number of companies founded by Mark Zuckerberg. 
```sparql
SELECT (COUNT(?company))
WHERE {
  ?company dbpedia:foundedBy dbo:person/dbpedia:name ?founder .
  ?founder dbpedia:name ?name .
  FILTER (regex(?name, ""Mark Zuckerberg"", ""i""))
}
```",SELECT (COUNT(DISTINCT ?x) AS ?c) WHERE { <http://dbpedia.org/resource/Facebook> <http://dbpedia.org/ontology/foundedBy> ?uri . ?x <http://dbpedia.org/ontology/foundedBy> ?uri },66.18964886665344,"PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT (COUNT(?company))
WHERE {
  ?company dbpedia:foundedBy dbo:person/dbpedia:name ?founder .
  ?founder dbpedia:name ?name .
  FILTER (regex(?name, ""Mark Zuckerberg"", ""i""))
}

SELECT (COUNT(?company))
WHERE {
  ?company dbpedia:foundedBy dbo:person/dbpedia:name ?founder .
  ?founder dbpedia:name ?name .
  FILTER (regex(?name, ""Mark Zuckerberg"", ""i""))
}",False,False,3.3820843419568566e-155,0.14705882352941174
14,Show me hiking trails in the Grand Canyon where there's no danger of flash floods.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Show me hiking trails in the Grand Canyon where there's no danger of flash floods.
Answer: 
```sparql
SELECT DISTINCT ?trailName
WHERE {
  ?trailName a dbo:HikingTrail .
  ?trailName dbo:hasLocation ?location .
  FILTER ( ?location dbo:hasFeature ?flashFloodDanger )
  FILTER ( NOT EXISTS { ?location dbo:hasFeature ?flashFloodDanger } )
}
```
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia: `dbpedia:` and `dbo:` for convenience.
2. **SELECT DISTINCT:** We use `SELECT DISTINCT ?trailName` to retrieve only unique trail names.
3. **WHERE Clause:**
   - `?trailName a dbo:HikingTrail`: This line specifies that we are looking for trails that are of type `dbo:HikingTrail`.
   - `?trailName dbo:hasLocation ?location`: This line specifies that we are looking for trails that have a location.
   - `FILTER ( ?location dbo:hasFeature ?flashFloodDanger )`: This line filters the results to include only locations that have a feature called `flashFloodDanger`.
   - `FILTER ( NOT EXISTS { ?location dbo:hasFeature ?flashFloodDanger } )`: This line filters the results to include only locations that do not have a feature called `flashFloodDanger`.

This query effectively retrieves all unique hiking trails in the Grand Canyon that have a location and do not have a feature related to flash floods. 


",SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/trailheads> <http://dbpedia.org/resource/Grand_Canyon> FILTER NOT EXISTS { ?uri <http://dbpedia.org/property/hazards> <http://dbpedia.org/resource/Flash_flood> } },66.13945269584656,"SELECT DISTINCT ?trailName
WHERE {
  ?trailName a dbo:HikingTrail .
  ?trailName dbo:hasLocation ?location .
  FILTER ( ?location dbo:hasFeature ?flashFloodDanger )
  FILTER ( NOT EXISTS { ?location dbo:hasFeature ?flashFloodDanger } )
}",False,False,2.4585655092578864e-78,0.2580645161290323
87,Which book has the most pages?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which book has the most pages?
Answer: I need to find the book with the highest number of pages.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?book ?pages
WHERE {
  ?book dbo:pages ?pages .
  FILTER (?pages > 1000)
}
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia Ontology (dbo) and RDF Schema (rdfs). This makes it easier to refer to specific properties and classes.
2. **SELECT Clause:** We specify that we want to retrieve the book (represented by `?book`) and the number of pages (represented by `?pages`).
3. **WHERE Clause:** This is the core of the query.
   - `?book dbo:pages ?pages`: This line retrieves the book and its pages.
   - `FILTER (?pages > 1000)`: This filters the results to only include books with more than 1000 pages.


Let me know if you have any other questions. 
",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book ; dbo:numberOfPages ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1,52.3309428691864,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?book ?pages
WHERE {
  ?book dbo:pages ?pages .
  FILTER (?pages > 1000)
}",True,True,0.1192875495532879,0.175
148,What is the largest state in the United States?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the largest state in the United States?
Answer: The largest state in the United States is California.


```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?state ?area
WHERE {
  ?state a dbo:State .
  ?state dbo:area ?area .
  FILTER (?area > 1000000)
}
```



**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia Ontology (`dbo:`) and RDF Schema (`rdfs:`) to make the query easier to read and understand.
2. **SELECT Clause:** We specify the variables we want to retrieve: `?state` (the name of the state) and `?area` (the area of the state).
3. **WHERE Clause:** This is the core of the query. It contains the following steps:
   - **`?state a dbo:State`:** This line selects all statements where the subject is a state and uses the `dbo:State` class.
   - **`?state dbo:area ?area`:** This line selects statements where the subject is a state and the object is the area.
   - **`FILTER (?area > 1000000)`:** This line filters the results to only include states with an area greater than 1,000,000 square miles.

This query retrieves the name of the state and its area from the DBpedia Knowledge Graph, ensuring that only the largest state is returned. 


",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dct:subject dbc:States_of_the_United_States ; rdf:type dbo:AdministrativeRegion ; dbo:areaTotal ?area } ORDER BY DESC(?area) OFFSET 0 LIMIT 1,71.54787731170654,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?state ?area
WHERE {
  ?state a dbo:State .
  ?state dbo:area ?area .
  FILTER (?area > 1000000)
}",True,True,0.08908968637380799,0.1702127659574468
43,Give me the websites of companies with more than 500000 employees.,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me the websites of companies with more than 500000 employees.
Answer: 
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?website
WHERE {
  ?company dbo:name ?name .
  ?company dbo:employees ?employees .
  FILTER (?employees > 500000)
  FILTER (regex(?name, ""Company"", ""i""))
  FILTER (regex(?name, ""Inc."", ""i""))
  FILTER (regex(?name, ""Ltd."", ""i""))
  FILTER (regex(?name, ""Corporation"", ""i""))
}
```
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia and our example ontology. This makes the query easier to read and understand.
2. **SELECT:** We specify that we want to retrieve the value of the `?website` variable.
3. **WHERE:** This clause contains the main logic of the query.
   - **?company dbo:name ?name:** This line retrieves the name of the company using the `dbo:name` property.
   - **?company dbo:employees ?employees:** This line retrieves the number of employees using the `dbo:employees` property.
   - **FILTER (?employees > 500000):** This line filters the results to only include companies with more than 500000 employees.
   - **FILTER (regex(?name, ""Company"", ""i"")):** This line filters the results to only include companies with names containing ""Company"" (case-insensitive).
   - **FILTER (regex(?name, ""Inc."", ""i"")):** This line filters the results to only include companies with names containing ""Inc."" (case-insensitive).
   - **FILTER (regex(?name, ""Ltd."", ""i"")):** This line filters the",PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT distinct ?web WHERE { ?sub dbo:numberOfEmployees ?obj . ?sub foaf:homepage ?web FILTER( xsd:integer(?obj) > 500000 ) . },84.38979244232178,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX ex: <http://example.org/ontology/>
SELECT ?website
WHERE {
  ?company dbo:name ?name .
  ?company dbo:employees ?employees .
  FILTER (?employees > 500000)
  FILTER (regex(?name, ""Company"", ""i""))
  FILTER (regex(?name, ""Inc."", ""i""))
  FILTER (regex(?name, ""Ltd."", ""i""))
  FILTER (regex(?name, ""Corporation"", ""i""))
}",True,True,0.08171138295067346,0.17647058823529413
179,What were the names of the three ships by Columbus?,google/gemma-2-2b-it,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What were the names of the three ships by Columbus?
Answer: 
```sparql
SELECT ?shipName
WHERE {
  ?shipName a dbo:Ship .
  ?shipName dbo:name ?shipName .
  FILTER (STR(?shipName) = ""Santa Maria"")
  FILTER (STR(?shipName) = ""Pinta"")
  FILTER (STR(?shipName) = ""Niña"")
}
```
```

**Explanation:**

1. **Prefixes:** We start by defining prefixes for DBpedia: `dbpedia:` and `dbo:` for convenience.
2. **SELECT Clause:** We specify that we want to retrieve the names of the ships, which we will call `?shipName`.
3. **WHERE Clause:** This clause contains the main logic of the query.
   - `?shipName a dbo:Ship`: This line indicates that we are looking for entities that are instances of the `dbo:Ship` class.
   - `?shipName dbo:name ?shipName`: This line specifies that we want to retrieve the value of the `dbo:name` property for each ship.
   - `FILTER (STR(?shipName) = ""Santa Maria"")`: This line filters the results to include only ships whose name is ""Santa Maria"".
   - `FILTER (STR(?shipName) = ""Pinta"")`: This line filters the results to include only ships whose name is ""Pinta"".
   - `FILTER (STR(?shipName) = ""Niña"")`: This line filters the results to include only ships whose name is ""Niña"".

This query effectively retrieves the names of the three ships by Columbus from the DBpedia Knowledge Graph. 


",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type dbo:Ship ; dct:subject dbc:Christopher_Columbus ; dct:subject dbc:Exploration_ships },70.77824521064758,"SELECT ?shipName
WHERE {
  ?shipName a dbo:Ship .
  ?shipName dbo:name ?shipName .
  FILTER (STR(?shipName) = ""Santa Maria"")
  FILTER (STR(?shipName) = ""Pinta"")
  FILTER (STR(?shipName) = ""Niña"")
}",False,True,4.417599881331674e-155,0.1388888888888889
