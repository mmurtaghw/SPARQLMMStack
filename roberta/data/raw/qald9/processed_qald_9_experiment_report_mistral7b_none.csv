question_id,question,model,quantization,generated_query,reference_query,time_taken,parsed_generated_query,is_syntax_valid,is_execution_valid,bleu_score,macro_f1
99,What is the time zone of Salt Lake City?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the time zone of Salt Lake City?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?timeZone
WHERE {
  dbr:Salt_Lake_City dbo:timezone ?timeZone .
  FILTER(lang(?timeZone) = 'en')
}
```

Explanation:

1. Prefixes: We use prefixes to make the query more readable and to avoid writing the full URI every time.

2. `SELECT DISTINCT ?timeZone`: This statement selects unique time zones for Salt Lake City.

3. `dbr:Salt_Lake_City dbo:timezone ?timeZone .`: This statement retrieves the time zone of Salt Lake City.

4. `FILTER(lang(?timeZone) = 'en')`: This statement ensures that the time zone is in English.",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Salt_Lake_City <http://dbpedia.org/ontology/timeZone> ?uri },45.15055871009827,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?timeZone
WHERE {
  dbr:Salt_Lake_City dbo:timezone ?timeZone .
  FILTER(lang(?timeZone) = 'en')
}",True,True,7.121386095146805e-155,0.21875
98,Who killed Caesar?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who killed Caesar?

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?murderer ?murdererLabel
WHERE {
  ?murderer dbo:killed ?caesar.
  ?caesar dct:title ""Julius Caesar"".
  ?murderer rdfs:label ?murdererLabel.
  FILTER(lang(?murdererLabel) = ""en"")
}
```

In this query, we are using the DBpedia ontology (dbo) to find the subject that killed Julius Caesar (?caesar). We also use the Dublin Core Terms (dct) to find the title of Caesar, and the RDF Schema (rdfs) and FOAF (foaf) to get the label of the murderer. The FILTER clause ensures that we only get English labels for the murderer.",PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> SELECT DISTINCT ?uri WHERE { ?uri dct:subject dbc:Assassins_of_Julius_Caesar },60.983633279800415,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?murderer ?murdererLabel
WHERE {
  ?murderer dbo:killed ?caesar.
  ?caesar dct:title ""Julius Caesar"".
  ?murderer rdfs:label ?murdererLabel.
  FILTER(lang(?murdererLabel) = ""en"")
}",True,True,0.08442511500499854,0.18181818181818182
86,What is the highest mountain in Germany?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the highest mountain in Germany?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?mountain ?mountainLabel
WHERE {
  ?mountain rdf:type dbo:Mountain .
  ?mountain dbo:inCountry dbr:Germany .
  ?mountain dbo:elevation ?elevation .
  FILTER(?elevation > (SELECT MAX(?elevation) WHERE {
    ?mountain rdf:type dbo:Mountain .
    ?mountain dbo:inCountry dbr:Germany .
    ?mountain dbo:elevation ?elevation
  }))
  ?mountain rdfs:label ?mountainLabel FILTER(lang(?mountainLabel) = ""en"") .
}
```

This query retrieves the highest mountain in Germany by finding the maximum elevation among all mountains in Germany and then selecting the mountain with that elevation. The `FILTER` statement ensures that only English labels are returned.",PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri rdf:type onto:Mountain ; onto:elevation ?elevation ; onto:locatedInArea <http://dbpedia.org/resource/Germany> } ORDER BY DESC(?elevation) LIMIT 1,57.52029728889465,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?mountain ?mountainLabel
WHERE {
  ?mountain rdf:type dbo:Mountain .
  ?mountain dbo:inCountry dbr:Germany .
  ?mountain dbo:elevation ?elevation .
  FILTER(?elevation > (SELECT MAX(?elevation) WHERE {
    ?mountain rdf:type dbo:Mountain .
    ?mountain dbo:inCountry dbr:Germany .
    ?mountain dbo:elevation ?elevation
  }))
  ?mountain rdfs:label ?mountainLabel FILTER(lang(?mountainLabel) = ""en"") .
}",False,True,0.09711223049106384,0.21428571428571427
84,Which American presidents were in office during the Vietnam War?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which American presidents were in office during the Vietnam War?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?president
WHERE {
  ?president a dbo:President .
  ?president dct:subject ?presidentPage .
  ?presidentPage rdf:type dbo:Person .
  ?presidentPage foaf:departmentOf ?vietnamWar .
  ?vietnamWar rdf:type dbo:War .
  ?vietnamWar dbo:startYear ?startYear .
  ?vietnamWar dbo:endYear ?endYear .
  FILTER(?startYear <= 1975 && ?endYear >= 1955)
}
```

This query retrieves the unique American presidents who were in office during the Vietnam War by checking if their term overlaps with the time period of the Vietnam War. The query uses the DBpedia ontology and properties to find the relevant information.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> SELECT ?uri WHERE { ?uri dct:subject dbc:Presidents_of_the_United_States . res:Vietnam_War dbo:commander ?uri },65.99934196472168,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?president
WHERE {
  ?president a dbo:President .
  ?president dct:subject ?presidentPage .
  ?presidentPage rdf:type dbo:Person .
  ?presidentPage foaf:departmentOf ?vietnamWar .
  ?vietnamWar rdf:type dbo:War .
  ?vietnamWar dbo:startYear ?startYear .
  ?vietnamWar dbo:endYear ?endYear .
  FILTER(?startYear <= 1975 && ?endYear >= 1955)
}",True,True,0.10768046681752602,0.19999999999999998
81,Butch Otter is the governor of which U.S. state?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Butch Otter is the governor of which U.S. state?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?stateLabel
WHERE {
  ?governor a dbo:Governor ;
          dbo:governedBy <http://dbpedia.org/resource/Butch_Otter> ;
          dbp:state ?state .
  ?state rdfs:label ?stateLabel .
}
```

This query retrieves the label of the state that Butch Otter governs in the DBpedia Knowledge Graph. It uses the appropriate prefixes for DBpedia ontology, RDF, RDFS, and DBpedia properties. The `DISTINCT` keyword ensures that only unique results are returned.",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/class/yago/WikicatStatesOfTheUnitedStates> ; <http://dbpedia.org/property/governor> <http://dbpedia.org/resource/Butch_Otter> },44.94070172309876,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?stateLabel
WHERE {
  ?governor a dbo:Governor ;
          dbo:governedBy <http://dbpedia.org/resource/Butch_Otter> ;
          dbp:state ?state .
  ?state rdfs:label ?stateLabel .
}",True,True,5.3158692855940656e-155,0.2222222222222222
73,How many gold medals did Michael Phelps win at the 2008 Olympics?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many gold medals did Michael Phelps win at the 2008 Olympics?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT (COUNT(?medal) as ?count)
WHERE {
  ?athlete rdf:type dbo:Athlete .
  ?athlete rdf:type dbo:Person .
  ?athlete rdf:type dbr:Michael_Phelps .
  ?athlete dbo:birthPlace dbr:United_States .
  ?athlete dbo:athleteAt dbr:2008_Summer_Olympics .
  ?athlete dbo:medalCount ?medalCount .
  FILTER(lang(?athlete) = ""en"" && lang(?medalCount) = ""en"")
  BIND(?medalCount AS ?goldMedals)
  FILTER(str(?goldMedals) = ""3"")
}
```

This query retrieves the count of gold medals won by Michael Phelps at the 2008 Olympics. It uses the DBpedia ontology and resource prefixes, and filters the results to only include English language data. The FILTER clause is used to specifically look for the gold medal count of 3.","PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT Count(?sub) as ?c WHERE { ?sub dbo:goldMedalist dbr:Michael_Phelps . filter (contains (str(?sub), ""2008"") && contains (str(?sub), ""Olympics"")) }",65.06998229026794,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT (COUNT(?medal) as ?count)
WHERE {
  ?athlete rdf:type dbo:Athlete .
  ?athlete rdf:type dbo:Person .
  ?athlete rdf:type dbr:Michael_Phelps .
  ?athlete dbo:birthPlace dbr:United_States .
  ?athlete dbo:athleteAt dbr:2008_Summer_Olympics .
  ?athlete dbo:medalCount ?medalCount .
  FILTER(lang(?athlete) = ""en"" && lang(?medalCount) = ""en"")
  BIND(?medalCount AS ?goldMedals)
  FILTER(str(?goldMedals) = ""3"")
}",True,True,0.18493046910349434,0.22388059701492538
66,Which artists were born on the same date as Rachel Stevens?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which artists were born on the same date as Rachel Stevens?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?artist WHERE {
  ?artist a dbo:Artist .
  ?artist dbp:birthDate ?birthDate .
  FILTER (xsd:date(?birthDate) = xsd:date('1978-04-09')) .
  FILTER NOT EXISTS {
    ?artist dbo:birthDate ?birthDate .
    ?artist dbo:Artist .
    FILTER (xsd:date(?birthDate) = xsd:date('1978-04-09')) .
    FILTER(?artist < Rachel_Stevens)
  }
}
```

This query retrieves all artists with the same birthdate as Rachel Stevens, and ensures that the results are unique by using the DISTINCT keyword. The FILTER clause is used to compare the birthdate of each artist with Rachel Stevens' birthdate, and the NOT EXISTS clause is used to exclude artists that are listed before Rachel Stevens in the results.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri a dbo:Artist . dbr:Rachel_Stevens dbo:birthDate ?birthdate . ?uri dbo:birthDate ?birthdate },64.78098821640015,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?artist WHERE {
  ?artist a dbo:Artist .
  ?artist dbp:birthDate ?birthDate .
  FILTER (xsd:date(?birthDate) = xsd:date('1978-04-09')) .
  FILTER NOT EXISTS {
    ?artist dbo:birthDate ?birthDate .
    ?artist dbo:Artist .
    FILTER (xsd:date(?birthDate) = xsd:date('1978-04-09')) .
    FILTER(?artist < Rachel_Stevens)
  }
}",False,False,0.07889074282024067,0.24489795918367344
64,What is the profession of Frank Herbert?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the profession of Frank Herbert?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?profession
WHERE {
  <http://dbpedia.org/resource/Frank_Herbert> dbo:occupation ?profession .
}
```

This query uses the DBpedia ontology to find the occupation of Frank Herbert. It retrieves unique results using the `DISTINCT` keyword and ensures proper SPARQL syntax with prefixes for the relevant namespaces.",PREFIX dbpedia2: <http://dbpedia.org/property/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:Frank_Herbert dbpedia2:occupation ?string },36.37465834617615,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?profession
WHERE {
  <http://dbpedia.org/resource/Frank_Herbert> dbo:occupation ?profession .
}",True,True,6.223629500679345e-155,0.1935483870967742
6,Are Taiko some kind of Japanese musical instrument?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Are Taiko some kind of Japanese musical instrument?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?taiko ?type
WHERE {
  ?taiko a dbo:MusicalInstrument ;
         rdf:type dbo:JapaneseMusicalInstrument .
  OPTIONAL {
    ?taiko rdfs:label ?name .
  }
  FILTER (lang(?name) = ""en"" || lang(?name) = """")
}

# Filter the results to only include Taiko
FILTER (STRSTARTS(STR(?taiko), ""Taiko""))
```

This query retrieves all the Taiko musical instruments that are also Japanese musical instruments from the DBpedia Knowledge Graph. It uses the appropriate prefixes, retrieves unique results, and includes an optional label for the Taiko resource. The FILTER clause is used to only include Taiko in the results.",ASK WHERE { <http://dbpedia.org/resource/Taiko> a <http://dbpedia.org/class/yago/WikicatJapaneseMusicalInstruments> },52.76743507385254,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?taiko ?type
WHERE {
  ?taiko a dbo:MusicalInstrument ;
         rdf:type dbo:JapaneseMusicalInstrument .
  OPTIONAL {
    ?taiko rdfs:label ?name .
  }
  FILTER (lang(?name) = ""en"" || lang(?name) = """")
}

# Filter the results to only include Taiko
FILTER (STRSTARTS(STR(?taiko), ""Taiko""))",False,False,2.939637870305219e-155,0.08163265306122448
56,How many seats does the home stadium of FC Porto have?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many seats does the home stadium of FC Porto have?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?seats
WHERE {
  ?stadium rdf:type dbo:Stadium .
  ?stadium dbo:name ""Estádio do Dragão"" .
  ?stadium dbo:capacity ?seats .
  FILTER (lang(?stadium) = ""en"" || lang(?stadium) = ""pt"")
}
```

This query retrieves the capacity (number of seats) for the Estádio do Dragão, which is the home stadium of FC Porto. The query uses the DBpedia ontology and filters the results to only include stadiums with the correct name in either English or Portuguese. The `DISTINCT` keyword ensures that only unique results are returned.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX db: <http://dbpedia.org/> SELECT ?capacity WHERE { { dbr:FC_Porto dbo:ground ?ground . ?ground dbo:capacity ?capacity } UNION { dbr:FC_Porto dbo:ground ?ground . ?ground dbp:capacity ?capacity } },56.53118085861206,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?seats
WHERE {
  ?stadium rdf:type dbo:Stadium .
  ?stadium dbo:name ""Estádio do Dragão"" .
  ?stadium dbo:capacity ?seats .
  FILTER (lang(?stadium) = ""en"" || lang(?stadium) = ""pt"")
}",True,True,0.24769442531571323,0.25
49,Which frequent flyer program has the most airlines?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which frequent flyer program has the most airlines?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>

SELECT DISTINCT ?frequentFlyerProgram ?count
WHERE {
  ?frequentFlyerProgram rdf:type dbo:FrequentFlyerProgram .
  ?frequentFlyerProgram skos:broader ?airlineGroup .
  ?airlineGroup rdf:type dbo:AirlineGroup .
  OPTIONAL { ?airlineGroup dbo:member ?airline }
  BIND (COUNT(DISTINCT ?airline) AS ?count)
}
GROUP BY ?frequentFlyerProgram
ORDER BY DESC(?count)
LIMIT 1
```

This query retrieves the frequent flyer program with the most airlines by first identifying all frequent flyer programs, then finding their parent airline groups, and counting the number of airlines within each group. The query uses the DBpedia ontology properties `rdf:type`, `skos:broader`, and `dbo:member`. The `DISTINCT` keyword ensures that each airline is only counted once, and the `COUNT` function calculates the total number of airlines per airline group. The `GROUP",SELECT ?uri WHERE { ?airline <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline> . ?airline <http://dbpedia.org/property/frequentFlyer> ?uri. } GROUP BY ?uri ORDER BY DESC(COUNT(DISTINCT ?airline)) OFFSET 0 LIMIT 1,71.22596883773804,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>

SELECT DISTINCT ?frequentFlyerProgram ?count
WHERE {
  ?frequentFlyerProgram rdf:type dbo:FrequentFlyerProgram .
  ?frequentFlyerProgram skos:broader ?airlineGroup .
  ?airlineGroup rdf:type dbo:AirlineGroup .
  OPTIONAL { ?airlineGroup dbo:member ?airline }
  BIND (COUNT(DISTINCT ?airline) AS ?count)
}
GROUP BY ?frequentFlyerProgram
ORDER BY DESC(?count)
LIMIT 1",True,False,1.755543410864178e-78,0.18965517241379312
44,Which European countries have a constitutional monarchy?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which European countries have a constitutional monarchy?

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?country
WHERE {
  ?country rdf:type dbo:Country .
  ?country dbo:hasMonarchy true .
  ?country dbo:hasMonarchyType dbo:ConstitutionalMonarchy .
  FILTER(lang(?country, ""en"") = ""en"" || lang(?country, ""en"") = """" )
  FILTER(?country rdf:value regex ""^dbr.+Europe"")
}
```

This query retrieves the unique countries that are in Europe, have a monarchy, and have a constitutional monarchy. It uses the DBpedia ontology prefixes and filters the results to only include countries with the English language label or no language label, and whose URI starts with ""dbr.+Europe"".",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri dct:subject dbc:Countries_in_Europe ; dbo:governmentType dbr:Constitutional_monarchy },50.27992630004883,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?country
WHERE {
  ?country rdf:type dbo:Country .
  ?country dbo:hasMonarchy true .
  ?country dbo:hasMonarchyType dbo:ConstitutionalMonarchy .
  FILTER(lang(?country, ""en"") = ""en"" || lang(?country, ""en"") = """" )
  FILTER(?country rdf:value regex ""^dbr.+Europe"")
}",False,False,0.11984053756679142,0.169811320754717
42,Which countries have places with more than two caves?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which countries have places with more than two caves?

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?country
WHERE {
  ?country rdf:type dbo:Country .
  ?country dbp:hasCave ?cave .
  ?cave rdf:type dbo:Cave .
  FILTER(COUNT(?cave) > 2)
}
```

This query retrieves countries that have more than two caves. It uses the DBpedia ontology and property prefixes, and ensures unique results by using the DISTINCT keyword.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?cave rdf:type dbo:Cave ; dbo:location ?uri . ?uri rdf:type dbo:Country } GROUP BY ?uri HAVING ( COUNT(?cave) > 2 ),39.50556516647339,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?country
WHERE {
  ?country rdf:type dbo:Country .
  ?country dbp:hasCave ?cave .
  ?cave rdf:type dbo:Cave .
  FILTER(COUNT(?cave) > 2)
}",True,False,0.16454943954232756,0.32
4,"Which airports are located in California, USA?",mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which airports are located in California, USA?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?airport
WHERE {
  ?airport rdf:type dbo:Airport .
  ?airport dbo:location dbr:California .
  ?airport dbo:country dbr:United_States .
}
```

This query retrieves all airports that have California as their location and the United States as their country. The `DISTINCT` keyword ensures that only unique airports are returned. The prefixes are used to simplify the URIs of the properties and resources.",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Airport> { ?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/California> } UNION { ?uri <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/California> } UNION { ?uri <http://dbpedia.org/ontology/city> ?city . ?city <http://dbpedia.org/ontology/isPartOf> <http://dbpedia.org/resource/California> } UNION { ?uri <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/California> } },44.95570778846741,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?airport
WHERE {
  ?airport rdf:type dbo:Airport .
  ?airport dbo:location dbr:California .
  ?airport dbo:country dbr:United_States .
}",True,True,4.447031760088731e-155,0.15
37,What are the nicknames of San Francisco?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the nicknames of San Francisco?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?nickname
WHERE {
  <http://dbpedia.org/resource/San_Francisco> dbo:alternativeName ?nickname .
  FILTER(lang(?nickname) = ""en"")
}
```

Explanation:

1. Prefixes: We use prefixes to make the query more readable and to avoid writing the full URI every time.

2. Query structure: The query uses the `SELECT` statement to retrieve data, `DISTINCT` to ensure unique results, and `WHERE` to filter the results.

3. Subject: The subject is the resource we are interested in, which is San Francisco.

4. Predicate: The predicate is the property we are using to find the nicknames, in this case, `dbo:alternativeName`.

5. Object: The object is the variable we are using to store the nicknames, in this case, `?nickname`.

6. Filter: We use a filter to ensure that the nicknames are in English (`en`).",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX foaf:<http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?string WHERE { res:San_Francisco foaf:nick ?string },56.327139139175415,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?nickname
WHERE {
  <http://dbpedia.org/resource/San_Francisco> dbo:alternativeName ?nickname .
  FILTER(lang(?nickname) = ""en"")
}",True,True,3.132803193844364e-78,0.24242424242424243
32,What is Angela Merkel’s birth name?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is Angela Merkel’s birth name?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?birthName
WHERE {
  ?person rdf:type dbo:Person .
  ?person dbo:birthName ?birthName .
  ?person dbo:name ""Angela Merkel"" .
  FILTER(lang(?birthName) = ""en"")
}
```

This query retrieves the birth name of Angela Merkel from the DBpedia Knowledge Graph. It uses the following prefixes:

- `dbo:` for DBpedia ontology
- `rdf:` and `rdfs:` for RDF and RDF Schema
- `foaf:` for Friend of a Friend ontology
- `dbp:` for DBpedia property

The query selects distinct birth names of a person with the name ""Angela Merkel"". It filters the results to only include birth names in English language.",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?string WHERE { res:Angela_Merkel dbp:birthName ?string },57.31898355484009,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?birthName
WHERE {
  ?person rdf:type dbo:Person .
  ?person dbo:birthName ?birthName .
  ?person dbo:name ""Angela Merkel"" .
  FILTER(lang(?birthName) = ""en"")
}",True,True,0.11424261736422787,0.1951219512195122
31,Who is the mayor of Berlin?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the mayor of Berlin?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?mayor WHERE {
  ?mayor a dbo:Mayor .
  ?mayor dbo:birthPlace dbr:Berlin .
}
```

This query will return the mayor of Berlin by searching for individuals who are a dbo:Mayor and have Berlin as their birthplace. The results will be unique.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Berlin dbp:leader ?uri },21.77161836624145,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?mayor WHERE {
  ?mayor a dbo:Mayor .
  ?mayor dbo:birthPlace dbr:Berlin .
}",True,True,0.19835441454182887,0.3103448275862069
29,Which countries in the European Union adopted the Euro?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which countries in the European Union adopted the Euro?

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?country
WHERE {
  ?country rdf:type dbo:Country .
  ?country dbo:isPartOf dbr:European_Union .
  ?country dbo:currency dbr:Euro .
}
```

This query retrieves unique countries that are of type `dbo:Country`, are part of `dbr:European_Union`, and have `dbo:currency` as `dbr:Euro`.","SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Country> { ?uri <http://dbpedia.org/ontology/currency> <http://dbpedia.org/resource/Euro> } UNION { ?uri <http://dbpedia.org/property/currencyCode> ""EUR""@en } }",45.3246648311615,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?country
WHERE {
  ?country rdf:type dbo:Country .
  ?country dbo:isPartOf dbr:European_Union .
  ?country dbo:currency dbr:Euro .
}",True,True,4.452250377698693e-155,0.1282051282051282
23,Which software has been published by Mean Hamster Software?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which software has been published by Mean Hamster Software?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?software
WHERE {
  ?software rdf:type dbo:Software .
  ?software dct:publisher ?publisher .
  ?publisher rdf:type dbo:Organization .
  ?publisher dbp:name ""Mean Hamster Software"" .
  ?software dbo:publisher ?publisher .
}
```

This query retrieves all software that has been published by Mean Hamster Software. It uses the DBpedia ontology and properties to find the relevant information. The `DISTINCT` keyword ensures that only unique software titles are returned.","PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> PREFIX prop: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Software { ?uri prop:publisher ""Mean Hamster Software""@en } UNION { ?uri onto:publisher res:Mean_Hamster_Software } }",47.37994623184204,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?software
WHERE {
  ?software rdf:type dbo:Software .
  ?software dct:publisher ?publisher .
  ?publisher rdf:type dbo:Organization .
  ?publisher dbp:name ""Mean Hamster Software"" .
  ?software dbo:publisher ?publisher .
}",True,True,0.16298445065846595,0.27777777777777773
68,Which country was Bill Gates born in?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which country was Bill Gates born in?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?country
WHERE {
  ?person rdf:type dbo:Person .
  ?person foaf:name ""Bill Gates"" .
  ?person dbp:birthPlace ?country .
  FILTER (lang(?country) = ""en"")
}
```

This query retrieves the birthplace of Bill Gates from the DBpedia Knowledge Graph, filters for English language results, and ensures unique results by using the `DISTINCT` keyword.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?country WHERE { { dbr:Bill_Gates dbo:birthPlace ?birthPlace . ?birthPlace dbo:country ?country } UNION { dbr:Bill_Gates dbo:birthPlace ?birthPlace . ?birthPlace dbo:isPartOf ?place . ?place dbo:country ?country } },42.83969879150391,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?country
WHERE {
  ?person rdf:type dbo:Person .
  ?person foaf:name ""Bill Gates"" .
  ?person dbp:birthPlace ?country .
  FILTER (lang(?country) = ""en"")
}",True,True,0.2371182232450986,0.2692307692307692
22,How many grand-children did Jacques Cousteau have?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many grand-children did Jacques Cousteau have?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT (COUNT(?grandChild) AS ?count)
WHERE {
  ?person dbo:name ""Jacques Cousteau"" .
  ?person dbo:child ?child .
  ?child dbo:child ?grandChild .
  FILTER(?grandChild IS NOT LITERAL)
}
```

This query retrieves the count of grand-children of Jacques Cousteau by first finding his children and then finding their children (grand-children). The `FILTER(?grandChild IS NOT LITERAL)` ensures that we only get resources (individuals) as results, not literals (strings). The `DISTINCT` keyword is used to ensure that each grand-child is only counted once.",SELECT COUNT(DISTINCT ?y AS ?y) WHERE { <http://dbpedia.org/resource/Jacques_Cousteau> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/ontology/child> ?y . },52.373162269592285,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT (COUNT(?grandChild) AS ?count)
WHERE {
  ?person dbo:name ""Jacques Cousteau"" .
  ?person dbo:child ?child .
  ?child dbo:child ?grandChild .
  FILTER(?grandChild IS NOT LITERAL)
}",False,False,3.860695737644402e-155,0.13953488372093023
214,Give me all professional skateboarders from Sweden.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all professional skateboarders from Sweden.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?skateboarder ?skateboarderLabel
WHERE {
  ?skateboarder a dbo:Skateboarder .
  ?skateboarder dbp:nationality ""Sweden"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""en"" }
}
```

This query retrieves all skateboarders with nationality ""Sweden"" and returns their English labels. The prefixes are defined at the beginning of the query, and the main part of the query uses the `SELECT` statement to retrieve the skateboarders and their labels. The `DISTINCT` keyword ensures that only unique results are returned. The `SERVICE wikibase:label` statement is used to get the English labels for the skateboarders.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation dbr:Skateboarder { ?uri dbo:birthPlace dbr:Sweden } UNION { ?uri dbo:birthPlace ?place . ?place dbo:country dbr:Sweden } },52.05781245231629,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?skateboarder ?skateboarderLabel
WHERE {
  ?skateboarder a dbo:Skateboarder .
  ?skateboarder dbp:nationality ""Sweden"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""en"" }
}",False,False,0.13410639648320277,0.2340425531914894
210,Which monarchs of the United Kingdom were married to a German?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which monarchs of the United Kingdom were married to a German?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?monarch ?monarchLabel ?spouse ?spouseLabel
WHERE {
  ?monarch a dbo:Monarch .
  ?monarch dbo:birthPlace ?birthPlace .
  FILTER(lang(str(?birthPlace), ""en"") = ""United Kingdom"" || str(?birthPlace) = ""United Kingdom"" || str(?birthPlace) = ""UK"")
  ?monarch dbo:spouse ?spouse .
  ?spouse rdf:type dbo:Person .
  OPTIONAL {
    ?spouse dbo:birthPlace ?spouseBirthPlace .
    FILTER(lang(str(?spouseBirthPlace), ""en"") = ""Germany"" || str(?spouseBirthPlace) = ""Germany"" || str(?spouseBirthPlace) = ""Deutschland"")
  }
  SERVICE wikibase:label {
    bd:serviceParam wikibase:language ""en"" .
  }
}
```

This query retrieves unique monarchs of the United Kingdom who were married to a person born in Germany.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatMonarchsOfTheUnitedKingdom ; dbo:spouse ?spouse . ?spouse dbo:birthPlace res:Germany },71.02013635635376,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?monarch ?monarchLabel ?spouse ?spouseLabel
WHERE {
  ?monarch a dbo:Monarch .
  ?monarch dbo:birthPlace ?birthPlace .
  FILTER(lang(str(?birthPlace), ""en"") = ""United Kingdom"" || str(?birthPlace) = ""United Kingdom"" || str(?birthPlace) = ""UK"")
  ?monarch dbo:spouse ?spouse .
  ?spouse rdf:type dbo:Person .
  OPTIONAL {
    ?spouse dbo:birthPlace ?spouseBirthPlace .
    FILTER(lang(str(?spouseBirthPlace), ""en"") = ""Germany"" || str(?spouseBirthPlace) = ""Germany"" || str(?spouseBirthPlace) = ""Deutschland"")
  }
  SERVICE wikibase:label {
    bd:serviceParam wikibase:language ""en"" .
  }
}",False,False,0.08505745744750065,0.2142857142857143
199,Give me all Argentine films.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all Argentine films.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?film
WHERE {
  ?film a dbo:Film .
  ?film dbo:country dbr:Argentina .
  FILTER(lang(?film) = ""en"" || lang(?film) = """")
}
```

This query retrieves all films that are of Argentine origin by using the `dbo:country` property and filtering the results to only include films with English or no language specified (`""""`). The `DISTINCT` keyword ensures that only unique results are returned.","PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { { ?uri rdf:type yago:ArgentineFilms } UNION { ?uri rdf:type dbo:Film { ?uri dbo:country res:Argentina } UNION { ?uri dbp:country ""Argentina""@en } } }",41.274964332580566,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?film
WHERE {
  ?film a dbo:Film .
  ?film dbo:country dbr:Argentina .
  FILTER(lang(?film) = ""en"" || lang(?film) = """")
}",True,True,0.1004485597660917,0.2549019607843137
203,How did Michael Jackson die?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How did Michael Jackson die?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?cause_of_death
WHERE {
  ?person rdf:type dbo:Person .
  ?person rdfs:label ""Michael Jackson"" .
  ?person dbp:deathDate ?death_date .
  ?person dbp:causeOfDeath ?cause_of_death .
  FILTER(xsd:date(?death_date) = xsd:date(STR(YEAR(CURRENT_TIMESTAMP)) || ""-06-25""))
}
```

This query retrieves the cause of death for Michael Jackson from the DBpedia Knowledge Graph. It uses the `dbo:Person`, `rdfs:label`, `dbo:deathDate`, `dbo:causeOfDeath` properties, and filters the results to only include deaths on June 25th (Michael Jackson's actual death date). The `xsd:date()` function is used to convert the death date to a date format that can be compared with the current year. The `STR()` and `YEAR()` functions are used to extract the current year from the timestamp. The `DISTINCT` keyword ensures that only unique",SELECT DISTINCT ?s WHERE { <http://dbpedia.org/resource/Michael_Jackson> <http://dbpedia.org/property/deathCause> ?s },71.01582527160645,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?cause_of_death
WHERE {
  ?person rdf:type dbo:Person .
  ?person rdfs:label ""Michael Jackson"" .
  ?person dbp:deathDate ?death_date .
  ?person dbp:causeOfDeath ?cause_of_death .
  FILTER(xsd:date(?death_date) = xsd:date(STR(YEAR(CURRENT_TIMESTAMP)) || ""-06-25""))
}",False,False,4.069047683587386e-155,0.125
197,Which U.S. state has been admitted latest?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which U.S. state has been admitted latest?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?state ?admissionDate
WHERE {
  ?state a dbo:State .
  ?state dbo:admissionDate ?admissionDate .
  FILTER(lang(?admissionDate) = ""en"" && str(?admissionDate) = str(max(str(?admissionDate))))
}
ORDER BY DESC(str(?admissionDate))
```

This query retrieves the state and its admission date from the DBpedia Knowledge Graph. It uses the `dbo:State` class to filter for states, the `dbo:admissionDate` property to find the admission dates, and the `max()` function to find the latest admission date. The `FILTER` clause ensures that only English language results are considered, and the `str()` function is used to convert the dates to strings for comparison. The `DISTINCT` keyword is used to ensure that only unique results are returned, and the `ORDER BY` clause sorts the results in descending order by the admission date.",PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> SELECT DISTINCT ?uri WHERE { ?uri dct:subject dbc:States_of_the_United_States ; <http://dbpedia.org/property/admittancedate> ?x } ORDER BY DESC(?x) LIMIT 1,52.61172914505005,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?state ?admissionDate
WHERE {
  ?state a dbo:State .
  ?state dbo:admissionDate ?admissionDate .
  FILTER(lang(?admissionDate) = ""en"" && str(?admissionDate) = str(max(str(?admissionDate))))
}
ORDER BY DESC(str(?admissionDate))",True,False,2.1733317480883487e-78,0.16666666666666666
196,Which classes does the Millepede belong to?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which classes does the Millepede belong to?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?class
WHERE {
  BIND(<http://dbpedia.org/resource/Millepede> AS ?millepede)
  OPTIONAL {
    ?millepede rdf:type ?class .
    FILTER(lang(?class) = ""en"")
  }
}
```

This query uses the DBpedia ontology prefixes, retrieves the class of the Millepede resource, and filters the results to only include English class labels. The `DISTINCT` keyword ensures that only unique results are returned.",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?String WHERE { res:Millipede dbp:taxon ?String },43.00366687774658,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?class
WHERE {
  BIND(<http://dbpedia.org/resource/Millepede> AS ?millepede)
  OPTIONAL {
    ?millepede rdf:type ?class .
    FILTER(lang(?class) = ""en"")
  }
}",True,True,0.13750902305262408,0.2105263157894737
188,Give me the homepage of Forbes.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me the homepage of Forbes.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dct: <http://purl.org/dc/terms/>

SELECT DISTINCT ?homepage
WHERE {
  ?forbes dbo:homepage ?homepage .
  ?forbes rdfs:label ""Forbes""@en .
}
```

In this query, we are using the DBpedia ontology (dbo), RDF (rdf), RDFS (rdfs), and Dublin Core (dct) prefixes. We are looking for the homepage of Forbes by using the `dbo:homepage` property and filtering the results to only include entities labeled as ""Forbes"" in English (`rdfs:label ""Forbes""@en`). The `SELECT DISTINCT ?homepage` statement ensures that we get unique results.",PREFIX res: <http://dbpedia.org/resource/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?string WHERE { res:Forbes foaf:homepage ?string },48.00011157989502,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dct: <http://purl.org/dc/terms/>

SELECT DISTINCT ?homepage
WHERE {
  ?forbes dbo:homepage ?homepage .
  ?forbes rdfs:label ""Forbes""@en .
}",True,True,5.714469057614501e-155,0.18181818181818185
187,Who is the husband of Amanda Palmer?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the husband of Amanda Palmer?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?husband
WHERE {
  BIND(URI(""http://dbpedia.org/resource/Amanda_Palmer"") AS ?amanda)
  OPTIONAL {
    ?amanda dbo:spouse ?husband .
  }
  OPTIONAL {
    ?amanda foaf:spouse ?husband .
  }
}
```

This query uses the DBpedia ontology (dbo) and FOAF (foaf) prefixes. It first binds the URI of Amanda Palmer to the variable `?amanda`. Then it searches for the `dbo:spouse` property and the `foaf:spouse` property of Amanda Palmer, storing the results in the variable `?husband`. The `DISTINCT` keyword ensures that only unique results are returned.",SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Amanda_Palmer> },42.201395750045776,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?husband
WHERE {
  BIND(URI(""http://dbpedia.org/resource/Amanda_Palmer"") AS ?amanda)
  OPTIONAL {
    ?amanda dbo:spouse ?husband .
  }
  OPTIONAL {
    ?amanda foaf:spouse ?husband .
  }
}",True,True,4.969162605895617e-155,0.18518518518518517
176,Who painted The Storm on the Sea of Galilee?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who painted The Storm on the Sea of Galilee?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?artist
WHERE {
  ?painting rdf:type dbo:Painting ;
          dbo:paintedBy ?artist ;
          dbo:title ""The Storm on the Sea of Galilee"" .
  FILTER(lang(?painting) = ""en"")
}
```

This query retrieves the artist who painted ""The Storm on the Sea of Galilee"" by searching for paintings with the specified title and filtering the results to only include English language labels.",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:The_Storm_on_the_Sea_of_Galilee dbo:author ?uri },40.70681023597717,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?artist
WHERE {
  ?painting rdf:type dbo:Painting ;
          dbo:paintedBy ?artist ;
          dbo:title ""The Storm on the Sea of Galilee"" .
  FILTER(lang(?painting) = ""en"")
}",True,True,4.938285053323768e-155,0.15555555555555556
62,What is the highest place of Karakoram?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the highest place of Karakoram?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?place ?elevation
WHERE {
  ?place rdf:type dbo:Mountain .
  ?place rdfs:label ?name .
  FILTER(lang(?name) = ""en"" || lang(?name) = """" )
  ?place dbo:locatedInMountainRange dbr:Karakoram .
  OPTIONAL {
    ?place dbo:elevation ?elevation .
  }
  FILTER(lang(?elevation) = ""en"" || lang(?elevation) = """" )
  BIND(MAX(STR(?elevation)) AS ?maxElevation)
  FILTER(?elevation = ?maxElevation)
}
```

This query retrieves the name and elevation of mountains located in the Karakoram mountain range, and selects the one with the highest elevation. The `FILTER` statements ensure that the labels and elevations are in English. The `BIND` statement calculates the maximum elevation and the final `FILTER` statement selects the mountain with that maximum elevation.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Karakoram dbp:highest ?uri },65.46555280685425,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?place ?elevation
WHERE {
  ?place rdf:type dbo:Mountain .
  ?place rdfs:label ?name .
  FILTER(lang(?name) = ""en"" || lang(?name) = """" )
  ?place dbo:locatedInMountainRange dbr:Karakoram .
  OPTIONAL {
    ?place dbo:elevation ?elevation .
  }
  FILTER(lang(?elevation) = ""en"" || lang(?elevation) = """" )
  BIND(MAX(STR(?elevation)) AS ?maxElevation)
  FILTER(?elevation = ?maxElevation)
}",True,False,0.06262411456218506,0.17647058823529413
173,When did Finland join the EU?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When did Finland join the EU?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?date
WHERE {
  ?country rdf:type dbo:Country ;
          dbo:name ""Finland"" ;
          dbo:joinedEU ?date .
  FILTER(lang(?country) = ""en"")
}
```

This query retrieves the date when Finland joined the EU from the DBpedia Knowledge Graph. It uses the appropriate prefixes, and the `SELECT DISTINCT` clause ensures that only unique results are returned. The `FILTER` clause is used to ensure that the country name is in English.",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?date WHERE { res:Finland dbp:accessioneudate ?date },46.49769139289856,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?date
WHERE {
  ?country rdf:type dbo:Country ;
          dbo:name ""Finland"" ;
          dbo:joinedEU ?date .
  FILTER(lang(?country) = ""en"")
}",True,True,0.12813098990837712,0.1951219512195122
168,Which actors play in Big Bang Theory?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which actors play in Big Bang Theory?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?actor
WHERE {
  ?actor rdf:type dbo:Actor .
  ?actor dbo:starringIn dbr:The_Big_Bang_Theory .
}
```

This query retrieves all actors who have played in the TV show ""The Big Bang Theory"" from the DBpedia Knowledge Graph. It uses the appropriate prefixes, and the `DISTINCT` keyword ensures that only unique results are returned.",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Big_Bang_Theory> <http://dbpedia.org/ontology/starring> ?uri },37.86296987533569,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?actor
WHERE {
  ?actor rdf:type dbo:Actor .
  ?actor dbo:starringIn dbr:The_Big_Bang_Theory .
}",True,True,5.253441210115029e-155,0.17857142857142858
166,Which computer scientist won an oscar?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which computer scientist won an oscar?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person a dbo:ComputerScientist .
  ?person dct:award dbp:AcademyAward .
  ?person rdfs:label ?personLabel .
}
```

This query retrieves computer scientists who have won an Academy Award by using the `dbo:ComputerScientist`, `dct:award`, `dbp:AcademyAward`, `rdfs:label` properties. It also ensures unique results using the `DISTINCT` keyword.",SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/field> <http://dbpedia.org/resource/Computer_science> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Academy_Award> },48.85273718833923,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person a dbo:ComputerScientist .
  ?person dct:award dbp:AcademyAward .
  ?person rdfs:label ?personLabel .
}",True,True,4.390825315614416e-155,0.13513513513513511
160,Who wrote Harry Potter?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who wrote Harry Potter?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?author
WHERE {
  ?book rdf:type dbo:Book .
  ?book dbp:title ""Harry Potter"" .
  ?book dbo:author ?author .
  FILTER (lang(?book) = ""en"")
}
```

This query retrieves the author(s) of the book ""Harry Potter"" from the DBpedia Knowledge Graph. It uses the appropriate prefixes, filters for English language results, and ensures unique results by using the `DISTINCT` keyword.",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Harry_Potter> <http://dbpedia.org/property/author> ?uri },45.025468587875366,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?author
WHERE {
  ?book rdf:type dbo:Book .
  ?book dbp:title ""Harry Potter"" .
  ?book dbo:author ?author .
  FILTER (lang(?book) = ""en"")
}",True,True,4.331874694216408e-155,0.13513513513513514
158,Give me all writers that won the Nobel Prize in literature.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all writers that won the Nobel Prize in literature.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?writer
WHERE {
  ?writer a dbo:Person .
  ?writer dbo:birthPlace ?birthPlace .
  ?writer dbo:deathPlace ?deathPlace .
  ?writer dbo:occupation ?occupation .
  FILTER (lang(?occupation) = ""en"" && str(?occupation) = ""Writer"" || str(?occupation) = ""Author"") .
  ?writer dbo:award dbr:NobelPrizeInLiterature .
}
```

This query retrieves all writers (dbo:Person) with the occupation of ""Writer"" or ""Author"" (dbo:occupation), who have received the Nobel Prize in Literature (dbo:award dbr:NobelPrizeInLiterature). It also includes their birthplace, deathplace, and filters the results to only include English language strings for the occupation. The DISTINCT keyword ensures that only unique writers are returned.",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Writer> ; <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Nobel_Prize_in_Literature> },67.56112480163574,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?writer
WHERE {
  ?writer a dbo:Person .
  ?writer dbo:birthPlace ?birthPlace .
  ?writer dbo:deathPlace ?deathPlace .
  ?writer dbo:occupation ?occupation .
  FILTER (lang(?occupation) = ""en"" && str(?occupation) = ""Writer"" || str(?occupation) = ""Author"") .
  ?writer dbo:award dbr:NobelPrizeInLiterature .
}",True,True,3.693616541968686e-155,0.12000000000000001
157,Give me English actors starring in Lovesick.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me English actors starring in Lovesick.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?actor
WHERE {
  ?actor rdf:type dbo:Actor .
  ?actor dbp:nationality ""England"" .
  ?actor dbp:actorInMovie ?movie .
  ?movie rdf:type dbo:Film .
  ?movie dbp:title ""Lovesick"" .
}
```

This query retrieves English actors who have starred in the movie Lovesick. It uses the DBpedia ontology and properties to identify actors, their nationality, and movies they have acted in. The `DISTINCT` keyword ensures that only unique actors are returned.",PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lovesick_(1983_film)> dbo:starring ?uri . ?uri dbo:birthPlace ?city . ?city dbo:country <http://dbpedia.org/resource/United_Kingdom> },49.02068328857422,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?actor
WHERE {
  ?actor rdf:type dbo:Actor .
  ?actor dbp:nationality ""England"" .
  ?actor dbp:actorInMovie ?movie .
  ?movie rdf:type dbo:Film .
  ?movie dbp:title ""Lovesick"" .
}",True,True,1.9314078486661728e-78,0.20930232558139536
155,What is the nick name of Baghdad?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the nick name of Baghdad?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?nickname
WHERE {
  ?city rdfs:label ""Baghdad""@en .
  ?city dbp:nickname ?nickname .
}
```

This query retrieves the nickname of Baghdad from the DBpedia Knowledge Graph. It uses the `rdfs:label` property to find the city with the label ""Baghdad"" and the `dbp:nickname` property to get the nickname. The `DISTINCT` keyword ensures that only unique results are returned.",PREFIX dbr: <http://dbpedia.org/resource/> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT ?nm WHERE { dbr:Baghdad foaf:nick ?nm },34.68626832962036,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?nickname
WHERE {
  ?city rdfs:label ""Baghdad""@en .
  ?city dbp:nickname ?nickname .
}",True,True,4.922348962291463e-155,0.16666666666666669
150,In which city was the president of Montenegro born?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which city was the president of Montenegro born?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?city ?cityLabel
WHERE {
  ?person a dbo:Person ;
          dbo:birthPlace ?city ;
          foaf:name ?name ;
          dbp:nationality dbo:Montenegro .
  ?person dbo:presidentOf dbo:Montenegro .
  ?city rdfs:label ?cityLabel .
  FILTER(lang(?cityLabel) = ""en"")
}
```

This query retrieves the birthplace of a president of Montenegro and the corresponding city label in English. It uses the DBpedia ontology and properties to find the required information.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/title> dbr:President_of_Montenegro ; dbo:birthPlace ?uri . ?uri dbo:type dbr:Capital_city },44.27022552490234,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?city ?cityLabel
WHERE {
  ?person a dbo:Person ;
          dbo:birthPlace ?city ;
          foaf:name ?name ;
          dbp:nationality dbo:Montenegro .
  ?person dbo:presidentOf dbo:Montenegro .
  ?city rdfs:label ?cityLabel .
  FILTER(lang(?cityLabel) = ""en"")
}",True,True,0.0835026435116089,0.22000000000000003
149,Which U.S. state has the highest population density?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which U.S. state has the highest population density?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?state ?populationDensity
WHERE {
  ?state rdf:type dbo:Country ;
          rdfs:label ?stateLabel ;
          dbo:inhabitedBy ?populationTotal .

  ?state dbo:hasPopulationDensity ?populationDensity .
  FILTER(lang(?stateLabel) = ""en"" && isLiteral(?populationDensity) && datatype(?populationDensity) = xsd:float)
  FILTER(?state rdf:value=""http://dbpedia.org/resource/United_States"" || strstarts(str(?state), ""http://dbpedia.org/resource/""))
  FILTER(?populationDensity > (SELECT MAX(?maxDensity) WHERE {
                                  ?maxState rdf:type dbo:Country ;
                                          rdfs:label ?maxStateLabel ;
                                          dbo:inhabitedBy ?maxPopulationTotal .
                                  ?maxState dbo:hasPopulationDensity ?maxDensity .
                                  FILTER(lang(?maxStateLabel)",SELECT ?uri WHERE { ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/ontology/capital> ?capital . ?uri <http://dbpedia.org/property/densityrank> ?density . OPTIONAL {?uri <http://www.w3.org/2000/01/rdf-schema#label> ?string. FILTER (lang(?string) = 'en') } } ORDER BY ASC(?density) LIMIT 1,71.1371021270752,,False,False,,
25,What is the longest river in China?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the longest river in China?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?river ?length
WHERE {
  ?river a dbo:River ;
          dbo:length ?length ;
          dbo:inCountry dbr:China .
  FILTER(lang(?river) = ""en"" || lang(?river) = """")
  FILTER(lang(?length) = ""en"" || lang(?length) = """")
  BIND(MAX(STR(?length)) AS ?maxLength)
  FILTER(STR(?length) = STR(?maxLength))
}
```

This query retrieves the name and length of rivers that are in China, filters for English language results, and selects the river with the maximum length. The `BIND` statement sets the maximum length found so far, and the `FILTER` statement selects only the river with the exact maximum length.",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/China> ; <http://dbpedia.org/property/length> ?l } ORDER BY DESC(?l) OFFSET 0 LIMIT 1,53.8918821811676,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?river ?length
WHERE {
  ?river a dbo:River ;
          dbo:length ?length ;
          dbo:inCountry dbr:China .
  FILTER(lang(?river) = ""en"" || lang(?river) = """")
  FILTER(lang(?length) = ""en"" || lang(?length) = """")
  BIND(MAX(STR(?length)) AS ?maxLength)
  FILTER(STR(?length) = STR(?maxLength))
}",True,False,4.2839350921719445e-155,0.125
143,What is the area code of Berlin?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the area code of Berlin?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?areaCode
WHERE {
  ?city rdf:type dbo:City ;
        dbo:name ""Berlin"" ;
        dbo:areaCode ?areaCode .
  FILTER(lang(?city) = ""en"")
}
```

This query retrieves the area code of Berlin from the DBpedia Knowledge Graph. It uses the following prefixes:

- `dbo:` for DBpedia ontology properties
- `dbr:` for DBpedia resource URIs
- `rdf:` for RDF properties
- `xsd:` for XML Schema datatypes

The query selects distinct area codes for the city named ""Berlin"" and filters the results to only include English language resources.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?string WHERE { res:Berlin dbo:areaCode ?string },48.49824380874634,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?areaCode
WHERE {
  ?city rdf:type dbo:City ;
        dbo:name ""Berlin"" ;
        dbo:areaCode ?areaCode .
  FILTER(lang(?city) = ""en"")
}",True,True,0.10985970458010323,0.2564102564102564
140,How many scientists graduated from an Ivy League university?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many scientists graduated from an Ivy League university?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT COUNT(?scientist) AS ?count
WHERE {
  ?scientist a dbo:Scientist .
  ?scientist foaf:almaMater ?university .
  ?university dbo:isPartOf dbr:Ivy_League .
  FILTER(lang(?scientist) = ""en"")
}
```

This query retrieves the count of scientists who graduated from an Ivy League university. It uses the following prefixes:

- dbo: for DBpedia ontology
- rdf: and rdfs: for RDF and RDFS
- dbr: for DBpedia resource
- foaf: for FOAF
- dbp: for DBpedia property

The query filters the results to only include scientists with an English language label.",SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri a <http://dbpedia.org/ontology/Scientist> ; <http://dbpedia.org/ontology/almaMater> ?university . ?university <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/Ivy_League> ; a <http://dbpedia.org/ontology/University> },59.731696367263794,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT COUNT(?scientist) AS ?count
WHERE {
  ?scientist a dbo:Scientist .
  ?scientist foaf:almaMater ?university .
  ?university dbo:isPartOf dbr:Ivy_League .
  FILTER(lang(?scientist) = ""en"")
}",False,True,1.750652446866496e-78,0.16
139,Which professional surfers were born in Australia?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which professional surfers were born in Australia?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?person ?birthPlace
WHERE {
  ?person rdf:type dbo:ProfessionalSurfer .
  ?person dbp:birthPlace ?birthPlace .
  FILTER(lang(?birthPlace) = ""en"" && str(?birthPlace) = ""Australia""@en)
}
```

This query retrieves all professional surfers (dbo:ProfessionalSurfer) with their birthplace (dbp:birthPlace) and filters the results to only include those born in Australia (str(?birthPlace) = ""Australia""@en). The DISTINCT keyword ensures that only unique results are returned.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { { ?uri dbo:occupation res:Surfer ; dbo:birthPlace res:Australia } UNION { ?uri dbo:occupation res:Surfer ; dbo:birthPlace ?place . ?place dbo:country res:Australia } },51.73267102241516,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?person ?birthPlace
WHERE {
  ?person rdf:type dbo:ProfessionalSurfer .
  ?person dbp:birthPlace ?birthPlace .
  FILTER(lang(?birthPlace) = ""en"" && str(?birthPlace) = ""Australia""@en)
}",True,True,0.09127153924501932,0.1836734693877551
137,Give me all Dutch parties.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all Dutch parties.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?party
WHERE {
  ?party rdf:type dbo:PoliticalParty .
  LANG(?party, ""nl"") @> 0.9 .
}
```

This query retrieves all parties that are of type `dbo:PoliticalParty` and have a language tag of Dutch (`nl`). The `LANG` function checks the language of the resource, and the `@> 0.9` ensures that the language is predominantly Dutch. The `DISTINCT` keyword is used to ensure unique results.",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/PoliticalParty> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Netherlands> },42.264954566955566,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?party
WHERE {
  ?party rdf:type dbo:PoliticalParty .
  LANG(?party, ""nl"") @> 0.9 .
}",False,False,5.1533298068876275e-155,0.15151515151515152
136,How many moons does Mars have?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many moons does Mars have?

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT (COUNT(?moon) AS ?count) WHERE {
  ?planet rdf:type dbo:Planet .
  ?planet rdfs:label ""Mars"" .
  ?planet dbo:hasMoon ?moon .
}
```

This query retrieves the number of moons that Mars has from the DBpedia Knowledge Graph. It uses the following prefixes:

- rdf: - RDF Schema
- rdfs: - RDF Schema
- dbo: - DBpedia ontology
- dbr: - DBpedia resource

The query first defines the variables `?planet`, `?moon`, and `?count`. It then searches for a planet with the label ""Mars"" and checks if it has any moons using the `dbo:hasMoon` property. The `COUNT(?moon)` function is used to count the number of moons, and the `DISTINCT` keyword ensures that each moon is only counted once. The result is the count of moons for Mars.",SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Mars> <http://dbpedia.org/property/satellites> ?n },62.54407072067261,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT (COUNT(?moon) AS ?count) WHERE {
  ?planet rdf:type dbo:Planet .
  ?planet rdfs:label ""Mars"" .
  ?planet dbo:hasMoon ?moon .
}",True,True,4.726550448515237e-155,0.15151515151515152
134,What is Batman's real name?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is Batman's real name?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?realName
WHERE {
  ?character rdf:type dbo:Character .
  ?character dbo:name ""Batman"" .
  ?character dbp:realName ?realName .
  FILTER (lang(?realName) = ""en"")
}
```

This query retrieves the real name of Batman from the DBpedia Knowledge Graph. It uses the appropriate prefixes for DBpedia ontology, RDF, RDFS, FOAF, and DBpedia properties. The `SELECT DISTINCT ?realName` statement ensures that only unique results are returned. The `FILTER (lang(?realName) = ""en"")` statement ensures that the results are in English.","SELECT DISTINCT ?label WHERE { <http://dbpedia.org/resource/Batman> <http://xmlns.com/foaf/0.1/name> ?label FILTER ( str(?label) != ""Batman"" ) }",52.23240375518799,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?realName
WHERE {
  ?character rdf:type dbo:Character .
  ?character dbo:name ""Batman"" .
  ?character dbp:realName ?realName .
  FILTER (lang(?realName) = ""en"")
}",True,True,4.7761523161538545e-155,0.16666666666666666
132,What is Elon Musk famous for?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is Elon Musk famous for?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?famous_for
WHERE {
  BIND(URI(""http://dbpedia.org/resource/Elon_Musk"") AS ?person)
  OPTIONAL {
    ?person dbo:occupation ?job.
    ?job rdfs:label ?job_label.
    FILTER(lang(?job_label) = ""en"")
    BIND(CONCAT(""Occupation: "", STR(?job_label)) AS ?job_label_for_output)
  }
  OPTIONAL {
    ?person dbp:award ?award.
    ?award rdfs:label ?award_label.
    FILTER(lang(?award_label) = ""en"")
    BIND(CONCAT(""Award: "", STR(?award_label)) AS ?award_label_for_output)
  }
  OPTIONAL {
    ?person foaf:knows ?famous_for.
    ?famous_for rdfs:label ?famous_for_label.
    FILTER(lang(?famous_for_label) = ""en"")
",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elon_Musk> <http://dbpedia.org/ontology/knownFor> ?uri },71.18700408935547,"prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is Elon Musk famous for?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?famous_for
WHERE {
  BIND(URI(""http://dbpedia.org/resource/Elon_Musk"") AS ?person)
  OPTIONAL {
    ?person dbo:occupation ?job.
    ?job rdfs:label ?job_label.
    FILTER(lang(?job_label) = ""en"")
    BIND(CONCAT(""Occupation: "", STR(?job_label)) AS ?job_label_for_output)
  }",False,False,3.252876171537949e-155,0.07575757575757576
128,Who is the author of WikiLeaks?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the author of WikiLeaks?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?author WHERE {
  ?page dct:subject wikibase:Q1047.
  ?page rdf:type dbo:Website.
  ?page foaf:isPrimaryTopicOf ?pageArticle.
  ?pageArticle dct:creator ?author.
  FILTER(lang(lang(?author), ""en"") = ""en"")
}
```

Explanation:

1. Prefixes: We use prefixes to make the query more readable and concise. In this case, we use the DBpedia ontology (dbo), Dublin Core (dct), Friend of a Friend (foaf), and RDF (rdf) prefixes.

2. Query structure: The query retrieves the author of the WikiLeaks page by first finding the page (?page) that is the subject of DBpedia resource Q1047 (WikiLeaks) and is a type of dbo:Website. Then, it finds the article (?pageArticle) that is the primary topic of the page and has the author (?author). Finally, it filters the results to only include authors with an English language label (lang(lang(?author), ""en"") = ""en"").

3. Unique results: The DISTINCT keyword is used to ensure that only unique authors are returned.",PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { res:WikiLeaks onto:author ?uri },66.35002255439758,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?author WHERE {
  ?page dct:subject wikibase:Q1047.
  ?page rdf:type dbo:Website.
  ?page foaf:isPrimaryTopicOf ?pageArticle.
  ?pageArticle dct:creator ?author.
  FILTER(lang(lang(?author), ""en"") = ""en"")
}",False,False,4.542803746870438e-155,0.15
126,Sean Parnell was the governor of which U.S. state?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Sean Parnell was the governor of which U.S. state?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?state
WHERE {
  dbr:Sean_Parnell dbo:governedBy ?state .
}
```

This query uses the DBpedia ontology prefixes `dbo:` and `dbr:`. It retrieves the `?state` that Sean Parnell governed, ensuring unique results with the `DISTINCT` keyword.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Sean_Parnell dbo:region ?uri },22.985656023025516,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?state
WHERE {
  dbr:Sean_Parnell dbo:governedBy ?state .
}",True,True,0.25336549464486463,0.3333333333333333
125,How many years was the Ford Model T manufactured?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many years was the Ford Model T manufactured?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?years
WHERE {
  ?car a dbo:Car ;
        dbo:name ""Ford Model T"" ;
        dbp:manufacturedYear ?startYear ;
        dbp:discontinuedYear ?endYear .
  BIND(xsd:year(?endYear) - xsd:year(?startYear) AS ?years)
}
```

This query retrieves the difference in years between the `dbp:manufacturedYear` and `dbp:discontinuedYear` of the `dbo:Car` with the name ""Ford Model T"". The result is filtered to unique values using the `DISTINCT` keyword.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX xsd: <http://www.w3.org/2001/XMLSchema#> PREFIX res: <http://dbpedia.org/resource/> SELECT ?years WHERE { res:Ford_Model_T dbo:productionEndYear ?end ; dbo:productionStartYear ?start. BIND ( ( year(xsd:date(?end)) - year(xsd:date(?start)) ) AS ?years) },49.04034876823425,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?years
WHERE {
  ?car a dbo:Car ;
        dbo:name ""Ford Model T"" ;
        dbp:manufacturedYear ?startYear ;
        dbp:discontinuedYear ?endYear .
  BIND(xsd:year(?endYear) - xsd:year(?startYear) AS ?years)
}",True,True,0.1676495122493199,0.22950819672131148
124,When was Carlo Giuliani shot?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When was Carlo Giuliani shot?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?date
WHERE {
  ?person dbo:birthName ""Carlo Giuliani"" .
  ?person dbo:deathDate ?date .
  FILTER(lang(?date) = ""en"" && xsd:date(?date))
}
```

This query retrieves the death date of Carlo Giuliani from the DBpedia Knowledge Graph. It uses the `dbo:birthName`, `dbo:deathDate`, `dbr:`, `foaf:`, `xsd:`, and `lang()` functions to structure the query. The `FILTER` function is used to ensure that the results are in English and are in date format. The `DISTINCT` keyword is used to ensure that only unique results are returned.",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT xsd:date(?date) WHERE { res:Death_of_Carlo_Giuliani dbo:deathDate ?date },47.07625460624695,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?date
WHERE {
  ?person dbo:birthName ""Carlo Giuliani"" .
  ?person dbo:deathDate ?date .
  FILTER(lang(?date) = ""en"" && xsd:date(?date))
}",True,True,6.684351747530699e-155,0.225
123,Give me all animals that are extinct.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all animals that are extinct.

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?animal
WHERE {
  ?animal a dbo:Animal .
  ?animal dbo:extinct true .
}
```

This query retrieves all animals that are extinct from the DBpedia Knowledge Graph. It uses the following prefixes:

- rdf: - RDF Schema
- rdfs: - RDF Schema
- dbo: - DBpedia Ontology
- dct: - Dublin Core Terms
- dbp: - DBpedia Properties

The query selects distinct animals (?animal) that are of type dbo:Animal and have the property dbo:extinct set to true.","SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Animal> ; <http://dbpedia.org/ontology/conservationStatus> ""EX"" }",49.56829714775085,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?animal
WHERE {
  ?animal a dbo:Animal .
  ?animal dbo:extinct true .
}",True,True,5.200900196683686e-155,0.1818181818181818
122,Who was the wife of President Lincoln?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the wife of President Lincoln?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?wife
WHERE {
  ?person dbo:presidentOf [ rdf:value ""Abraham Lincoln"" ] .
  ?person dbp:spouse ?wife .
  FILTER (lang(?wife, ""en"") = ""en"")
}
```

This query retrieves the wife of President Lincoln from the DBpedia Knowledge Graph. It uses the following prefixes:

- `dbo:` for DBpedia ontology
- `rdf:` and `rdfs:` for RDF and RDF Schema
- `foaf:` for Friend of a Friend ontology
- `dbp:` for DBpedia property

The query first finds a person who was the president of the United States (`dbo:presidentOf` with value ""Abraham Lincoln""). Then it finds the spouse of that person (`dbp:spouse`) and filters the results to only include those with an English label (`lang(?wife, ""en"") = ""en""`). The `DISTINCT` keyword ensures that only unique results are returned.",PREFIX dbr: <http://dbpedia.org/resource/> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?uri ?string WHERE { dbr:Abraham_Lincoln onto:spouse ?uri },66.13044238090515,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?wife
WHERE {
  ?person dbo:presidentOf [ rdf:value ""Abraham Lincoln"" ] .
  ?person dbp:spouse ?wife .
  FILTER (lang(?wife, ""en"") = ""en"")
}",False,False,3.962327745598725e-155,0.13953488372093023
111,How many awards has Bertrand Russell?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many awards has Bertrand Russell?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT (COUNT(?award) AS ?count)
WHERE {
  dbr:Bertrand_Russell dbo:award ?award .
  FILTER(isLiteral(?award) || isURI(?award))
}
```

Explanation:

1. Prefixes: We use the following prefixes to make the query more readable and concise:
   - `dbo:` for DBpedia ontology properties
   - `dbr:` for DBpedia resource URIs
   - `foaf:` for Friend of a Friend (FOAF) ontology properties

2. Query structure: The query uses the `SELECT` statement to retrieve the count of awards for Bertrand Russell.

3. Filter: We use a `FILTER` statement to ensure that only literals or URIs are considered as awards.

4. Variables: We use the `?award` variable to represent each award.

5. Pattern: We use the `dbo:award` property to link Bertrand Russell to his awards.

6. Count: We use the `COUNT` aggregate function to count the number of awards.

7. Distinct: We use the `DISTINCT` keyword to ensure that each award is only counted once.",PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT (COUNT(?Awards) AS ?Counter) WHERE { dbr:Bertrand_Russell dbp:awards ?Awards },63.86981391906738,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT (COUNT(?award) AS ?count)
WHERE {
  dbr:Bertrand_Russell dbo:award ?award .
  FILTER(isLiteral(?award) || isURI(?award))
}",True,True,0.15573188896329046,0.24324324324324326
117,Is Pamela Anderson a vegan?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Pamela Anderson a vegan?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?person ?vegan
WHERE {
  ?person a dbo:Person ;
          dbo:name ""Pamela Anderson"" ;
          foaf:depiction ?image .
  OPTIONAL {
    ?person dbo:diet ?diet .
    FILTER(lang(?diet) = ""en"" && str(?diet) = ""vegan"")
  }
}
```

This query retrieves the person with the name ""Pamela Anderson"" and checks if there is a diet property for that person with the value ""vegan"". The OPTIONAL keyword is used to allow for the possibility that the diet information may not be available for all individuals. The FILTER clause ensures that the diet value is in English and exactly ""vegan"". The DISTINCT keyword is used to ensure that only unique results are returned.",PREFIX dbr: <http://dbpedia.org/resource/> ASK WHERE { dbr:Pamela_Anderson a <http://dbpedia.org/class/yago/WikicatAmericanVegans> },46.00564742088318,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?person ?vegan
WHERE {
  ?person a dbo:Person ;
          dbo:name ""Pamela Anderson"" ;
          foaf:depiction ?image .
  OPTIONAL {
    ?person dbo:diet ?diet .
    FILTER(lang(?diet) = ""en"" && str(?diet) = ""vegan"")
  }
}",True,True,1.644045443302432e-78,0.16666666666666666
59,Which space probes were sent into orbit around the sun?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which space probes were sent into orbit around the sun?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?spaceProbe
WHERE {
  ?spaceProbe rdf:type dbo:SpaceProbe .
  ?spaceProbe dct:subject ?page .
  FILTER(lang(?page) = ""en"")
  ?spaceProbe dbp:orbitType dbp:OrbitAroundSun .
}
```

This query retrieves the unique space probes that have been sent into orbit around the sun from the DBpedia Knowledge Graph. It uses the following prefixes:

- `dbo:` for DBpedia ontology
- `rdf:` for RDF syntax
- `rdfs:` for RDF schema
- `dct:` for Dublin Core terms
- `dbp:` for DBpedia properties

The query filters the results to only include pages in English (`lang(?page) = ""en""`) and checks if the space probe orbits around the sun (`?spaceProbe dbp:orbitType dbp:OrbitAroundSun`).","PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?s WHERE { ?s dct:subject dbc:Missions_to_the_Sun ; rdf:type ?type FILTER ( ?type IN (dbo:Satellite, dbo:ArtificialSatellite) ) }",63.56719660758972,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?spaceProbe
WHERE {
  ?spaceProbe rdf:type dbo:SpaceProbe .
  ?spaceProbe dct:subject ?page .
  FILTER(lang(?page) = ""en"")
  ?spaceProbe dbp:orbitType dbp:OrbitAroundSun .
}",True,True,0.1862178807401515,0.2641509433962264
113,Which German cities have more than 250000 inhabitants?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which German cities have more than 250000 inhabitants?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?city
WHERE {
  ?city a dbo:City ;
         dbo:population ?population ;
         dbo:inhabitedBy ?inhabitant .
  FILTER(lang(lang(?inhabitant), ""en"") = ""German"" || lang(lang(?inhabitant), ""de"") = ""German"")
  FILTER(xsd:integer(?population) > 250000)
}
```

This query retrieves the unique German cities with more than 250000 inhabitants from the DBpedia Knowledge Graph. It uses the following prefixes:

- `dbo:` for DBpedia ontology
- `dbr:` for DBpedia resource
- `foaf:` for Friend of a Friend ontology
- `xsd:` for XML Schema Definition

The query filters the results to only include cities with German inhabitants and a population greater than 250000.",SELECT DISTINCT ?uri WHERE { { ?uri a <http://dbpedia.org/ontology/City> } UNION { ?uri a <http://dbpedia.org/ontology/Town> } ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> ; <http://dbpedia.org/ontology/populationTotal> ?population FILTER ( ?population > 250000 ) },56.22543239593506,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?city
WHERE {
  ?city a dbo:City ;
         dbo:population ?population ;
         dbo:inhabitedBy ?inhabitant .
  FILTER(lang(lang(?inhabitant), ""en"") = ""German"" || lang(lang(?inhabitant), ""de"") = ""German"")
  FILTER(xsd:integer(?population) > 250000)
}",False,False,4.8888779171401834e-155,0.16666666666666669
104,Who is the daughter of Robert Kennedy married to?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the daughter of Robert Kennedy married to?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?spouse
WHERE {
  ?person dbo:daughterOf dbr:Robert_Kennedy .
  ?person foaf:spouse ?spouse .
  FILTER(lang(?person, 'en') = 'en')
}
```

This query retrieves the spouse of Robert Kennedy's daughter, filtering the results to only include English language data. The prefixes are defined at the beginning of the query, and the main part of the query uses the `dbo:daughterOf`, `foaf:spouse`, and `dbr:Robert_Kennedy` properties to find the desired information. The `FILTER` clause is used to ensure that only English language data is returned.",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_F._Kennedy> <http://dbpedia.org/ontology/child> ?child . ?child <http://dbpedia.org/ontology/spouse> ?uri },52.271833658218384,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?spouse
WHERE {
  ?person dbo:daughterOf dbr:Robert_Kennedy .
  ?person foaf:spouse ?spouse .
  FILTER(lang(?person, 'en') = 'en')
}",False,False,4.870253281801218e-155,0.16666666666666666
10,How many students does the Free University of Amsterdam have?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many students does the Free University of Amsterdam have?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT (COUNT(?student) AS ?numStudents)
WHERE {
  BIND(<http://dbpedia.org/resource/Free_University_of_Amsterdam> AS ?university)
  OPTIONAL { ?university dbo:student ?student }
  FILTER (LANG(?student) = ""en"")
}
```

This query uses the DBpedia ontology prefixes, retrieves the count of students for the Free University of Amsterdam, and ensures that only English language results are returned.",SELECT DISTINCT ?num WHERE { dbr:Vrije_Universiteit_Amsterdam <http://dbpedia.org/ontology/numberOfStudents> ?num },33.21868324279785,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT (COUNT(?student) AS ?numStudents)
WHERE {
  BIND(<http://dbpedia.org/resource/Free_University_of_Amsterdam> AS ?university)
  OPTIONAL { ?university dbo:student ?student }
  FILTER (LANG(?student) = ""en"")
}",True,True,4.884188340600192e-155,0.15151515151515152
1,What is the revenue of IBM?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the revenue of IBM?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?revenue
WHERE {
  dbr:IBM dbo:revenue ?revenue .
  FILTER(lang(?revenue) = 'en' || lang(?revenue) = '' || isBlank(?revenue))
}
```

Explanation:

1. Prefixes: We use prefixes to make the query more readable and to avoid writing the full URI every time.

2. `dbr:IBM`: This refers to the IBM resource in DBpedia.

3. `dbo:revenue`: This refers to the revenue property in DBpedia.

4. `?revenue`: This is a variable that will hold the revenue value for IBM.

5. `FILTER(lang(?revenue) = 'en' || lang(?revenue) = '' || isBlank(?revenue))`: This filter ensures that we only get the revenue value in English or if it is blank (indicating no specific value). If the revenue value is in another language, it will be ignored.",PREFIX res: <http://dbpedia.org/resource/> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?number WHERE { res:IBM onto:revenue ?number },55.43303608894348,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?revenue
WHERE {
  dbr:IBM dbo:revenue ?revenue .
  FILTER(lang(?revenue) = 'en' || lang(?revenue) = '' || isBlank(?revenue))
}",True,True,5.689469354416895e-155,0.2
178,How many James Bond movies do exist?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many James Bond movies do exist?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT (COUNT(?movie) AS ?count) WHERE {
  ?movie rdf:type dbo:Film .
  ?movie dbo:title ?title .
  FILTER (lang(?title) = ""en"" && contains(str(?title), ""James Bond"") && contains(str(?title), ""007""))
  ?movie dbo:director dbr:Alfred_Gunn .
}
```

This query retrieves the count of movies with the title containing ""James Bond"" and ""007"" and directed by Alfred Gunn, which is the director of the first James Bond movie, Dr. No. However, it's important to note that DBpedia data may not be complete or accurate, and the query may not return the correct number of James Bond movies. To get a more accurate result, you should use a more specific filter or consider using a different data source.",SELECT (COUNT(DISTINCT ?uri) AS ?c) WHERE { ?uri dct:subject <http://dbpedia.org/resource/Category:James_Bond_films> },60.9949951171875,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT (COUNT(?movie) AS ?count) WHERE {
  ?movie rdf:type dbo:Film .
  ?movie dbo:title ?title .
  FILTER (lang(?title) = ""en"" && contains(str(?title), ""James Bond"") && contains(str(?title), ""007""))
  ?movie dbo:director dbr:Alfred_Gunn .
}",True,True,3.306908134433258e-155,0.10638297872340427
129,Who does the voice of Bart Simpson?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who does the voice of Bart Simpson?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?actor
WHERE {
  ?character a dbo:Character ;
          dbo:characterName ""Bart Simpson"" ;
          dbp:voiceActor ?actor .
  FILTER(lang(?actor) = ""en"")
}
```

This query retrieves the English voice actor of Bart Simpson from the DBpedia Knowledge Graph. It uses the following prefixes:

- `dbo:` for DBpedia ontology
- `rdf:` and `rdfs:` for RDF and RDF Schema
- `foaf:` for Friend of a Friend ontology
- `dbp:` for DBpedia property

The query selects distinct `?actor` values, where the character's name is ""Bart Simpson"" and the voice actor is the given actor. The `FILTER` clause ensures that only English language results are returned.",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bart_Simpson> <http://dbpedia.org/property/voiceactor> ?uri },57.5566029548645,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?actor
WHERE {
  ?character a dbo:Character ;
          dbo:characterName ""Bart Simpson"" ;
          dbp:voiceActor ?actor .
  FILTER(lang(?actor) = ""en"")
}",True,True,4.5163280016739766e-155,0.13513513513513514
183,Who was Tom Hanks married to?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was Tom Hanks married to?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?spouseName WHERE {
  BIND(URI(""http://dbpedia.org/resource/Tom_Hanks"") AS ?tomHanks)
  OPTIONAL {
    ?tomHanks foaf:spouse ?spouse.
    ?spouse rdfs:label ?spouseName.
  }
}
```

This query uses the DBpedia ontology and FOAF ontology to find the spouse of Tom Hanks and retrieve their name. The `DISTINCT` keyword ensures that only unique results are returned.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { dbr:Tom_Hanks dbo:spouse ?uri },30.97768878936768,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?spouseName WHERE {
  BIND(URI(""http://dbpedia.org/resource/Tom_Hanks"") AS ?tomHanks)
  OPTIONAL {
    ?tomHanks foaf:spouse ?spouse.
    ?spouse rdfs:label ?spouseName.
  }
}",True,True,0.13706146326959745,0.23529411764705882
181,Through which countries does the Yenisei river flow?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Through which countries does the Yenisei river flow?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?countryLabel
WHERE {
  ?river rdf:type dbo:River ;
        dbo:hasCurrent dbr:Yenisei ;
        dbo:flowsThrough ?country .
  ?country rdfs:label ?countryLabel .
}
```

This query retrieves the labels of countries that the Yenisei river flows through. It uses the DBpedia ontology properties `rdf:type`, `dbo:hasCurrent`, and `dbo:flowsThrough`. The `DISTINCT` keyword ensures that only unique results are returned.",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Yenisei_River <http://dbpedia.org/ontology/country> ?uri },43.7430579662323,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?countryLabel
WHERE {
  ?river rdf:type dbo:River ;
        dbo:hasCurrent dbr:Yenisei ;
        dbo:flowsThrough ?country .
  ?country rdfs:label ?countryLabel .
}",True,True,5.3158692855940656e-155,0.18421052631578946
7,Give me all cars that are produced in Germany.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all cars that are produced in Germany.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?car
WHERE {
  ?car rdf:type dbo:Car .
  ?car dbo:placeOfOrigin dbr:Germany .
}
```

This query retrieves all resources that are of type `dbo:Car` and have `dbo:placeOfOrigin` as `dbr:Germany`. The `DISTINCT` keyword ensures that only unique results are returned.",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Automobile> { ?uri <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Germany> } UNION { ?uri <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Germany> } UNION { { ?uri <http://dbpedia.org/ontology/manufacturer> ?x } UNION { ?uri <http://dbpedia.org/property/manufacturer> ?x } { ?x <http://dbpedia.org/ontology/locationCountry> <http://dbpedia.org/resource/Germany> } UNION { ?x <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Germany> } } },40.86757588386536,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?car
WHERE {
  ?car rdf:type dbo:Car .
  ?car dbo:placeOfOrigin dbr:Germany .
}",True,True,2.862018651966109e-155,0.12820512820512822
135,When did Michael Jackson die?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When did Michael Jackson die?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?deathDate
WHERE {
  ?person rdf:type dbo:Person .
  ?person dbo:name ""Michael Jackson"" .
  ?person dbo:deathDate ?deathDate .
  FILTER(lang(?deathDate) = ""en"")
}
```

This query retrieves the death date of Michael Jackson from the DBpedia Knowledge Graph. It uses the following prefixes:

- `dbo:` for DBpedia ontology
- `rdf:` for RDF syntax
- `rdfs:` for RDF schema
- `xsd:` for XML schema

The query selects distinct death dates for a person named ""Michael Jackson"" and filters the results to only include English language labels.",SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Michael_Jackson> <http://dbpedia.org/ontology/deathDate> ?date },51.69345760345459,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?deathDate
WHERE {
  ?person rdf:type dbo:Person .
  ?person dbo:name ""Michael Jackson"" .
  ?person dbo:deathDate ?deathDate .
  FILTER(lang(?deathDate) = ""en"")
}",True,True,4.583254795053136e-155,0.14705882352941177
50,What is the highest volcano in Africa?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the highest volcano in Africa?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?volcano ?height
WHERE {
  ?volcano rdf:type dbo:Volcano .
  ?volcano dbo:elevation ?height .
  FILTER(lang(?volcano) = ""en"")
  FILTER(str(?continent) = ""Africa"")
  OPTIONAL {
    ?volcano dbo:continent ?continent .
  }
  BIND(STRAFTER(str(?height), 'm') AS ?heightUnit)
}
ORDER BY DESC(?height)
LIMIT 1
```

This query retrieves the highest volcano in Africa by filtering the results based on the language and continent of the volcano resource. It also includes an optional filter to get the continent of the volcano if available, and it binds the unit of measurement (m) to the height variable for easier readability. The results are ordered in descending order by height and limited to one result.",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Volcano> ; <http://dbpedia.org/ontology/locatedInArea> ?area . ?area dct:subject dbc:Countries_in_Africa . ?uri <http://dbpedia.org/ontology/elevation> ?elevation } ORDER BY DESC(?elevation) LIMIT 1,59.97415637969971,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?volcano ?height
WHERE {
  ?volcano rdf:type dbo:Volcano .
  ?volcano dbo:elevation ?height .
  FILTER(lang(?volcano) = ""en"")
  FILTER(str(?continent) = ""Africa"")
  OPTIONAL {
    ?volcano dbo:continent ?continent .
  }
  BIND(STRAFTER(str(?height), 'm') AS ?heightUnit)
}
ORDER BY DESC(?height)
LIMIT 1",True,True,1.824076240130011e-78,0.1724137931034483
39,Which poet wrote the most books?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which poet wrote the most books?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?poet ?numBooks
WHERE {
  ?poet rdf:type dbo:Poet .
  ?poet dbo:numBooks ?numBooks .
  FILTER(lang(?numBooks) = 'en')
  BIND(COUNT(?book) AS ?numBooks) {
    ?poet dbo:author ?book .
    FILTER(lang(lang(?book) ) = 'en')
  }
}
ORDER BY DESC(?numBooks)
LIMIT 1
```

This query retrieves the poet who has written the most books in the DBpedia Knowledge Graph. It uses the `dbo:Poet` class to filter poets, the `dbo:numBooks` property to get the number of books written by each poet, and the `dbo:author` property to link each book to its author. The `FILTER` clause is used to ensure that the language of the book and number of books is English. The `BIND` clause is used to count the number of books for each poet. The `ORDER BY` clause sorts the results in descending order, and the `LIMIT` clause returns only the top result.",SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Poet> . ?x <http://dbpedia.org/ontology/author> ?uri . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book> . } ORDER BY DESC(COUNT(?x)) OFFSET 0 LIMIT 1,69.669349193573,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?poet ?numBooks
WHERE {
  ?poet rdf:type dbo:Poet .
  ?poet dbo:numBooks ?numBooks .
  FILTER(lang(?numBooks) = 'en')
  BIND(COUNT(?book) AS ?numBooks) {
    ?poet dbo:author ?book .
    FILTER(lang(lang(?book) ) = 'en')
  }
}
ORDER BY DESC(?numBooks)
LIMIT 1",True,False,1.8938679245917267e-78,0.18181818181818182
83,Give me all gangsters from the prohibition era.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all gangsters from the prohibition era.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person rdf:type dbo:Gangster .
  ?person dbp:birthDate ?birthDate .
  FILTER(STRSTARTS(STR(?birthDate), ""1890-""))
  ?person dbp:deathDate ?deathDate .
  FILTER(STR(?deathDate) <= ""1933-12-31"") .
  ?person rdfs:label ?personLabel .
}
```

This query retrieves all individuals that are of type `dbo:Gangster`, have a birth date between 1890 and the end of the prohibition era (1933-12-31), and have a label. The `FILTER` statements are used to limit the results to individuals born during the prohibition era. The `DISTINCT` keyword ensures that only unique results are returned.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation dbr:Gangster ; dct:subject dbc:Prohibition-era_gangsters },57.81570386886597,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person rdf:type dbo:Gangster .
  ?person dbp:birthDate ?birthDate .
  FILTER(STRSTARTS(STR(?birthDate), ""1890-""))
  ?person dbp:deathDate ?deathDate .
  FILTER(STR(?deathDate) <= ""1933-12-31"") .
  ?person rdfs:label ?personLabel .
}",True,True,0.08202101859611703,0.16326530612244897
71,Give me all spacecrafts that flew to Mars.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all spacecrafts that flew to Mars.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?spacecraft ?spacecraftLabel
WHERE {
  ?spacecraft rdf:type dbo:Spacecraft .
  ?spacecraft dbo:launchPlace ?launchPlace .
  ?launchPlace rdfs:label ?launchPlaceLabel .
  FILTER (lang(?launchPlaceLabel) = ""en"" || lang(?launchPlaceLabel) = """" )
  ?spacecraft dbo:destination ?destination .
  ?destination rdfs:label ?destinationLabel .
  FILTER (lang(?destinationLabel) = ""en"" || lang(?destinationLabel) = """" )
  FILTER (?destinationLabel = ""Mars"" || (strstarts(str(?destinationLabel), ""Mars "") && length(str(?destinationLabel)) > 5) )
}
```

This query retrieves all spacecrafts that have Mars as their destination. It first filters the launch place and destination labels to ensure they are in English or not specified, then checks if the destination label starts with ""Mars"" or if the length of the destination label is greater than 5 and starts with ""Mars "". The query also retrieves the label of each spacecraft for readability","PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?s WHERE { ?s dct:subject dbc:Mars_rovers ; rdf:type ?type FILTER ( ?type IN (dbo:Satellite, dbo:ArtificialSatellite) ) }",70.9577796459198,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?spacecraft ?spacecraftLabel
WHERE {
  ?spacecraft rdf:type dbo:Spacecraft .
  ?spacecraft dbo:launchPlace ?launchPlace .
  ?launchPlace rdfs:label ?launchPlaceLabel .
  FILTER (lang(?launchPlaceLabel) = ""en"" || lang(?launchPlaceLabel) = """" )
  ?spacecraft dbo:destination ?destination .
  ?destination rdfs:label ?destinationLabel .
  FILTER (lang(?destinationLabel) = ""en"" || lang(?destinationLabel) = """" )
  FILTER (?destinationLabel = ""Mars"" || (strstarts(str(?destinationLabel), ""Mars "") && length(str(?destinationLabel)) > 5) )
}",False,False,0.09330681415655466,0.20547945205479454
213,Show me all Czech movies.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Show me all Czech movies.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?movie
WHERE {
  ?movie rdf:type dbo:Movie .
  ?movie dbo:nationality dbr:Czech_Republic .
  FILTER(lang(?movie) = ""en"")
}
```

This query retrieves all movies that are of Czech nationality and have an English language label. The results are unique.",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Film> ; <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Czech_Republic> },35.720659255981445,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?movie
WHERE {
  ?movie rdf:type dbo:Movie .
  ?movie dbo:nationality dbr:Czech_Republic .
  FILTER(lang(?movie) = ""en"")
}",True,True,4.969162605895617e-155,0.14705882352941177
209,Give me all taikonauts.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all taikonauts.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?name
WHERE {
  ?person a dbo:Taikonaut .
  ?person rdfs:label ?name .
}
```

This query retrieves all unique names of taikonauts from the DBpedia Knowledge Graph. It uses the following prefixes:

- `dbo:` for DBpedia ontology
- `rdf:` for RDF syntax
- `rdfs:` for RDF schema
- `dbp:` for DBpedia properties

The query uses the `a` property to filter for taikonauts, the `rdfs:label` property to get the names, and the `SELECT DISTINCT` clause to ensure unique results.",SELECT DISTINCT ?uri WHERE { { ?uri a <http://dbpedia.org/ontology/Astronaut> ; <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/People's_Republic_of_China> } UNION { ?uri a <http://dbpedia.org/ontology/Astronaut> ; <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/China> } },48.15357279777527,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?name
WHERE {
  ?person a dbo:Taikonaut .
  ?person rdfs:label ?name .
}",True,True,5.498436173236756e-155,0.18181818181818185
105,Which countries have more than ten volcanoes?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which countries have more than ten volcanoes?

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?country
WHERE {
  ?country rdf:type dbo:Country .
  ?country dbo:hasPart ?volcano .
  ?volcano rdf:type dbo:Volcano .
  FILTER(COUNT(?volcano) > 10)
}
```

This query retrieves all countries that have more than ten volcanoes by filtering the results based on the count of volcanoes associated with each country. The prefixes used are for the DBpedia ontology and resources.",SELECT DISTINCT ?uri WHERE { ?x a <http://dbpedia.org/ontology/Volcano> ; <http://dbpedia.org/ontology/locatedInArea> ?uri . ?uri a <http://dbpedia.org/ontology/Country> } GROUP BY ?uri HAVING ( COUNT(?x) > 10 ),41.97502398490906,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?country
WHERE {
  ?country rdf:type dbo:Country .
  ?country dbo:hasPart ?volcano .
  ?volcano rdf:type dbo:Volcano .
  FILTER(COUNT(?volcano) > 10)
}",True,False,5.06160493724778e-155,0.15555555555555556
52,Give me all movies with Tom Cruise.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all movies with Tom Cruise.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?movie
WHERE {
  ?movie rdf:type dbo:Movie .
  ?movie dbo:starring ?actor .
  ?actor rdf:type dbo:Person .
  ?actor dbo:birthName ""Tom Cruise"" .
}
```

This query retrieves all movies that have Tom Cruise as an actor. It uses the DBpedia ontology prefixes, and ensures unique results by using the `DISTINCT` keyword.","PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> PREFIX prop: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { ?uri rdf:type onto:Film { ?uri prop:starring res:Tom_Cruise } UNION { ?uri onto:starring res:Tom_Cruise } OPTIONAL { ?uri rdfs:label ?string FILTER ( lang(?string) = ""en"" ) } }",39.794835567474365,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?movie
WHERE {
  ?movie rdf:type dbo:Movie .
  ?movie dbo:starring ?actor .
  ?actor rdf:type dbo:Person .
  ?actor dbo:birthName ""Tom Cruise"" .
}",True,True,0.12349786072410861,0.23214285714285712
102,When did Dracula's creator die?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When did Dracula's creator die?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?deathYear
WHERE {
  ?person rdf:type dbo:Person .
  ?person dbo:name ""Bram Stoker"" .
  ?person dbo:death [ rdf:value ?deathYear ] .
  FILTER (lang(?person) = ""en"" || lang(?person) = """" )
}
```

This query retrieves the death year of Bram Stoker, the creator of Dracula, from the DBpedia Knowledge Graph. It uses the following prefixes:

- `dbo:` for DBpedia ontology
- `dbr:` for DBpedia resource
- `rdf:` for RDF syntax
- `rdfs:` for RDF schema
- `xsd:` for XML schema

The query selects distinct death years (`?deathYear`) for a person (`?person`) who is of type `dbo:Person`, has the name ""Bram Stoker"" (`dbo:name ""Bram Stoker""`), and has a death event (`dbo:death`) with a value (`rdf:value ?deathYear`). The `FILTER` clause",SELECT DISTINCT xsd:date(?date) WHERE { <http://dbpedia.org/resource/Count_Dracula> <http://dbpedia.org/ontology/creator> ?x . ?x <http://dbpedia.org/ontology/deathDate> ?date. },71.05115747451782,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?deathYear
WHERE {
  ?person rdf:type dbo:Person .
  ?person dbo:name ""Bram Stoker"" .
  ?person dbo:death [ rdf:value ?deathYear ] .
  FILTER (lang(?person) = ""en"" || lang(?person) = """" )
}",True,True,4.115995969842687e-155,0.125
21,Who created English Wikipedia?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who created English Wikipedia?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?creator
WHERE {
  ?wiki a dbo:Wikipedia .
  ?wiki dct:subject dbp:English_Wikipedia .
  ?wiki dbo:founder ?creator .
  FILTER(lang(lang(?creator) = ""en"") )
}
```

Explanation:

1. Prefixes: We use prefixes to make the query more readable and to avoid writing the full URI every time.

2. `?wiki`: This is a variable that represents a Wikipedia page.

3. `dbo:Wikipedia`: This is the class for Wikipedia pages.

4. `dct:subject`: This is the property that links a resource to its subject.

5. `dbp:English_Wikipedia`: This is the specific English Wikipedia page.

6. `dbo:founder`: This is the property that links a Wikipedia page to its founder.

7. `?creator`: This is the variable that will hold the name of the founder.

8. `FILTER(lang(lang(?creator) = ""en"") )`: This filter ensures that the results are in English.",PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { <http://dbpedia.org/resource/Wikipedia> onto:author ?uri },60.2825129032135,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?creator
WHERE {
  ?wiki a dbo:Wikipedia .
  ?wiki dct:subject dbp:English_Wikipedia .
  ?wiki dbo:founder ?creator .
  FILTER(lang(lang(?creator) = ""en"") )
}",True,True,4.542803746870438e-155,0.15789473684210525
34,Give me all female German chancellors.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all female German chancellors.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?chancellor ?chancellorLabel
WHERE {
  ?chancellor a dbo:Chancellor ;
          rdf:type dbo:Person ;
          foaf:gender ""female"" ;
          dbp:nationality ""Germany"" ;
          rdfs:label ?chancellorLabel .
}
```

This query retrieves all individuals that are of type `dbo:Chancellor`, `dbo:Person`, and have `foaf:gender` as ""female"" and `dbp:nationality` as ""Germany"". The results are labeled as `?chancellorLabel`. The `DISTINCT` keyword ensures that only unique results are returned.",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Chancellor_of_Germany dbp:incumbent ?uri },52.35133528709412,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?chancellor ?chancellorLabel
WHERE {
  ?chancellor a dbo:Chancellor ;
          rdf:type dbo:Person ;
          foaf:gender ""female"" ;
          dbp:nationality ""Germany"" ;
          rdfs:label ?chancellorLabel .
}",True,True,0.11110969989860409,0.1904761904761905
145,Who owns Aldi?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who owns Aldi?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?owner
WHERE {
  ?store a dbo:AldiStore.
  ?store dbo:owner ?owner.
  FILTER(lang(?owner) = ""en"")
}
```

This query retrieves the owner of Aldi stores from the DBpedia Knowledge Graph. It uses the `dbo:AldiStore`, `dbo:owner`, and `rdf:type` properties. The `FILTER` clause ensures that only English language results are returned.",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?uri WHERE { res:Aldi dbp:founders ?uri },41.18886137008667,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?owner
WHERE {
  ?store a dbo:AldiStore.
  ?store dbo:owner ?owner.
  FILTER(lang(?owner) = ""en"")
}",True,True,5.605572147346264e-155,0.16666666666666669
154,Which books were written by Danielle Steel?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which books were written by Danielle Steel?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?book
WHERE {
  ?book rdf:type dbo:Book .
  ?book dbo:author ?person .
  ?person rdf:type dbo:Person .
  ?person dbp:name ""Danielle Steel"" .
  FILTER (lang(?person) = ""en"")
}
```

This query retrieves books that have Danielle Steel as an author. It uses the DBpedia ontology and property namespaces, and filters the results to only include English names for the author. The `DISTINCT` keyword ensures that only unique book results are returned.",PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX onto: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri rdf:type onto:Book ; onto:author <http://dbpedia.org/resource/Danielle_Steel> },44.0165855884552,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?book
WHERE {
  ?book rdf:type dbo:Book .
  ?book dbo:author ?person .
  ?person rdf:type dbo:Person .
  ?person dbp:name ""Danielle Steel"" .
  FILTER (lang(?person) = ""en"")
}",True,True,0.14116951041404782,0.23404255319148937
198,Who was influenced by Socrates?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was influenced by Socrates?

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?person
WHERE {
  ?person dbo:influencedBy dbo:Socrates .
  ?person rdf:type foaf:Person .
}
```

This query retrieves all individuals (persons) who have been influenced by Socrates from the DBpedia Knowledge Graph. It uses the appropriate prefixes for the ontologies and properties used in the query. The `DISTINCT` keyword ensures that only unique results are returned.",SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/influencedBy> <http://dbpedia.org/resource/Socrates> },42.335392475128174,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?person
WHERE {
  ?person dbo:influencedBy dbo:Socrates .
  ?person rdf:type foaf:Person .
}",True,True,4.969162605895617e-155,0.16666666666666666
162,How deep is Lake Chiemsee?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How deep is Lake Chiemsee?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?depth
WHERE {
  ?lake rdf:type dbo:Lake .
  ?lake rdf:type dbr:Lake_Chiemsee .
  ?lake dbo:depth ?depth .
  FILTER (lang(?depth) = ""en"")
}
```

This query retrieves the depth of Lake Chiemsee from the DBpedia Knowledge Graph. It uses the appropriate prefixes, filters for English language results, and ensures unique results by using the `DISTINCT` keyword.",SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Chiemsee> <http://dbpedia.org/ontology/maximumDepth> ?n },45.62315654754639,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?depth
WHERE {
  ?lake rdf:type dbo:Lake .
  ?lake rdf:type dbr:Lake_Chiemsee .
  ?lake dbo:depth ?depth .
  FILTER (lang(?depth) = ""en"")
}",True,True,4.390825315614416e-155,0.14285714285714285
212,Which companies work in the aerospace industry as well as in medicine?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which companies work in the aerospace industry as well as in medicine?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?company
WHERE {
  ?company rdf:type dbo:AerospaceCompany .
  ?company dbo:industry ?industry .
  FILTER (lang(?industry, ""en"") = ""medicine""@en) .
  OPTIONAL {
    ?company rdf:type dbo:MedicalCompany .
  }
}

UNION

{
  ?company rdf:type dbo:MedicalCompany .
  ?company dbo:industry ?industry .
  FILTER (lang(?industry, ""en"") = ""aerospace""@en) .
  OPTIONAL {
    ?company rdf:type dbo:AerospaceCompany .
  }
}
```

This query retrieves companies that are either aerospace companies with the industry of ""medicine"" or medical companies with the industry of ""aerospace"". The OPTIONAL clause is used to account for cases where a company may be classified as both an aerospace and medical company. The UNION operator comb",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri a dbo:Company ; dbo:industry dbr:Aerospace ; dbo:industry dbr:Medical },70.84108757972717,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?company
WHERE {
  ?company rdf:type dbo:AerospaceCompany .
  ?company dbo:industry ?industry .
  FILTER (lang(?industry, ""en"") = ""medicine""@en) .
  OPTIONAL {
    ?company rdf:type dbo:MedicalCompany .
  }
}

UNION

{
  ?company rdf:type dbo:MedicalCompany .
  ?company dbo:industry ?industry .
  FILTER (lang(?industry, ""en"") = ""aerospace""@en) .
  OPTIONAL {
    ?company rdf:type dbo:AerospaceCompany .
  }
}",False,False,0.04798483279957998,0.18
96,Which professional surfers were born on the Philippines?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which professional surfers were born on the Philippines?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person rdf:type dbo:Person .
  ?person dbp:birthPlace rdf:resource <http://dbpedia.org/resource/Philippines> .
  ?person dbp:occupation dbo:ProfessionalSurfer .
  ?person rdfs:label ?personLabel .
}
```

This query retrieves the unique persons who are professional surfers and were born in the Philippines from the DBpedia Knowledge Graph. It uses the appropriate prefixes for the DBpedia ontology and properties, and it retrieves the label of each person for readability.",PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:occupation dbr:Surfer ; dbo:birthPlace res:Philippines },50.20961308479309,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person rdf:type dbo:Person .
  ?person dbp:birthPlace rdf:resource <http://dbpedia.org/resource/Philippines> .
  ?person dbp:occupation dbo:ProfessionalSurfer .
  ?person rdfs:label ?personLabel .
}",False,False,0.08436491880629979,0.1818181818181818
40,Who were the parents of Queen Victoria?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who were the parents of Queen Victoria?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?father ?mother WHERE {
  ?queen a dbo:Queen ;
         dbo:name ""Victoria"" ;
         dbp:father ?father ;
         dbp:mother ?mother .
  FILTER(lang(?queen) = ""en"")
}
```

This query retrieves the parents of Queen Victoria from the DBpedia Knowledge Graph. It uses the appropriate prefixes, filters for the English language, and ensures unique results by using the `DISTINCT` keyword.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Queen_Victoria dbo:parent ?uri },44.27097296714783,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?father ?mother WHERE {
  ?queen a dbo:Queen ;
         dbo:name ""Victoria"" ;
         dbp:father ?father ;
         dbp:mother ?mother .
  FILTER(lang(?queen) = ""en"")
}",True,True,0.08442511500499854,0.18604651162790697
79,Are there any castles in the United States?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Are there any castles in the United States?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?castle
WHERE {
  ?castle a dbo:Castle .
  ?castle dbo:location dbr:United_States .
}
```

This query uses the DBpedia ontology to find castles (dbo:Castle) that are located in the United States (dbr:United_States). The results are unique (DISTINCT ?castle).",PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> ASK WHERE { ?uri dct:subject dbc:Castles_in_the_United_States },35.41835141181946,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?castle
WHERE {
  ?castle a dbo:Castle .
  ?castle dbo:location dbr:United_States .
}",True,True,4.417599881331674e-155,0.125
141,Which languages are spoken in Estonia?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which languages are spoken in Estonia?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?language
WHERE {
  dbr:Estonia dbo:officialLanguage ?language .
  FILTER(lang(lang(?language)) = ""en"")
}
```

Explanation:

1. Prefixes are defined for DBpedia ontology, RDF, RDFS, and DBpedia resource.
2. The query selects distinct language resources (?language) that are official languages of Estonia (dbr:Estonia dbo:officialLanguage ?language).
3. The FILTER clause ensures that only language resources with English labels (lang(lang(?language)) = ""en"") are returned.",SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/spokenIn> <http://dbpedia.org/resource/Estonia> },46.19843125343323,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?language
WHERE {
  dbr:Estonia dbo:officialLanguage ?language .
  FILTER(lang(lang(?language)) = ""en"")
}",True,True,5.359624986283916e-155,0.17241379310344826
80,Give me a list of all critically endangered birds.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me a list of all critically endangered birds.

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?species ?speciesLabel
WHERE {
  ?species rdf:type dbo:Bird .
  ?species dct:subject ?page .
  ?page dbo:conservationStatus dbo:CriticallyEndangered .
  ?species rdfs:label ?speciesLabel .
  FILTER(lang(?speciesLabel) = ""en"")
}
```

This query retrieves all bird species that have a conservation status of ""Critically Endangered"" from the DBpedia Knowledge Graph. It uses the appropriate prefixes and retrieves unique results using the `DISTINCT` keyword. The `FILTER` statement ensures that the species labels are in English.","PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri ?p WHERE { ?uri rdf:type dbo:Bird { ?uri dbo:conservationStatus ""CR"" } UNION { ?uri dct:subject dbc:Critically_endangered_animals } }",52.06208062171936,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?species ?speciesLabel
WHERE {
  ?species rdf:type dbo:Bird .
  ?species dct:subject ?page .
  ?page dbo:conservationStatus dbo:CriticallyEndangered .
  ?species rdfs:label ?speciesLabel .
  FILTER(lang(?speciesLabel) = ""en"")
}",True,True,0.21314069080894907,0.3076923076923077
159,Which countries are connected by the Rhine?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which countries are connected by the Rhine?

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?country
WHERE {
  ?country rdf:type dbo:Country .
  ?country dbo:isLocatedOnBodyOfWater ?river .
  ?river rdf:type dbo:River .
  FILTER(lang(?river) = ""en"" && str(?river) = ""Rhine""@en)
}
```

This query retrieves all countries that are located on the Rhine river. It uses the DBpedia ontology prefixes and filters the results to only include English language resources. The `DISTINCT` keyword ensures that only unique countries are returned.",PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { {<http://dbpedia.org/resource/Rhine> dbo:country ?uri } UNION {dbr:Rhine dbp:country ?uri} },44.52447199821472,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?country
WHERE {
  ?country rdf:type dbo:Country .
  ?country dbo:isLocatedOnBodyOfWater ?river .
  ?river rdf:type dbo:River .
  FILTER(lang(?river) = ""en"" && str(?river) = ""Rhine""@en)
}",True,True,0.21830457064642592,0.25
107,Who was the father of Queen Elizabeth II?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the father of Queen Elizabeth II?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?fatherName WHERE {
  ?queen a dbo:Queen ;
        dbo:birthName ""Elizabeth II"" ;
        foaf:father ?father .
  ?father rdfs:label ?fatherName .
}
```

This query retrieves the father of Queen Elizabeth II by first identifying the queen with the birth name ""Elizabeth II"", then finding the father of the queen, and finally labeling the father with the `rdfs:label` property. The `DISTINCT` keyword ensures that only unique results are returned.","PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT * WHERE { res:Elizabeth_II dbo:parent ?uri . ?uri <http://xmlns.com/foaf/0.1/gender> ""male""@en }",45.8918023109436,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?fatherName WHERE {
  ?queen a dbo:Queen ;
        dbo:birthName ""Elizabeth II"" ;
        foaf:father ?father .
  ?father rdfs:label ?fatherName .
}",True,True,0.09170840695622617,0.19999999999999998
163,Give me all chemical elements.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all chemical elements.

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?element
WHERE {
  ?element rdf:type dbo:ChemicalElement .
  OPTIONAL { ?element dct:title ?title . }
  OPTIONAL { ?element dbp:chemicalSymbol ?symbol . }
}
```

This query retrieves all resources that are of type `dbo:ChemicalElement` and returns their labels (`?element`). It also includes optional statements to retrieve the title and chemical symbol of each element if available. The `DISTINCT` keyword ensures that only unique results are returned.",PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX owl: <http://www.w3.org/2002/07/owl#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type owl:Thing ; dct:subject dbc:Chemical_elements },48.89162230491638,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?element
WHERE {
  ?element rdf:type dbo:ChemicalElement .
  OPTIONAL { ?element dct:title ?title . }
  OPTIONAL { ?element dbp:chemicalSymbol ?symbol . }
}",True,True,0.13514113623406132,0.23404255319148937
211,Give me all American presidents of the last 20 years.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all American presidents of the last 20 years.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?president ?presidentLabel
WHERE {
  ?president a dbo:President .
  ?president dbo:birthPlace ?birthPlace .
  FILTER (lang(?birthPlace, 'en') && str(?birthPlace) = 'United States') .
  ?president dbo:termStartYear ?termStartYear .
  ?president dbo:termEndYear ?termEndYear .
  FILTER(?termStartYear >= 1999 && ?termEndYear <= YEAR(CURRENT-DATE())) .
  ?president rdfs:label ?presidentLabel .
  FILTER(lang(?presidentLabel, 'en'))
}
```

This query retrieves all presidents who were born in the United States and served as president between 1999 and the current year. It also ensures that the results are unique and the labels are in English.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Person ; dct:subject dbc:Presidents_of_the_United_States ; dbo:activeYearsEndDate ?termEnd FILTER ( ( year(now()) - year(?termEnd) ) <= 20 ) },65.82610607147217,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?president ?presidentLabel
WHERE {
  ?president a dbo:President .
  ?president dbo:birthPlace ?birthPlace .
  FILTER (lang(?birthPlace, 'en') && str(?birthPlace) = 'United States') .
  ?president dbo:termStartYear ?termStartYear .
  ?president dbo:termEndYear ?termEndYear .
  FILTER(?termStartYear >= 1999 && ?termEndYear <= YEAR(CURRENT-DATE())) .
  ?president rdfs:label ?presidentLabel .
  FILTER(lang(?presidentLabel, 'en'))
}",False,False,0.08073897645767675,0.18181818181818185
51,When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When is the movie Worst Case Scenario going to be in cinemas in the Netherlands?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dct: <http://purl.org/dc/terms/>

SELECT DISTINCT ?releaseDate
WHERE {
  ?movie rdf:type dbo:Film .
  ?movie rdfs:label ""Worst Case Scenario""@en .
  ?movie dbo:premiereDate ?releaseDate .
  FILTER(lang(?releaseDate) = ""en"" || lang(?releaseDate) = ""nl"")
  OPTIONAL {
    ?movie dbo:location ?location .
    FILTER(strstarts(str(?location), ""Netherlands""))
  }
}
```

This query retrieves the release date of the movie ""Worst Case Scenario"" and checks if it is premiering in the Netherlands. The results are unique.","PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX foaf: <http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?rel WHERE { <http://dbpedia.org/resource/Worst_Case_Scenario_(film)> ?p ?o ; dbo:releaseDate ?rel FILTER contains(lcase(str(?o)), ""netherlands"") }",60.77503681182861,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dct: <http://purl.org/dc/terms/>

SELECT DISTINCT ?releaseDate
WHERE {
  ?movie rdf:type dbo:Film .
  ?movie rdfs:label ""Worst Case Scenario""@en .
  ?movie dbo:premiereDate ?releaseDate .
  FILTER(lang(?releaseDate) = ""en"" || lang(?releaseDate) = ""nl"")
  OPTIONAL {
    ?movie dbo:location ?location .
    FILTER(strstarts(str(?location), ""Netherlands""))
  }
}",True,True,0.2121389789338517,0.24242424242424243
144,Whom did Lance Bass marry?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whom did Lance Bass marry?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?spouse
WHERE {
  BIND(URI(""http://dbpedia.org/resource/Lance_Bass"") AS ?lance)
  OPTIONAL {
    ?lance dbo:spouse ?spouse .
    FILTER(lang(?spouse, ""en"") = ""en"")
  }
}
```

This query uses the DBpedia ontology and FOAF ontology to find the spouse of Lance Bass. It retrieves unique results by using the `DISTINCT` keyword and filters the results to only include English language labels.",SELECT DISTINCT ?uri WHERE { {<http://dbpedia.org/resource/Lance_Bass> dbo:spouse ?uri} UNION {?uri dbo:spouse <http://dbpedia.org/resource/Lance_Bass>} },35.529109954833984,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?spouse
WHERE {
  BIND(URI(""http://dbpedia.org/resource/Lance_Bass"") AS ?lance)
  OPTIONAL {
    ?lance dbo:spouse ?spouse .
    FILTER(lang(?spouse, ""en"") = ""en"")
  }
}",False,False,5.200900196683686e-155,0.1714285714285714
167,Which subsidiary of TUI Travel serves both Glasgow and Dublin?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which subsidiary of TUI Travel serves both Glasgow and Dublin?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?subsidiary
WHERE {
  ?subsidiary a dbo:Subsidiary ;
          dbo:parentCompany dbo:TUI_Travel ;
          dbp:location ?location1 ;
          dbp:location ?location2 .
  FILTER (lang(?location1) = ""en"" && lang(?location2) = ""en"")
  FILTER (strstarts(str(?location1), ""Glasgow"") || strstarts(str(?location1), ""Glasgow, Scotland"") ||
           strstarts(str(?location2), ""Dublin"") || strstarts(str(?location2), ""Dublin, Ireland""))
}
```

This query retrieves unique subsidiaries of TUI Travel that have locations in both Glasgow and Dublin. It uses the DBpedia ontology and property namespaces, and filters for English language locations.",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/TUI_Travel> <http://dbpedia.org/ontology/subsidiary> ?uri . ?uri <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Glasgow_International_Airport> ; <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Dublin_Airport> },65.11569237709045,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?subsidiary
WHERE {
  ?subsidiary a dbo:Subsidiary ;
          dbo:parentCompany dbo:TUI_Travel ;
          dbp:location ?location1 ;
          dbp:location ?location2 .
  FILTER (lang(?location1) = ""en"" && lang(?location2) = ""en"")
  FILTER (strstarts(str(?location1), ""Glasgow"") || strstarts(str(?location1), ""Glasgow, Scotland"") ||
           strstarts(str(?location2), ""Dublin"") || strstarts(str(?location2), ""Dublin, Ireland""))
}",True,True,3.77254321452154e-155,0.12068965517241378
131,What languages are spoken in Pakistan?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What languages are spoken in Pakistan?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?language
WHERE {
  dbr:Pakistan dbo:officialLanguage ?language .
  FILTER(lang(lang(?language)) = ""en"")
}
```

Explanation:

1. Prefixes are defined for DBpedia ontology, RDF, RDFS, and DBpedia resource.
2. The query selects distinct language resources (?language) that are official languages of Pakistan (dbr:Pakistan dbo:officialLanguage ?language).
3. A filter is added to ensure that the language label is in English (lang(lang(?language)) = ""en""). This is to avoid retrieving languages with different translations in the DBpedia dataset.",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pakistan> <http://dbpedia.org/ontology/language> ?uri },48.665294885635376,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?language
WHERE {
  dbr:Pakistan dbo:officialLanguage ?language .
  FILTER(lang(lang(?language)) = ""en"")
}",True,True,5.359624986283916e-155,0.17241379310344826
120,Who is the daughter of Bill Clinton married to?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the daughter of Bill Clinton married to?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?spouse
WHERE {
  ?person dbo:childOf <http://dbpedia.org/resource/Bill_Clinton>.
  ?person dbo:spouse ?spouse.
  FILTER(lang(?person) = ""en"")
}
```

This query retrieves the spouse of Bill Clinton's children, filtering for English language resources. It uses the DBpedia ontology and FOAF properties.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { dbr:Bill_Clinton dbo:child ?child . ?child dbo:spouse ?uri . ?uri rdfs:label ?string },29.673701524734497,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?spouse
WHERE {
  ?person dbo:childOf <http://dbpedia.org/resource/Bill_Clinton>.
  ?person dbo:spouse ?spouse.
  FILTER(lang(?person) = ""en"")
}",True,True,0.1468646860956653,0.2558139534883721
164,Who was on the Apollo 11 mission?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was on the Apollo 11 mission?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person
WHERE {
  ?mission a dbo:Mission ;
        dbo:launchDate ?launchDate ;
        dbo:missionName ""Apollo 11"" ;
        dbo:crew ?crew .
  ?crew rdf:first ?person .
  FILTER(lang(lang(?launchDate), ""en"") = ""en"")
}
```

This query retrieves the unique individuals who were on the Apollo 11 mission by using the `dbo:crew` property to find the crew members of the mission, and then using the `rdf:first` property to get the first member of the crew (since `dbo:crew` is a list property). The `FILTER` clause is used to ensure that only English language launch dates are considered.",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Apollo_11> <http://dbpedia.org/property/crewMembers> ?uri },56.66625952720642,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person
WHERE {
  ?mission a dbo:Mission ;
        dbo:launchDate ?launchDate ;
        dbo:missionName ""Apollo 11"" ;
        dbo:crew ?crew .
  ?crew rdf:first ?person .
  FILTER(lang(lang(?launchDate), ""en"") = ""en"")
}",False,False,4.069047683587386e-155,0.12195121951219512
88,What is the wavelength of Indigo?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the wavelength of Indigo?

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?wavelength
WHERE {
  ?color rdf:type dbo:Colour .
  ?color rdfs:label ""Indigo""@en .
  ?color dbo:hasWavelength ?wavelength .
}
```

This query retrieves the wavelength of Indigo from the DBpedia Knowledge Graph. It uses the following prefixes:

- rdf: - RDF Schema
- rdfs: - RDF Schema
- dbo: - DBpedia Ontology
- dct: - Dublin Core Terms
- dbr: - DBpedia Resource

The query selects distinct wavelength values for the color Indigo. It first filters the colors that are of type dbo:Colour, then checks if the label of the color is ""Indigo"" in English, and finally checks if the color has a wavelength property.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?n WHERE { dbr:Indigo dbo:wavelength ?n },56.98405432701111,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?wavelength
WHERE {
  ?color rdf:type dbo:Colour .
  ?color rdfs:label ""Indigo""@en .
  ?color dbo:hasWavelength ?wavelength .
}",True,True,0.15452910528400496,0.25
151,Give me all B-sides of the Ramones.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all B-sides of the Ramones.

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?s
WHERE {
  ?s rdf:type dbo:Song .
  ?s dbp:bandName ""The Ramones"" .
  ?s dbp:isB-sideOf ?album .
  ?album rdf:type dbo:Album .
  FILTER(lang(?s) = ""en"")
}
```

This query retrieves all songs that are B-sides of albums by The Ramones. It uses the DBpedia ontology prefixes and filters the results to only include English language songs.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?string WHERE { ?x dbo:musicalArtist res:Ramones ; dbo:bSide ?string },41.92448210716248,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?s
WHERE {
  ?s rdf:type dbo:Song .
  ?s dbp:bandName ""The Ramones"" .
  ?s dbp:isB-sideOf ?album .
  ?album rdf:type dbo:Album .
  FILTER(lang(?s) = ""en"")
}",True,True,0.16885023000999705,0.22222222222222224
63,Who was called Scarface?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was called Scarface?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?name
WHERE {
  ?person rdfs:label ?name .
  ?person dbo:nickname ""Scarface"" .
  FILTER(lang(?name) = ""en"")
}
```

This query retrieves the names of people who have the nickname ""Scarface"" from the DBpedia Knowledge Graph. It uses the `rdfs:label` property to get the name of each person and the `dbo:nickname` property to check for the nickname ""Scarface"". The `FILTER` statement ensures that only English names are returned.","PREFIX dbo: <http://dbpedia.org/ontology/> SELECT ?uri WHERE { ?uri dbo:alias ?alias FILTER contains(lcase(?alias), ""scarface"") }",38.0295250415802,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?name
WHERE {
  ?person rdfs:label ?name .
  ?person dbo:nickname ""Scarface"" .
  FILTER(lang(?name) = ""en"")
}",True,True,2.3394285299910343e-78,0.20588235294117643
27,Which rivers flow into the North Sea?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which rivers flow into the North Sea?

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?river
WHERE {
  ?river rdf:type dbo:River .
  ?river dbo:dischargesInto dbr:North_Sea .
}
```

This query retrieves all rivers that are of type `dbo:River` and discharge into `dbr:North_Sea`. The `DISTINCT` keyword ensures that only unique rivers are returned. The prefixes are used to simplify the URIs and make the query more readable.",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/River> ; <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/North_Sea> },40.0169575214386,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?river
WHERE {
  ?river rdf:type dbo:River .
  ?river dbo:dischargesInto dbr:North_Sea .
}",True,True,5.253441210115029e-155,0.16129032258064516
156,Where is Fort Knox located?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where is Fort Knox located?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?location
WHERE {
  dbr:Fort_Knox dbo:location ?location .
}
```

Explanation:

1. Prefixes: We use the `PREFIX` statement to define abbreviations for the DBpedia ontology and resource namespaces.

2. Query: The main part of the query is the `SELECT` statement, which retrieves the location of Fort Knox.

3. Filter: We use the `dbr:Fort_Knox` resource to filter the results and find the location associated with it.

4. Property: The `dbo:location` property is used to link the Fort Knox resource with its location.

5. Unique results: The `DISTINCT` keyword ensures that only unique locations are returned.",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fort_Knox> <http://dbpedia.org/ontology/location> ?uri. ?uri a <http://dbpedia.org/ontology/Place>. },40.50001263618469,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?location
WHERE {
  dbr:Fort_Knox dbo:location ?location .
}",True,True,6.7393716283177006e-155,0.2
207,Which daughters of British earls died at the same place they were born at?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which daughters of British earls died at the same place they were born at?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person ?place
WHERE {
  ?person a dbo:Person .
  ?person dbo:birthPlace ?place .
  ?person dbo:deathPlace ?place .
  ?person foaf:isMemberOf dbo:Earl .
  FILTER(?person dbo:gender = ""Female"")
}
```

This query retrieves unique persons who are female, are earls, and were born and died at the same place. It uses the DBpedia ontology and properties to find the required information.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatDaughtersOfBritishEarls ; dbo:birthPlace ?x ; dbo:deathPlace ?y FILTER ( ?x = ?y ) },45.8217990398407,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person ?place
WHERE {
  ?person a dbo:Person .
  ?person dbo:birthPlace ?place .
  ?person dbo:deathPlace ?place .
  ?person foaf:isMemberOf dbo:Earl .
  FILTER(?person dbo:gender = ""Female"")
}",False,False,0.10406104960841618,0.24528301886792453
24,How many emperors did China have?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many emperors did China have?

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT (COUNT(?emperor) AS ?num_emperors)
WHERE {
  ?emperor a dbo:Emperor .
  ?emperor dbr:instanceOf dbo:Person .
  ?emperor dbo:nationality dbr:China .
}
```

This query retrieves the number of emperors who were Chinese by filtering on the `dbo:Emperor`, `dbo:Person`, and `dbo:nationality` properties. The `DISTINCT` keyword ensures that each emperor is counted only once, and the `COUNT` function calculates the total number of emperors.",SELECT COUNT(DISTINCT ?uri AS ?uri) WHERE { ?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Emperor_of_China> . },45.275622606277466,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT (COUNT(?emperor) AS ?num_emperors)
WHERE {
  ?emperor a dbo:Emperor .
  ?emperor dbr:instanceOf dbo:Person .
  ?emperor dbo:nationality dbr:China .
}",True,True,4.946973787525366e-155,0.16666666666666666
133,What are the names of the Teenage Mutant Ninja Turtles?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the names of the Teenage Mutant Ninja Turtles?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?name
WHERE {
  ?turtle a dbo:TeenageMutantNinjaTurtle .
  ?turtle dct:title ?name .
}
```

This query retrieves the names of the Teenage Mutant Ninja Turtles from the DBpedia Knowledge Graph. It uses the `dbo:TeenageMutantNinjaTurtle` class to filter the turtles, and the `dct:title` property to get their names. The `DISTINCT` keyword ensures that only unique results are returned.",PREFIX foaf:<http://xmlns.com/foaf/0.1/> SELECT DISTINCT ?s WHERE { <http://dbpedia.org/resource/Teenage_Mutant_Ninja_Turtles> <http://dbpedia.org/property/members> ?x . ?x foaf:givenName ?s },46.570641040802,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?name
WHERE {
  ?turtle a dbo:TeenageMutantNinjaTurtle .
  ?turtle dct:title ?name .
}",True,True,5.4052429289534965e-155,0.19999999999999998
103,Where does Piccadilly start?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where does Piccadilly start?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?start_location
WHERE {
  ?roadway rdf:type dbo:Road.
  ?roadway rdfs:label ""Piccadilly""@en.
  ?roadway dbo:startLocation ?start_location.
  FILTER(lang(?roadway) = ""en"")
}
```

This query retrieves the starting location of Piccadilly road by filtering the results to only include English labels and using the `dbo:startLocation` property. The `SELECT DISTINCT` statement ensures that only unique results are returned.",SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/routeStart> <http://dbpedia.org/resource/Piccadilly> },41.32965421676636,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?start_location
WHERE {
  ?roadway rdf:type dbo:Road.
  ?roadway rdfs:label ""Piccadilly""@en.
  ?roadway dbo:startLocation ?start_location.
  FILTER(lang(?roadway) = ""en"")
}",True,True,4.884188340600192e-155,0.15151515151515152
165,What is the name of the university where Obama's wife studied?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the name of the university where Obama's wife studied?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?universityName
WHERE {
  BIND(<http://dbpedia.org/resource/Barack_Obama> AS ?obama)
  ?obama foaf:spouse ?michelle.
  BIND(?michelle AS ?michelleID)
  OPTIONAL {
    ?michelleID dbo:education ?education.
    ?education dbo:almaMater ?university.
    ?university rdfs:label ?universityName.
  }
}
```

This query starts by defining prefixes for the DBpedia ontology, the resource identifier, Friend of a Friend (FOAF) ontology, and RDF Schema (RDFS).

It then binds the resource for Barack Obama to the variable `?obama`.

Next, it finds the spouse of Barack Obama and binds the spouse's resource ID to the variable `?michelleID`.

The query then searches for any education records associated with the spouse's ID, and binds the alma mater of the education to the variable `?university`.

Finally, it retrieves the label of the university, which should be the name, and binds it to the variable `?universityName`. The `DISTINCT` keyword ensures that only unique universities are returned.",SELECT DISTINCT ?s WHERE { <http://dbpedia.org/resource/Barack_Obama> <http://dbpedia.org/ontology/spouse> ?x . ?x <http://dbpedia.org/ontology/almaMater> ?s },66.12927484512329,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?universityName
WHERE {
  BIND(<http://dbpedia.org/resource/Barack_Obama> AS ?obama)
  ?obama foaf:spouse ?michelle.
  BIND(?michelle AS ?michelleID)
  OPTIONAL {
    ?michelleID dbo:education ?education.
    ?education dbo:almaMater ?university.
    ?university rdfs:label ?universityName.
  }
}",True,True,4.452250377698693e-155,0.11904761904761903
108,When did Paraguay proclaim its independence?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When did Paraguay proclaim its independence?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?date
WHERE {
  dbr:Paraguay dbo:foundingDate ?date .
  FILTER(lang(?date) = ""en"")
}
```

This query retrieves the founding date of Paraguay from the DBpedia Knowledge Graph, filters the results to only include English language labels, and ensures that the results are unique.",SELECT DISTINCT ?date WHERE { <http://dbpedia.org/resource/Paraguay> <http://dbpedia.org/ontology/foundingDate> ?date },39.01023983955383,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?date
WHERE {
  dbr:Paraguay dbo:foundingDate ?date .
  FILTER(lang(?date) = ""en"")
}",True,True,0.13597796343834895,0.19354838709677416
15,How short is the shortest active NBA player?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How short is the shortest active NBA player?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?height
WHERE {
  ?player a dbo:NBAPlayer ;
          dbp:height ?height .
  FILTER(lang(?height) = ""en"" && isLiteral(?height) && datatype(?height) = xsd:string)
  FILTER(?player dbo:isActive = true)
  BIND(STRAFTER(?height, ' ') AS ?height)
}
ORDER BY ASC(STR(?height))
```

This query retrieves the height of active NBA players from the DBpedia Knowledge Graph, filters for English language strings, and removes any units from the height values. It then orders the results in ascending order to find the shortest active NBA player.",SELECT DISTINCT ?n WHERE { ?x a <http://dbpedia.org/ontology/BasketballPlayer> ; <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/National_Basketball_Association> ; <http://dbpedia.org/ontology/height> ?n FILTER NOT EXISTS { ?x <http://dbpedia.org/ontology/activeYearsEndYear> ?d } } ORDER BY ASC(?n) OFFSET 0 LIMIT 1,57.39856743812561,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?height
WHERE {
  ?player a dbo:NBAPlayer ;
          dbp:height ?height .
  FILTER(lang(?height) = ""en"" && isLiteral(?height) && datatype(?height) = xsd:string)
  FILTER(?player dbo:isActive = true)
  BIND(STRAFTER(?height, ' ') AS ?height)
}
ORDER BY ASC(STR(?height))",False,False,1.5677465438348168e-78,0.1323529411764706
45,Where did Abraham Lincoln die?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did Abraham Lincoln die?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?place
WHERE {
  ?person a dbo:Person ;
          dbo:name ""Abraham Lincoln"" ;
          dbp:placeOfDeath ?place .
  FILTER(lang(?person) = ""en"")
}
```

This query retrieves the place of death for Abraham Lincoln from the DBpedia Knowledge Graph. It uses the appropriate prefixes, retrieves unique results using the `DISTINCT` keyword, and filters the results to only include English language resources.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT DISTINCT ?uri WHERE { res:Abraham_Lincoln dbo:deathPlace ?uri },40.18254590034485,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?place
WHERE {
  ?person a dbo:Person ;
          dbo:name ""Abraham Lincoln"" ;
          dbp:placeOfDeath ?place .
  FILTER(lang(?person) = ""en"")
}",True,True,0.13072010980679707,0.23809523809523808
82,When was Jack Wolfskin founded?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When was Jack Wolfskin founded?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?foundationYear
WHERE {
  ?company rdf:type dbo:Company ;
          dct:title ""Jack Wolfskin"" ;
          dbo:foundingYear ?foundationYear .
  FILTER(lang(?company) = ""en"")
}
```

This query retrieves the founding year of the company named ""Jack Wolfskin"" from the DBpedia Knowledge Graph. It uses the appropriate prefixes for the properties and ontologies used in the query. The `FILTER` statement ensures that only English language results are returned, and the `DISTINCT` keyword is used to ensure unique results.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT xsd:date(?year) WHERE { res:Jack_Wolfskin dbo:foundingYear ?year },41.31458377838135,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?foundationYear
WHERE {
  ?company rdf:type dbo:Company ;
          dct:title ""Jack Wolfskin"" ;
          dbo:foundingYear ?foundationYear .
  FILTER(lang(?company) = ""en"")
}",True,True,0.10375099461814634,0.21951219512195122
9,In which city is the headquarter of Air China?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which city is the headquarter of Air China?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?city
WHERE {
  ?airline a dbo:Airline ;
        dbo:headquarters ?headquarters ;
        rdfs:label ?airlineLabel ;
  ?headquarters dbp:locatedInCity ?city .
  FILTER (lang(?airlineLabel) = ""en"" && lang(?city) = ""en"")
  FILTER regex(str(?airline), ""Air China"", ""i"")
}
```

This query retrieves the city where Air China's headquarters is located. It uses the DBpedia ontology prefixes, filters for English labels, and ensures unique results.",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Air_China> <http://dbpedia.org/ontology/headquarter> ?uri . ?uri a <http://dbpedia.org/class/yago/City108524735> },45.73352479934693,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?city
WHERE {
  ?airline a dbo:Airline ;
        dbo:headquarters ?headquarters ;
        rdfs:label ?airlineLabel ;
  ?headquarters dbp:locatedInCity ?city .
  FILTER (lang(?airlineLabel) = ""en"" && lang(?city) = ""en"")
  FILTER regex(str(?airline), ""Air China"", ""i"")
}",False,False,4.325516042394087e-155,0.14893617021276598
201,What is the founding year of the brewery that produces Pilsner Urquell?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the founding year of the brewery that produces Pilsner Urquell?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?foundingYear
WHERE {
  ?brewery rdf:type dbo:Brewery .
  ?brewery dbo:produces ?beer .
  ?beer rdfs:label ""Pilsner Urquell""@en .
  ?brewery dbo:foundingYear ?foundingYear .
}
```

This query retrieves the founding year of the brewery that produces Pilsner Urquell from the DBpedia Knowledge Graph. It uses the appropriate prefixes, retrieves unique results with the DISTINCT keyword, and structures the query based on the given question.",PREFIX dbo: <http://dbpedia.org/ontology/> SELECT DISTINCT xsd:date(?num) WHERE { <http://dbpedia.org/resource/Pilsner_Urquell> <http://dbpedia.org/property/brewery> ?uri . ?uri dbo:foundingYear ?num },49.3025016784668,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?foundingYear
WHERE {
  ?brewery rdf:type dbo:Brewery .
  ?brewery dbo:produces ?beer .
  ?beer rdfs:label ""Pilsner Urquell""@en .
  ?brewery dbo:foundingYear ?foundingYear .
}",True,True,2.0477604473968815e-78,0.23809523809523808
171,When did the Boston Tea Party take place?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When did the Boston Tea Party take place?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX bd: <http://dbpedia.org/resource/>

SELECT DISTINCT ?date
WHERE {
  ?event rdf:type dbo:Event .
  ?event rdfs:label* bfo:Boston_Tea_Party .
  ?event dct:date ?date .
  FILTER (lang(?date) = ""en"" || lang(?date) = """" )
}
```

This query retrieves the date of the Boston Tea Party event from the DBpedia Knowledge Graph. It uses the appropriate prefixes, retrieves unique results with the DISTINCT keyword, and filters the results to only include English language dates.",SELECT DISTINCT ?d WHERE { <http://dbpedia.org/resource/Boston_Tea_Party> <http://dbpedia.org/property/date> ?d },50.9689359664917,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX bd: <http://dbpedia.org/resource/>

SELECT DISTINCT ?date
WHERE {
  ?event rdf:type dbo:Event .
  ?event rdfs:label* bfo:Boston_Tea_Party .
  ?event dct:date ?date .
  FILTER (lang(?date) = ""en"" || lang(?date) = """" )
}",False,False,3.97654515284274e-155,0.11904761904761905
182,Which animals are critically endangered?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which animals are critically endangered?

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?species
WHERE {
  ?species rdf:type dbo:Species .
  ?species dbo:conservationStatus dbo:CriticallyEndangered .
  ?species rdfs:label ?name .
  FILTER (lang(?name) = ""en"" || lang(?name) = """")
}
```

This query retrieves the names of critically endangered species from the DBpedia Knowledge Graph. It uses the following prefixes:

- rdf: - RDF Schema
- rdfs: - RDF Schema
- dbo: - DBpedia ontology
- dct: - Dublin Core Terms
- xsd: - XML Schema Datatypes

The query selects distinct species (`?species`) that are of type `dbo:Species` and have a `dbo:conservationStatus` of `dbo:CriticallyEndangered`. It also retrieves the English label (`rdfs:label`) for each species. The `FILTER` clause ensures that only English labels are returned.","SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Animal> ; <http://dbpedia.org/ontology/conservationStatus> ""CR"" }",68.46485781669617,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?species
WHERE {
  ?species rdf:type dbo:Species .
  ?species dbo:conservationStatus dbo:CriticallyEndangered .
  ?species rdfs:label ?name .
  FILTER (lang(?name) = ""en"" || lang(?name) = """")
}",True,True,4.1683219343223765e-155,0.11904761904761903
13,Which politicians were married to a German?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which politicians were married to a German?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?politician
WHERE {
  ?politician a dbo:Politician .
  ?politician foaf:spouse ?spouse .
  FILTER(lang(str(?spouse), ""en"") = ""Germany"" || lang(str(?spouse), ""de"") = ""Deutschland"")
}
```

Explanation:

1. Prefixes: We use the following prefixes to refer to the DBpedia ontology, resources, and FOAF vocabulary.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
```

2. Query structure: We are looking for politicians who have a spouse, so we use the `?politician foaf:spouse ?spouse` pattern.

3. Filtering: To filter the spouses by country, we use the `FILTER` function to check if the language of the string representation of the spouse is either English (""en"") or German (""de"") and the string contains ""Germany"" or ""Deutschland"".

4. Unique results: To ensure we get unique results, we use the `DISTINCT` keyword before the `?politician` variable.

5. Query: The final query is:

```sparql
SELECT DISTIN",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Politician> ; <http://dbpedia.org/ontology/spouse> ?spouse { ?spouse <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Germany> } UNION { ?spouse <http://dbpedia.org/ontology/birthPlace> ?p . ?p <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Germany> } },70.8057849407196,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?politician
WHERE {
  ?politician a dbo:Politician .
  ?politician foaf:spouse ?spouse .
  FILTER(lang(str(?spouse), ""en"") = ""Germany"" || lang(str(?spouse), ""de"") = ""Deutschland"")
}

PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>",False,False,4.688039360733842e-155,0.186046511627907
114,How big is the earth's diameter?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How big is the earth's diameter?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?diameter
WHERE {
  BIND(<http://dbpedia.org/resource/Earth> AS ?earth)
  OPTIONAL {
    ?earth dbo:diameter ?diameter .
    FILTER(lang(?diameter, 'en') = 'en')
  }
}
```

This query retrieves the Earth's diameter from the DBpedia Knowledge Graph. It uses the `dbo:diameter` property to find the diameter, and the `FILTER` function to ensure that the result is in English. The `DISTINCT` keyword is used to ensure that only unique results are returned.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT (( xsd:double(?radius) * 2 ) AS ?diameter) WHERE { res:Earth dbo:meanRadius ?radius },46.016456842422485,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?diameter
WHERE {
  BIND(<http://dbpedia.org/resource/Earth> AS ?earth)
  OPTIONAL {
    ?earth dbo:diameter ?diameter .
    FILTER(lang(?diameter, 'en') = 'en')
  }
}",False,False,0.10625281384457023,0.22222222222222224
92,Is the wife of President Obama called Michelle?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is the wife of President Obama called Michelle?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?wifeName
WHERE {
  ?person dbo:presidentOf dbr:United_States.
  ?person dbo:spouse ?spouse.
  ?spouse foaf:name ?wifeName.
  FILTER(lang(?wifeName) = ""en"")
}
```

Explanation:

1. Prefixes: We use the `PREFIX` statement to define abbreviations for the namespaces used in the query. In this case, we use `dbo:` for DBpedia ontology and `foaf:` for Friend of a Friend ontology.

2. Query structure: The query uses the `SELECT` statement to retrieve data, `WHERE` to filter the results, and `DISTINCT` to ensure unique results.

3. Variables: We use variables `?person`, `?spouse`, and `?wifeName` to represent the unknown values we are trying to find.

4. Filters: We use the `FILTER` statement to ensure that the name of the spouse is in English (`lang(?wifeName) = ""en""`).

5. Conditions: We use the `?person dbo:presidentOf dbr:United_States` condition to find the president of the United States, and the `?person dbo:spouse ?spouse` condition to find the spouse of the president. Finally, we use the `?spouse foaf:name ?wifeName` condition to find the name of the spouse.","PREFIX res: <http://dbpedia.org/resource/> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX onto: <http://dbpedia.org/ontology/> ASK WHERE { res:Barack_Obama onto:spouse ?spouse . ?spouse rdfs:label ?name FILTER regex(?name, ""Michelle"") }",69.78430914878845,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?wifeName
WHERE {
  ?person dbo:presidentOf dbr:United_States.
  ?person dbo:spouse ?spouse.
  ?spouse foaf:name ?wifeName.
  FILTER(lang(?wifeName) = ""en"")
}",False,True,5.0056670151089064e-155,0.14285714285714282
194,Which U.S. state has the abbreviation MN?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which U.S. state has the abbreviation MN?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?state
WHERE {
  ?state rdf:type dbo:CountrySubdivision .
  ?state dbo:abbreviation ""MN"" .
  ?state dbo:inCountry dbr:United_States .
}
```

This query retrieves the unique `?state` resources that have the abbreviation ""MN"", are subdivisions of a country, and that country is the United States.","SELECT DISTINCT ?uri WHERE { ?uri a yago:WikicatStatesOfTheUnitedStates ; <http://dbpedia.org/property/postalabbreviation> ""MN""^^<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString> }",41.93472290039063,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?state
WHERE {
  ?state rdf:type dbo:CountrySubdivision .
  ?state dbo:abbreviation ""MN"" .
  ?state dbo:inCountry dbr:United_States .
}",True,True,4.653248394306558e-155,0.14285714285714288
175,When did Muhammad die?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When did Muhammad die?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?deathYear
WHERE {
  ?person rdf:type dbo:Person .
  ?person dbo:name ""Muhammad"" .
  ?person dbo:death [ rdf:value ?deathYear ] .
  FILTER (lang(?deathYear) = ""en"")
}
```

This query retrieves the death year of Muhammad from the DBpedia Knowledge Graph. It uses the following prefixes:

- `dbo:` for DBpedia ontology
- `rdf:` for RDF syntax
- `rdfs:` for RDF schema
- `xsd:` for XML schema

The query selects distinct death years (`?deathYear`) for a person (`?person`) with the name ""Muhammad"". It also ensures that the death year is in English (`FILTER (lang(?deathYear) = ""en"")`).",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT xsd:date(?date) WHERE { res:Muhammad dbo:deathDate ?date },57.82781624794006,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?deathYear
WHERE {
  ?person rdf:type dbo:Person .
  ?person dbo:name ""Muhammad"" .
  ?person dbo:death [ rdf:value ?deathYear ] .
  FILTER (lang(?deathYear) = ""en"")
}",True,True,0.08680561749558059,0.18604651162790697
26,What is the atmosphere of the Moon composed of?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the atmosphere of the Moon composed of?

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?atmosphere
WHERE {
  ?moon dbo:orbiting ?planet .
  ?moon rdfs:label ?moonName .
  ?moon dbo:atmosphere ?atmosphere .
  FILTER(lang(?moonName) = ""en"")
  FILTER(?planet = <http://dbpedia.org/resource/Earth>)
}
```

This query retrieves the atmosphere of the Moon (or any other moon orbiting Earth) from the DBpedia Knowledge Graph. It uses the appropriate prefixes and retrieves unique results using the `DISTINCT` keyword. The `FILTER` statements are used to limit the results to the English language and to the Moon orbiting Earth.",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moon> <http://dbpedia.org/property/atmosphereComposition> ?uri },58.77873206138611,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?atmosphere
WHERE {
  ?moon dbo:orbiting ?planet .
  ?moon rdfs:label ?moonName .
  ?moon dbo:atmosphere ?atmosphere .
  FILTER(lang(?moonName) = ""en"")
  FILTER(?planet = <http://dbpedia.org/resource/Earth>)
}",True,True,4.117787481026391e-155,0.1282051282051282
60,Who is the governor of Texas?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the governor of Texas?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?governor WHERE {
  ?governor a dbo:Governor .
  ?governor dbp:governedArea rdf:resource <http://dbpedia.org/resource/Texas> .
}
```

This query retrieves the governor of Texas by searching for individuals that have the type `dbo:Governor` and are associated with Texas as the `dbp:governedArea`. The `SELECT DISTINCT` statement ensures that only unique results are returned.",PREFIX res: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT DISTINCT ?string WHERE { res:Texas dbp:governor ?string },43.17447113990784,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?governor WHERE {
  ?governor a dbo:Governor .
  ?governor dbp:governedArea rdf:resource <http://dbpedia.org/resource/Texas> .
}",False,False,0.1423412184218882,0.2222222222222222
110,Which movies did Kurosawa direct?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which movies did Kurosawa direct?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?movie
WHERE {
  ?movie rdf:type dbo:Movie .
  ?movie dbo:director ?director .
  ?director rdf:type dbo:Person .
  ?director dbo:name ""Kurosawa""@en .
  ?movie dbo:director_of_film ?film .
  FILTER (lang(?movie) = ""en"" && lang(?film) = ""en"")
}
```

This query retrieves the unique movie resources (?movie) that have Kurosawa (?director) as their director. It also ensures that the language of the movie and film resources are English (en).",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type dbo:Film ; dbo:director res:Akira_Kurosawa },48.49695825576782,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?movie
WHERE {
  ?movie rdf:type dbo:Movie .
  ?movie dbo:director ?director .
  ?director rdf:type dbo:Person .
  ?director dbo:name ""Kurosawa""@en .
  ?movie dbo:director_of_film ?film .
  FILTER (lang(?movie) = ""en"" && lang(?film) = ""en"")
}",True,True,0.08956271820172422,0.24489795918367344
206,What was the name of the famous battle in 1836 in San Antonio?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What was the name of the famous battle in 1836 in San Antonio?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?battleName
WHERE {
  ?battle rdf:type dbo:Battle .
  ?battle dbo:date ?date .
  ?battle dbo:location dbr:San_Antonio .
  FILTER(xsd:gYear(?date) = ""1836"") .
  ?battle rdfs:label ?battleName .
}
```

This query retrieves the name of battles that took place in San Antonio, Texas, in 1836. It uses the DBpedia ontology prefixes and filters the results to only include battles that occurred in the specified year. The `DISTINCT` keyword ensures that only unique results are returned.","PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbr: <http://dbpedia.org/resource/> SELECT ?uri WHERE { ?uri a dbo:MilitaryConflict ; dbo:place dbr:San_Antonio ; dbo:date ?date FILTER ( ?date > ""1835-12-31T00:00:00Z""^^xsd:dateTime ) FILTER ( ?date <= ""1836-12-31T00:00:00Z""^^xsd:dateTime ) }",46.52664828300476,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?battleName
WHERE {
  ?battle rdf:type dbo:Battle .
  ?battle dbo:date ?date .
  ?battle dbo:location dbr:San_Antonio .
  FILTER(xsd:gYear(?date) = ""1836"") .
  ?battle rdfs:label ?battleName .
}",True,True,0.14721154311313592,0.23529411764705882
97,Give me the official websites of actors of the television show Charmed.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me the official websites of actors of the television show Charmed.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?actor ?actorWebsite
WHERE {
  ?actor rdf:type dbo:Actor .
  ?actor dbp:birthPlace ?birthPlace .
  FILTER(lang(?birthPlace) = ""en"" && str(?birthPlace) = ""Los Angeles, California"" || str(?birthPlace) = ""Los Angeles"" || str(?birthPlace) = ""California"") .
  ?actor dbp:appearedInMovieOrTVSeries ?tvShow .
  FILTER(lang(?tvShow) = ""en"" && str(?tvShow) = ""Charmed"" || str(?tvShow) = ""Charmed (TV series)"" || str(?tvShow) = ""Charmed (1998 TV series)"") .
  ?actor foaf:homepage ?actorWebsite .
}
```

This query retrieves the official websites of actors of the television show Charmed who were born in Los Angeles, California or just Los Angeles or California. It uses the DBpedia ontology and properties to filter the results. The query also ensures that the results are unique by using the DISTINCT keyword.",PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX onto: <http://dbpedia.org/ontology/> SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charmed> onto:starring ?actors . ?actors foaf:homepage ?uri },70.4699809551239,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?actor ?actorWebsite
WHERE {
  ?actor rdf:type dbo:Actor .
  ?actor dbp:birthPlace ?birthPlace .
  FILTER(lang(?birthPlace) = ""en"" && str(?birthPlace) = ""Los Angeles, California"" || str(?birthPlace) = ""Los Angeles"" || str(?birthPlace) = ""California"") .
  ?actor dbp:appearedInMovieOrTVSeries ?tvShow .
  FILTER(lang(?tvShow) = ""en"" && str(?tvShow) = ""Charmed"" || str(?tvShow) = ""Charmed (TV series)"" || str(?tvShow) = ""Charmed (1998 TV series)"") .
  ?actor foaf:homepage ?actorWebsite .
}",True,True,0.10101116452042092,0.22727272727272727
20,How many calories does a baguette have?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many calories does a baguette have?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?calories
WHERE {
  ?item dbo:type dbr:Baguette .
  ?item dbo:nutritionCalories ?calories .
  FILTER(lang(?calories, ""en"") = ""en"")
}
```

This query retrieves the number of calories for a baguette from the DBpedia Knowledge Graph. It uses the `dbo:type` property to find the baguette resource, the `dbo:nutritionCalories` property to find the calories, and the `FILTER` function to ensure that the results are in English. The `DISTINCT` keyword is used to ensure that only unique results are returned.",SELECT DISTINCT ?n WHERE { <http://dbpedia.org/resource/Baguette> <http://dbpedia.org/property/calories> ?n },40.7534248828888,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?calories
WHERE {
  ?item dbo:type dbr:Baguette .
  ?item dbo:nutritionCalories ?calories .
  FILTER(lang(?calories, ""en"") = ""en"")
}",False,False,5.1533298068876275e-155,0.17241379310344826
169,Give me all libraries established before 1400.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all libraries established before 1400.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?library
WHERE {
  ?library a dbo:Library .
  ?library dbo:establishedIn ?place .
  ?place dbo:foundedYear ?year .
  FILTER(xsd:integer(?year) < 1400) .
}
```

This query retrieves all libraries (`dbo:Library`) that have a `dbo:establishedIn` property, which points to a place with a `dbo:foundedYear` property. The `FILTER` clause ensures that only libraries established before 1400 are returned. The `DISTINCT` keyword is used to ensure unique results.",SELECT DISTINCT ?uri WHERE { ?uri a <http://dbpedia.org/ontology/Library> ; <http://dbpedia.org/property/established> ?year FILTER ( ?year < 1400 ) },39.3137571811676,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?library
WHERE {
  ?library a dbo:Library .
  ?library dbo:establishedIn ?place .
  ?place dbo:foundedYear ?year .
  FILTER(xsd:integer(?year) < 1400) .
}",True,True,5.402334537839271e-155,0.20512820512820512
38,Give me all Frisian islands that belong to the Netherlands.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all Frisian islands that belong to the Netherlands.

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?island
WHERE {
  ?island rdf:type dbo:Island .
  ?island dbo:isPartOf dbr:Netherlands .
  ?island dbo:isLocatedInAdministrativeTerritory dbr:Frisia .
  FILTER(lang(?island) = ""en"")
}
```

This query retrieves all islands that are located in Frisia (a province of the Netherlands) and are of type Island. It also filters the results to only include English language labels for the islands.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX yago: <http://dbpedia.org/class/yago/> PREFIX res: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type yago:WikicatFrisianIslands ; dbo:country res:Netherlands },42.84137988090515,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?island
WHERE {
  ?island rdf:type dbo:Island .
  ?island dbo:isPartOf dbr:Netherlands .
  ?island dbo:isLocatedInAdministrativeTerritory dbr:Frisia .
  FILTER(lang(?island) = ""en"")
}",True,True,0.13382613080002845,0.2666666666666666
192,Which museum exhibits The Scream by Munch?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which museum exhibits The Scream by Munch?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?museum
WHERE {
  ?museum rdf:type dbo:Museum .
  ?museum dct:subject ?work .
  ?work rdf:type dbo:Painting .
  ?work dbo:artist dbr:Edvard_Munch .
  ?work dbo:title ""The Scream"" .
}
```

This query retrieves unique museums that exhibit ""The Scream"" by Edvard Munch. It uses the DBpedia ontology and properties to find the relevant information.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:The_Scream dbo:museum ?uri },45.16425609588623,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?museum
WHERE {
  ?museum rdf:type dbo:Museum .
  ?museum dct:subject ?work .
  ?work rdf:type dbo:Painting .
  ?work dbo:artist dbr:Edvard_Munch .
  ?work dbo:title ""The Scream"" .
}",True,True,0.09047502044256338,0.21951219512195125
78,When was the De Beers company founded?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When was the De Beers company founded?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?foundationYear
WHERE {
  ?company a dbo:Company ;
         dbo:foundationYear ?foundationYear ;
          rdfs:label ""De Beers""@en .
}
```

This query retrieves the foundation year of the De Beers company from the DBpedia Knowledge Graph. It uses the `dbo:Company` class and the `dbo:foundationYear` property to find the company and its foundation year, respectively. The `rdfs:label` property is used to filter the results to only include the De Beers company. The `DISTINCT` keyword ensures that only unique results are returned.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT xsd:date(?date) WHERE { res:De_Beers dbo:foundingYear ?date },34.32655072212219,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?foundationYear
WHERE {
  ?company a dbo:Company ;
         dbo:foundationYear ?foundationYear ;
          rdfs:label ""De Beers""@en .
}",True,True,0.14345334371446108,0.23529411764705882
19,Who became president after JFK died?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who became president after JFK died?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?president WHERE {
  ?president dbo:presidentOf dbr:United_States.
  ?president dbo:startDate > dbr:John_F._Kennedy.
  FILTER(?president dbo:endDate MAX)
}
```

Explanation:

1. Prefixes: We use prefixes to make the query more readable and to avoid writing the full URI every time.

2. `SELECT DISTINCT ?president`: We are selecting unique presidents.

3. `?president dbo:presidentOf dbr:United_States`: We are looking for presidents of the United States.

4. `?president dbo:startDate > dbr:John_F._Kennedy`: We are filtering presidents who started their term after JFK.

5. `FILTER(?president dbo:endDate MAX)`: We are selecting the president with the latest end date, which means the one who came after JFK.",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_F._Kennedy> <http://dbpedia.org/property/presidentEnd> ?x . ?uri <http://dbpedia.org/property/presidentStart> ?x; a <http://dbpedia.org/ontology/Person>. },58.51763486862183,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?president WHERE {
  ?president dbo:presidentOf dbr:United_States.
  ?president dbo:startDate > dbr:John_F._Kennedy.
  FILTER(?president dbo:endDate MAX)
}",False,False,5.058733103503338e-155,0.13513513513513511
190,Who are the parents of the wife of Juan Carlos I?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the parents of the wife of Juan Carlos I?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?parent
WHERE {
  # Find Juan Carlos I
  ?person rdf:type dbo:Person .
  ?person rdfs:label ""Juan Carlos I""@en .

  # Find the spouse of Juan Carlos I
  ?person dbo:spouse ?spouse .

  # Find the parents of the spouse
  ?spouse foaf:spouse_of ?person .
  ?spouse dbo:parent ?parent .
}
```",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { res:Juan_Carlos_I_of_Spain dbo:spouse ?x . ?x dbo:parent ?uri },42.95874786376953,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?parent
WHERE {
  # Find Juan Carlos I
  ?person rdf:type dbo:Person .
  ?person rdfs:label ""Juan Carlos I""@en .

  # Find the spouse of Juan Carlos I
  ?person dbo:spouse ?spouse .

  # Find the parents of the spouse
  ?spouse foaf:spouse_of ?person .
  ?spouse dbo:parent ?parent .
}",True,True,0.05382598430511784,0.20754716981132076
174,Who is the novelist of the work a song of ice and fire?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the novelist of the work a song of ice and fire?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?author
WHERE {
  ?work dbo:author ?author .
  ?work rdfs:label ""A Song of Ice and Fire""@en .
  FILTER(lang(?work) = ""en"")
}
```

Explanation:

1. Prefixes: We use prefixes to make the query more readable and to avoid writing the full URI every time.

2. ?work: This is a variable that represents the work ""A Song of Ice and Fire"".

3. dbo:author: This is the property that links a work to its author.

4. ?author: This is the variable that will hold the author's URI.

5. ?work rdfs:label ""A Song of Ice and Fire""@en: This statement matches the work with the label ""A Song of Ice and Fire"" in English.

6. FILTER(lang(?work) = ""en""): This filter ensures that the work is in English.

7. SELECT DISTINCT ?author: This statement ensures that only unique authors are returned.

8. The WHERE clause defines the conditions that must be met for a result to be returned.",PREFIX dbr: <http://dbpedia.org/resource/> PREFIX dbp: <http://dbpedia.org/property/> SELECT ?Novelist WHERE { dbr:A_Song_of_Ice_and_Fire dbp:author ?Novelist },61.28994154930115,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?author
WHERE {
  ?work dbo:author ?author .
  ?work rdfs:label ""A Song of Ice and Fire""@en .
  FILTER(lang(?work) = ""en"")
}",True,True,2.1094473083875198e-78,0.18421052631578946
189,In which studio did the Beatles record their first album?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which studio did the Beatles record their first album?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?studio
WHERE {
  ?album rdf:type dbo:Album ;
         dbo:artist ?band ;
         dbo:wasRecordedAt ?studio .
  FILTER(?band = <http://dbpedia.org/resource/The_Beatles> &&
         ?album dbo:firstAlbumOf ?band) .
}
```

This query retrieves the studio where the first album of The Beatles was recorded. It uses the DBpedia ontology prefixes and filters the results to only include the first album of The Beatles. The `DISTINCT` keyword ensures that only unique studios are returned.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbp: <http://dbpedia.org/property/> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> PREFIX db: <http://dbpedia.org/> SELECT ?studio WHERE { ?album dbo:artist dbr:The_Beatles ; rdf:type dbo:Album ; dbo:releaseDate ?date ; dbp:studio ?studio } ORDER BY ASC(?date) LIMIT 1,46.98458671569824,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?studio
WHERE {
  ?album rdf:type dbo:Album ;
         dbo:artist ?band ;
         dbo:wasRecordedAt ?studio .
  FILTER(?band = <http://dbpedia.org/resource/The_Beatles> &&
         ?album dbo:firstAlbumOf ?band) .
}",False,False,0.3274334145383845,0.31147540983606553
152,Which beer brewing companies are located in North-Rhine Westphalia?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which beer brewing companies are located in North-Rhine Westphalia?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?company ?companyLabel
WHERE {
  ?company rdf:type dbo:BeerBrewingCompany .
  ?company dbp:location ?location .
  ?location geo:lat ?lat .
  ?location geo:long ?long .
  BIND(IF(?lat > 50.0 && ?lat < 52.0 && ?long > 6.0 && ?long < 10.0, true, false) AS ?isInNRW)
  FILTER(?isInNRW)
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```

This query retrieves the labels of beer brewing companies that have a location with latitude between 50.0 and 52.0 and longitude between 6.0 and 10.0, which corresponds to North-Rhine Westphalia. The `FILTER` clause ensures that only the companies located in North-Rhine Westphalia are returned, and the `SERVICE wikibase:label` clause",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?company WHERE { ?company dct:subject dbc:Companies_based_in_North_Rhine-Westphalia ; rdf:type dbo:Brewery },71.07662630081177,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?company ?companyLabel
WHERE {
  ?company rdf:type dbo:BeerBrewingCompany .
  ?company dbp:location ?location .
  ?location geo:lat ?lat .
  ?location geo:long ?long .
  BIND(IF(?lat > 50.0 && ?lat < 52.0 && ?long > 6.0 && ?long < 10.0, true, false) AS ?isInNRW)
  FILTER(?isInNRW)
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",False,False,0.0713026925675884,0.171875
94,When did princess Diana die?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When did princess Diana die?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?deathDate
WHERE {
  ?person dbo:died ?deathDate .
  FILTER(lang(?person) = ""en"" && str(?person) = ""Diana, Princess of Wales"")
}
```

Explanation:

1. Prefixes: We use prefixes to make the query more readable and to avoid writing the full URI every time.

2. ?deathDate: This is a variable that will hold the date of death for the person we are looking for.

3. ?person: This is a variable that will hold the URI of the person we are looking for.

4. dbo:died: This is the property that links a person to the date of their death.

5. FILTER: This is used to filter the results based on certain conditions. In this case, we are filtering the results to only include English language pages and pages with the name ""Diana, Princess of Wales"".

6. str(?person): This function converts the URI of the person to a string for comparison.

7. lang(?person): This function returns the language of the page associated with the person URI.

8. SELECT DISTINCT ?deathDate: This ensures that we only get unique results for the date of death.","SELECT DISTINCT xsd:date(?d) WHERE { <http://dbpedia.org/resource/Diana,_Princess_of_Wales> <http://dbpedia.org/ontology/deathDate> ?d }",68.44600248336792,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?deathDate
WHERE {
  ?person dbo:died ?deathDate .
  FILTER(lang(?person) = ""en"" && str(?person) = ""Diana, Princess of Wales"")
}",True,True,4.726550448515237e-155,0.1388888888888889
8,Who founded Intel?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who founded Intel?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?founder
WHERE {
  dbr:Intel dbo:founder ?founder .
}
```

This query uses the DBpedia ontology prefixes `dbo:` and `dbr:`. It retrieves the founder of Intel by using the `dbo:founder` property. The `SELECT DISTINCT` clause ensures that only unique results are returned.",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Intel> <http://dbpedia.org/property/founders> ?uri },23.704686641693115,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?founder
WHERE {
  dbr:Intel dbo:founder ?founder .
}",True,True,6.7393716283177006e-155,0.22727272727272727
95,Who is the youngest player in the Premier League?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the youngest player in the Premier League?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?player ?age
WHERE {
  ?player rdf:type dbo:FootballPlayer .
  ?player dbo:birthDate ?birthDate .
  ?player dbo:deathDate (<http://www.w3.org/2001/01/rdf-schema#nil> | <>) .
  ?player dbo:playsFor ?club .
  ?club dbo:inLeague dbr:Premier_League .

  # Calculate age
  BIND(YEAR(CURRENT_TIMESTAMP) - YEAR(?birthDate) AS ?currentAge)
  BIND(?currentAge - YEAR(STR(?birthDate)) -
       IF(MONTH(CURRENT_TIMESTAMP) < MONTH(?birthDate) ||
          (MONTH(CURRENT_TIMESTAMP) = MONTH(?birthDate) AND DAY(CURRENT_TIMESTAMP) < DAY(?birthDate)), 1, 0) AS ?age)

  F",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX res: <http://dbpedia.org/resource/> SELECT DISTINCT ?uri WHERE { ?uri dbo:team ?team . ?league dbo:league res:Premier_League . ?league dbo:team ?team . ?uri dbo:birthDate ?date } ORDER BY DESC(?date) LIMIT 1,71.01539468765259,,False,False,,
119,Which instruments does Cat Stevens play?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which instruments does Cat Stevens play?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?instrument
WHERE {
  BIND(<http://dbpedia.org/resource/Cat_Stevens> AS ?artist)
  ?artist dbo:instrument ?instrument .
}
```

This query uses the DBpedia ontology to find the instruments played by Cat Stevens. It retrieves unique results using the `DISTINCT` keyword and binds the artist's URI to the variable `?artist`. The `?instrument` variable is used to store the instrument's URI, and the `dbo:instrument` property is used to link the artist to the instrument.",SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cat_Stevens> <http://dbpedia.org/ontology/instrument> ?uri },36.4789354801178,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?instrument
WHERE {
  BIND(<http://dbpedia.org/resource/Cat_Stevens> AS ?artist)
  ?artist dbo:instrument ?instrument .
}",True,True,5.721523971118206e-155,0.18518518518518517
115,How many rivers and lakes are in South Carolina?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many rivers and lakes are in South Carolina?

```sparql
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?type ?count
WHERE {
  {
    SELECT (COUNT(DISTINCT ?river) AS ?count)
    WHERE {
      ?river rdf:type dbo:River .
      ?river dbp:location wdt:P31 wd:Q12286 .
      FILTER(STRSTARTS(STR(wd:Q12286), ""Q12286-""))
    }
  }
  UNION
  {
    SELECT (COUNT(DISTINCT ?lake) AS ?count)
    WHERE {
      ?lake rdf:type dbo:Lake .
      ?lake dbp:location wdt:P31 wd:Q12286 .
      FILTER(STRSTARTS(STR(wd:Q12286), ""Q12286-""))
    }
  }
}
```

This query retrieves the count of rivers and lakes in South Carolina by filtering the location property to only include resources with the Q12286 (South Carolina) as a parent resource. The UNION keyword is used to combine the results of the two separate queries for rivers and lakes. The DISTINCT keyword is",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dbr: <http://dbpedia.org/resource/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT (COUNT(DISTINCT ?uri) AS ?count) WHERE { { ?uri dbo:location dbr:South_Carolina ; rdf:type dbo:Lake } UNION { ?uri dct:subject dbc:Rivers_and_streams_of_South_Carolina } },71.15598940849304,"PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?type ?count
WHERE {
  {
    SELECT (COUNT(DISTINCT ?river) AS ?count)
    WHERE {
      ?river rdf:type dbo:River .
      ?river dbp:location wdt:P31 wd:Q12286 .
      FILTER(STRSTARTS(STR(wd:Q12286), ""Q12286-""))
    }
  }
  UNION
  {
    SELECT (COUNT(DISTINCT ?lake) AS ?count)
    WHERE {
      ?lake rdf:type dbo:Lake .
      ?lake dbp:location wdt:P31 wd:Q12286 .
      FILTER(STRSTARTS(STR(wd:Q12286), ""Q12286-""))
    }
  }
}",False,False,0.13396411871265,0.24590163934426232
116,Who was called Rodzilla?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was called Rodzilla?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?name WHERE {
  ?person rdfs:label ?name .
  ?person dbo:nickname ""Rodzilla"" .
  FILTER(lang(?name) = ""en"")
}
```

This query retrieves the names of individuals in the DBpedia Knowledge Graph who have the nickname ""Rodzilla"". The results are filtered to only include English labels (`FILTER(lang(?name) = ""en"")`).","SELECT DISTINCT ?uri WHERE { ?uri <http://xmlns.com/foaf/0.1/nick> ""Rodzilla""@en }",33.04540681838989,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?name WHERE {
  ?person rdfs:label ?name .
  ?person dbo:nickname ""Rodzilla"" .
  FILTER(lang(?name) = ""en"")
}",True,True,5.253441210115029e-155,0.17241379310344826
138,Give me the capitals of all countries in Africa.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me the capitals of all countries in Africa.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?capital WHERE {
  ?country rdf:type dbo:Country .
  ?country dbo:inContinent dbr:Africa .
  ?country dbo:capital ?capital .
}
```

This query retrieves all capitals of countries in Africa from the DBpedia Knowledge Graph. It uses the following prefixes:

- `dbo:` for DBpedia ontology properties
- `rdf:` and `rdfs:` for RDF and RDFS namespaces
- `dbr:` for DBpedia resource URIs

The query selects distinct capitals (`?capital`) of countries (`?country`) that are in Africa (`dbo:inContinent dbr:Africa`) and are of type `dbo:Country`.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX dct: <http://purl.org/dc/terms/> SELECT DISTINCT ?uri WHERE { ?country dct:subject dbc:Countries_in_Africa ; dbo:capital ?uri },51.65083026885986,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?capital WHERE {
  ?country rdf:type dbo:Country .
  ?country dbo:inContinent dbr:Africa .
  ?country dbo:capital ?capital .
}",True,True,0.13461801293778908,0.25
177,Which bridges are of the same type as the Manhattan Bridge?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which bridges are of the same type as the Manhattan Bridge?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?bridge
WHERE {
  ?manhattanBridge a dbo:Bridge ;
         dbo:type ?manhattanBridgeType .
  ?bridge a dbo:Bridge ;
         dbo:type ?bridgeType ;
         dbp:isPartOf ?location .
  FILTER(?manhattanBridgeType = ?bridgeType)
  FILTER(?location != <http://dbpedia.org/resource/Manhattan> )
}
```

Explanation:

1. Prefixes: We use prefixes to make the query more readable and to avoid writing the full URI every time.

2. Variables: We use variables (?manhattanBridge, ?manhattanBridgeType, ?bridge, ?bridgeType, ?location) to represent the unknown values we want to retrieve.

3. Filters: We use FILTER to narrow down the results. In this case, we filter the Manhattan Bridge's type and exclude Manhattan as a location for the other bridges.

4. Query structure: The query retrieves all bridges that have the same type as the Manhattan Bridge. It does this by first finding the type of the Manhattan Bridge and then finding other bridges with the same type and a different location.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX dbr: <http://dbpedia.org/resource/> SELECT DISTINCT ?bridge WHERE { dbr:Manhattan_Bridge dbo:type ?type . ?bridge dbo:type ?type ; rdf:type dbo:Bridge },70.27634954452515,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?bridge
WHERE {
  ?manhattanBridge a dbo:Bridge ;
         dbo:type ?manhattanBridgeType .
  ?bridge a dbo:Bridge ;
         dbo:type ?bridgeType ;
         dbp:isPartOf ?location .
  FILTER(?manhattanBridgeType = ?bridgeType)
  FILTER(?location != <http://dbpedia.org/resource/Manhattan> )
}",True,True,0.24720511037119816,0.28846153846153844
101,How many companies were founded by the founder of Facebook?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many companies were founded by the founder of Facebook?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?companyCount
WHERE {
  ?person a dbo:Person ;
         dbo:birthPlace ?birthPlace .
  FILTER(lang(?birthPlace) = ""en"" && str(?birthPlace) = ""United States"")
  ?person dbo:founderOf ?facebook .
  ?facebook a dbo:Company ;
         dbo:numEmployees ?companyCount .
}
```

This query retrieves the number of companies founded by the founder of Facebook, Mark Zuckerberg, who was born in the United States. It filters the results to only include companies with English birthplace labels and uses the `dbo:numEmployees` property to represent the number of companies.",SELECT (COUNT(DISTINCT ?x) AS ?c) WHERE { <http://dbpedia.org/resource/Facebook> <http://dbpedia.org/ontology/foundedBy> ?uri . ?x <http://dbpedia.org/ontology/foundedBy> ?uri },52.75686764717102,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?companyCount
WHERE {
  ?person a dbo:Person ;
         dbo:birthPlace ?birthPlace .
  FILTER(lang(?birthPlace) = ""en"" && str(?birthPlace) = ""United States"")
  ?person dbo:founderOf ?facebook .
  ?facebook a dbo:Company ;
         dbo:numEmployees ?companyCount .
}",True,True,3.271152523572328e-155,0.10416666666666666
14,Show me hiking trails in the Grand Canyon where there's no danger of flash floods.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Show me hiking trails in the Grand Canyon where there's no danger of flash floods.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?hikingTrail
WHERE {
  ?hikingTrail a dbo:HikingTrail .
  ?hikingTrail dct:subject dbr:Grand_Canyon .
  ?hikingTrail dbo:location ?location .
  ?location geo:lat ?lat .
  ?location geo:long ?long .
  FILTER(?lat > 36.0 && ?lat < 36.1 && ?long > -112.0 && ?long < -112.1)
  OPTIONAL {
    ?hikingTrail dbo:hasFlashFloodRisk ?risk .
    FILTER(NOT EXISTS {?risk rdfs:label ""Yes""@en})
  }
}
```

This query retrieves hiking trails in the Grand C",SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/trailheads> <http://dbpedia.org/resource/Grand_Canyon> FILTER NOT EXISTS { ?uri <http://dbpedia.org/property/hazards> <http://dbpedia.org/resource/Flash_flood> } },71.21685194969177,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dct: <http://purl.org/dc/terms/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX skos: <http://www.w3.org/2004/02/skos/core#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?hikingTrail
WHERE {
  ?hikingTrail a dbo:HikingTrail .
  ?hikingTrail dct:subject dbr:Grand_Canyon .
  ?hikingTrail dbo:location ?location .
  ?location geo:lat ?lat .
  ?location geo:long ?long .
  FILTER(?lat > 36.0 && ?lat < 36.1 && ?long > -112.0 && ?long < -112.1)
  OPTIONAL {
    ?hikingTrail dbo:hasFlashFloodRisk ?risk .
    FILTER(NOT EXISTS {?risk rdfs:label ""Yes""@en})
  }
}",True,True,3.774843462663143e-155,0.09523809523809523
87,Which book has the most pages?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which book has the most pages?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?book ?numPages
WHERE {
  ?book rdf:type dbo:Book .
  ?book dbo:numPages ?numPages .
  FILTER(lang(?numPages) = 'en')
  BIND(MAX(xsd:gYearMonth(?numPages)) AS ?maxYear)
  FILTER(xsd:gYearMonth(?numPages) = ?maxYear)
}
ORDER BY DESC(xsd:gYearMonth(?numPages))
```

This query retrieves the book with the most pages by filtering for English language, finding the maximum year (implicitly assuming that the number of pages is consistent across different editions of the same book), and then filtering for that year to get the book with the most pages in that year.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT DISTINCT ?uri WHERE { ?uri rdf:type dbo:Book ; dbo:numberOfPages ?n } ORDER BY DESC(?n) OFFSET 0 LIMIT 1,56.10917019844055,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?book ?numPages
WHERE {
  ?book rdf:type dbo:Book .
  ?book dbo:numPages ?numPages .
  FILTER(lang(?numPages) = 'en')
  BIND(MAX(xsd:gYearMonth(?numPages)) AS ?maxYear)
  FILTER(xsd:gYearMonth(?numPages) = ?maxYear)
}
ORDER BY DESC(xsd:gYearMonth(?numPages))",True,False,0.12224986162816123,0.2545454545454546
148,What is the largest state in the United States?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the largest state in the United States?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?state ?area
WHERE {
  ?state rdf:type dbo:State .
  ?state dbo:capital ?capital .
  ?state dbo:name ?name .
  ?state dbo:areaTotal ?area .
  FILTER(lang(?name) = ""en"")
  FILTER(?state rdf:type dbo:StateAndTerritory)
  FILTER(?state dbo:inAdministrativeDivisionOf dbo:United_States)
  FILTER(?state dbo:areaTotal > (SELECT MAX(?area) WHERE { ?largestState rdf:type dbo:State . ?largestState dbo:areaTotal ?area }))
}
ORDER BY DESC(?area)
LIMIT 1
```

This query retrieves the name and area of the largest state in the United States. It filters the results to only include states with English names, states that are part of the United States, and states that are of the type ""StateAndTerritory"". The query also uses a subquery to compare the area of the current state with the maximum area found so far. Finally, it orders the results in descending order by area and limits the results to one",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri dct:subject dbc:States_of_the_United_States ; rdf:type dbo:AdministrativeRegion ; dbo:areaTotal ?area } ORDER BY DESC(?area) OFFSET 0 LIMIT 1,71.00480794906616,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>

SELECT DISTINCT ?state ?area
WHERE {
  ?state rdf:type dbo:State .
  ?state dbo:capital ?capital .
  ?state dbo:name ?name .
  ?state dbo:areaTotal ?area .
  FILTER(lang(?name) = ""en"")
  FILTER(?state rdf:type dbo:StateAndTerritory)
  FILTER(?state dbo:inAdministrativeDivisionOf dbo:United_States)
  FILTER(?state dbo:areaTotal > (SELECT MAX(?area) WHERE { ?largestState rdf:type dbo:State . ?largestState dbo:areaTotal ?area }))
}
ORDER BY DESC(?area)
LIMIT 1",False,False,0.10959611470090964,0.24637681159420288
43,Give me the websites of companies with more than 500000 employees.,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me the websites of companies with more than 500000 employees.

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?website
WHERE {
  ?company dbo:employeeCount > 500000 .
  ?company dbo:website ?website .
  FILTER (lang(lang(?website), 'en') = 'en')
}
```

This query uses the DBpedia ontology prefixes, retrieves companies with more than 500000 employees, and their English language websites. The FILTER clause ensures that only English websites are returned.",PREFIX foaf: <http://xmlns.com/foaf/0.1/> PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#> SELECT distinct ?web WHERE { ?sub dbo:numberOfEmployees ?obj . ?sub foaf:homepage ?web FILTER( xsd:integer(?obj) > 500000 ) . },31.971243381500244,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>

SELECT DISTINCT ?website
WHERE {
  ?company dbo:employeeCount > 500000 .
  ?company dbo:website ?website .
  FILTER (lang(lang(?website), 'en') = 'en')
}",False,False,0.1431044073815726,0.24999999999999994
179,What were the names of the three ships by Columbus?,mistralai/Mistral-7B-Instruct-v0.3,none,"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What were the names of the three ships by Columbus?

```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?shipName
WHERE {
  ?ship rdf:type dbo:Ship .
  ?ship dbo:name ?shipName .
  ?ship dbr:Christopher_Columbus_ship dbo:voyage ?voyage .
  FILTER(lang(?shipName) = ""en"")
  FILTER(?voyage > 1)
}
ORDER BY ASC(?shipName)
```

This query retrieves the names of ships that were captained by Christopher Columbus, filtering for English language names and ensuring that each ship was part of more than one voyage. The results are ordered alphabetically.",PREFIX dbo: <http://dbpedia.org/ontology/> PREFIX dct: <http://purl.org/dc/terms/> PREFIX dbc: <http://dbpedia.org/resource/Category:> PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?uri WHERE { ?uri rdf:type dbo:Ship ; dct:subject dbc:Christopher_Columbus ; dct:subject dbc:Exploration_ships },46.25542235374451,"PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?shipName
WHERE {
  ?ship rdf:type dbo:Ship .
  ?ship dbo:name ?shipName .
  ?ship dbr:Christopher_Columbus_ship dbo:voyage ?voyage .
  FILTER(lang(?shipName) = ""en"")
  FILTER(?voyage > 1)
}
ORDER BY ASC(?shipName)",False,False,0.10759927692349745,0.21153846153846156
