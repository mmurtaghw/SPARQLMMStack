question_id,question,model,Reference Query,Generated Query,Extracted SPARQL,BLEU Score,macro_f1,Syntax Valid,is_execution_valid
3986,Count the number of people became famous for when Andrew Jackson was a commander ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Andrew_Jackson> . ?uri <http://dbpedia.org/ontology/knownFor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of people became famous for when Andrew Jackson was a commander ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace ?deathPlace .
  ?person dbo:becameFamousFor ?becameFamousFor .
  FILTER ( ?becameFamousFor = <http://dbpedia.org/resource/Andrew_Jackson> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace ?deathPlace .
  ?person dbo:becameFamousFor ?becameFamousFor .
  FILTER ( ?becameFamousFor = <http://dbpedia.org/resource/Andrew_Jackson> )
}",2.5092505335702585e-155,0.07058823529411765,True,True
2262,Which location city of Denver Broncos is the palce of birth of Steven Clark Cunningham ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?uri. <http://dbpedia.org/resource/Steven_Clark_Cunningham> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which location city of Denver Broncos is the palce of birth of Steven Clark Cunningham ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  ?person dbo:name ""Steven Clark Cunningham"" .
  FILTER (regex(?city, ""Denver""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  ?person dbo:name ""Steven Clark Cunningham"" .
  FILTER (regex(?city, ""Denver""))
}",2.1108049473741715e-155,0.038461538461538464,True,True
855,Which people are known for appearing on the television show Dragon's Den?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Dragons'_Den_(UK_TV_series)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which people are known for appearing on the television show Dragon's Den?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:knownFor ?show .
  ?show rdfs:label ""Dragon's Den"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:knownFor ?show .
  ?show rdfs:label ""Dragon's Den"" .
}",2.4119102000777368e-155,0.05714285714285714,True,True
377,"Which office holder's governor is Charles Willing Byrd and has final resting place in North Bend, Ohio?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/governor> <http://dbpedia.org/resource/Charles_Willing_Byrd> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/North_Bend,_Ohio>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which office holder's governor is Charles Willing Byrd and has final resting place in North Bend, Ohio?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?officeHolder
WHERE {
  ?officeHolder dbo:governor ?governor .
  ?governor dbo:name ""Charles Willing Byrd""^^xsd:string .
  ?officeHolder dbo:finalRestingPlace ?restingPlace .
  ?restingPlace dbo:name ""North Bend, Ohio""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?officeHolder
WHERE {
  ?officeHolder dbo:governor ?governor .
  ?governor dbo:name ""Charles Willing Byrd""^^xsd:string .
  ?officeHolder dbo:finalRestingPlace ?restingPlace .
  ?restingPlace dbo:name ""North Bend, Ohio""^^xsd:string .
}",8.252630869637644e-232,0.03614457831325301,True,True
2308,List all the faiths that British Columbian politicians follow?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/British_Columbia> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the faiths that British Columbian politicians follow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?faith
WHERE {
  ?politician dbo: nationality ""British Columbian"" .
  ?politician dbo:religion ?faith .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?faith
WHERE {
  ?politician dbo: nationality ""British Columbian"" .
  ?politician dbo:religion ?faith .
}",3.1537059338519422e-155,0.07042253521126761,False,False
688,In which cities can the beverage related to Barq's be found?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Barq's> <http://dbpedia.org/ontology/related> ?x . ?x <http://dbpedia.org/property/locationCity> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which cities can the beverage related to Barq's be found?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?product dbo:brand ""Barq's"" .
  ?product dbo:productType ""beverage"" .
  ?product dbp:availableIn ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?product dbo:brand ""Barq's"" .
  ?product dbo:productType ""beverage"" .
  ?product dbp:availableIn ?city .
}",3.53714058675999e-155,0.08108108108108109,True,True
2227,Trainees at the national film school of Lodz have received what awards?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/training> <http://dbpedia.org/resource/National_Film_School_in_Łódź> . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Trainees at the national film school of Lodz have received what awards?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?school dbo:name ""National Film School in Łódź"" .
  ?school dbo:trainee ?trainee .
  ?trainee dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?school dbo:name ""National Film School in Łódź"" .
  ?school dbo:trainee ?trainee .
  ?trainee dbo:award ?award .
}",3.433385853714441e-155,0.0759493670886076,True,True
1018,Give me the count of all people who ascended a peak in California?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/California> . ?x <http://dbpedia.org/ontology/firstAscentPerson> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me the count of all people who ascended a peak in California?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?person) AS ?count)
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country ?country .
  FILTER(?country = dbo:UnitedStates)
  ?person dbo:ascendedPeak ?peak .
  ?peak dbo:location ?location .
  FILTER(?location = dbo:California)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?person) AS ?count)
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country ?country .
  FILTER(?country = dbo:UnitedStates)
  ?person dbo:ascendedPeak ?peak .
  ?peak dbo:location ?location .
  FILTER(?location = dbo:California)
}",2.3318865198845825e-155,0.047619047619047616,True,True
3702,What is the region of Kim Sawchuk ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kim_Sawchuk> <http://dbpedia.org/property/region> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the region of Kim Sawchuk ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?region
WHERE {
  ?person dbo:name ""Kim Sawchuk"" .
  ?person dbo:region ?region .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?region
WHERE {
  ?person dbo:name ""Kim Sawchuk"" .
  ?person dbo:region ?region .
}",2.494821638843469e-155,0.0625,True,True
1173,List the total number of executive producer of TV show which have one of the executiive producer as Steven Moffat ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Steven_Moffat> . ?x <http://dbpedia.org/property/executiveProducer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the total number of executive producer of TV show which have one of the executiive producer as Steven Moffat ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?executiveProducer) AS ?count)
WHERE {
  ?tvShow dbo:executiveProducer ?executiveProducer .
  ?executiveProducer dbo:name ""Steven Moffat"" .
  FILTER (BOUND(?executiveProducer))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?executiveProducer) AS ?count)
WHERE {
  ?tvShow dbo:executiveProducer ?executiveProducer .
  ?executiveProducer dbo:name ""Steven Moffat"" .
  FILTER (BOUND(?executiveProducer))
}",2.3192471031465984e-155,0.058823529411764705,True,True
4084,Who all were venerated in Islam?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Islam>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who all were venerated in Islam?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:religion ""Islam""^^xsd:string .
  ?subject dbo:veneratedBy ?object .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:religion ""Islam""^^xsd:string .
  ?subject dbo:veneratedBy ?object .
}",3.181891987622405e-155,0.078125,True,True
3753,List down the opponents of Frank Stilwell?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frank_Stilwell> <http://dbpedia.org/ontology/opponent> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List down the opponents of Frank Stilwell?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?opponent
WHERE {
  ?opponent dbo:opponentOf ?frankStilwell .
  ?frankStilwell dbo:name ""Frank Stilwell"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?opponent
WHERE {
  ?opponent dbo:opponentOf ?frankStilwell .
  ?frankStilwell dbo:name ""Frank Stilwell"" .
}",3.1370721297783126e-155,0.078125,True,True
3703,Which colored race horses have won the Grand National?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/honours> <http://dbpedia.org/resource/Grand_National> . ?x <http://dbpedia.org/ontology/colour> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RaceHorse>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which colored race horses have won the Grand National?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?horse ?color
WHERE {
  ?horse dbo:wikiPageRedirects* dbo:GrandNationalWinner .
  ?horse dbp:coatColor ?color .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?horse ?color
WHERE {
  ?horse dbo:wikiPageRedirects* dbo:GrandNationalWinner .
  ?horse dbp:coatColor ?color .
}",3.1742523358973992e-155,0.07042253521126761,True,True
3932,List bacterias whose order is Bacillales and division is Firmicutes?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales> . ?uri <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Firmicutes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List bacterias whose order is Bacillales and division is Firmicutes?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:order ""Bacillales""^^xsd:string .
  ?bacteria dbo:division ""Firmicutes""^^xsd:string .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:order ""Bacillales""^^xsd:string .
  ?bacteria dbo:division ""Firmicutes""^^xsd:string .
}",2.5502845355614067e-155,0.056338028169014086,True,True
4784,Brian Moriarty designed video games written by whom?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designer> <http://dbpedia.org/resource/Brian_Moriarty> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Brian Moriarty designed video games written by whom?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?writer
WHERE {
  ?game dbo:designer Brian Moriarty .
  ?game dbo:writer ?writer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?writer
WHERE {
  ?game dbo:designer Brian Moriarty .
  ?game dbo:writer ?writer .
}",3.195205633963664e-155,0.07142857142857142,False,False
1242,List the other members of the band of which Juelz Santana is a part?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Juelz_Santana> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the other members of the band of which Juelz Santana is a part?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?otherMember
WHERE {
  ?band dbo:member ?member .
  ?member dbo:name ""Juelz Santana""^^xsd:string .
  ?band dbo:member ?otherMember .
  FILTER ( ?otherMember != ?member )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?otherMember
WHERE {
  ?band dbo:member ?member .
  ?member dbo:name ""Juelz Santana""^^xsd:string .
  ?band dbo:member ?otherMember .
  FILTER ( ?otherMember != ?member )
}",2.951204860745888e-155,0.06493506493506493,True,True
1570,What is the nationality of Aishath Saffa?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aishath_Saffa> <http://dbpedia.org/property/nationality> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the nationality of Aishath Saffa?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?nationality
WHERE {
  dbp:nationality Aishath_Saffa ?nationality .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?nationality
WHERE {
  dbp:nationality Aishath_Saffa ?nationality .
}",2.606590994551401e-155,0.06666666666666667,False,False
4768,Is Fluidinfo written in PostgreSQL language?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Fluidinfo> <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/PostgreSQL> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Fluidinfo written in PostgreSQL language?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects/dbp:programmingLanguage ""PostgreSQL"" .
  ?x dbo:wikiPageRedirects/dbp:name ""Fluidinfo"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects/dbp:programmingLanguage ""PostgreSQL"" .
  ?x dbo:wikiPageRedirects/dbp:name ""Fluidinfo"" .
}",2.321693139700891e-155,0.047619047619047616,True,True
4676,Estimate the number of sports divisions at the universities under international association of universities.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/International_Association_of_Universities> . ?x <http://dbpedia.org/ontology/sport> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Estimate the number of sports divisions at the universities under international association of universities.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?sportDivision) AS ?count)
WHERE {
  ?university dbo:memberOf ?iau .
  ?iau dbo:name ""International Association of Universities""@en .
  ?university dbo:sportsDivision ?sportDivision .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?sportDivision) AS ?count)
WHERE {
  ?university dbo:memberOf ?iau .
  ?iau dbo:name ""International Association of Universities""@en .
  ?university dbo:sportsDivision ?sportDivision .
}",2.951204860745888e-155,0.0625,True,True
1915,How many universities participate in the NCAA Division I Football Bowl Subdivision?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/athletics> <http://dbpedia.org/resource/NCAA_Division_I_Football_Bowl_Subdivision>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many universities participate in the NCAA Division I Football Bowl Subdivision?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?university)) AS ?count
WHERE {
  ?university dbo:sportsTeam ?footballTeam .
  ?footballTeam dbo:league dbp:NCAA_Division_I_Football_Bowl_Subdivision .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?university)) AS ?count
WHERE {
  ?university dbo:sportsTeam ?footballTeam .
  ?footballTeam dbo:league dbp:NCAA_Division_I_Football_Bowl_Subdivision .
}",8.06798322521923e-232,0.04054054054054054,False,False
2992,Count everyone who was in the military unit which is structured like the Marine Aircraft Group 13 ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/commandStructure> <http://dbpedia.org/resource/Marine_Aircraft_Group_13> . ?uri <http://dbpedia.org/ontology/militaryUnit> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count everyone who was in the military unit which is structured like the Marine Aircraft Group 13 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX schema: <http://schema.org/>

SELECT ?person
WHERE {
  ?person dbo:memberOf ?unit .
  ?unit dbo:isPartOf ?mag .
  ?mag dbo:name ""Marine Aircraft Group 13""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX schema: <http://schema.org/>

SELECT ?person
WHERE {
  ?person dbo:memberOf ?unit .
  ?unit dbo:isPartOf ?mag .
  ?mag dbo:name ""Marine Aircraft Group 13""^^xsd:string .
}",2.8712091323971647e-155,0.060240963855421686,True,True
851,What novels belong to the genre of Utopian and dystopian fiction?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Utopian_and_dystopian_fiction> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What novels belong to the genre of Utopian and dystopian fiction?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?novel
WHERE {
  ?novel dbo:genre ?genre .
  ?genre dbo:wikiPageRedirects ?wikiPage .
  FILTER (regex(?wikiPage, ""Utopian|Dystopian""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?novel
WHERE {
  ?novel dbo:genre ?genre .
  ?genre dbo:wikiPageRedirects ?wikiPage .
  FILTER (regex(?wikiPage, ""Utopian|Dystopian""))
}",2.3962983105918537e-155,0.057971014492753624,True,True
311,Name the constituency of Domenico Modugno?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Domenico_Modugno> <http://dbpedia.org/property/constituency> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the constituency of Domenico Modugno?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?constituency
WHERE {
  ?person dbo:name ""Domenico Modugno"" .
  ?person dbp:constituency ?constituency .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?constituency
WHERE {
  ?person dbo:name ""Domenico Modugno"" .
  ?person dbp:constituency ?constituency .
}",2.530465559854518e-155,0.06451612903225806,True,True
3577,What is the predecessor of PlayStation 4?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/PlayStation_4>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the predecessor of PlayStation 4?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?playstation4 dbo:successor ?predecessor .
  FILTER ( ?playstation4 = <http://dbpedia.org/resource/PlayStation_4> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?playstation4 dbo:successor ?predecessor .
  FILTER ( ?playstation4 = <http://dbpedia.org/resource/PlayStation_4> )
}",9.352284301430419e-232,0.07575757575757576,True,True
84,Which title of Zaman Shah Durrani is also the nationality of Salahuddin?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Zaman_Shah_Durrani> <http://dbpedia.org/property/title> ?uri. <http://dbpedia.org/resource/Salahuddin_Rabbani> <http://dbpedia.org/ontology/nationality> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which title of Zaman Shah Durrani is also the nationality of Salahuddin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?title
WHERE {
  ?zaman dbo:title ?title .
  ?zaman dbo:birthPlace ""Afghanistan"" .
  ?salahuddin dbo:nationality ""Afghan"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?title
WHERE {
  ?zaman dbo:title ?title .
  ?zaman dbo:birthPlace ""Afghanistan"" .
  ?salahuddin dbo:nationality ""Afghan"" .
}",2.1745921280630745e-155,0.04054054054054054,True,True
691,List the ceremonial county of East Tilbury?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/East_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the ceremonial county of East Tilbury?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?ceremonialCounty
WHERE {
  ?town dbo:ceremonialCounty ?ceremonialCounty .
  FILTER (regex(?town, ""East Tilbury"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?ceremonialCounty
WHERE {
  ?town dbo:ceremonialCounty ?ceremonialCounty .
  FILTER (regex(?town, ""East Tilbury"", ""i""))
}",2.5124539841526692e-155,0.06153846153846154,True,True
2377,List bacteria whose order (taxonomy) is Bacillales and domain is Bacteria?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales> . ?uri <http://dbpedia.org/property/domain> <http://dbpedia.org/resource/Bacteria>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List bacteria whose order (taxonomy) is Bacillales and domain is Bacteria?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:wikiPageID ?wikiPageID .
  ?bacteria dbo:dbpediaClass ?class .
  ?class rdfs:subClassOf* dbo:Bacteria .
  ?bacteria dbo:order ?order .
  ?order dbo:name ""Bacillales"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:wikiPageID ?wikiPageID .
  ?bacteria dbo:dbpediaClass ?class .
  ?class rdfs:subClassOf* dbo:Bacteria .
  ?bacteria dbo:order ?order .
  ?order dbo:name ""Bacillales"" .
}",2.3577979608859863e-155,0.05128205128205128,True,True
297,For which other teams do members of tanzanian national football team play?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Tanzania_national_football_team> . ?x <http://dbpedia.org/ontology/team> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: For which other teams do members of tanzanian national football team play?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:memberOf <http://dbpedia.org/resource/Tanzanian_national_football_team> .
  ?player dbo:playsFor ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:memberOf <http://dbpedia.org/resource/Tanzanian_national_football_team> .
  ?player dbo:playsFor ?team .
}",3.6040982025556637e-155,0.08108108108108109,True,True
4574,Which televison shows have location as Massachusetts ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Massachusetts>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which televison shows have location as Massachusetts ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?showLabel ?show
WHERE {
  ?show dbo:location dbp:Massachusetts .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?showLabel ?show
WHERE {
  ?show dbo:location dbp:Massachusetts .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.427831263680579e-155,0.056338028169014086,False,False
3367,Which architect of the Marine Corps Air Station Kaneohe Bay is the branch of the Burnet R. Maybank?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?uri. <http://dbpedia.org/resource/Burnet_R._Maybank> <http://dbpedia.org/property/branch> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which architect of the Marine Corps Air Station Kaneohe Bay is the branch of the Burnet R. Maybank?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?architect
WHERE {
  ?architect dbo:architectOf ?building .
  ?building dbp:location dbo:MarineCorpsAirStationKaneoheBay .
  ?architect dbo:branchOf ?branch .
  ?branch dbo:name ""Burnet R. Maybank"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?architect
WHERE {
  ?architect dbo:architectOf ?building .
  ?building dbp:location dbo:MarineCorpsAirStationKaneoheBay .
  ?architect dbo:branchOf ?branch .
  ?branch dbo:name ""Burnet R. Maybank"" .
}",2.5806662832054458e-155,0.04938271604938271,True,True
4648,How many people play for the Dallas Cowboys?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Dallas_Cowboys>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people play for the Dallas Cowboys?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:name ""Dallas Cowboys"" .
  ?team dbo:officialWebsite ?website .
  ?player dbo:playsFor ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:name ""Dallas Cowboys"" .
  ?team dbo:officialWebsite ?website .
  ?player dbo:playsFor ?team .
}",2.3962983105918537e-155,0.057971014492753624,True,True
4039,Is the Caterpullar 797F assembled in North America?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Caterpillar_797F> <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/North_America> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is the Caterpullar 797F assembled in North America?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?assemblyLocation
WHERE {
  ?caterpillar dbo:assemblyLocation ?assemblyLocation .
  FILTER (regex(?assemblyLocation, ""North America"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?assemblyLocation
WHERE {
  ?caterpillar dbo:assemblyLocation ?assemblyLocation .
  FILTER (regex(?assemblyLocation, ""North America"", ""i""))
}",2.2744651330897987e-155,0.04477611940298507,True,True
4937,Name the origins of the river with Quich Department as one of the origin ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Quiché_Department> . ?x <http://dbpedia.org/ontology/origin> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the origins of the river with Quich Department as one of the origin ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?riverName
WHERE {
  ?river dbo:origin ?origin .
  ?origin dbo:locatedIn ?department .
  ?department rdfs:label ""Quich Department"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?riverName
WHERE {
  ?river dbo:origin ?origin .
  ?origin dbo:locatedIn ?department .
  ?department rdfs:label ""Quich Department"" .
}",3.0025357216578434e-155,0.06666666666666667,True,True
2631,Which university attended by Donn Barber and education institute of Jack McGregor ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Donn_Barber> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Jack_McGregor> <http://dbpedia.org/ontology/education> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which university attended by Donn Barber and education institute of Jack McGregor ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university ?institute
WHERE {
  ?person dbo:almaMater ?university .
  FILTER(?person IN (dbo:Donn_Barber, dbo:Jack_McGregor))
  ?institute dbo:headquarters ?person .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university ?institute
WHERE {
  ?person dbo:almaMater ?university .
  FILTER(?person IN (dbo:Donn_Barber, dbo:Jack_McGregor))
  ?institute dbo:headquarters ?person .
}",2.7788812895482627e-155,0.05263157894736842,True,True
3453,Was Gerald Gibbs the cinematographer of X the unknown?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/X_the_Unknown> <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Gerald_Gibbs_(cinematographer)> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Gerald Gibbs the cinematographer of X the unknown?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:director Gerald Gibbs .
  ?x dbo:title ""X the unknown"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:director Gerald Gibbs .
  ?x dbo:title ""X the unknown"" .
}",2.2300068516948962e-155,0.046875,False,False
2758,"Where did the wrestler die who was billed in Norman, Oklahoma?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/billed> <http://dbpedia.org/resource/Norman,_Oklahoma> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Wrestler>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the wrestler die who was billed in Norman, Oklahoma?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?place WHERE {
  ?person dbo:birthDate ?birth.
  ?person dbo:deathDate ?death.
  ?person dbo:placeOfBirth ?birthplace.
  ?person dbo:billingLocation ""Norman, Oklahoma"".
  FILTER(?death != NULL)
  FILTER(?place != NULL)
  ?person dbo:deathPlace ?place.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?place WHERE {
  ?person dbo:birthDate ?birth.
  ?person dbo:deathDate ?death.
  ?person dbo:placeOfBirth ?birthplace.
  ?person dbo:billingLocation ""Norman, Oklahoma"".
  FILTER(?death != NULL)
  FILTER(?place != NULL)
  ?person dbo:deathPlace ?place.
}",2.09870814592606e-155,0.037037037037037035,False,False
4685,What is the club of Perianne Jones ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Perianne_Jones> <http://dbpedia.org/property/club> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the club of Perianne Jones ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?club
WHERE {
  ?person dbo:name ""Perianne Jones"" .
  ?person dbo:memberOf ?club .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?club
WHERE {
  ?person dbo:name ""Perianne Jones"" .
  ?person dbo:memberOf ?club .
}",2.494821638843469e-155,0.0625,True,True
4773,How many ingedients are required to make the Ragout Fin?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Ragout_fin> <http://dbpedia.org/ontology/ingredient> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many ingedients are required to make the Ragout Fin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?ingredient) AS ?count)
WHERE {
  ?recipe dbo:name ""Ragout Fin""@en .
  ?recipe dbo:ingredient ?ingredient .
}
GROUP BY ?recipe
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?ingredient) AS ?count)
WHERE {
  ?recipe dbo:name ""Ragout Fin""@en .
  ?recipe dbo:ingredient ?ingredient .
}
GROUP BY ?recipe",2.99393103522275e-155,0.0684931506849315,True,True
3738,What are the relatives of the rugby player one of whose relatives is Nick Williams?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Nick_Williams> . ?x <http://dbpedia.org/ontology/relative> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RugbyPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the relatives of the rugby player one of whose relatives is Nick Williams?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?relative
WHERE {
  ?rugbyPlayer dbo:relative ?relative .
  ?relative dbo:relative ""Nick Williams"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?relative
WHERE {
  ?rugbyPlayer dbo:relative ?relative .
  ?relative dbo:relative ""Nick Williams"" .
}",3.1137823863213763e-155,0.06944444444444445,True,True
666,Marika Gombitov makes songs in which languages?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Marika_Gombitová> . ?x <http://dbpedia.org/property/language> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Marika Gombitov makes songs in which languages?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?language
WHERE {
  ?artist dbo:name ""Marika Gombitov"" .
  ?artist dbo:genres ?genre .
  ?genre rdfs:label ?genreLabel .
  FILTER (regex(?genreLabel, ""music"", ""i""))
  ?genre dbp:language ?language .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?language
WHERE {
  ?artist dbo:name ""Marika Gombitov"" .
  ?artist dbo:genres ?genre .
  ?genre rdfs:label ?genreLabel .
  FILTER (regex(?genreLabel, ""music"", ""i""))
  ?genre dbp:language ?language .
}",3.433385853714441e-155,0.07692307692307693,True,True
214,Which parent organization of Get TV also owns the Galleria ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri. <http://dbpedia.org/resource/The_Galleria> <http://dbpedia.org/ontology/owner> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which parent organization of Get TV also owns the Galleria ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?parentOrganization
WHERE {
  ?organization dbo:wikiPageRedirects/dbp:name ""Get TV"" .
  ?organization dbo:parentOrganization ?parentOrganization .
  ?parentOrganization dbo:wikiPageRedirects/dbp:name ""Galleria"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?parentOrganization
WHERE {
  ?organization dbo:wikiPageRedirects/dbp:name ""Get TV"" .
  ?organization dbo:parentOrganization ?parentOrganization .
  ?parentOrganization dbo:wikiPageRedirects/dbp:name ""Galleria"" .
}",2.1745921280630745e-155,0.0410958904109589,True,True
4769,"Who currently operates the railway lines one of whose stockholder is Chicago, St Paul, Minneapolis and Omaha railway?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Chicago,_St._Paul,_Minneapolis_and_Omaha_Railway> . ?x <http://dbpedia.org/ontology/operatedBy> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RailwayLine>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who currently operates the railway lines one of whose stockholder is Chicago, St Paul, Minneapolis and Omaha railway?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?operator
WHERE {
  ?railway dbo:stockholder ?company .
  ?company rdfs:label ""Chicago, St Paul, Minneapolis and Omaha railway"" .
  ?railway dbo:operator ?operator .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?operator
WHERE {
  ?railway dbo:stockholder ?company .
  ?company rdfs:label ""Chicago, St Paul, Minneapolis and Omaha railway"" .
  ?railway dbo:operator ?operator .
}",2.8559767164037747e-155,0.06097560975609756,True,True
1418,Whose music composer is signed up with Sony Music Entertainment?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose music composer is signed up with Sony Music Entertainment?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?composer ?composerLabel
WHERE {
  ?composer dbo:musicComposer ?musicComposer .
  ?musicComposer dbp:recordLabel dbo:SonyMusicEntertainment .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?composer ?composerLabel
WHERE {
  ?composer dbo:musicComposer ?musicComposer .
  ?musicComposer dbp:recordLabel dbo:SonyMusicEntertainment .
}",3.699591675882789e-155,0.08450704225352113,True,True
4597,Which sports are played in the school which runs the Fr. Agnel Stadium?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fr._Agnel_Stadium> <http://dbpedia.org/property/operator> ?x . ?x <http://dbpedia.org/ontology/sport> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports are played in the school which runs the Fr. Agnel Stadium?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?stadium dbo:operator ?school .
  ?school rdfs:label ""Fr. Agnel Stadium""@en .
  ?school dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?stadium dbo:operator ?school .
  ?school rdfs:label ""Fr. Agnel Stadium""@en .
  ?school dbo:sports ?sport .
}",3.4534064447194983e-155,0.07894736842105263,True,True
65,Was Ganymede discovered by Galileo Galilei?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Ganymede_(moon)> <http://dbpedia.org/property/discoverer> <http://dbpedia.org/resource/Galileo_Galilei> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Ganymede discovered by Galileo Galilei?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x rdf:type dbo:Moon .
  ?x dbo:name ""Ganymede""^^xsd:string .
  ?x dbo:discoveredBy ?y .
  ?y rdf:type dbo:Person .
  ?y dbo:name ""Galileo Galilei""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x rdf:type dbo:Moon .
  ?x dbo:name ""Ganymede""^^xsd:string .
  ?x dbo:discoveredBy ?y .
  ?y rdf:type dbo:Person .
  ?y dbo:name ""Galileo Galilei""^^xsd:string .
}",2.135639655544596e-155,0.04411764705882353,True,True
3797,How many politicians are there from the city of Ganges?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Ganges> <http://dbpedia.org/property/city> ?x . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many politicians are there from the city of Ganges?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?politician) AS ?count)
WHERE {
  ?politician dbo:birthPlace dbp:Ganges .
  ?politician dbo:profession/rdfs:label ""Politician"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?politician) AS ?count)
WHERE {
  ?politician dbo:birthPlace dbp:Ganges .
  ?politician dbo:profession/rdfs:label ""Politician"" .
}",3.216579438360415e-155,0.06944444444444445,True,True
4275,Waddy wachtel did the music for what movies?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Waddy_Wachtel>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Waddy wachtel did the music for what movies?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Waddy Wachtel"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Waddy Wachtel"" .
}",2.4775553999024465e-155,0.06060606060606061,True,True
4210,Where common region are soylent and bannock sold?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Soylent_(drink)> <http://dbpedia.org/ontology/region> ?uri. <http://dbpedia.org/resource/Bannock_(food)> <http://dbpedia.org/ontology/region> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where common region are soylent and bannock sold?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?region
WHERE {
  ?product dbo:country ?country .
  ?product dbp:region ?region .
  FILTER (regex(?product, ""soylent"", ""i"") || regex(?product, ""bannock"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?region
WHERE {
  ?product dbo:country ?country .
  ?product dbp:region ?region .
  FILTER (regex(?product, ""soylent"", ""i"") || regex(?product, ""bannock"", ""i""))
}",3.1137823863213763e-155,0.08,True,True
2901,Which rivers start from the Provinces of Zambia?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/settlementType> <http://dbpedia.org/resource/Provinces_of_Zambia> . ?uri <http://dbpedia.org/ontology/sourceRegion> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which rivers start from the Provinces of Zambia?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river ?riverLabel
WHERE {
  ?river dbo:sourceLocation ?location .
  ?location dbo:country ?country .
  ?country dbo:name ""Zambia"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river ?riverLabel
WHERE {
  ?river dbo:sourceLocation ?location .
  ?location dbo:country ?country .
  ?country dbo:name ""Zambia"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.9851289841006984e-155,0.0641025641025641,False,False
582,Who are the people which ITV(TV network) has employed?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/ITV_(TV_network)>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the people which ITV(TV network) has employed?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:employedBy ?network .
  ?network dbo:name ""ITV"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:employedBy ?network .
  ?network dbo:name ""ITV"" .
}",3.1153609837288e-155,0.07575757575757576,True,True
4126,Is Greg Weeks the band member of Beyond the Sixth Seal?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Beyond_the_Sixth_Seal> <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Greg_Weeks> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Greg Weeks the band member of Beyond the Sixth Seal?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Greg Weeks"" .
  ?x dbo:memberOf <http://dbpedia.org/resource/Beyond_the_Sixth_Seal> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Greg Weeks"" .
  ?x dbo:memberOf <http://dbpedia.org/resource/Beyond_the_Sixth_Seal> .
}",2.4440718429993668e-155,0.06153846153846154,True,True
2488,Is Steve Nash the chairman of Vancouver Whitecaps FC?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Vancouver_Whitecaps_FC> <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Steve_Nash> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Steve Nash the chairman of Vancouver Whitecaps FC?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Steve Nash"" .
  ?x dbo:chairmanOf ?y .
  ?y dbo:name ""Vancouver Whitecaps FC"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Steve Nash"" .
  ?x dbo:chairmanOf ?y .
  ?y dbo:name ""Vancouver Whitecaps FC"" .
}",2.215756877004116e-155,0.045454545454545456,True,True
2550,Name the notable commanders of Army Group Oberrhein ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Army_Group_Oberrhein_(Germany)> <http://dbpedia.org/property/notableCommanders> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the notable commanders of Army Group Oberrhein ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?commander
WHERE {
  ?armyGroup dbo:commander ?commander .
  FILTER (regex(?armyGroup, ""Oberrhein"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?commander
WHERE {
  ?armyGroup dbo:commander ?commander .
  FILTER (regex(?armyGroup, ""Oberrhein"", ""i""))
}",3.0528361925813156e-155,0.07246376811594203,True,True
3998,How many movies have their music signed up with Sony Music Entertainment.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many movies have their music signed up with Sony Music Entertainment.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:genre ""Film"" .
  ?movie dbp:musicLabel ?musicLabel .
  ?musicLabel dbo:name ""Sony Music Entertainment"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:genre ""Film"" .
  ?movie dbp:musicLabel ?musicLabel .
  ?musicLabel dbo:name ""Sony Music Entertainment"" .
}",2.4123225276763925e-155,0.04938271604938271,True,True
2776,Count all the books written by an author buried in the Convent of Barefoot Trinitarians?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Convent_of_the_Barefoot_Trinitarians> . ?uri <http://dbpedia.org/ontology/author> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all the books written by an author buried in the Convent of Barefoot Trinitarians?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?author ?book
WHERE {
  ?author dbo:deathPlace ""Convent of Barefoot Trinitarians"" .
  ?author dbo:birthPlace ?birthPlace .
  ?author dbo:author ?book .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?author ?book
WHERE {
  ?author dbo:deathPlace ""Convent of Barefoot Trinitarians"" .
  ?author dbo:birthPlace ?birthPlace .
  ?author dbo:author ?book .
}",2.371081855250832e-155,0.05063291139240506,True,True
951,How many people are there whose children died in Indiana?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Indiana> . ?uri <http://dbpedia.org/ontology/child> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people are there whose children died in Indiana?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?personCount
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:child ?child .
  ?child dbo:deathPlace ""Indiana"" .
  FILTER (BOUND(?person))
}
GROUP BY ?person
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?personCount
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:child ?child .
  ?child dbo:deathPlace ""Indiana"" .
  FILTER (BOUND(?person))
}
GROUP BY ?person",2.4708136900731027e-155,0.05128205128205128,True,True
3232,How many people have been canonized by Pope Benedict XVI?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Pope_Benedict_XVI>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people have been canonized by Pope Benedict XVI?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?person dbo:canonizedBy ?pope .
  ?pope dbo:name ""Benedict XVI""^^xsd:string .
  FILTER (BOUND(?pope))
}
GROUP BY ?pope
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?person dbo:canonizedBy ?pope .
  ?pope dbo:name ""Benedict XVI""^^xsd:string .
  FILTER (BOUND(?pope))
}
GROUP BY ?pope",8.642045500889408e-232,0.0547945205479452,True,True
1430,What is the birth place of the children of Miguel Garca Granados?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Miguel_García_Granados> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the birth place of the children of Miguel Garca Granados?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?childBirthPlace
WHERE {
  ?child dbo:birthDate ?childBirthDate .
  ?child dbo:birthPlace ?childBirthPlace .
  ?person dbo:name ""Miguel García Granados""^^xsd:string .
  ?person dbo:children ?child .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?childBirthPlace
WHERE {
  ?child dbo:birthDate ?childBirthDate .
  ?child dbo:birthPlace ?childBirthPlace .
  ?person dbo:name ""Miguel García Granados""^^xsd:string .
  ?person dbo:children ?child .
}",2.968021523431445e-155,0.06578947368421052,True,True
2802,Players from how many teams have participated in the National Hockey League?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/National_Hockey_League> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Players from how many teams have participated in the National Hockey League?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?teamCount
WHERE {
  ?team dbo:sportsLeague dbp:National_Hockey_League .
  ?team dbo:player ?player .
  GROUP BY ?team
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?teamCount
WHERE {
  ?team dbo:sportsLeague dbp:National_Hockey_League .
  ?team dbo:player ?player .
  GROUP BY ?team
}",2.533776972251024e-155,0.05333333333333334,False,False
2432,What is the television show with presenter as Ryan Seacrest and theme music composer as Julian Gingell?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Julian_Gingell>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the television show with presenter as Ryan Seacrest and theme music composer as Julian Gingell?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:presenter ?presenter .
  ?presenter dbo:name ""Ryan Seacrest"" .
  ?show dbo:themeMusicComposer ?composer .
  ?composer dbo:name ""Julian Gingell"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:presenter ?presenter .
  ?presenter dbo:name ""Ryan Seacrest"" .
  ?show dbo:themeMusicComposer ?composer .
  ?composer dbo:name ""Julian Gingell"" .
}",8.296646461826084e-232,0.037037037037037035,True,True
2470,How many organizations work for Environmentalism?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many organizations work for Environmentalism?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?organization)) AS ?count
WHERE {
  ?organization dbo:wikiPageRedirects* dbo:Environmentalism .
  ?organization dbo:type dbo:Organization .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?organization)) AS ?count
WHERE {
  ?organization dbo:wikiPageRedirects* dbo:Environmentalism .
  ?organization dbo:type dbo:Organization .
}",2.494821638843469e-155,0.06060606060606061,False,False
907,Which county of Tremont Avenue is also the birht place of Ron Galotti?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tremont_Avenue> <http://dbpedia.org/property/counties> ?uri. <http://dbpedia.org/resource/Ron_Galotti> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which county of Tremont Avenue is also the birht place of Ron Galotti?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?county
WHERE {
  ?county dbo:name ""Tremont Avenue"" .
  ?county dbp:birthPlace ?person .
  ?person dbo:name ""Ron Galotti"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?county
WHERE {
  ?county dbo:name ""Tremont Avenue"" .
  ?county dbp:birthPlace ?person .
  ?person dbo:name ""Ron Galotti"" .
}",2.7130972940000843e-155,0.05263157894736842,True,True
1682,List all binomial authorities of the insects whose one of the binomial authority is douard Mntries?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/binomialAuthority> <http://dbpedia.org/resource/Édouard_Ménétries> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all binomial authorities of the insects whose one of the binomial authority is douard Mntries?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?insect ?authority
WHERE {
  ?insect dbo:binomialAuthority ?authority .
  FILTER ( ?authority = <http://dbpedia.org/resource/Douard_Mntries> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?insect ?authority
WHERE {
  ?insect dbo:binomialAuthority ?authority .
  FILTER ( ?authority = <http://dbpedia.org/resource/Douard_Mntries> )
}",3.0025357216578434e-155,0.07894736842105263,True,True
2307,Who produces the tv series which made Scott Haran famous?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Scott_Haran> <http://dbpedia.org/ontology/knownFor> ?x . ?x <http://dbpedia.org/ontology/producer> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who produces the tv series which made Scott Haran famous?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?producer
WHERE {
  ?person dbo:name ""Scott Haran"" .
  ?person dbo:knownFor ?tvSeries .
  ?tvSeries dbo:producer ?producer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?producer
WHERE {
  ?person dbo:name ""Scott Haran"" .
  ?person dbo:knownFor ?tvSeries .
  ?tvSeries dbo:producer ?producer .
}",3.0943809285865547e-155,0.0684931506849315,True,True
3003,Who are the key people of FWD.us?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/FWD.us> <http://dbpedia.org/property/keyPeople> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the key people of FWD.us?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:memberOf ?organization .
  ?organization dbo:name ""FWD.us"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:memberOf ?organization .
  ?organization dbo:name ""FWD.us"" .
}",3.159243630213636e-155,0.07936507936507936,True,True
3083,What is the hometown of John Speraw ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Speraw> <http://dbpedia.org/property/hometown> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the hometown of John Speraw ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hometown
WHERE {
  ?person dbo:name ""John Speraw"" .
  ?person dbo:birthPlace ?hometown .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hometown
WHERE {
  ?person dbo:name ""John Speraw"" .
  ?person dbo:birthPlace ?hometown .
}",2.494821638843469e-155,0.0625,True,True
3955,Was the body of Elsie Paroubek discovered in Chicago?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Elsie_Paroubek> <http://dbpedia.org/ontology/bodyDiscovered> <http://dbpedia.org/resource/Chicago> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was the body of Elsie Paroubek discovered in Chicago?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:deathPlace ""Chicago"" .
  ?x rdf:type dbo:Person .
  FILTER (str(?x) = ""http://dbpedia.org/resource/Elsie_Paroubek"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:deathPlace ""Chicago"" .
  ?x rdf:type dbo:Person .
  FILTER (str(?x) = ""http://dbpedia.org/resource/Elsie_Paroubek"")
}",2.215756877004116e-155,0.043478260869565216,True,True
4573,Which religions are followed by people in England?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/England> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which religions are followed by people in England?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:nationality ""England""@en .
  ?person dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:nationality ""England""@en .
  ?person dbo:religion ?religion .
}",3.2833699258334827e-155,0.07246376811594203,True,True
4820,What company is the one which wrote the google web toolkit and PlayN?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri. <http://dbpedia.org/resource/PlayN> <http://dbpedia.org/ontology/author> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What company is the one which wrote the google web toolkit and PlayN?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?company
WHERE {
  ?company dbo:wikiPageRedirects ?redirect
  ?redirect dbo:wikiPageCaption ""Google Web Toolkit"" .
  ?redirect dbo:creator ?creator
  ?creator dbo:wikiPageRedirects ?redirect2
  ?redirect2 dbo:wikiPageCaption ""PlayN"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?company
WHERE {
  ?company dbo:wikiPageRedirects ?redirect
  ?redirect dbo:wikiPageCaption ""Google Web Toolkit"" .
  ?redirect dbo:creator ?creator
  ?creator dbo:wikiPageRedirects ?redirect2
  ?redirect2 dbo:wikiPageCaption ""PlayN"" .
}",2.8039101108246434e-155,0.06493506493506493,False,False
726,Name the city served by Juhu Aerodrome?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juhu_Aerodrome> <http://dbpedia.org/property/cityServed> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the city served by Juhu Aerodrome?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?aerodrome dbo:location ?city .
  FILTER (regex(?aerodrome, ""Juhu Aerodrome"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?aerodrome dbo:location ?city .
  FILTER (regex(?aerodrome, ""Juhu Aerodrome"", ""i""))
}",2.5124539841526692e-155,0.06153846153846154,True,True
3085,Which awards has been given to both michel hazanavicius and geoffrey rush?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michel_Hazanavicius> <http://dbpedia.org/property/awards> ?uri. <http://dbpedia.org/resource/Geoffrey_Rush> <http://dbpedia.org/property/awards> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which awards has been given to both michel hazanavicius and geoffrey rush?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?person a dbo:Person ;
    dbo:name ?name .
  FILTER (regex(?name, ""Michel Hazanavicius"", ""i"") || regex(?name, ""Geoffrey Rush"", ""i"")) .
  ?person dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?person a dbo:Person ;
    dbo:name ?name .
  FILTER (regex(?name, ""Michel Hazanavicius"", ""i"") || regex(?name, ""Geoffrey Rush"", ""i"")) .
  ?person dbo:award ?award .
}",3.194645317303101e-155,0.07058823529411765,True,True
1412,How many artists' works are in Musee d'Orsay?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/museum> <http://dbpedia.org/resource/Musée_d'Orsay> . ?x <http://dbpedia.org/property/artist> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many artists' works are in Musee d'Orsay?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?artist) AS ?count)
WHERE {
  ?work dbo:artist ?artist .
  ?work dbp:location dbo:Musee_dOrsay .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?artist) AS ?count)
WHERE {
  ?work dbo:artist ?artist .
  ?work dbp:location dbo:Musee_dOrsay .
}",2.5502845355614067e-155,0.05333333333333334,True,True
4128,Name the television show voiced by April Stewart and Eliza Schneider?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/April_Stewart> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Eliza_Schneider> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the television show voiced by April Stewart and Eliza Schneider?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?showLabel
WHERE {
  ?show dbo:voiceActor ?actor .
  ?actor dbo:name ""April Stewart"" .
  UNION
  ?show dbo:voiceActor ?actor .
  ?actor dbo:name ""Eliza Schneider"" .
  ?show rdfs:label ?showLabel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?showLabel
WHERE {
  ?show dbo:voiceActor ?actor .
  ?actor dbo:name ""April Stewart"" .
  UNION
  ?show dbo:voiceActor ?actor .
  ?actor dbo:name ""Eliza Schneider"" .
  ?show rdfs:label ?showLabel .
}",2.8866879095378115e-155,0.06493506493506493,False,False
2823,Which adminstrative region of Lawrence F. Cafero is also the resting place of Samuel Keeler ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lawrence_F._Cafero> <http://dbpedia.org/ontology/region> ?uri. <http://dbpedia.org/resource/Samuel_Keeler> <http://dbpedia.org/ontology/restingPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which adminstrative region of Lawrence F. Cafero is also the resting place of Samuel Keeler ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?region
WHERE {
  ?person dbo:birthPlace ?region .
  FILTER ( ?person = dbo:Lawrence_F_Cafero )
  ?person dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:locatedIn ?region .
  ?person rdf:type dbo:Politician .
  ?person dbo:name ""Samuel Keeler"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?region
WHERE {
  ?person dbo:birthPlace ?region .
  FILTER ( ?person = dbo:Lawrence_F_Cafero )
  ?person dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:locatedIn ?region .
  ?person rdf:type dbo:Politician .
  ?person dbo:name ""Samuel Keeler"" .
}",2.4900858824700132e-155,0.04597701149425287,True,True
3219,"Which ceremonial County of the East Tilbury is also the local authority of the Trinity School, Brentwood?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/East_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?uri. <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which ceremonial County of the East Tilbury is also the local authority of the Trinity School, Brentwood?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?county
WHERE {
  ?county dbo:ceremonialCounty ?eastTilbury .
  ?eastTilbury dbo:localAuthority ?localAuthority .
  ?localAuthority dbo:school ?trinitySchool .
  ?trinitySchool rdfs:label ""Trinity School, Brentwood"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?county
WHERE {
  ?county dbo:ceremonialCounty ?eastTilbury .
  ?eastTilbury dbo:localAuthority ?localAuthority .
  ?localAuthority dbo:school ?trinitySchool .
  ?trinitySchool rdfs:label ""Trinity School, Brentwood"" .
}",2.5944303248170386e-155,0.05,True,True
4970,Name the military conflict whose commander was Colin Powell and took place in israel ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Colin_Powell> . ?uri <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Israel>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the military conflict whose commander was Colin Powell and took place in israel ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?conflict
WHERE {
  ?person dbo:birthPlace ""Colin Powell"" .
  ?person dbo:occupation ""Military officer"" .
  ?person dbo:militaryConflict ?conflict .
  ?conflict dbo:location ""Israel"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?conflict
WHERE {
  ?person dbo:birthPlace ""Colin Powell"" .
  ?person dbo:occupation ""Military officer"" .
  ?person dbo:militaryConflict ?conflict .
  ?conflict dbo:location ""Israel"" .
}",8.412065649527267e-232,0.0379746835443038,True,True
1566,In which fields are both Paul Demiville and Sylvain levi experts?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paul_Demiéville> <http://dbpedia.org/property/fields> ?uri. <http://dbpedia.org/resource/Sylvain_Lévi> <http://dbpedia.org/property/fields> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which fields are both Paul Demiville and Sylvain levi experts?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?field
WHERE {
  ?person dbo:occupation ?field .
  FILTER (?person IN (dbo:Paul_Demiville, dbo:Sylvain_Levi))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?field
WHERE {
  ?person dbo:occupation ?field .
  FILTER (?person IN (dbo:Paul_Demiville, dbo:Sylvain_Levi))
}",3.195205633963664e-155,0.0821917808219178,True,True
603,"Give me all commanders which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_Fort_Stephenson> <http://dbpedia.org/ontology/commander> ?uri. <http://dbpedia.org/resource/Battle_of_the_Thames> <http://dbpedia.org/ontology/commander> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all commanders which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?commander
WHERE {
  ?commander dbo:birthPlace ?birthPlace .
  ?commander dbo:deathPlace ?deathPlace .
  ?commander dbo:involvedIn ?battle1 .
  ?battle1 dbo:name ""Battle of Fort Stephenson""^^xsd:string .
  ?commander dbo:involvedIn ?battle2 .
  ?battle2 dbo:name ""Battle of the Thames""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?commander
WHERE {
  ?commander dbo:birthPlace ?birthPlace .
  ?commander dbo:deathPlace ?deathPlace .
  ?commander dbo:involvedIn ?battle1 .
  ?battle1 dbo:name ""Battle of Fort Stephenson""^^xsd:string .
  ?commander dbo:involvedIn ?battle2 .
  ?battle2 dbo:name ""Battle of the Thames""^^xsd:string .
}",2.9361994042171736e-155,0.07058823529411765,True,True
171,Is Queen Latifah associated with Afrika Baby Bam?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Afrika_Baby_Bam> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Queen_Latifah> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Queen Latifah associated with Afrika Baby Bam?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Queen Latifah""^^xsd:string .
  ?x dbp:associatedWith ?y .
  ?y dbo:name ""Afrika Baby Bam""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Queen Latifah""^^xsd:string .
  ?x dbp:associatedWith ?y .
  ?y dbo:name ""Afrika Baby Bam""^^xsd:string .
}",2.2300068516948962e-155,0.045454545454545456,True,True
3309,Who battled under commander Egushawa in a conflict?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Egushawa> . ?x <http://dbpedia.org/property/combatant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who battled under commander Egushawa in a conflict?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:commander ?commander .
  ?commander dbo:name ""Egushawa"" .
  ?subject dbo:involvedInConflict ?conflict .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:commander ?commander .
  ?commander dbo:name ""Egushawa"" .
  ?subject dbo:involvedInConflict ?conflict .
}",3.195205633963664e-155,0.07142857142857142,True,True
3662,"Which companies make cars with a front engine, rear wheel drive layout?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/Front-engine,_rear-wheel-drive_layout> . ?x <http://dbpedia.org/ontology/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which companies make cars with a front engine, rear wheel drive layout?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?company ?carModel
WHERE {
  ?company dbo:companyType ""Automotive"" .
  ?carModel dbo:manufacturer ?company .
  ?carModel dbo:engineLayout ""Front engine, rear wheel drive"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?company ?carModel
WHERE {
  ?company dbo:companyType ""Automotive"" .
  ?carModel dbo:manufacturer ?company .
  ?carModel dbo:engineLayout ""Front engine, rear wheel drive"" .
}",3.0202505652128895e-155,0.06666666666666667,True,True
356,Where do the sister stations of Al Khaleejiya 100.9 play?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterStations> <http://dbpedia.org/resource/Al_Khaleejiya_100.9> . ?x <http://dbpedia.org/property/location> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where do the sister stations of Al Khaleejiya 100.9 play?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?station ?location
WHERE {
  ?station dbo:name ""Al Khaleejiya 100.9"" .
  ?station dbo:sisterStation ?sisterStation .
  ?sisterStation dbo:location ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?station ?location
WHERE {
  ?station dbo:name ""Al Khaleejiya 100.9"" .
  ?station dbo:sisterStation ?sisterStation .
  ?sisterStation dbo:location ?location .
}",3.4945213227383114e-155,0.08108108108108109,True,True
1225,The software with Mac OS as operating system and C++ as programming language are [answer].,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Apple_Productivity_Experience_Group> <http://dbpedia.org/ontology/product> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: The software with Mac OS as operating system and C++ as programming language are [answer].
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?software
WHERE {
  ?software rdf:type dbo:Software .
  ?software dbo:operatingSystem  <http://dbpedia.org/resource/Mac_OS> .
  ?software dbo:programmingLanguage  <http://dbpedia.org/resource/C%2B%2B> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?software
WHERE {
  ?software rdf:type dbo:Software .
  ?software dbo:operatingSystem  <http://dbpedia.org/resource/Mac_OS> .
  ?software dbo:programmingLanguage  <http://dbpedia.org/resource/C%2B%2B> .
}",2.868751113594075e-155,0.06756756756756757,True,True
1645,Which license provider of MSX basic is also the designer of Language Integrated Query?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which license provider of MSX basic is also the designer of Language Integrated Query?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?licenseProvider ?designer
WHERE {
  ?licenseProvider dbo:licenseProviderOf ?software .
  ?software dbo:name ""MSX Basic""^^xsd:string .
  ?designer dbo:designerOf ?software .
  ?designer dbo:name ""Language Integrated Query""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?licenseProvider ?designer
WHERE {
  ?licenseProvider dbo:licenseProviderOf ?software .
  ?software dbo:name ""MSX Basic""^^xsd:string .
  ?designer dbo:designerOf ?software .
  ?designer dbo:name ""Language Integrated Query""^^xsd:string .
}",2.0523206950207848e-155,0.038461538461538464,True,True
3333,In which city are the schools whose district is Mumbai Suburban?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/district> <http://dbpedia.org/resource/Mumbai_Suburban_district> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which city are the schools whose district is Mumbai Suburban?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?school ?schoolCity
WHERE {
  ?school dbo:district ""Mumbai Suburban"" .
  ?school dbo:location ?schoolCity .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?school ?schoolCity
WHERE {
  ?school dbo:district ""Mumbai Suburban"" .
  ?school dbo:location ?schoolCity .
}",3.1137823863213763e-155,0.06756756756756757,True,True
1204,What is the place of death of the royalties one of whose parents was Adam Ludwik Czartoryski?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Adam_Ludwik_Czartoryski> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the place of death of the royalties one of whose parents was Adam Ludwik Czartoryski?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?royalty ?royaltyPlaceOfDeath
WHERE {
  ?royalty dbo:father ?czartoryski .
  ?czartoryski dbo:name ""Adam Ludwik Czartoryski"" .
  ?royalty dbo:placeOfDeath ?royaltyPlaceOfDeath .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?royalty ?royaltyPlaceOfDeath
WHERE {
  ?royalty dbo:father ?czartoryski .
  ?czartoryski dbo:name ""Adam Ludwik Czartoryski"" .
  ?royalty dbo:placeOfDeath ?royaltyPlaceOfDeath .
}",2.91841165985534e-155,0.06329113924050633,True,True
3638,How many developers make software for Unix like operating systems?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Unix-like> . ?x <http://dbpedia.org/ontology/developer> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many developers make software for Unix like operating systems?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?developer) AS ?count)
WHERE {
  ?developer dbo:occupation ""Software Developer"" .
  ?developer dbo:worksFor ?company .
  ?company dbo:product ?product .
  ?product dbo:operatingSystem ""Unix"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?developer) AS ?count)
WHERE {
  ?developer dbo:occupation ""Software Developer"" .
  ?developer dbo:worksFor ?company .
  ?company dbo:product ?product .
  ?product dbo:operatingSystem ""Unix"" .
}",3.0382827129023445e-155,0.06493506493506493,True,True
3644,"List the employments of people who died in Tampa, Florida.",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the employments of people who died in Tampa, Florida.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?person ?employment
WHERE {
  ?person dbo:deathPlace dbp:Tampa.
  ?person dbo:occupation ?employment.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?person ?employment
WHERE {
  ?person dbo:deathPlace dbp:Tampa.
  ?person dbo:occupation ?employment.
}",3.0528361925813156e-155,0.07042253521126761,True,True
3157,"Who was on the first team in the GPs that were held at Watkins Glen, NY?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Watkins_Glen,_New_York> . ?x <http://dbpedia.org/property/firstTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was on the first team in the GPs that were held at Watkins Glen, NY?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?driver
WHERE {
  ?gp dbo:location <http://dbpedia.org/resource/Watkins_Glen_International> .
  ?gp dbo:firstTeam ?driver .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?driver
WHERE {
  ?gp dbo:location <http://dbpedia.org/resource/Watkins_Glen_International> .
  ?gp dbo:firstTeam ?driver .
}",3.0566417519593477e-155,0.06578947368421052,True,True
1995,Which company produced the car which was a new version of Daewoo's Tico?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Daewoo_Tico> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which company produced the car which was a new version of Daewoo's Tico?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?car dbo:model ""Tico"" .
  ?car dbo:manufacturer ?company .
  FILTER (regex(?car, ""Daewoo"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?car dbo:model ""Tico"" .
  ?car dbo:manufacturer ?company .
  FILTER (regex(?car, ""Daewoo"", ""i""))
}",3.0382827129023445e-155,0.0641025641025641,True,True
3021,List the things for which people of New Orleans are famous for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/New_Orleans> . ?x <http://dbpedia.org/property/knownFor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the things for which people of New Orleans are famous for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:birthPlace dbp:New_Orleans .
  ?person dbo:knownFor ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:birthPlace dbp:New_Orleans .
  ?person dbo:knownFor ?thing .
}",3.1335534263807668e-155,0.0684931506849315,True,True
4088,What is the field of interest of the advisor of Henri Maspero ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henri_Maspero> <http://dbpedia.org/ontology/academicAdvisor> ?x . ?x <http://dbpedia.org/property/fields> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the field of interest of the advisor of Henri Maspero ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?advisorField
WHERE {
  ?advisor dbo:advisorOf ?person .
  ?person dbo:name ""Henri Maspero"" .
  ?advisor dbo:fieldOfInterest ?advisorField .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?advisorField
WHERE {
  ?advisor dbo:advisorOf ?person .
  ?person dbo:name ""Henri Maspero"" .
  ?advisor dbo:fieldOfInterest ?advisorField .
}",3.0382827129023445e-155,0.0684931506849315,True,True
869,What is the political party of the Bengalis?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/ethnicity> <http://dbpedia.org/resource/Bengalis> . ?x <http://dbpedia.org/ontology/party> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the political party of the Bengalis?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?politicalParty
WHERE {
  ?bengali dbo:nationality ""Bengali"" .
  ?bengali dbo:politicalParty ?politicalParty .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?politicalParty
WHERE {
  ?bengali dbo:nationality ""Bengali"" .
  ?bengali dbo:politicalParty ?politicalParty .
}",3.3065753972821387e-155,0.07692307692307693,True,True
4283,Count the number of ingredient of the foods which have one of the ingredient is Pork ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Pork> . ?x <http://dbpedia.org/ontology/ingredient> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of ingredient of the foods which have one of the ingredient is Pork ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?ingredient) AS ?count)
WHERE {
  ?food dbo:ingredient ?ingredient .
  FILTER (regex(?ingredient, ""Pork"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?ingredient) AS ?count)
WHERE {
  ?food dbo:ingredient ?ingredient .
  FILTER (regex(?ingredient, ""Pork"", ""i""))
}",2.4123225276763925e-155,0.0641025641025641,True,True
4054,Who are the associated musical artist of Carolyn Dennis?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carolyn_Dennis> <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the associated musical artist of Carolyn Dennis?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:spouse Carolyn Dennis .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:spouse Carolyn Dennis .
}",3.181891987622405e-155,0.07936507936507936,False,False
664,List the movies whose music composer is often associated with Jon and Vangelis.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Jon_and_Vangelis> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the movies whose music composer is often associated with Jon and Vangelis.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:musicComposer ?composer .
  ?composer dbo:birthPlace ""Greece"" .
  ?composer dbo:name ?name .
  FILTER (regex(?name, ""Jon"", ""i"") || regex(?name, ""Vangelis"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:musicComposer ?composer .
  ?composer dbo:birthPlace ""Greece"" .
  ?composer dbo:name ?name .
  FILTER (regex(?name, ""Jon"", ""i"") || regex(?name, ""Vangelis"", ""i""))
}",2.9024197612372904e-155,0.05952380952380952,True,True
1632,What is the former team of the Athens borned basketball players?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Athens> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the former team of the Athens borned basketball players?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?player ?team
WHERE {
  ?player dbo:birthPlace ""Athens"" .
  ?player dbo:profession ""Basketball player"" .
  ?player dbo:formerTeam ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?player ?team
WHERE {
  ?player dbo:birthPlace ""Athens"" .
  ?player dbo:profession ""Basketball player"" .
  ?player dbo:formerTeam ?team .
}",3.0382827129023445e-155,0.06666666666666667,True,True
3929,In which areas can I find wine made of Vitis vinifera grapes?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Vitis_vinifera> . ?x <http://dbpedia.org/ontology/wineRegion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Grape>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which areas can I find wine made of Vitis vinifera grapes?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?area
WHERE {
  ?wine dbo:grapeVariety ""Vitis vinifera"" .
  ?wine dbo:producedIn ?area .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?area
WHERE {
  ?wine dbo:grapeVariety ""Vitis vinifera"" .
  ?wine dbo:producedIn ?area .
}",3.1137823863213763e-155,0.06578947368421052,True,True
1851,How many had their debut team coached by Chip Kelly?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Chip_Kelly> . ?uri <http://dbpedia.org/ontology/debutTeam> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many had their debut team coached by Chip Kelly?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?player) AS ?count)
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:debutTeam ?debutTeam .
  ?debutTeam dbo:coach ?coach .
  ?coach dbo:name ""Chip Kelly"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?player) AS ?count)
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:debutTeam ?debutTeam .
  ?debutTeam dbo:coach ?coach .
  ?coach dbo:name ""Chip Kelly"" .
}",2.968021523431445e-155,0.06172839506172839,True,True
3871,How many characters are there in The Office?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/The_Office_(U.S._TV_series)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many characters are there in The Office?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?character) AS ?count)
WHERE {
  ?character dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/The_Office_(American_TV_series)> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?character) AS ?count)
WHERE {
  ?character dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/The_Office_(American_TV_series)> .
}",8.319100378795605e-232,0.04411764705882353,True,True
2075,Count the number of religions followed by BJP members.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/party> <http://dbpedia.org/resource/Bharatiya_Janata_Party> . ?x <http://dbpedia.org/ontology/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of religions followed by BJP members.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?person dbo:memberOf <http://en.wikipedia.org/wiki/Bharatiya_Janata_Party> .
  ?person dbo:religion ?religion .
}
GROUP BY ?religion
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?person dbo:memberOf <http://en.wikipedia.org/wiki/Bharatiya_Janata_Party> .
  ?person dbo:religion ?religion .
}
GROUP BY ?religion",3.1537059338519422e-155,0.06944444444444445,True,True
1905,Some movies whose screenplay is done by american born people?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/screenplay> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Some movies whose screenplay is done by american born people?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?movie ?screenwriter
WHERE {
  ?movie dbo:director ?screenwriter .
  ?screenwriter dbo:birthPlace ""United States"" .
  FILTER(?screenwriter != dbo:Unknown)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?movie ?screenwriter
WHERE {
  ?movie dbo:director ?screenwriter .
  ?screenwriter dbo:birthPlace ""United States"" .
  FILTER(?screenwriter != dbo:Unknown)
}",3.1961673212459418e-155,0.07894736842105263,True,True
4399,Count the number of members of the organization which have Austria as one of the member ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/membership> <http://dbpedia.org/resource/Austria> . ?x <http://dbpedia.org/property/membership> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of members of the organization which have Austria as one of the member ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organization ?count
WHERE {
  ?organization dbo:member ?member .
  ?member dbo:country ?country .
  ?country rdfs:label ""Austria"" .
  GROUP BY ?organization
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organization ?count
WHERE {
  ?organization dbo:member ?member .
  ?member dbo:country ?country .
  ?country rdfs:label ""Austria"" .
  GROUP BY ?organization
}",2.384592839964215e-155,0.06578947368421052,False,False
2293,Who is the headcoach of 2008-09 Marquette Golden Eagles men's basketball team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2008–09_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/property/headcoach> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the headcoach of 2008-09 Marquette Golden Eagles men's basketball team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?coach
WHERE {
  ?team dbo:headCoach ?coach .
  ?team rdfs:label ""2008-09 Marquette Golden Eagles men's basketball team"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?coach
WHERE {
  ?team dbo:headCoach ?coach .
  ?team rdfs:label ""2008-09 Marquette Golden Eagles men's basketball team"" .
}",2.294894159058245e-155,0.056338028169014086,True,True
1275,Which venue of Indy PopCon is also the death palce of Louis LeCocq?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indy_PopCon> <http://dbpedia.org/property/venue> ?uri. <http://dbpedia.org/resource/Louis_LeCocq> <http://dbpedia.org/property/placeOfDeath> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which venue of Indy PopCon is also the death palce of Louis LeCocq?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?venue
WHERE {
  ?venue dbo:location dbp:Indianapolis .
  ?venue dbo:name ?name .
  ?venue dbo:deathPlace ?deathPlace .
  FILTER ( ?deathPlace = <http://dbpedia.org/resource/Louis_LeCocq> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?venue
WHERE {
  ?venue dbo:location dbp:Indianapolis .
  ?venue dbo:name ?name .
  ?venue dbo:deathPlace ?deathPlace .
  FILTER ( ?deathPlace = <http://dbpedia.org/resource/Louis_LeCocq> )
}",2.8039101108246434e-155,0.0625,True,True
4480,Name the fictional character whose species is American Pekin duck and has relatives named Ludwig Von Drake?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/American_Pekin_duck> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ludwig_Von_Drake>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the fictional character whose species is American Pekin duck and has relatives named Ludwig Von Drake?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?character
WHERE {
  ?character dbo:species dbp:American_Pekin_duck .
  ?character dbo:relative ?relative .
  ?relative dbo:name ""Ludwig Von Drake"" .
  FILTER (STR(?character) != ""http://dbpedia.org/resource/Ludwig_von_Drake"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?character
WHERE {
  ?character dbo:species dbp:American_Pekin_duck .
  ?character dbo:relative ?relative .
  ?relative dbo:name ""Ludwig Von Drake"" .
  FILTER (STR(?character) != ""http://dbpedia.org/resource/Ludwig_von_Drake"")
}",8.296646461826084e-232,0.03571428571428571,True,True
871,Was Writings and Drawings illustrated by Bob Dylan?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Writings_and_Drawings> <http://dbpedia.org/property/illustrator> <http://dbpedia.org/resource/Bob_Dylan> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Writings and Drawings illustrated by Bob Dylan?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:title ""Writings and Drawings"" .
  ?x dbo:illustrator ?y .
  ?y rdfs:label ""Bob Dylan"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:title ""Writings and Drawings"" .
  ?x dbo:illustrator ?y .
  ?y rdfs:label ""Bob Dylan"" .
}",2.1880577381778143e-155,0.04411764705882353,True,True
711,Which party does Iqbal Singh and B Shiva Rao currently belong to?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Iqbal_Singh_(politician)> <http://dbpedia.org/property/party> ?uri. <http://dbpedia.org/resource/B._Shiva_Rao> <http://dbpedia.org/property/party> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which party does Iqbal Singh and B Shiva Rao currently belong to?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?party
WHERE {
  ?person a dbo:Person ;
    dbp:memberOf ?party .
  FILTER (regex(?person, ""Iqbal Singh"", ""i"") || regex(?person, ""B Shiva Rao"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?party
WHERE {
  ?person a dbo:Person ;
    dbp:memberOf ?party .
  FILTER (regex(?person, ""Iqbal Singh"", ""i"") || regex(?person, ""B Shiva Rao"", ""i""))
}",3.0025357216578434e-155,0.07407407407407407,True,True
3266,Name the scientist whose supervisor also supervised Mary Ainsworth?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Mary_Ainsworth> . ?uri <http://dbpedia.org/property/doctoralAdvisor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the scientist whose supervisor also supervised Mary Ainsworth?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:supervisor ?supervisor .
  ?supervisor dbo:supervisor Mary Ainsworth .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:supervisor ?supervisor .
  ?supervisor dbo:supervisor Mary Ainsworth .
}",3.2383880054191053e-155,0.07352941176470588,False,False
1127,Who is the common prime minster of William Deaner and Mark Latham?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Deane> <http://dbpedia.org/ontology/primeMinister> ?uri. <http://dbpedia.org/resource/Mark_Latham> <http://dbpedia.org/property/primeminister> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the common prime minster of William Deaner and Mark Latham?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?primeMinister
WHERE {
  ?person dbo:primeMinister ?primeMinister .
  FILTER ( ?person IN ( dbo:William_Deaner , dbo:Mark_Latham ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?primeMinister
WHERE {
  ?person dbo:primeMinister ?primeMinister .
  FILTER ( ?person IN ( dbo:William_Deaner , dbo:Mark_Latham ) )
}",2.7788812895482627e-155,0.05333333333333334,True,True
122,"Count all those who've played for the youth club which owns the Rosario, Santa Fe stadium.",google/gemma-2-9b-it,"SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Rosario,_Santa_Fe> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all those who've played for the youth club which owns the Rosario, Santa Fe stadium.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person
WHERE {
  ?person dbo:playsFor ?club .
  ?club dbo:stadium dbr:Rosario_Central_Stadium .
  FILTER (regex(?club, ""Rosario Central Youth"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person
WHERE {
  ?person dbo:playsFor ?club .
  ?club dbo:stadium dbr:Rosario_Central_Stadium .
  FILTER (regex(?club, ""Rosario Central Youth"", ""i""))
}",2.4957986594494052e-155,0.06172839506172839,True,True
1367,Name a person who was educated in Humes High School?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/education> <http://dbpedia.org/resource/Humes_High_School>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name a person who was educated in Humes High School?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:education ?school .
  ?school rdfs:label ""Humes High School"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:education ?school .
  ?school rdfs:label ""Humes High School"" .
}",8.147480343967206e-232,0.04411764705882353,True,True
4273,What is the parent company of PrivateCore?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/PrivateCore> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the parent company of PrivateCore?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parentCompany
WHERE {
  ?company dbo:name ""PrivateCore"" .
  ?company dbo:parentCompany ?parentCompany .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parentCompany
WHERE {
  ?company dbo:name ""PrivateCore"" .
  ?company dbo:parentCompany ?parentCompany .
}",8.289228799996742e-232,0.04838709677419355,True,True
3317,In how many nations can I find people related to the feminist movement?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/movement> <http://dbpedia.org/resource/Feminism> . ?x <http://dbpedia.org/ontology/nationality> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In how many nations can I find people related to the feminist movement?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?nation) AS ?count)
WHERE {
  ?person dbo:birthPlace ?nation .
  ?person dbo:occupation ""Feminist"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?nation) AS ?count)
WHERE {
  ?person dbo:birthPlace ?nation .
  ?person dbo:occupation ""Feminist"" .
}",3.075337680136661e-155,0.0641025641025641,True,True
1783,Who is the former partner of Chris Knierim?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chris_Knierim> <http://dbpedia.org/ontology/formerPartner> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the former partner of Chris Knierim?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?partner
WHERE {
  ?person dbo:name ""Chris Knierim"" .
  ?person dbo:partner ?partner .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?partner
WHERE {
  ?person dbo:name ""Chris Knierim"" .
  ?person dbo:partner ?partner .
}",2.494821638843469e-155,0.0625,True,True
2936,Under which scientist did doctoral students erban ieica and Erich Bagge study?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Șerban_Țițeica> . ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Erich_Bagge> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Under which scientist did doctoral students erban ieica and Erich Bagge study?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?scientist
WHERE {
  ?student dbo:doctoralAdvisor ?scientist .
  FILTER (regex(?student, ""erban ieica"", ""i"") || regex(?student, ""erich bagge"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?scientist
WHERE {
  ?student dbo:doctoralAdvisor ?scientist .
  FILTER (regex(?student, ""erban ieica"", ""i"") || regex(?student, ""erich bagge"", ""i""))
}",2.938309220081021e-155,0.06329113924050633,True,True
3278,Which birthplace of Svetlana Gounkina is also the largest city of Union State?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_State> <http://dbpedia.org/property/largestCity> ?uri. <http://dbpedia.org/resource/Svetlana_Gounkina> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which birthplace of Svetlana Gounkina is also the largest city of Union State?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?birthplace
WHERE {
  ?person dbo:name ""Svetlana Gounkina"" .
  ?person dbo:birthPlace ?birthplace .
  ?birthplace dbo:country ""Belarus"" .
  ?birthplace dbo:population ?population .
  FILTER(?population > 1000000)
  ?birthplace dbo:name ?city .
  ?city dbo:country ""Belarus"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?birthplace
WHERE {
  ?person dbo:name ""Svetlana Gounkina"" .
  ?person dbo:birthPlace ?birthplace .
  ?birthplace dbo:country ""Belarus"" .
  ?birthplace dbo:population ?population .
  FILTER(?population > 1000000)
  ?birthplace dbo:name ?city .
  ?city dbo:country ""Belarus"" .
}",2.5149879802969635e-155,0.04878048780487805,True,True
2514,What is the television show whose developer is J. Michael Straczynski?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/J._Michael_Straczynski>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the television show whose developer is J. Michael Straczynski?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?showLabel WHERE {
  ?show dbo:developer J.MichaelStraczynski .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?showLabel WHERE {
  ?show dbo:developer J.MichaelStraczynski .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",8.094051362019983e-232,0.04225352112676056,False,False
4918,During the reigns of which monarchs was the name to the Israelite kingdom as United Monarch?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Kingdom_of_Israel_(united_monarchy)> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: During the reigns of which monarchs was the name to the Israelite kingdom as United Monarch?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?monarch ?reignStart ?reignEnd
WHERE {
  ?monarch dbo:birthPlace ?birthPlace .
  ?monarch dbo:deathPlace ?deathPlace .
  ?monarch dbo:reignStart ?reignStart .
  ?monarch dbo:reignEnd ?reignEnd .
  ?monarch dbo:name ?name .
  FILTER (regex(?name, ""United Monarch"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?monarch ?reignStart ?reignEnd
WHERE {
  ?monarch dbo:birthPlace ?birthPlace .
  ?monarch dbo:deathPlace ?deathPlace .
  ?monarch dbo:reignStart ?reignStart .
  ?monarch dbo:reignEnd ?reignEnd .
  ?monarch dbo:name ?name .
  FILTER (regex(?name, ""United Monarch"", ""i""))
}",2.0939042922429456e-155,0.04819277108433735,True,True
1319,Which things are Breann McGregor known for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Breann_McGregor> <http://dbpedia.org/property/knownFor> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which things are Breann McGregor known for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?thing
WHERE {
  ?person dbo:name ""Breann McGregor"" .
  ?person dbo:knownFor ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?thing
WHERE {
  ?person dbo:name ""Breann McGregor"" .
  ?person dbo:knownFor ?thing .
}",3.1370721297783126e-155,0.07692307692307693,True,True
2941,What is the common award won by Charles LeMaire and Eric Roth,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/property/awards> ?uri. <http://dbpedia.org/resource/Eric_Roth> <http://dbpedia.org/ontology/award> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the common award won by Charles LeMaire and Eric Roth
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:award ?award .
  FILTER (regex(?person, ""Charles LeMaire"", ""i"") || regex(?person, ""Eric Roth"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:award ?award .
  FILTER (regex(?person, ""Charles LeMaire"", ""i"") || regex(?person, ""Eric Roth"", ""i""))
}",2.7788812895482627e-155,0.05128205128205128,True,True
3552,Name the Chris Marve's school ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chris_Marve> <http://dbpedia.org/ontology/school> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the Chris Marve's school ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Chris Marve"" .
  ?person dbp:almaMater ?school .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Chris Marve"" .
  ?person dbp:almaMater ?school .
}",2.530465559854518e-155,0.06451612903225806,True,True
901,Which are the countires where Pioneer Corporation has flourished?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pioneer_Corporation> <http://dbpedia.org/property/country> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which are the countires where Pioneer Corporation has flourished?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?company dbo: headquarters ?location .
  ?location dbo:country ?country .
  ?company dbo:name ""Pioneer Corporation"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?company dbo: headquarters ?location .
  ?location dbo:country ?country .
  ?company dbo:name ""Pioneer Corporation"" .
}",2.938309220081021e-155,0.07142857142857142,False,False
2394,How many shows belong to the network one of whose sister station is Cartoonite?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/sisterStation> <http://dbpedia.org/resource/Cartoonito> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many shows belong to the network one of whose sister station is Cartoonite?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?show) AS ?count)
WHERE {
  ?network dbo:sisterStation ?sisterStation .
  ?sisterStation rdfs:label ""Cartoonite"" .
  ?network dbo:shows ?show .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?show) AS ?count)
WHERE {
  ?network dbo:sisterStation ?sisterStation .
  ?sisterStation rdfs:label ""Cartoonite"" .
  ?network dbo:shows ?show .
}",2.4123225276763925e-155,0.04938271604938271,True,True
4519,What show had NTSC format and theme music composed byRon Grainer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/format> <http://dbpedia.org/resource/NTSC> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What show had NTSC format and theme music composed byRon Grainer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:format ?format .
  ?format dbo:name ""NTSC"" .
  ?show dbo:themeMusic ?music .
  ?music dbo:composer ?composer .
  ?composer dbo:name ""Ron Grainer"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:format ?format .
  ?format dbo:name ""NTSC"" .
  ?show dbo:themeMusic ?music .
  ?music dbo:composer ?composer .
  ?composer dbo:name ""Ron Grainer"" .
}",2.344734865707205e-155,0.05063291139240506,True,True
449,Who has starred in the amusement park attractions where Jim Dooley was performing?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Jim_Dooley> . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmusementParkAttraction>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who has starred in the amusement park attractions where Jim Dooley was performing?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?star
WHERE {
  ?attraction dbo:attractionType ""Amusement Park"".
  ?attraction dbo:performer ?performer .
  ?performer dbo:name ""Jim Dooley"".
  ?attraction dbo:star ?star .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?star
WHERE {
  ?attraction dbo:attractionType ""Amusement Park"".
  ?attraction dbo:performer ?performer .
  ?performer dbo:name ""Jim Dooley"".
  ?attraction dbo:star ?star .
}",2.968021523431445e-155,0.06172839506172839,True,True
3183,What are the musical performances whose label is Celluloid Records?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the musical performances whose label is Celluloid Records?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?performance
WHERE {
  ?performance dbo:label ""Celluloid Records"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?performance
WHERE {
  ?performance dbo:label ""Celluloid Records"" .
}",3.159243630213636e-155,0.07575757575757576,True,True
3398,"Who is the opponent of United States House of Representatives elections in Ohio, 2010 ?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010> <http://dbpedia.org/property/opponent> ?uri }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the opponent of United States House of Representatives elections in Ohio, 2010 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?opponent
WHERE {
  ?election dbo:opponent ?opponent .
  ?election dbo:location ""Ohio"" .
  ?election dbo:electionType ""United States House of Representatives elections"" .
  ?election dbo:year ""2010"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?opponent
WHERE {
  ?election dbo:opponent ?opponent .
  ?election dbo:location ""Ohio"" .
  ?election dbo:electionType ""United States House of Representatives elections"" .
  ?election dbo:year ""2010"" .
}",2.181647159764084e-155,0.05263157894736842,True,True
2208,In which state is Colemanville Covered Bridge located ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Colemanville_Covered_Bridge> <http://dbpedia.org/ontology/state> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which state is Colemanville Covered Bridge located ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?bridge dbo:location ?location .
  ?location dbo:country ""United States""^^xsd:string .
  ?location dbo:state ?state .
  FILTER (regex(?bridge, ""Colemanville Covered Bridge"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?bridge dbo:location ?location .
  ?location dbo:country ""United States""^^xsd:string .
  ?location dbo:state ?state .
  FILTER (regex(?bridge, ""Colemanville Covered Bridge"", ""i""))
}",2.322545481391416e-155,0.0547945205479452,True,True
1743,Panthera leo fossils and Liger belong to which species?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Panthera_leo_fossilis> <http://dbpedia.org/ontology/species> ?uri. <http://dbpedia.org/resource/Liger> <http://dbpedia.org/ontology/species> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Panthera leo fossils and Liger belong to which species?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?species
WHERE {
  ?fossil dbo:species ?species .
  FILTER (regex(?species, ""Panthera leo""))
  ?liger dbo:species ?species .
  FILTER (regex(?species, ""Panthera leo""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?species
WHERE {
  ?fossil dbo:species ?species .
  FILTER (regex(?species, ""Panthera leo""))
  ?liger dbo:species ?species .
  FILTER (regex(?species, ""Panthera leo""))
}",3.0382827129023445e-155,0.0821917808219178,True,True
1152,Whose commanders are Colin Powell and Jaber Al-Ahmad Al-Sabah?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Colin_Powell> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Jaber_Al-Ahmad_Al-Sabah> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose commanders are Colin Powell and Jaber Al-Ahmad Al-Sabah?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?country dbo:commander ?commander .
  ?commander dbo:name ""Colin Powell""^^xsd:string .
  FILTER (BOUND(?commander))
  ?commander dbo:name ""Jaber Al-Ahmad Al-Sabah""^^xsd:string .
  FILTER (BOUND(?commander))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?country dbo:commander ?commander .
  ?commander dbo:name ""Colin Powell""^^xsd:string .
  FILTER (BOUND(?commander))
  ?commander dbo:name ""Jaber Al-Ahmad Al-Sabah""^^xsd:string .
  FILTER (BOUND(?commander))
}",3.157656468883577e-155,0.08333333333333333,True,True
2049,Did Bob Dylan write the lyrics of the times they are a changin'?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/property/lyrics> <http://dbpedia.org/resource/Bob_Dylan> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Did Bob Dylan write the lyrics of the times they are a changin'?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?song
WHERE {
  ?song rdf:type dbo:Song .
  ?song dbo:title ""The Times They Are a-Changin'"" .
  ?song dbo:lyrics ?lyrics .
  ?lyrics dbo:author ?author .
  ?author dbo:name ""Bob Dylan"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?song
WHERE {
  ?song rdf:type dbo:Song .
  ?song dbo:title ""The Times They Are a-Changin'"" .
  ?song dbo:lyrics ?lyrics .
  ?lyrics dbo:author ?author .
  ?author dbo:name ""Bob Dylan"" .
}",2.0088791894285736e-155,0.038461538461538464,True,True
3908,What is the debut team of people born in Vargas?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vargas_(state)> . ?x <http://dbpedia.org/property/debutteam> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the debut team of people born in Vargas?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?debutTeam
WHERE {
  ?person dbo:birthPlace dbo:Vargas .
  ?person dbo:debutTeam ?debutTeam .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?debutTeam
WHERE {
  ?person dbo:birthPlace dbo:Vargas .
  ?person dbo:debutTeam ?debutTeam .
}",3.627276877392474e-155,0.08450704225352113,True,True
376,Name all those whose spouses have performed with Tony Bennett?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Tony_Bennett> . ?uri <http://dbpedia.org/ontology/spouse> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name all those whose spouses have performed with Tony Bennett?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbp:partnerOf ?tonyBennett .
  ?tonyBennett dbo:name ""Tony Bennett"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbp:partnerOf ?tonyBennett .
  ?tonyBennett dbo:name ""Tony Bennett"" .
}",3.6040982025556637e-155,0.0821917808219178,True,True
4101,Count the band members of Skull Gang?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Skull_Gang> <http://dbpedia.org/ontology/bandMember> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the band members of Skull Gang?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?memberCount
WHERE {
  ?band dbo:name ""Skull Gang"" .
  ?band dbo:member ?member .
  GROUP BY ?band
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?memberCount
WHERE {
  ?band dbo:name ""Skull Gang"" .
  ?band dbo:member ?member .
  GROUP BY ?band
}",2.4119102000777368e-155,0.056338028169014086,False,False
3265,Which territory of Tonkin campaign is also the death place of Theophane Venard ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tonkin_Campaign> <http://dbpedia.org/ontology/territory> ?uri. <http://dbpedia.org/resource/Théophane_Vénard> <http://dbpedia.org/ontology/deathPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which territory of Tonkin campaign is also the death place of Theophane Venard ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?territory
WHERE {
  ?territory dbo:wikiPageRedirects ?redirect
  ?redirect dbo:abstract ""Tonkin campaign"" .
  ?territory dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:wikiPageRedirects <http://dbpedia.org/resource/Theophane_Venard> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?territory
WHERE {
  ?territory dbo:wikiPageRedirects ?redirect
  ?redirect dbo:abstract ""Tonkin campaign"" .
  ?territory dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:wikiPageRedirects <http://dbpedia.org/resource/Theophane_Venard> .
}",2.6667146252330243e-155,0.05128205128205128,False,False
4795,Was John muir one of the first to ascend a mountain on Mt hoffmann?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/John_Muir> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was John muir one of the first to ascend a mountain on Mt hoffmann?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:birthPlace ""John Muir"" .
  ?x dbo:occupation ""Mountain climber"" .
  ?x dbo:mountainClimbed ""Mt. Hoffmann"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:birthPlace ""John Muir"" .
  ?x dbo:occupation ""Mountain climber"" .
  ?x dbo:mountainClimbed ""Mt. Hoffmann"" .
}",2.1108049473741715e-155,0.04054054054054054,True,True
4551,Is Christchurch the largest city of South Island?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/South_Island> <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Christchurch> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Christchurch the largest city of South Island?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?populationChristchurch ?populationSouthIsland
WHERE {
  ?city dbo:population ?populationChristchurch .
  FILTER(?city = <http://dbpedia.org/resource/Christchurch>)
  ?southIsland dbo:largestCity ?city .
  ?city dbo:population ?populationSouthIsland .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?populationChristchurch ?populationSouthIsland
WHERE {
  ?city dbo:population ?populationChristchurch .
  FILTER(?city = <http://dbpedia.org/resource/Christchurch>)
  ?southIsland dbo:largestCity ?city .
  ?city dbo:population ?populationSouthIsland .
}",2.1745921280630745e-155,0.04411764705882353,True,True
3520,Which religion is followed by the PM who was served by Chea Sim?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chea_Sim> <http://dbpedia.org/property/primeminister> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which religion is followed by the PM who was served by Chea Sim?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?pm dbo:servedBy ?cheasim .
  ?cheasim dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?pm dbo:servedBy ?cheasim .
  ?cheasim dbo:religion ?religion .
}",3.1335534263807668e-155,0.06944444444444445,True,True
2782,What is the sovereign state of the Dafydd Benfras where Jasmine Lowson is also citizen of?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dafydd_Benfras> <http://dbpedia.org/ontology/country> ?uri. <http://dbpedia.org/resource/Jasmine_Lowson> <http://dbpedia.org/ontology/citizenship> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the sovereign state of the Dafydd Benfras where Jasmine Lowson is also citizen of?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sovereignState
WHERE {
  ?person dbo:nationality ?sovereignState .
  FILTER ( ?person = <http://dbpedia.org/resource/Jasmine_Lowson> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sovereignState
WHERE {
  ?person dbo:nationality ?sovereignState .
  FILTER ( ?person = <http://dbpedia.org/resource/Jasmine_Lowson> )
}",2.8856766331839354e-155,0.0641025641025641,True,True
4458,What is the resting place of the child of Linda Lee Cadwell?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Lee_Cadwell> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the resting place of the child of Linda Lee Cadwell?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?restingPlace
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Linda Lee Cadwell""^^xsd:string .
  ?person dbo:child ?child .
  ?child dbo:restingPlace ?restingPlace .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?restingPlace
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Linda Lee Cadwell""^^xsd:string .
  ?person dbo:child ?child .
  ?child dbo:restingPlace ?restingPlace .
}",2.968021523431445e-155,0.06666666666666667,True,True
4929,In how many different places are Brown haired models living?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/hairColor> <http://dbpedia.org/resource/Brown_hair> . ?x <http://dbpedia.org/ontology/residence> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In how many different places are Brown haired models living?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?model dbo:hairColor ""Brown"" .
  ?model dbo:livingPlace ?place .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?model dbo:hairColor ""Brown"" .
  ?model dbo:livingPlace ?place .
}",3.1335534263807668e-155,0.06578947368421052,True,True
276,How many people are known for Dragons' Den?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Dragons'_Den_(UK_TV_series)>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people are known for Dragons' Den?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person dbo:knownFor ?show .
  ?show rdfs:label ""Dragons' Den"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person dbo:knownFor ?show .
  ?show rdfs:label ""Dragons' Den"" .
}",2.4440718429993668e-155,0.057971014492753624,True,True
2383,How many sports are played at the university whose president is Emanuel de Guzman?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/president> <http://dbpedia.org/resource/Emanuel_de_Guzman> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sport>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many sports are played at the university whose president is Emanuel de Guzman?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?sport)) AS ?count
WHERE {
  ?university dbo:president ?president .
  ?president dbo:name ""Emanuel de Guzman"" .
  ?university dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?sport)) AS ?count
WHERE {
  ?university dbo:president ?president .
  ?president dbo:name ""Emanuel de Guzman"" .
  ?university dbo:sports ?sport .
}",2.371081855250832e-155,0.04819277108433735,False,False
236,What is the major shrine of Jacques-Dsir Laval ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jacques-Désiré_Laval> <http://dbpedia.org/ontology/majorShrine> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the major shrine of Jacques-Dsir Laval ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?shrine
WHERE {
  ?person dbo:birthPlace <http://dbpedia.org/resource/Haiti> .
  ?person dbo:name ""Jacques-Dsir Laval"" .
  ?person dbo:majorShrine ?shrine .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?shrine
WHERE {
  ?person dbo:birthPlace <http://dbpedia.org/resource/Haiti> .
  ?person dbo:name ""Jacques-Dsir Laval"" .
  ?person dbo:majorShrine ?shrine .
}",2.4119102000777368e-155,0.05970149253731343,True,True
149,Who were all the people in office when bob hawke was the PM?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/primeMinister> <http://dbpedia.org/resource/Bob_Hawke> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who were all the people in office when bob hawke was the PM?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?role
WHERE {
  ?person dbo:primeMinister ?hawke .
  ?hawke dbo:termStart ?start .
  ?person dbo:termStart ?start .
  ?person dbo:termEnd ?end .
  FILTER(?start <= ?end)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?role
WHERE {
  ?person dbo:primeMinister ?hawke .
  ?hawke dbo:termStart ?start .
  ?person dbo:termStart ?start .
  ?person dbo:termEnd ?end .
  FILTER(?start <= ?end)
}",2.205362109328438e-155,0.05263157894736842,True,True
3837,Which sports exist in the universities whose president is Emanuel de Guzman?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Emanuel_de_Guzman> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports exist in the universities whose president is Emanuel de Guzman?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:president ?president .
  ?president dbo:name ""Emanuel de Guzman"" .
  ?university dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:president ?president .
  ?president dbo:name ""Emanuel de Guzman"" .
  ?university dbo:sports ?sport .
}",3.0202505652128895e-155,0.06493506493506493,True,True
64,In which team did Dave Bing and Ron Reed started their basketball career?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dave_Bing> <http://dbpedia.org/property/draftTeam> ?uri. <http://dbpedia.org/resource/Ron_Reed> <http://dbpedia.org/property/draftTeam> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which team did Dave Bing and Ron Reed started their basketball career?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:team ?team .
  FILTER ( ?player IN ( dbo:DaveBing , dbo:RonReed ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:team ?team .
  FILTER ( ?player IN ( dbo:DaveBing , dbo:RonReed ) )
}",2.9346708496857675e-155,0.07407407407407407,True,True
1832,Whose songs are Tickle Me and Viva Las Vegas?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tickle_Me> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/Viva_Las_Vegas> <http://dbpedia.org/property/artist> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose songs are Tickle Me and Viva Las Vegas?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?song dbo:title ""Tickle Me"" .
  ?song dbo:artist ?artist .
  
  ?song2 dbo:title ""Viva Las Vegas"" .
  ?song2 dbo:artist ?artist .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?song dbo:title ""Tickle Me"" .
  ?song dbo:artist ?artist .
  
  ?song2 dbo:title ""Viva Las Vegas"" .
  ?song2 dbo:artist ?artist .
}",3.3624125453069686e-155,0.08333333333333333,True,True
972,"Who is the founder of European School, Karlsruhe?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/European_School,_Karlsruhe> <http://dbpedia.org/property/founder> ?uri }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the founder of European School, Karlsruhe?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?founder
WHERE {
  ?school dbo:founder ?founder .
  FILTER (regex(?school, ""European School, Karlsruhe"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?founder
WHERE {
  ?school dbo:founder ?founder .
  FILTER (regex(?school, ""European School, Karlsruhe"", ""i""))
}",2.4775553999024465e-155,0.06060606060606061,True,True
4201,Does KOMC play Gospel Music?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/KOMC_(AM)> <http://dbpedia.org/ontology/programmeFormat> <http://dbpedia.org/resource/Gospel_music> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does KOMC play Gospel Music?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?genre
WHERE {
  ?artist dbo:genre ?genre .
  FILTER ( ?artist = <http://dbpedia.org/resource/KOMC> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?genre
WHERE {
  ?artist dbo:genre ?genre .
  FILTER ( ?artist = <http://dbpedia.org/resource/KOMC> )
}",2.3548635457910922e-155,0.047619047619047616,True,True
3012,"Where was Henri, Duke of Rohan laid to rest?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henri,_Duke_of_Rohan> <http://dbpedia.org/ontology/placeOfBurial> ?uri }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where was Henri, Duke of Rohan laid to rest?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace ?deathPlace .
  FILTER ( ?person = <http://dbpedia.org/resource/Henri,_Duke_of_Rohan> )
  ?deathPlace dbo:name ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace ?deathPlace .
  FILTER ( ?person = <http://dbpedia.org/resource/Henri,_Duke_of_Rohan> )
  ?deathPlace dbo:name ?location .
}",2.4708136900731027e-155,0.06944444444444445,True,True
702,Where are INKAS located which is also the state of origin for Jojo Chintoh?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jojo_Chintoh> <http://dbpedia.org/ontology/stateOfOrigin> ?uri. <http://dbpedia.org/resource/INKAS> <http://dbpedia.org/property/locations> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where are INKAS located which is also the state of origin for Jojo Chintoh?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?location dbo:country ?country .
  ?country dbo:name ""Nigeria""@en .
  ?person dbo:birthPlace ?location .
  ?person dbo:name ""Jojo Chintoh""@en .
  ?location dbo:name ?locationName .
  FILTER (regex(?locationName, ""INKAS"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?location dbo:country ?country .
  ?country dbo:name ""Nigeria""@en .
  ?person dbo:birthPlace ?location .
  ?person dbo:name ""Jojo Chintoh""@en .
  ?location dbo:name ?locationName .
  FILTER (regex(?locationName, ""INKAS"", ""i""))
}",2.5406524524079725e-155,0.04819277108433735,True,True
4833,Was Michael Schumacher the Pole driver of 1994 Spanish Grand Prix?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/property/poleDriver> <http://dbpedia.org/resource/Michael_Schumacher> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Michael Schumacher the Pole driver of 1994 Spanish Grand Prix?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:birthPlace ""Kerpen, Germany"" .
  ?x dbo:name ""Michael Schumacher"" .
  ?x dbo:startSeason ""1991"" .
  ?x dbo:endSeason ""2006"" .
  ?x dbo:participatedInEvent ?event .
  ?event dbo:name ""1994 Spanish Grand Prix"" .
  ?event dbo:polePosition ?poleDriver .
  ?poleDriver dbo:name ?x .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:birthPlace ""Kerpen, Germany"" .
  ?x dbo:name ""Michael Schumacher"" .
  ?x dbo:startSeason ""1991"" .
  ?x dbo:endSeason ""2006"" .
  ?x dbo:participatedInEvent ?event .
  ?event dbo:name ""1994 Spanish Grand Prix"" .
  ?event dbo:polePosition ?poleDriver .
  ?poleDriver dbo:name ?x .
}",1.9112994652876815e-155,0.0379746835443038,True,True
2920,Why did Letita McTavish Hargrave and Sextus Barbour die?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Letitia_MacTavish_Hargrave> <http://dbpedia.org/ontology/deathCause> ?uri. <http://dbpedia.org/resource/Sextus_Barbour> <http://dbpedia.org/property/deathCause> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Why did Letita McTavish Hargrave and Sextus Barbour die?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?reason
WHERE {
  ?person dbo:deathReason ?reason .
  FILTER (regex(?person, ""Letita McTavish Hargrave"", ""i"") || regex(?person, ""Sextus Barbour"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?reason
WHERE {
  ?person dbo:deathReason ?reason .
  FILTER (regex(?person, ""Letita McTavish Hargrave"", ""i"") || regex(?person, ""Sextus Barbour"", ""i""))
}",2.215756877004116e-155,0.04,True,True
952,Which mountain range is the one with Ponte d'Aveneyre and Le Gibloux?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pointe_d'Aveneyre> <http://dbpedia.org/ontology/mountainRange> ?uri. <http://dbpedia.org/resource/Le_Gibloux> <http://dbpedia.org/ontology/mountainRange> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which mountain range is the one with Ponte d'Aveneyre and Le Gibloux?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?mountainRange
WHERE {
  ?mountainRange dbo:locatedIn ?location .
  ?location dbo:name ""Ponte d'Aveneyre"" .
  ?location dbo:name ""Le Gibloux"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?mountainRange
WHERE {
  ?mountainRange dbo:locatedIn ?location .
  ?location dbo:name ""Ponte d'Aveneyre"" .
  ?location dbo:name ""Le Gibloux"" .
}",2.9029053187216252e-155,0.06756756756756757,True,True
3329,"Give me all office holders who finally retired in Montpelier, Orange, Virgina?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all office holders who finally retired in Montpelier, Orange, Virgina?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:placeOfBirth dbp:Montpelier .
  ?person dbo:placeOfDeath dbp:Montpelier .
  ?person dbo:occupation dbo:Politician .
  FILTER (regex(?personLabel, ""retired"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:placeOfBirth dbp:Montpelier .
  ?person dbo:placeOfDeath dbp:Montpelier .
  ?person dbo:occupation dbo:Politician .
  FILTER (regex(?personLabel, ""retired"", ""i""))
}",2.2552086692851858e-155,0.05063291139240506,True,True
2779,Name the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Georgina_Theodora_Wood> <http://dbpedia.org/ontology/nationality> ?uri. <http://dbpedia.org/resource/Akwasi_Oppong_Fosu> <http://dbpedia.org/ontology/nationality> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?nationality
WHERE {
  ?person dbo:nationality ?nationality .
  FILTER (regex(?person, ""Georgina Theodora Wood"", ""i"") || regex(?person, ""akwasi Oppong Fosu"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?nationality
WHERE {
  ?person dbo:nationality ?nationality .
  FILTER (regex(?person, ""Georgina Theodora Wood"", ""i"") || regex(?person, ""akwasi Oppong Fosu"", ""i""))
}",3.0202505652128895e-155,0.0759493670886076,True,True
4719,Give me some TV stations whose network's main language is American English?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/American_English> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionStation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me some TV stations whose network's main language is American English?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?station ?network
WHERE {
  ?station dbpedia:network ?network .
  ?network rdfs:label ""American English""@en .
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?station ?network
WHERE {
  ?station dbpedia:network ?network .
  ?network rdfs:label ""American English""@en .
}",3.1537059338519422e-155,0.06756756756756757,True,True
685,How many religions are followed by the people in the Royal Thai Army?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Royal_Thai_Army> . ?x <http://dbpedia.org/ontology/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many religions are followed by the people in the Royal Thai Army?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religionCount
WHERE {
  ?army dbo:follows ?religion .
  FILTER ( ?army = <http://dbpedia.org/resource/Royal_Thai_Army> )
  GROUP BY ?religion
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religionCount
WHERE {
  ?army dbo:follows ?religion .
  FILTER ( ?army = <http://dbpedia.org/resource/Royal_Thai_Army> )
  GROUP BY ?religion
}",2.60205383027793e-155,0.07792207792207792,False,False
207,What is the name of the movie whose director of photography was Jordan Cronenweth and music composer was Vangelis?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/Jordan_Cronenweth> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Vangelis>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the name of the movie whose director of photography was Jordan Cronenweth and music composer was Vangelis?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movieLabel WHERE {
  ?movie dbo:directorOfPhotography <http://dbpedia.org/resource/Jordan_Cronenweth> .
  ?movie dbo:musicComposer <http://dbpedia.org/resource/Vangelis> .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movieLabel WHERE {
  ?movie dbo:directorOfPhotography <http://dbpedia.org/resource/Jordan_Cronenweth> .
  ?movie dbo:musicComposer <http://dbpedia.org/resource/Vangelis> .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.951204860745888e-155,0.0625,False,False
36,List the teams for which Bobby Hoppe played ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bobby_Hoppe> <http://dbpedia.org/property/pastteams> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the teams for which Bobby Hoppe played ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:name ""Bobby Hoppe"" .
  ?player dbp:sportsTeam ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:name ""Bobby Hoppe"" .
  ?player dbp:sportsTeam ?team .
}",3.0940944781388835e-155,0.07692307692307693,True,True
750,Semani languages are spoken in which countries?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/languages> <http://dbpedia.org/resource/Semnani_languages>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Semani languages are spoken in which countries?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?language dbo:wikiPageRedirects ?semLanguage .
  ?semLanguage rdfs:label ""Semani""@en .
  ?language dbp:spokenIn ?country .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?language dbo:wikiPageRedirects ?semLanguage .
  ?semLanguage rdfs:label ""Semani""@en .
  ?language dbp:spokenIn ?country .
}",2.3962983105918537e-155,0.05714285714285714,True,True
690,From which state do the White Plum Asangas come?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/White_Plum_Asanga> . ?x <http://dbpedia.org/ontology/stateOfOrigin> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: From which state do the White Plum Asangas come?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?state
WHERE {
  ?fruit dbo:origin ?state .
  FILTER (regex(?fruit, ""White Plum Asangas"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?state
WHERE {
  ?fruit dbo:origin ?state .
  FILTER (regex(?fruit, ""White Plum Asangas"", ""i""))
}",3.216579438360415e-155,0.08450704225352113,True,True
423,"Who founded the city where First Church of Christ, Scientist is located?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/First_Church_of_Christ,_Scientist_(Pittsburgh)> <http://dbpedia.org/property/locationTown> ?x . ?x <http://dbpedia.org/ontology/founder> ?uri  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who founded the city where First Church of Christ, Scientist is located?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?founder
WHERE {
  ?church dbo:location ?city .
  ?city dbo:foundedBy ?founder .
  FILTER ( ?church = <http://dbpedia.org/resource/First_Church_of_Christ,_Scientist> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?founder
WHERE {
  ?church dbo:location ?city .
  ?city dbo:foundedBy ?founder .
  FILTER ( ?church = <http://dbpedia.org/resource/First_Church_of_Christ,_Scientist> )
}",2.5548810418069474e-155,0.06493506493506493,True,True
4650,Where did the people die who were known for Young Life?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Young_Life> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the people die who were known for Young Life?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?place
WHERE {
  ?person dbo:deathPlace ?place .
  ?person dbo:knownFor ""Young Life"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?place
WHERE {
  ?person dbo:deathPlace ?place .
  ?person dbo:knownFor ""Young Life"" .
}",3.1742523358973992e-155,0.07042253521126761,True,True
2048,List the things for which the relatives of Mrunalini Kunte are known?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mrunalini_Kunte> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/property/knownFor> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the things for which the relatives of Mrunalini Kunte are known?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:name ""Mrunalini Kunte"" .
  ?person dbo:spouse ?spouse .
  ?spouse dbo:knownFor ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:name ""Mrunalini Kunte"" .
  ?person dbo:spouse ?spouse .
  ?spouse dbo:knownFor ?thing .
}",3.4945213227383114e-155,0.08108108108108109,True,True
574,How many cities are around the sea into which the aegean sea flows?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Aegean_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many cities are around the sea into which the aegean sea flows?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city (COUNT(?city) AS ?cityCount)
WHERE {
  ?city dbo:locatedIn ?sea .
  ?sea dbo:connectedTo <http://dbpedia.org/resource/Aegean_Sea> .
  FILTER ( ?sea != <http://dbpedia.org/resource/Aegean_Sea> )
}
GROUP BY ?city
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city (COUNT(?city) AS ?cityCount)
WHERE {
  ?city dbo:locatedIn ?sea .
  ?sea dbo:connectedTo <http://dbpedia.org/resource/Aegean_Sea> .
  FILTER ( ?sea != <http://dbpedia.org/resource/Aegean_Sea> )
}
GROUP BY ?city",2.454081903007032e-155,0.06097560975609756,True,True
4382,Who are the people whose phD advisor was Harry Harlow?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Harry_Harlow>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the people whose phD advisor was Harry Harlow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:PhDAdvisor ?advisor .
  ?advisor dbo:name ""Harry Harlow"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:PhDAdvisor ?advisor .
  ?advisor dbo:name ""Harry Harlow"" .
}",2.4440718429993668e-155,0.057971014492753624,True,True
346,Name the office holder with predecessor as Samuel W. McCall and office in Massachusetts House of Representatives?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Samuel_W._McCall> . ?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Massachusetts_House_of_Representatives>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the office holder with predecessor as Samuel W. McCall and office in Massachusetts House of Representatives?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?successor
WHERE {
  ?successor dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Samuel W. McCall""^^xsd:string .
  ?successor dbo:office ?office .
  ?office dbo:location ""Massachusetts"" .
  ?office dbo:name ""House of Representatives"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?successor
WHERE {
  ?successor dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Samuel W. McCall""^^xsd:string .
  ?successor dbo:office ?office .
  ?office dbo:location ""Massachusetts"" .
  ?office dbo:name ""House of Representatives"" .
}",8.167977311814523e-232,0.03614457831325301,True,True
1538,Who manufactures the SHO V8?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_SHO_V8_engine> <http://dbpedia.org/ontology/manufacturer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who manufactures the SHO V8?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?manufacturer
WHERE {
  ?car dbo:manufacturer ?manufacturer .
  ?car dbo:name ""SHO V8"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?manufacturer
WHERE {
  ?car dbo:manufacturer ?manufacturer .
  ?car dbo:name ""SHO V8"" .
}",2.5488701582353735e-155,0.06557377049180328,True,True
1372,Does the Sicklefin lemon shark belong in the animal kingdom?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Sicklefin_lemon_shark> <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Animal> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the Sicklefin lemon shark belong in the animal kingdom?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:abstract ""Sicklefin lemon shark"" .
  ?x dbo:species ""Sicklefin lemon shark"" .
  ?x dbo:classification ?y .
  ?y dbo:higherClassification ?z .
  ?z dbo:name ""Animal"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:abstract ""Sicklefin lemon shark"" .
  ?x dbo:species ""Sicklefin lemon shark"" .
  ?x dbo:classification ?y .
  ?y dbo:higherClassification ?z .
  ?z dbo:name ""Animal"" .
}",2.0868169697040566e-155,0.043478260869565216,True,True
4849,What awards were presented to the person who produced Paradise place?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paradise_Place> <http://dbpedia.org/property/producer> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What awards were presented to the person who produced Paradise place?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?film dbo:director ?person .
  ?film rdfs:label ""Paradise Place"" .
  ?person dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?film dbo:director ?person .
  ?film rdfs:label ""Paradise Place"" .
  ?person dbo:award ?award .
}",3.0566417519593477e-155,0.06578947368421052,True,True
2664,Which country were the associates of Hilda Duhalde from?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hilda_de_Duhalde> <http://dbpedia.org/ontology/associate> ?x . ?x <http://dbpedia.org/ontology/nationality> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which country were the associates of Hilda Duhalde from?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?country
WHERE {
  ?person dbo:birthPlace ?country .
  ?person dbo:name ""Hilda Duhalde"" .
  ?person dbo:associate ?associate .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?country
WHERE {
  ?person dbo:birthPlace ?country .
  ?person dbo:name ""Hilda Duhalde"" .
  ?person dbo:associate ?associate .
}",3.559043432561587e-155,0.0821917808219178,True,True
4236,Who starred in Nothing in Common and produced From the Earth to the Moon?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/From_the_Earth_to_the_Moon_(miniseries)> <http://dbpedia.org/ontology/executiveProducer> ?uri. <http://dbpedia.org/resource/Nothing_in_Common> <http://dbpedia.org/property/starring> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who starred in Nothing in Common and produced From the Earth to the Moon?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?actor ?producer
WHERE {
  ?actor dbo:filmography ?movie .
  ?movie dbo:title ""Nothing in Common"" .
  ?producer dbo:produced ?movie .
  ?movie dbo:title ""From the Earth to the Moon"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?actor ?producer
WHERE {
  ?actor dbo:filmography ?movie .
  ?movie dbo:title ""Nothing in Common"" .
  ?producer dbo:produced ?movie .
  ?movie dbo:title ""From the Earth to the Moon"" .
}",3.127732480617132e-155,0.07692307692307693,True,True
439,Which fields are covered by academic journals in the US?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/country> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/property/discipline> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AcademicJournal>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which fields are covered by academic journals in the US?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?field
WHERE {
  ?journal dbo:country ""United States""^^xsd:string .
  ?journal dbo:field ?field .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?field
WHERE {
  ?journal dbo:country ""United States""^^xsd:string .
  ?journal dbo:field ?field .
}",3.216579438360415e-155,0.07042253521126761,True,True
1478,Where did the plays written by Robert Schenkkan take place?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Robert_Schenkkan> . ?x <http://dbpedia.org/property/place> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Play>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the plays written by Robert Schenkkan take place?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?play dbo:author ?author .
  ?author dbo:name ""Robert Schenkkan"" .
  ?play dbo:setting ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?play dbo:author ?author .
  ?author dbo:name ""Robert Schenkkan"" .
  ?play dbo:setting ?location .
}",3.075337680136661e-155,0.06666666666666667,True,True
1189,What is the product of the BBC Multimedia and series of the The Last Resort (Doctor Who)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/BBC_Multimedia> <http://dbpedia.org/property/products> ?uri. <http://dbpedia.org/resource/The_Last_Resort_(Doctor_Who)> <http://dbpedia.org/ontology/series> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the product of the BBC Multimedia and series of the The Last Resort (Doctor Who)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?product
WHERE {
  ?series dbo:title ""The Last Resort"" .
  ?series dbo:partOf ?product .
  ?product dbo:productionCompany dbo:BBCMultimedia .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?product
WHERE {
  ?series dbo:title ""The Last Resort"" .
  ?series dbo:partOf ?product .
  ?product dbo:productionCompany dbo:BBCMultimedia .
}",2.0868169697040566e-155,0.039473684210526314,True,True
1939,To which political party do the children of Sonia Gandhi belong?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sonia_Gandhi> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/party> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which political party do the children of Sonia Gandhi belong?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?party
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Sonia Gandhi""^^xsd:string .
  ?person dbo:father ?parent .
  ?parent dbo:politicalParty ?party .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?party
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Sonia Gandhi""^^xsd:string .
  ?person dbo:father ?parent .
  ?parent dbo:politicalParty ?party .
}",3.0566417519593477e-155,0.06756756756756757,True,True
4143,What are some famous veterinary physicians known for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/field> <http://dbpedia.org/resource/Veterinary_physician> . ?x <http://dbpedia.org/property/knownFor> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some famous veterinary physicians known for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subject ?knownFor
WHERE {
  ?subject dbo:type dbo:Veterinarian .
  ?subject dbo:knownFor ?knownFor .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subject ?knownFor
WHERE {
  ?subject dbo:type dbo:Veterinarian .
  ?subject dbo:knownFor ?knownFor .
}",3.6750083101231446e-155,0.08571428571428572,True,True
2037,What are the artists that are associated with the Framptons camel album?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Frampton's_Camel>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the artists that are associated with the Framptons camel album?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?artist
WHERE {
  ?album dbo:artist ?artist .
  ?album rdf:type dbo:Album .
  FILTER (regex(?album, ""Framptons camel"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?artist
WHERE {
  ?album dbo:artist ?artist .
  ?album rdf:type dbo:Album .
  FILTER (regex(?album, ""Framptons camel"", ""i""))
}",2.308595628361502e-155,0.05405405405405406,True,True
2108,What is the profession of William Luther Hill ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Luther_Hill> <http://dbpedia.org/ontology/profession> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the profession of William Luther Hill ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession
WHERE {
  <http://dbpedia.org/resource/William_Luther_Hill> dbo:profession ?profession .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession
WHERE {
  <http://dbpedia.org/resource/William_Luther_Hill> dbo:profession ?profession .
}",9.274792349638353e-79,0.08064516129032258,True,True
4171,What is the total number of professions in which someone who has suicided worked?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the total number of professions in which someone who has suicided worked?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?profession) AS ?totalProfessions)
WHERE {
  ?person dbo:deathCause ""Suicide"" .
  ?person dbo:occupation ?profession .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?profession) AS ?totalProfessions)
WHERE {
  ?person dbo:deathCause ""Suicide"" .
  ?person dbo:occupation ?profession .
}",3.1137823863213763e-155,0.06493506493506493,True,True
1727,What is the location of the Walter Evans Edge office which is also the place of birth of henry Miller ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Walter_Evans_Edge> <http://dbpedia.org/property/office> ?uri. <http://dbpedia.org/resource/Henry_Miller_Shreve> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the location of the Walter Evans Edge office which is also the place of birth of henry Miller ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?location
WHERE {
  ?office dbo:location ?location .
  ?office dbp:name ""Walter Evans Edge"" .
  ?miller dbo:birthPlace ?location .
  ?miller dbo:name ""Henry Miller"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?location
WHERE {
  ?office dbo:location ?location .
  ?office dbp:name ""Walter Evans Edge"" .
  ?miller dbo:birthPlace ?location .
  ?miller dbo:name ""Henry Miller"" .
}",1.9881679882945454e-155,0.036585365853658534,True,True
2590,Where did the beverage sold by Refriango originate?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Refriango> . ?x <http://dbpedia.org/property/origin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Beverage>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the beverage sold by Refriango originate?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?origin
WHERE {
  ?product dbo:brand ""Refriango"" .
  ?product dbp:origin ?origin .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?origin
WHERE {
  ?product dbo:brand ""Refriango"" .
  ?product dbp:origin ?origin .
}",3.2833699258334827e-155,0.07352941176470588,True,True
4087,List the websites which the authors of Tornado own ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tornado_(web_server)> <http://dbpedia.org/property/author> ?x . ?x <http://dbpedia.org/ontology/owner> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the websites which the authors of Tornado own ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?website
WHERE {
  ?author dbo:ownsWebsite ?website .
  ?author dbo:name ""Tornado"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?website
WHERE {
  ?author dbo:ownsWebsite ?website .
  ?author dbo:name ""Tornado"" .
}",3.650908595319347e-155,0.08571428571428572,True,True
2430,Where were Justina Machado and John Englehard born?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Justina_Machado> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/John_Englehart> <http://dbpedia.org/ontology/birthPlace> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where were Justina Machado and John Englehard born?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  FILTER (regex(?person, ""Justina Machado"", ""i"") || regex(?person, ""John Englehard"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  FILTER (regex(?person, ""Justina Machado"", ""i"") || regex(?person, ""John Englehard"", ""i""))
}",3.1537059338519422e-155,0.07894736842105263,True,True
1086,Who owns the newspaper which was founded by Nehru?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Jawaharlal_Nehru> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who owns the newspaper which was founded by Nehru?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?newspaper ?owner
WHERE {
  ?newspaper dbo:founder ?nehru .
  ?nehru dbo:name ""Nehru"" .
  ?newspaper dbo:owner ?owner .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?newspaper ?owner
WHERE {
  ?newspaper dbo:founder ?nehru .
  ?nehru dbo:name ""Nehru"" .
  ?newspaper dbo:owner ?owner .
}",2.50170125957988e-155,0.05555555555555555,True,True
1378,What belongs to the families of Buccinidae and Buccinoidea?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinidae> . ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinoidea> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What belongs to the families of Buccinidae and Buccinoidea?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?item
WHERE {
  ?item dbo:family ?family .
  FILTER (regex(?family, ""Buccinidae"", ""i"") || regex(?family, ""Buccinoidea"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?item
WHERE {
  ?item dbo:family ?family .
  FILTER (regex(?family, ""Buccinidae"", ""i"") || regex(?family, ""Buccinoidea"", ""i""))
}",3.1137823863213763e-155,0.08108108108108109,True,True
3938,Was Class Conflict an interest of Karl Marx?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Karl_Marx> <http://dbpedia.org/ontology/mainInterest> <http://dbpedia.org/resource/Class_conflict> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Class Conflict an interest of Karl Marx?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?interest
WHERE {
  ?person rdf:type dbo:Person ;
         dbo:name ""Karl Marx"" ;
         dbo:interest ?interest .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?interest
WHERE {
  ?person rdf:type dbo:Person ;
         dbo:name ""Karl Marx"" ;
         dbo:interest ?interest .
}",2.2445353519102238e-155,0.043478260869565216,True,True
2374,Does the north carolina highway 280 end in Arden?,google/gemma-2-9b-it,"ASK WHERE { <http://dbpedia.org/resource/North_Carolina_Highway_280> <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Arden,_North_Carolina> }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the north carolina highway 280 end in Arden?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?endLocation
WHERE {
  ?highway dbo:officialName ""North Carolina Highway 280"" .
  ?highway dbo:endLocation ?endLocation .
  FILTER (str(?endLocation) = ""Arden"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?endLocation
WHERE {
  ?highway dbo:officialName ""North Carolina Highway 280"" .
  ?highway dbo:endLocation ?endLocation .
  FILTER (str(?endLocation) = ""Arden"")
}",2.1745921280630745e-155,0.041666666666666664,True,True
468,Who gives the license of WXXV-DT2?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WXXV-DT2> <http://dbpedia.org/property/licensee> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who gives the license of WXXV-DT2?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?licensee
WHERE {
  ?station dbo:licensee ?licensee .
  FILTER (regex(?station, ""WXXV-DT2"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?licensee
WHERE {
  ?station dbo:licensee ?licensee .
  FILTER (regex(?station, ""WXXV-DT2"", ""i""))
}",2.5488701582353735e-155,0.06349206349206349,True,True
180,Which holy places did consider Pope Gregory I as a saint?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pope_Gregory_I> <http://dbpedia.org/property/veneratedIn> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which holy places did consider Pope Gregory I as a saint?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?holyPlace
WHERE {
  ?pope dbo:canonizedBy ?holyPlace .
  FILTER ( ?pope = <http://dbpedia.org/resource/Pope_Gregory_I> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?holyPlace
WHERE {
  ?pope dbo:canonizedBy ?holyPlace .
  FILTER ( ?pope = <http://dbpedia.org/resource/Pope_Gregory_I> )
}",3.1137823863213763e-155,0.08333333333333333,True,True
4952,Where did john o conner study?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_O'Connor_(archbishop_of_New_York)> <http://dbpedia.org/ontology/almaMater> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did john o conner study?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""John O'Connor"" .
  ?person dbo:educationPlace ?university .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""John O'Connor"" .
  ?person dbo:educationPlace ?university .
}",2.530465559854518e-155,0.06349206349206349,True,True
3787,Where did Allama Matthews study?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allama_Matthews> <http://dbpedia.org/ontology/college> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did Allama Matthews study?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""Allama Matthews"" .
  ?person dbo:educationPlace ?university .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""Allama Matthews"" .
  ?person dbo:educationPlace ?university .
}",2.5488701582353735e-155,0.06451612903225806,True,True
245,Count all the scientologists.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Scientology>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all the scientologists.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?subject
WHERE {
  ?subject dbo:religion ""Scientology"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?subject
WHERE {
  ?subject dbo:religion ""Scientology"" .
}",2.668419795632472e-155,0.06896551724137931,True,True
2567,How many molluscs are there whose families are Buccinidae and Buccinoidea?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinidae> . ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinoidea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many molluscs are there whose families are Buccinidae and Buccinoidea?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x rdf:type dbo:Mollusca .
  ?x dbo:family ?family .
  FILTER (regex(?family, ""Buccinidae"", ""i"") || regex(?family, ""Buccinoidea"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x rdf:type dbo:Mollusca .
  ?x dbo:family ?family .
  FILTER (regex(?family, ""Buccinidae"", ""i"") || regex(?family, ""Buccinoidea"", ""i""))
}",2.268207528392565e-155,0.05,True,True
3468,Bud Adams owns which american football team?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Bud_Adams>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Bud Adams owns which american football team?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?person dbo:owns ?team .
  ?person dbo:name ""Bud Adams"" .
  ?team dbo:type dbo:SportsTeam .
  FILTER (regex(?team, ""American football"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?person dbo:owns ?team .
  ?person dbo:name ""Bud Adams"" .
  ?team dbo:type dbo:SportsTeam .
  FILTER (regex(?team, ""American football"", ""i""))
}",8.017078581883202e-232,0.0410958904109589,True,True
1616,List everything in which saxophone players have been cast.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Saxophone> . ?uri <http://dbpedia.org/property/starring> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List everything in which saxophone players have been cast.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?work
WHERE {
  ?person dbo:occupation ""Saxophonist"" .
  ?person dbp:castIn ?work .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?work
WHERE {
  ?person dbo:occupation ""Saxophonist"" .
  ?person dbp:castIn ?work .
}",3.6750083101231446e-155,0.08450704225352113,True,True
146,What system is both a platform where Nord runs and also distributed The beauty inside?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nord_(video_game)> <http://dbpedia.org/ontology/computingPlatform> ?uri. <http://dbpedia.org/resource/The_Beauty_Inside> <http://dbpedia.org/ontology/distributor> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What system is both a platform where Nord runs and also distributed The beauty inside?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?system
WHERE {
  ?system dbo:wikiPageRedirects ?nordPlatform .
  ?nordPlatform dbo:wikiPageRedirects ?nord .
  ?nord dbo:description ""Nord"" .
  ?system dbo:wikiPageRedirects ?beautyInside .
  ?beautyInside dbo:description ""The beauty inside"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?system
WHERE {
  ?system dbo:wikiPageRedirects ?nordPlatform .
  ?nordPlatform dbo:wikiPageRedirects ?nord .
  ?nord dbo:description ""Nord"" .
  ?system dbo:wikiPageRedirects ?beautyInside .
  ?beautyInside dbo:description ""The beauty inside"" .
}",3.194645317303101e-155,0.07692307692307693,True,True
3686,Was Castillo discovered by Galileo?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Callisto_(moon)> <http://dbpedia.org/property/discoverer> <http://dbpedia.org/resource/Galileo_Galilei> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Castillo discovered by Galileo?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:discoveredBy <http://dbpedia.org/resource/Galileo_Galilei> .
  FILTER (regex(str(?x), ""Castillo"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:discoveredBy <http://dbpedia.org/resource/Galileo_Galilei> .
  FILTER (regex(str(?x), ""Castillo"", ""i""))
}",2.5676822842398837e-155,0.06451612903225806,True,True
4966,Which office holder's constituency is Haight-Ashbury and has military unit as USS Kittiwake ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Haight-Ashbury> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/USS_Kittiwake_(ASR-13)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which office holder's constituency is Haight-Ashbury and has military unit as USS Kittiwake ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?officeHolder ?officeHolderLabel
WHERE {
  ?officeHolder dbo:constituency ?constituency .
  ?constituency dbo:name ""Haight-Ashbury"" .
  ?officeHolder dbo:militaryUnit ?militaryUnit .
  ?militaryUnit dbo:name ""USS Kittiwake"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?officeHolder ?officeHolderLabel
WHERE {
  ?officeHolder dbo:constituency ?constituency .
  ?constituency dbo:name ""Haight-Ashbury"" .
  ?officeHolder dbo:militaryUnit ?militaryUnit .
  ?militaryUnit dbo:name ""USS Kittiwake"" .
}",2.344734865707205e-155,0.04938271604938271,True,True
1999,What is the mascot of Galatasaray Handball Team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Galatasaray_Handball_Team> <http://dbpedia.org/property/mascot> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the mascot of Galatasaray Handball Team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?mascot
WHERE {
  ?team dbo:name ""Galatasaray Handball Team"" .
  ?team dbo:mascot ?mascot .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?mascot
WHERE {
  ?team dbo:name ""Galatasaray Handball Team"" .
  ?team dbo:mascot ?mascot .
}",2.4606427705034855e-155,0.06153846153846154,True,True
802,Which awards did the narrator of Oscar and Lucinda win?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Oscar_and_Lucinda_(film)> <http://dbpedia.org/ontology/narrator> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which awards did the narrator of Oscar and Lucinda win?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:narratorOf <http://dbpedia.org/resource/Oscar_and_Lucinda> ;
  dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:narratorOf <http://dbpedia.org/resource/Oscar_and_Lucinda> ;
  dbo:award ?award .
}",3.608498281805203e-155,0.08695652173913043,True,True
1174,What is the nation of the Major All Stars Season 1 and Pioneer Corporation ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Major_All_Stars_Season_1> <http://dbpedia.org/property/country> ?uri. <http://dbpedia.org/resource/Pioneer_Corporation> <http://dbpedia.org/property/country> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the nation of the Major All Stars Season 1 and Pioneer Corporation ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?nationMajorStars ?nationPioneer
WHERE {
  ?majorStars dbo:country ?nationMajorStars .
  ?pioneer dbo:country ?nationPioneer .
  FILTER (regex(?nationMajorStars, ""United States"") || regex(?nationPioneer, ""Japan""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?nationMajorStars ?nationPioneer
WHERE {
  ?majorStars dbo:country ?nationMajorStars .
  ?pioneer dbo:country ?nationPioneer .
  FILTER (regex(?nationMajorStars, ""United States"") || regex(?nationPioneer, ""Japan""))
}",2.9346708496857675e-155,0.07407407407407407,True,True
3664,Do the polet airlines fly to moscow?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Polet_Airlines> <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Moscow> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Do the polet airlines fly to moscow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?airline
WHERE {
  ?airline dbo:name ""polet airlines"" .
  ?airline dbo:airlineDestination ?destination .
  ?destination dbo:name ""moscow"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?airline
WHERE {
  ?airline dbo:name ""polet airlines"" .
  ?airline dbo:airlineDestination ?destination .
  ?destination dbo:name ""moscow"" .
}",2.2300068516948962e-155,0.046153846153846156,True,True
1635,Name the television show directed by Simon Fuller and judged by Jennifier Lopez?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the television show directed by Simon Fuller and judged by Jennifier Lopez?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:director ?director .
  ?director dbo:name ""Simon Fuller"" .
  ?show dbo:judge ?judge .
  ?judge dbo:name ""Jennifer Lopez"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:director ?director .
  ?director dbo:name ""Simon Fuller"" .
  ?show dbo:judge ?judge .
  ?judge dbo:name ""Jennifer Lopez"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",8.231055179516831e-232,0.03614457831325301,False,False
4412,Which broad cast area of CFRX is the country of North America Poker Tour ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/CFRX> <http://dbpedia.org/ontology/broadcastArea> ?uri. <http://dbpedia.org/resource/North_American_Poker_Tour> <http://dbpedia.org/ontology/country> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which broad cast area of CFRX is the country of North America Poker Tour ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?broadcastArea
WHERE {
  ?broadcastArea dbo:country ?country .
  ?country rdfs:label ""North America"" .
  ?broadcastArea dbo:broadcasts ?event .
  ?event dbo:name ""North America Poker Tour"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?broadcastArea
WHERE {
  ?broadcastArea dbo:country ?country .
  ?country rdfs:label ""North America"" .
  ?broadcastArea dbo:broadcasts ?event .
  ?event dbo:name ""North America Poker Tour"" .
}",2.5944303248170386e-155,0.05,True,True
3724,Name some sports played in institutions of Maharashtra?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/state> <http://dbpedia.org/resource/Maharashtra> . ?x <http://dbpedia.org/ontology/sport> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name some sports played in institutions of Maharashtra?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?institution dbo:location dbp:Maharashtra .
  ?institution dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?institution dbo:location dbp:Maharashtra .
  ?institution dbo:sports ?sport .
}",3.699591675882789e-155,0.08571428571428572,True,True
4840,South Side elevated railroad and twin cities 400 are operated by which city?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Twin_Cities_400> <http://dbpedia.org/ontology/operatedBy> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: South Side elevated railroad and twin cities 400 are operated by which city?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?railroad dbo:operatedBy ?city .
  FILTER (regex(?railroad, ""South Side elevated railroad"") || regex(?railroad, ""twin cities 400""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?railroad dbo:operatedBy ?city .
  FILTER (regex(?railroad, ""South Side elevated railroad"") || regex(?railroad, ""twin cities 400""))
}",2.4123225276763925e-155,0.06329113924050633,True,True
3667,Name some islands in a pacific archipelago?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Pacific_Ocean> . ?uri <http://dbpedia.org/property/archipelago> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Island>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name some islands in a pacific archipelago?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?islandLabel
WHERE {
  ?island dbo:location ?location .
  ?location dbo:continent ""Pacific Ocean""^^xsd:string .
  ?island rdfs:label ?islandLabel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?islandLabel
WHERE {
  ?island dbo:location ?location .
  ?location dbo:continent ""Pacific Ocean""^^xsd:string .
  ?island rdfs:label ?islandLabel .
}",3.1335534263807668e-155,0.06944444444444445,True,True
1286,Is Lancy a city close to Geneva?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Geneva> <http://dbpedia.org/ontology/neighboringMunicipality> <http://dbpedia.org/resource/Lancy> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Lancy a city close to Geneva?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?distance
WHERE {
  ?city dbo:name ""Lancy"" .
  ?city dbo:locatedIn ?country .
  ?country dbo:name ""Switzerland"" .
  ?city dbp:distanceTo ?otherCity .
  ?otherCity dbo:name ""Geneva"" .
  ?distance a dbo:Distance ;
    dbo:value ?distance .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?distance
WHERE {
  ?city dbo:name ""Lancy"" .
  ?city dbo:locatedIn ?country .
  ?country dbo:name ""Switzerland"" .
  ?city dbp:distanceTo ?otherCity .
  ?otherCity dbo:name ""Geneva"" .
  ?distance a dbo:Distance ;
    dbo:value ?distance .
}",2.0523206950207848e-155,0.04225352112676056,True,True
3065,Which fictional character is portrayed by Roger Barton (film editor)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/portrayer> <http://dbpedia.org/resource/Roger_Barton_(film_editor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which fictional character is portrayed by Roger Barton (film editor)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?character
WHERE {
  ?character dbo:portrayedBy ?editor .
  ?editor dbo:name ""Roger Barton"" .
  FILTER ( ?character rdfs:type dbo:FictionalCharacter )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?character
WHERE {
  ?character dbo:portrayedBy ?editor .
  ?editor dbo:name ""Roger Barton"" .
  FILTER ( ?character rdfs:type dbo:FictionalCharacter )
}",7.943631954232605e-232,0.039473684210526314,False,False
4759,What are the houses of legislature in the political leader's seat of Medininagar?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Medininagar> <http://dbpedia.org/property/leaderTitle> ?x . ?x <http://dbpedia.org/property/houses> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Legislature>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the houses of legislature in the political leader's seat of Medininagar?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?house
WHERE {
  ?leader dbo:seat ?location .
  ?location dbo:name ""Medininagar"" .
  ?location dbo:legislativeBody ?house .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?house
WHERE {
  ?leader dbo:seat ?location .
  ?location dbo:name ""Medininagar"" .
  ?location dbo:legislativeBody ?house .
}",3.0382827129023445e-155,0.06666666666666667,True,True
2759,How many different genres of games can I find which are compatible with the Commodore 64?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Commodore_64> . ?x <http://dbpedia.org/property/genre> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many different genres of games can I find which are compatible with the Commodore 64?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?genre
WHERE {
  ?game dbo:compatibleWith dbr:Commodore_64 .
  ?game dbo:genre ?genre .
}
GROUP BY ?genre
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?genre
WHERE {
  ?game dbo:compatibleWith dbr:Commodore_64 .
  ?game dbo:genre ?genre .
}
GROUP BY ?genre",3.0202505652128895e-155,0.06329113924050633,True,True
2190,Who is the owner of  Chelsea F.C. ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chelsea_F.C.> <http://dbpedia.org/property/owner> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the owner of  Chelsea F.C. ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?owner
WHERE {
  ?club dbo:name ""Chelsea F.C."" .
  ?club dbo:owner ?owner .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?owner
WHERE {
  ?club dbo:name ""Chelsea F.C."" .
  ?club dbo:owner ?owner .
}",2.494821638843469e-155,0.0625,True,True
716,Does Cascade Airways have a hub in Seattle?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Cascade_Airways> <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Seattle> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Cascade Airways have a hub in Seattle?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hub
WHERE {
  ?airline dbo:name ""Cascade Airways"" .
  ?airline dbo:hub ?hub .
  FILTER (str(?hub) = ""Seattle"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hub
WHERE {
  ?airline dbo:name ""Cascade Airways"" .
  ?airline dbo:hub ?hub .
  FILTER (str(?hub) = ""Seattle"")
}",2.259351571061102e-155,0.04477611940298507,True,True
3909,Which companies have Kumho Asiana Group as their parent company?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parentCompany> <http://dbpedia.org/resource/Kumho_Asiana_Group> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which companies have Kumho Asiana Group as their parent company?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:parentOrganization dbp:Kumho_Asiana_Group .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:parentOrganization dbp:Kumho_Asiana_Group .
}",2.4775553999024465e-155,0.05970149253731343,True,True
1850,What is the city of the 2015 MLS All-Star Game and birthplace of the The Okee Dokee Brothers?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_MLS_All-Star_Game> <http://dbpedia.org/property/city> ?uri. <http://dbpedia.org/resource/The_Okee_Dokee_Brothers> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the city of the 2015 MLS All-Star Game and birthplace of the The Okee Dokee Brothers?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city1 ?city2
WHERE {
  ?game dbo:location ?city1 .
  FILTER(?game = <http://dbpedia.org/resource/2015_MLS_All-Star_Game>)
  ?person dbo:birthPlace ?city2 .
  FILTER(?person IN (
    <http://dbpedia.org/resource/Joe_Mailander>,
    <http://dbpedia.org/resource/Justin_""J.D.""_O'Keefe>
  ))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city1 ?city2
WHERE {
  ?game dbo:location ?city1 .
  FILTER(?game = <http://dbpedia.org/resource/2015_MLS_All-Star_Game>)
  ?person dbo:birthPlace ?city2 .
  FILTER(?person IN (
    <http://dbpedia.org/resource/Joe_Mailander>,
    <http://dbpedia.org/resource/Justin_""J.D.""_O'Keefe>
  ))
}",2.0302514477228347e-155,0.03571428571428571,False,False
2305,List TV shows with producer as Erik Bork and company is DreamWorks Television ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/DreamWorks_Television> . ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Erik_Bork>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List TV shows with producer as Erik Bork and company is DreamWorks Television ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:producer dbr:Erik_Bork .
  ?show dbo:company dbr:DreamWorks_Television .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:producer dbr:Erik_Bork .
  ?show dbo:company dbr:DreamWorks_Television .
}",2.486113577066771e-155,0.05263157894736842,True,True
987,Is Peter Piper Pizza in the pizza industry?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Peter_Piper_Pizza> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Pizza> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Peter Piper Pizza in the pizza industry?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?industry
WHERE {
  ?pizza dbo:industry ?industry .
  FILTER (regex(?pizza, ""Peter Piper Pizza"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?industry
WHERE {
  ?pizza dbo:industry ?industry .
  FILTER (regex(?pizza, ""Peter Piper Pizza"", ""i""))
}",2.305625093843957e-155,0.046153846153846156,True,True
3271,Count all the universities who participated in the tournament won by Alabama Crimson Tides in 2015 ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/champion> <http://dbpedia.org/resource/2015_Alabama_Crimson_Tide_football_team> . ?uri <http://dbpedia.org/property/athletics> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all the universities who participated in the tournament won by Alabama Crimson Tides in 2015 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?university
WHERE {
  ?tournament dbo:winner <http://dbpedia.org/resource/Alabama_Crimson_Tides> .
  ?tournament dbo:year ""2015""^^xsd:gYear .
  ?tournament dbo:participant ?university .
  FILTER ( ?university != <http://dbpedia.org/resource/Alabama_Crimson_Tides> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?university
WHERE {
  ?tournament dbo:winner <http://dbpedia.org/resource/Alabama_Crimson_Tides> .
  ?tournament dbo:year ""2015""^^xsd:gYear .
  ?tournament dbo:participant ?university .
  FILTER ( ?university != <http://dbpedia.org/resource/Alabama_Crimson_Tides> )
}",2.3192471031465984e-155,0.04819277108433735,True,True
1276,"What state was Cyrus Mann born in, and has the famous Downriver?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Downriver> <http://dbpedia.org/ontology/state> ?uri. <http://dbpedia.org/resource/Cyrus_Mann> <http://dbpedia.org/property/birthPlace> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What state was Cyrus Mann born in, and has the famous Downriver?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?state
WHERE {
  ?person dbo:birthPlace ?state .
  ?person dbo:name ""Cyrus Mann"" .
  ?location dbo:name ""Downriver"" ;
    dbp:locatedIn ?state .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?state
WHERE {
  ?person dbo:birthPlace ?state .
  ?person dbo:name ""Cyrus Mann"" .
  ?location dbo:name ""Downriver"" ;
    dbp:locatedIn ?state .
}",2.868751113594075e-155,0.06493506493506493,True,True
4349,Which TV show's company is PlayTone and is produced by Stephen E. Ambrose ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Playtone> . ?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which TV show's company is PlayTone and is produced by Stephen E. Ambrose ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:productionCompany ?company .
  ?company dbo:name ""PlayTone"" .
  ?show dbo:director ?director .
  ?director dbo:name ""Stephen E. Ambrose"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:productionCompany ?company .
  ?company dbo:name ""PlayTone"" .
  ?show dbo:director ?director .
  ?director dbo:name ""Stephen E. Ambrose"" .
}",2.344734865707205e-155,0.05063291139240506,True,True
4644,"How many teams was Garry Unger in, previously?",google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Garry_Unger> <http://dbpedia.org/ontology/formerTeam> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many teams was Garry Unger in, previously?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?teamCount
WHERE {
  ?player dbo:name ""Garry Unger"" .
  ?player dbo:previousTeams ?team .
  GROUP BY ?player
  
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?teamCount
WHERE {
  ?player dbo:name ""Garry Unger"" .
  ?player dbo:previousTeams ?team .
  GROUP BY ?player
  
}",2.4440718429993668e-155,0.056338028169014086,False,False
2555,List the name of those who became famous for something garrisoned at Tennessee?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Tennessee> . ?uri <http://dbpedia.org/property/knownFor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the name of those who became famous for something garrisoned at Tennessee?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name
WHERE {
  ?person dbo:birthPlace dbp:Tennessee .
  ?person dbo:knownFor ?thing .
  ?thing dbo:location dbp:Tennessee .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name
WHERE {
  ?person dbo:birthPlace dbp:Tennessee .
  ?person dbo:knownFor ?thing .
  ?thing dbo:location dbp:Tennessee .
}",3.4945213227383114e-155,0.08,True,True
4968,Which TV show's writer is Erik Jendresen and distributor is HBO?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/HBO>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which TV show's writer is Erik Jendresen and distributor is HBO?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:writer ErikJendresen .
  ?show dbo:distributor HBO .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:writer ErikJendresen .
  ?show dbo:distributor HBO .
}",2.533776972251024e-155,0.05555555555555555,False,False
2644,What are some cars similar to the ones assembled at Toluca?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Toluca> . ?x <http://dbpedia.org/property/related> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some cars similar to the ones assembled at Toluca?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?car
WHERE {
  ?car dbo:assemblyLocation <http://dbpedia.org/resource/Toluca> .
  ?car dbo:manufacturer ?manufacturer .
  ?similarCar dbo:manufacturer ?manufacturer .
  FILTER (NOT EXISTS { ?car ?p ?o . })
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?car
WHERE {
  ?car dbo:assemblyLocation <http://dbpedia.org/resource/Toluca> .
  ?car dbo:manufacturer ?manufacturer .
  ?similarCar dbo:manufacturer ?manufacturer .
  FILTER (NOT EXISTS { ?car ?p ?o . })
}",3.3566500347661918e-155,0.075,True,True
4707,What is the allegiance of Albert Kwesi Ocran ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albert_Kwesi_Ocran> <http://dbpedia.org/property/allegiance> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the allegiance of Albert Kwesi Ocran ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?allegiance
WHERE {
  ?person dbo:name ""Albert Kwesi Ocran"" .
  ?person dbo:allegiance ?allegiance .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?allegiance
WHERE {
  ?person dbo:name ""Albert Kwesi Ocran"" .
  ?person dbo:allegiance ?allegiance .
}",2.4606427705034855e-155,0.06153846153846154,True,True
605,Name the scientist who was the winner of Royal Society award and had Georg Meissner as his doctoral advisor ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Royal_Society> . ?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the scientist who was the winner of Royal Society award and had Georg Meissner as his doctoral advisor ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?scientist
WHERE {
  ?scientist dbo:award <http://dbpedia.org/resource/Royal_Society_Award> .
  ?scientist dbo:advisor ?advisor .
  ?advisor dbo:name ""Georg Meissner"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?scientist
WHERE {
  ?scientist dbo:award <http://dbpedia.org/resource/Royal_Society_Award> .
  ?scientist dbo:advisor ?advisor .
  ?advisor dbo:name ""Georg Meissner"" .
}",8.34186146802972e-232,0.036585365853658534,True,True
2321,Does the white river flow into the connecticut river?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Connecticut_River> <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/White_River_(Vermont)> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the white river flow into the connecticut river?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""White River"" .
  ?x dbo:mouth ?y .
  ?y dbo:name ""Connecticut River"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""White River"" .
  ?x dbo:mouth ?y .
  ?y dbo:name ""Connecticut River"" .
}",2.2300068516948962e-155,0.046875,True,True
3617,Where did Louis chevrolet die ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Louis_Chevrolet> <http://dbpedia.org/property/deathPlace> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did Louis chevrolet die ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:name ""Louis Chevrolet"" .
  ?person dbo:deathPlace ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:name ""Louis Chevrolet"" .
  ?person dbo:deathPlace ?location .
}",2.530465559854518e-155,0.06349206349206349,True,True
2945,Which river has its roots in Baikal Mountains?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Baikal_Mountains> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which river has its roots in Baikal Mountains?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?river
WHERE {
  ?river dbo:source ?source .
  ?source dbo:locatedIn <http://dbpedia.org/resource/Baikal_Mountains> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?river
WHERE {
  ?river dbo:source ?source .
  ?source dbo:locatedIn <http://dbpedia.org/resource/Baikal_Mountains> .
}",2.6379527083228047e-155,0.07692307692307693,True,True
2415,List the relative of Tim Nanai-Williams ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tim_Nanai-Williams> <http://dbpedia.org/ontology/relative> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the relative of Tim Nanai-Williams ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?relative
WHERE {
  ?person dbo:name ""Tim Nanai-Williams"" .
  ?person dbo:relative ?relative .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?relative
WHERE {
  ?person dbo:name ""Tim Nanai-Williams"" .
  ?person dbo:relative ?relative .
}",3.1370721297783126e-155,0.078125,True,True
3688,Who are the chancellors of universities which is affiliated with Plymouth University?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Plymouth_University> . ?x <http://dbpedia.org/property/chancellor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the chancellors of universities which is affiliated with Plymouth University?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?chancellor ?university
WHERE {
  ?university dbo:affiliatedWith <http://dbpedia.org/resource/Plymouth_University> .
  ?university rdfs:label ?universityLabel .
  ?university dbo:chancellor ?chancellor .
  ?chancellor rdfs:label ?chancellorLabel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?chancellor ?university
WHERE {
  ?university dbo:affiliatedWith <http://dbpedia.org/resource/Plymouth_University> .
  ?university rdfs:label ?universityLabel .
  ?university dbo:chancellor ?chancellor .
  ?chancellor rdfs:label ?chancellorLabel .
}",3.4137094800074316e-155,0.07792207792207792,True,True
2864,From how many different places have participants of Breeders's Cup Turf come?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/race> <http://dbpedia.org/resource/Breeders'_Cup_Turf> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: From how many different places have participants of Breeders's Cup Turf come?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?participant dbo:birthPlace ?place .
  ?participant dbo:participatedIn ?event .
  ?event rdfs:label ""Breeders' Cup Turf"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?participant dbo:birthPlace ?place .
  ?participant dbo:participatedIn ?event .
  ?event rdfs:label ""Breeders' Cup Turf"" .
}",2.9851289841006984e-155,0.06172839506172839,True,True
4071,Who gave the musical score of 9 to 5 (musical) ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/9_to_5_(musical)> <http://dbpedia.org/ontology/musicBy> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who gave the musical score of 9 to 5 (musical) ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?composer
WHERE {
  ?musical dbo:composer ?composer .
  FILTER (str(?musical) = ""9 to 5 (musical)"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?composer
WHERE {
  ?musical dbo:composer ?composer .
  FILTER (str(?musical) = ""9 to 5 (musical)"")
}",2.4119102000777368e-155,0.057971014492753624,True,True
3342,Who is the leader of Allgemeine SS ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allgemeine_SS> <http://dbpedia.org/ontology/leader> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the leader of Allgemeine SS ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?leader
WHERE {
  ?leader dbo:leaderOf <http://dbpedia.org/resource/Allgemeine_SS> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?leader
WHERE {
  ?leader dbo:leaderOf <http://dbpedia.org/resource/Allgemeine_SS> .
}",2.7353319119103705e-155,0.08196721311475409,True,True
4618,How many movies are distributed by Cinema International Corporation?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many movies are distributed by Cinema International Corporation?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:distributor dbo:Cinema_International_Corporation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:distributor dbo:Cinema_International_Corporation .
}",8.289228799996742e-232,0.043478260869565216,True,True
4199,Does Chicago own the Monroe Station?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Monroe_station_(CTA_Blue_Line)> <http://dbpedia.org/property/owned> <http://dbpedia.org/resource/Chicago> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Chicago own the Monroe Station?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:officialName ""Chicago"" .
  ?x dbo:owns ?y .
  ?y dbo:officialName ""Monroe Station"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:officialName ""Chicago"" .
  ?x dbo:owns ?y .
  ?y dbo:officialName ""Monroe Station"" .
}",2.2898861187450904e-155,0.04838709677419355,True,True
4653,Give me a count of movies whose editor is Mark Stevens?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me a count of movies whose editor is Mark Stevens?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Mark Stevens"" .
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Mark Stevens"" .
}",8.094051362019983e-232,0.0410958904109589,True,True
230,Which Fox show is presented by Ryan Seacrest?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest> . ?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which Fox show is presented by Ryan Seacrest?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:presentedBy ?person .
  ?person dbo:name ""Ryan Seacrest"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:presentedBy ?person .
  ?person dbo:name ""Ryan Seacrest"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",8.561894227089738e-232,0.03896103896103896,False,False
1168,Name the river passing through Reading Berkshire and has mouth place at Essex?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Reading,_Berkshire> . ?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the river passing through Reading Berkshire and has mouth place at Essex?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:locatedIn ?location .
  ?location dbo:name ""Reading, Berkshire""@en .
  ?river dbo:mouthPlace ?mouthPlace .
  ?mouthPlace dbo:name ?mouthName .
  FILTER (regex(?mouthName, ""Essex"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:locatedIn ?location .
  ?location dbo:name ""Reading, Berkshire""@en .
  ?river dbo:mouthPlace ?mouthPlace .
  ?mouthPlace dbo:name ?mouthName .
  FILTER (regex(?mouthName, ""Essex"", ""i""))
}",8.319100378795605e-232,0.037037037037037035,True,True
2007,What is the currency of Republic of Montenegro (1992-2006) ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Republic_of_Montenegro_(1992–2006)> <http://dbpedia.org/property/currency> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the currency of Republic of Montenegro (1992-2006) ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?currency
WHERE {
  ?country dbo:name ""Republic of Montenegro"" .
  ?country dbo:officialCurrency ?currency .
  FILTER (regex(?country rdfs:label ""Republic of Montenegro"", ""1992-2006""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?currency
WHERE {
  ?country dbo:name ""Republic of Montenegro"" .
  ?country dbo:officialCurrency ?currency .
  FILTER (regex(?country rdfs:label ""Republic of Montenegro"", ""1992-2006""))
}",2.294894159058245e-155,0.05555555555555555,False,False
3330,What is the headquarters of Juan Dalmau Ramerez?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juan_Dalmau_Ramírez> <http://dbpedia.org/property/headquarters> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the headquarters of Juan Dalmau Ramerez?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?headquarters
WHERE {
  ?person dbo:name ""Juan Dalmau Ramerez"" .
  ?person dbo:headquarters ?headquarters .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?headquarters
WHERE {
  ?person dbo:name ""Juan Dalmau Ramerez"" .
  ?person dbo:headquarters ?headquarters .
}",2.4775553999024465e-155,0.0625,True,True
3921,Name the television program voiced by Isaac Hayes and aired on Comedy Central?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes> . ?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the television program voiced by Isaac Hayes and aired on Comedy Central?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?program
WHERE {
  ?program dbo:voicedBy ?actor .
  ?actor dbo:name ""Isaac Hayes"" .
  ?program dbo:broadcastNetwork dbo:ComedyCentral .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?program
WHERE {
  ?program dbo:voicedBy ?actor .
  ?actor dbo:name ""Isaac Hayes"" .
  ?program dbo:broadcastNetwork dbo:ComedyCentral .
}",8.510469113101058e-232,0.039473684210526314,True,True
3229,Name the award given in Norway and presented by Swedish Academy ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Swedish_Academy> . ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Norway>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the award given in Norway and presented by Swedish Academy ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?awardName
WHERE {
  ?award dbo:awardName ?awardName .
  ?award dbo:presentedBy ?presentedBy .
  ?presentedBy dbo:country ?country .
  FILTER(?country = ""Sweden"")
  ?award dbo:location ?location .
  FILTER(?location = ""Norway"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?awardName
WHERE {
  ?award dbo:awardName ?awardName .
  ?award dbo:presentedBy ?presentedBy .
  ?presentedBy dbo:country ?country .
  FILTER(?country = ""Sweden"")
  ?award dbo:location ?location .
  FILTER(?location = ""Norway"")
}",8.319100378795605e-232,0.037037037037037035,True,True
984,List all the doctoral student of the scientist who has advised John Bowlby?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/John_Bowlby> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the doctoral student of the scientist who has advised John Bowlby?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?student
WHERE {
  ?scientist dbo:advised ?bowlby .
  ?bowlby rdf:type dbo:Person .
  ?bowlby dbp:birthDate ""1907-01-26""^^xsd:date .
  ?scientist dbo:doctoralStudent ?student .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?student
WHERE {
  ?scientist dbo:advised ?bowlby .
  ?bowlby rdf:type dbo:Person .
  ?bowlby dbp:birthDate ""1907-01-26""^^xsd:date .
  ?scientist dbo:doctoralStudent ?student .
}",2.968021523431445e-155,0.06493506493506493,True,True
2052,How many saints have been venerated in Judaism?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Judaism>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Saint>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many saints have been venerated in Judaism?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?saint dbo:religion ""Judaism""^^xsd:string .
  ?saint dbo:religious_tradition ""Saint""^^xsd:string .
  FILTER (EXISTS { ?saint dbo:venerated_by ?venerator . })
}
GROUP BY ?saint
HAVING (COUNT(?venerator) > 0)
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?saint dbo:religion ""Judaism""^^xsd:string .
  ?saint dbo:religious_tradition ""Saint""^^xsd:string .
  FILTER (EXISTS { ?saint dbo:venerated_by ?venerator . })
}
GROUP BY ?saint
HAVING (COUNT(?venerator) > 0)",7.873430974476304e-232,0.0379746835443038,True,False
2771,Which non fictional subject of Thud is the athletics of PATTS College of Aeronautics ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thud!> <http://dbpedia.org/ontology/nonFictionSubject> ?uri. <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> <http://dbpedia.org/property/athletics> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which non fictional subject of Thud is the athletics of PATTS College of Aeronautics ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:subjectOf <http://dbpedia.org/resource/Thud> .
  ?subject dbo:genre ""Non-fiction""@en .
  ?subject dbp:subjectOf ?athletics .
  ?athletics dbo:wikiPageRedirects <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:subjectOf <http://dbpedia.org/resource/Thud> .
  ?subject dbo:genre ""Non-fiction""@en .
  ?subject dbp:subjectOf ?athletics .
  ?athletics dbo:wikiPageRedirects <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> .
}",2.8039101108246434e-155,0.0641025641025641,True,True
3371,What is the occupation of the band members of The Shirelles?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/The_Shirelles> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the occupation of the band members of The Shirelles?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?member ?occupation
WHERE {
  ?band dbo:members ?member .
  ?band dbo:name ""The Shirelles"" .
  ?member dbo:occupation ?occupation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?member ?occupation
WHERE {
  ?band dbo:members ?member .
  ?band dbo:name ""The Shirelles"" .
  ?member dbo:occupation ?occupation .
}",3.4945213227383114e-155,0.0821917808219178,True,True
2833,What is the religious affiliation of Hong Kong Taoist Association Tang Hin Memorial Secondary School ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hong_Kong_Taoist_Association_Tang_Hin_Memorial_Secondary_School> <http://dbpedia.org/property/religiousAffiliation> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the religious affiliation of Hong Kong Taoist Association Tang Hin Memorial Secondary School ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religiousAffiliation
WHERE {
  ?school dbo:religiousAffiliation ?religiousAffiliation .
  FILTER (regex(?school, ""Hong Kong Taoist Association Tang Hin Memorial Secondary School"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religiousAffiliation
WHERE {
  ?school dbo:religiousAffiliation ?religiousAffiliation .
  FILTER (regex(?school, ""Hong Kong Taoist Association Tang Hin Memorial Secondary School"", ""i""))
}",2.268207528392565e-155,0.05405405405405406,True,True
3974,"For how many PMs did the politician work, whose successor was Kingsley Wood?",google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Kingsley_Wood> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: For how many PMs did the politician work, whose successor was Kingsley Wood?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?politician dbo:successor ?successor .
  ?successor dbo:name ""Kingsley Wood"" .
  ?politician dbp:primeMinister ?pm .
  ?pm dbo:name ?pmName .
  GROUP BY ?politician
  
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?politician dbo:successor ?successor .
  ?successor dbo:name ""Kingsley Wood"" .
  ?politician dbp:primeMinister ?pm .
  ?pm dbo:name ?pmName .
  GROUP BY ?politician
  
}",2.384592839964215e-155,0.05,False,False
3666,In which state is the alma matter of Jan Paulsen located ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jan_Paulsen> <http://dbpedia.org/ontology/almaMater> ?x . ?x <http://dbpedia.org/property/state> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which state is the alma matter of Jan Paulsen located ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?state
WHERE {
  ?person dbo:almaMater ?university .
  ?university dbp:location ?location .
  ?location dbo:country ?country .
  FILTER ( ?person = <http://dbpedia.org/resource/Jan_Paulsen> )
  FILTER ( ?country = <http://dbpedia.org/resource/United_States> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?state
WHERE {
  ?person dbo:almaMater ?university .
  ?university dbp:location ?location .
  ?location dbo:country ?country .
  FILTER ( ?person = <http://dbpedia.org/resource/Jan_Paulsen> )
  FILTER ( ?country = <http://dbpedia.org/resource/United_States> )
}",2.5092505335702585e-155,0.07407407407407407,True,True
1059,What are the track and field events of Jamiatu Muslim Mindanao?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/property/athletics> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the track and field events of Jamiatu Muslim Mindanao?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?event
WHERE {
  ?university dbo:sportsTeam ?team .
  ?team dbo:name ""Jamiatu Muslim Mindanao"" .
  ?team dbo:participatesIn ?event .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?event
WHERE {
  ?university dbo:sportsTeam ?team .
  ?team dbo:name ""Jamiatu Muslim Mindanao"" .
  ?team dbo:participatesIn ?event .
}",2.9029053187216252e-155,0.07042253521126761,True,True
3294,Whose predecessor had Jenny Macklin as a deputy ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Jenny_Macklin> . ?uri <http://dbpedia.org/property/predecessor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose predecessor had Jenny Macklin as a deputy ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?person dbo:predecessor ?predecessor .
  ?predecessor dbo:deputy ?Macklin .
  FILTER (str(?Macklin) = ""Jenny Macklin"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?person dbo:predecessor ?predecessor .
  ?predecessor dbo:deputy ?Macklin .
  FILTER (str(?Macklin) = ""Jenny Macklin"")
}",2.6692174103668895e-155,0.06944444444444445,True,True
979,Mike Shinoda is in which band?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Mike_Shinoda> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Mike Shinoda is in which band?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?band
WHERE {
  ?person dbo:name ""Mike Shinoda"" .
  ?person dbo:memberOf ?band .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?band
WHERE {
  ?person dbo:name ""Mike Shinoda"" .
  ?person dbo:memberOf ?band .
}",8.289228799996742e-232,0.047619047619047616,True,True
2494,What is the home town of Rolando Gomez and is also the place of death of Clyde McNeal?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rolando_Gomez> <http://dbpedia.org/property/homeTown> ?uri. <http://dbpedia.org/resource/Clyde_McNeal> <http://dbpedia.org/property/deathDate> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the home town of Rolando Gomez and is also the place of death of Clyde McNeal?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?hometown ?deathplace
WHERE {
  ?rolandoGomez dbo:birthPlace ?hometown .
  ?clydeMcNeal dbo:deathPlace ?deathplace .
  FILTER(?hometown = ?deathplace)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?hometown ?deathplace
WHERE {
  ?rolandoGomez dbo:birthPlace ?hometown .
  ?clydeMcNeal dbo:deathPlace ?deathplace .
  FILTER(?hometown = ?deathplace)
}",2.6667146252330243e-155,0.05128205128205128,True,True
4214,Which hub of Cascade Airways is also the resting place of Brandon Lee ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cascade_Airways> <http://dbpedia.org/property/hubs> ?uri. <http://dbpedia.org/resource/Brandon_Lee> <http://dbpedia.org/ontology/restingPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which hub of Cascade Airways is also the resting place of Brandon Lee ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?hub
WHERE {
  ?hub dbo:hubOf ?airline .
  ?airline dbo:name ""Cascade Airways"" .
  ?hub dbo:locatedIn ?city .
  ?city dbo:name ""Los Angeles"" .
  ?city dbo:locatedIn ?state .
  ?state dbo:name ""California"" .
  ?city dbo:birthPlace ?person .
  ?person dbo:name ""Brandon Lee"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?hub
WHERE {
  ?hub dbo:hubOf ?airline .
  ?airline dbo:name ""Cascade Airways"" .
  ?hub dbo:locatedIn ?city .
  ?city dbo:name ""Los Angeles"" .
  ?city dbo:locatedIn ?state .
  ?state dbo:name ""California"" .
  ?city dbo:birthPlace ?person .
  ?person dbo:name ""Brandon Lee"" .
}",1.902304865284239e-155,0.03571428571428571,True,True
4288,What is the birthplace of the netball player who is the relative of Rachel Rasmussen ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rachel_Rasmussen> <http://dbpedia.org/property/relatives> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/NetballPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the birthplace of the netball player who is the relative of Rachel Rasmussen ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?birthplace
WHERE {
  ?player dbo:birthDate ?birth.
  ?player dbo:birthPlace ?birthplace.
  ?player dbo:family ?relative.
  ?relative dbo:name ""Rachel Rasmussen"" .
  FILTER (lang(?birth) = ""en"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?birthplace
WHERE {
  ?player dbo:birthDate ?birth.
  ?player dbo:birthPlace ?birthplace.
  ?player dbo:family ?relative.
  ?relative dbo:name ""Rachel Rasmussen"" .
  FILTER (lang(?birth) = ""en"")
}",2.205362109328438e-155,0.047619047619047616,True,True
4875,Which hockey team is head coached by Bill Peters?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Bill_Peters_(ice_hockey)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HockeyTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which hockey team is head coached by Bill Peters?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?team dbo:headCoach ?coach .
  ?coach dbo:name ""Bill Peters"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?team dbo:headCoach ?coach .
  ?coach dbo:name ""Bill Peters"" .
}",8.202720662090001e-232,0.04411764705882353,True,True
4623,Which person works at the American Magazine?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/The_American_Magazine>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which person works at the American Magazine?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:employedBy ?organization .
  ?organization dbo:name ""American Magazine"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:employedBy ?organization .
  ?organization dbo:name ""American Magazine"" .
}",2.494821638843469e-155,0.06060606060606061,True,True
481,What are the cities located on the sea into which the Aegean Sea flows?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aegean_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the cities located on the sea into which the Aegean Sea flows?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city ?cityLabel
WHERE {
  ?city dbo:locatedIn ?sea .
  ?sea dbo:subsumedBy <http://dbpedia.org/resource/Aegean_Sea> .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city ?cityLabel
WHERE {
  ?city dbo:locatedIn ?sea .
  ?sea dbo:subsumedBy <http://dbpedia.org/resource/Aegean_Sea> .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",3.171276006009064e-155,0.08860759493670886,False,False
1184,Who owns the schools which have a penguin as its mascot?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Penguin> . ?x <http://dbpedia.org/ontology/authority> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who owns the schools which have a penguin as its mascot?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?school ?owner
WHERE {
  ?school dbo:mascot ?penguin .
  ?penguin dbo:name ""Penguin"" .
  ?school dbo:owner ?owner .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?school ?owner
WHERE {
  ?school dbo:mascot ?penguin .
  ?penguin dbo:name ""Penguin"" .
  ?school dbo:owner ?owner .
}",3.0566417519593477e-155,0.06756756756756757,True,True
4309,Name the movie whose director is Stanley Kubrick and editor is Anthony Harvey?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Anthony_Harvey> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the movie whose director is Stanley Kubrick and editor is Anthony Harvey?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movie
WHERE {
  ?movie dbo:director <http://dbpedia.org/resource/Stanley_Kubrick> .
  ?movie dbo:editor <http://dbpedia.org/resource/Anthony_Harvey> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movie
WHERE {
  ?movie dbo:director <http://dbpedia.org/resource/Stanley_Kubrick> .
  ?movie dbo:editor <http://dbpedia.org/resource/Anthony_Harvey> .
}",3.195205633963664e-155,0.07142857142857142,True,True
1325,Name the movies writtten by the group Monty Python?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Monty_Python>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the movies writtten by the group Monty Python?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?movieLabel
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Monty Python"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?movieLabel
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Monty Python"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.308595628361502e-155,0.05333333333333334,False,False
4280,What show has writing of Erik Jendresen and Graham Yost?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Graham_Yost> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What show has writing of Erik Jendresen and Graham Yost?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:writer ?writer .
  ?writer dbo:name ""Erik Jendresen"" .
  FILTER (BOUND(?writer))
  ?show dbo:writer ?writer2 .
  ?writer2 dbo:name ""Graham Yost"" .
  FILTER (BOUND(?writer2))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:writer ?writer .
  ?writer dbo:name ""Erik Jendresen"" .
  FILTER (BOUND(?writer))
  ?show dbo:writer ?writer2 .
  ?writer2 dbo:name ""Graham Yost"" .
  FILTER (BOUND(?writer2))
}",2.91841165985534e-155,0.0641025641025641,True,True
204,Who were in the youth clubs that were in season of 2015 Argentine Primera Division?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/season> <http://dbpedia.org/resource/2015_Argentine_Primera_División> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who were in the youth clubs that were in season of 2015 Argentine Primera Division?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player
WHERE {
  ?club dbo:season ?season .
  ?season dbo:year ""2015""^^xsd:gYear .
  ?club dbo:league dbp:Argentine_Primera_Division .
  ?club dbo:youthClub ?youthClub .
  ?youthClub dbo:member ?player .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player
WHERE {
  ?club dbo:season ?season .
  ?season dbo:year ""2015""^^xsd:gYear .
  ?club dbo:league dbp:Argentine_Primera_Division .
  ?club dbo:youthClub ?youthClub .
  ?youthClub dbo:member ?player .
}",3.3023594192188504e-155,0.0759493670886076,True,True
3020,Which city near to Elliott Bay was the death place of George F. Moore?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elliott_Bay> <http://dbpedia.org/ontology/nearestCity> ?uri. <http://dbpedia.org/resource/George_F._Moore_(lieutenant_governor)> <http://dbpedia.org/property/placeOfDeath> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which city near to Elliott Bay was the death place of George F. Moore?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?person dbo:deathPlace ?city .
  ?person dbo:name ""George F. Moore"" .
  ?city dbo:locatedIn ?location .
  ?location dbo:near ?bay .
  ?bay dbo:name ""Elliott Bay"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?person dbo:deathPlace ?city .
  ?person dbo:name ""George F. Moore"" .
  ?city dbo:locatedIn ?location .
  ?location dbo:near ?bay .
  ?bay dbo:name ""Elliott Bay"" .
}",2.0194805030799393e-155,0.037037037037037035,True,True
2972,List all the mebers of Mekong River Commission?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mekong_River_Commission> <http://dbpedia.org/property/membership> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the mebers of Mekong River Commission?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?member
WHERE {
  ?member dbo:memberOf ?commission .
  ?commission dbo:name ""Mekong River Commission"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?member
WHERE {
  ?member dbo:memberOf ?commission .
  ?commission dbo:name ""Mekong River Commission"" .
}",3.032816514970993e-155,0.07462686567164178,True,True
2922,"What are Breann McGregor and Anika Knudsen, both known for?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Breann_McGregor> <http://dbpedia.org/property/knownFor> ?uri. <http://dbpedia.org/resource/Anika_Knudsen> <http://dbpedia.org/property/knownFor> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are Breann McGregor and Anika Knudsen, both known for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?knownFor
WHERE {
  ?person a dbo:Person ;
    dbp:knownFor ?knownFor .
  FILTER (regex(?person, ""Breann McGregor"", ""i"") || regex(?person, ""Anika Knudsen"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?knownFor
WHERE {
  ?person a dbo:Person ;
    dbp:knownFor ?knownFor .
  FILTER (regex(?person, ""Breann McGregor"", ""i"") || regex(?person, ""Anika Knudsen"", ""i""))
}",3.0566417519593477e-155,0.0759493670886076,True,True
3507,Who are the shareholders of the soccer club for whom Steve Holland plays?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Steve_Holland_(footballer)> <http://dbpedia.org/property/currentclub> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the shareholders of the soccer club for whom Steve Holland plays?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?shareholder
WHERE {
  ?player dbo:playsFor ?club .
  ?player rdf:type dbo:SoccerPlayer .
  ?player dbo:name ""Steve Holland""^^xsd:string .
  ?club dbo:shareholder ?shareholder .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?shareholder
WHERE {
  ?player dbo:playsFor ?club .
  ?player rdf:type dbo:SoccerPlayer .
  ?player dbo:name ""Steve Holland""^^xsd:string .
  ?club dbo:shareholder ?shareholder .
}",2.968021523431445e-155,0.06578947368421052,True,True
640,List the broadcast area of the TV stations which also serves in Agalga?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/broadcastArea> <http://dbpedia.org/resource/Agaléga> . ?x <http://dbpedia.org/property/broadcastArea> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the broadcast area of the TV stations which also serves in Agalga?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?station ?broadcastArea
WHERE {
  ?station dbo:location dbo:Agalga .
  ?station dbo:broadcastArea ?broadcastArea .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?station ?broadcastArea
WHERE {
  ?station dbo:location dbo:Agalga .
  ?station dbo:broadcastArea ?broadcastArea .
}",3.559043432561587e-155,0.0821917808219178,True,True
304,What is the place of birth of the stars of Auto Shankar ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Auto_Shankar_(film)> <http://dbpedia.org/property/starring> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the place of birth of the stars of Auto Shankar ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?place
WHERE {
  ?person dbo:birthPlace ?place .
  ?person dbo:name ""Auto Shankar"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?place
WHERE {
  ?person dbo:birthPlace ?place .
  ?person dbo:name ""Auto Shankar"" .
}",3.1742523358973992e-155,0.07246376811594203,True,True
1335,Whose opponents are Ike Clanton and Billy Clanton?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Ike_Clanton> . ?uri <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Billy_Clanton> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose opponents are Ike Clanton and Billy Clanton?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?opponent
WHERE {
  ?person dbo:name ""Ike Clanton"" .
  ?person dbp:opponent ?opponent .
  UNION
  ?person dbo:name ""Billy Clanton"" .
  ?person dbp:opponent ?opponent .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?opponent
WHERE {
  ?person dbo:name ""Ike Clanton"" .
  ?person dbp:opponent ?opponent .
  UNION
  ?person dbo:name ""Billy Clanton"" .
  ?person dbp:opponent ?opponent .
}",3.5156372159951298e-155,0.08695652173913043,False,False
4387,In how many places have people canonized by John Paul II died?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Pope_John_Paul_II> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In how many places have people canonized by John Paul II died?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?person dbo:canonizedBy ?pope .
  ?pope dbo:name ""John Paul II""^^xsd:string .
  ?person dbo:deathPlace ?place .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?person dbo:canonizedBy ?pope .
  ?pope dbo:name ""John Paul II""^^xsd:string .
  ?person dbo:deathPlace ?place .
}",2.3983374600418706e-155,0.04878048780487805,True,True
919,Whose theme music was composed by a band which collaborated with Phish?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Phish> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose theme music was composed by a band which collaborated with Phish?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person ?themeMusic
WHERE {
  ?person dbo:themeMusic ?themeMusic .
  ?themeMusic dbo:composer ?composer .
  ?composer dbo:collaboratedWith ?collaborator .
  ?collaborator dbo:name ""Phish"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person ?themeMusic
WHERE {
  ?person dbo:themeMusic ?themeMusic .
  ?themeMusic dbo:composer ?composer .
  ?composer dbo:collaboratedWith ?collaborator .
  ?collaborator dbo:name ""Phish"" .
}",3.3566500347661918e-155,0.07792207792207792,True,True
4856,How many cars succeed the cars assembled in Canada?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Canada> . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many cars succeed the cars assembled in Canada?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?car dbo:assemblyLocation dbp:Canada .
  ?successor dbo:successorOf ?car .
  FILTER NOT EXISTS { ?successor dbo:assemblyLocation dbp:Canada }
  
}
GROUP BY ?car
COUNT(?successor) AS ?count
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?car dbo:assemblyLocation dbp:Canada .
  ?successor dbo:successorOf ?car .
  FILTER NOT EXISTS { ?successor dbo:assemblyLocation dbp:Canada }
  
}
GROUP BY ?car
COUNT(?successor) AS ?count",2.4123225276763925e-155,0.05263157894736842,False,False
349,List down the schools whose mascot's order is Even-toed ungulate?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Even-toed_ungulate> . ?uri <http://dbpedia.org/property/mascot> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List down the schools whose mascot's order is Even-toed ungulate?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?school
WHERE {
  ?school dbo:mascot ?mascot .
  ?mascot dbo:classification dbo:Even_toed_ungulate .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?school
WHERE {
  ?school dbo:mascot ?mascot .
  ?mascot dbo:classification dbo:Even_toed_ungulate .
}",3.7246750897077527e-155,0.08695652173913043,True,True
4110,What are the important buildings of the architect whose one of the significant building is Krasnye Vorota?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/significantBuilding> <http://dbpedia.org/resource/Krasnye_Vorota_(Moscow_Metro)> . ?x <http://dbpedia.org/ontology/significantBuilding> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the important buildings of the architect whose one of the significant building is Krasnye Vorota?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?architect ?architectLabel ?building ?buildingLabel
WHERE {
  ?building dbo:architect ?architect .
  ?building rdfs:label ""Krasnye Vorota""@en .
  ?architect rdfs:label ?architectLabel .
  ?building rdfs:label ?buildingLabel .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?architect ?architectLabel ?building ?buildingLabel
WHERE {
  ?building dbo:architect ?architect .
  ?building rdfs:label ""Krasnye Vorota""@en .
  ?architect rdfs:label ?architectLabel .
  ?building rdfs:label ?buildingLabel .
}",2.8409841948588806e-155,0.0641025641025641,True,True
431,List the stadium of the teams which uses Nea Smyrni as one of the stadium?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/stadium> <http://dbpedia.org/resource/Nea_Smyrni_Stadium> . ?x <http://dbpedia.org/property/stadium> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the stadium of the teams which uses Nea Smyrni as one of the stadium?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team ?stadium
WHERE {
  ?team dbo:stadium ?stadium .
  ?stadium dbo:location dbp:Nea_Smyrni .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team ?stadium
WHERE {
  ?team dbo:stadium ?stadium .
  ?stadium dbo:location dbp:Nea_Smyrni .
}",3.5156372159951298e-155,0.08450704225352113,True,True
630,Which company is the parent company of Chevrolet Spark?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chevrolet_Spark> <http://dbpedia.org/property/parentCompany> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which company is the parent company of Chevrolet Spark?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parentCompany WHERE {
  ?car dbo:brand ""Chevrolet"" .
  ?car dbo:model ""Spark"" .
  ?car dbo:parentCompany ?parentCompany .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parentCompany WHERE {
  ?car dbo:brand ""Chevrolet"" .
  ?car dbo:model ""Spark"" .
  ?car dbo:parentCompany ?parentCompany .
}",2.427831263680579e-155,0.06153846153846154,True,True
2296,Name the office holder with associate as Marcus Calpurnius Bibulus and has a kid named Augustus?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Augustus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the office holder with associate as Marcus Calpurnius Bibulus and has a kid named Augustus?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?officeHolder
WHERE {
  ?officeHolder dbo:associate ?associate .
  ?associate dbo:name ""Marcus Calpurnius Bibulus""^^xsd:string .
  ?officeHolder dbo:child ?child .
  ?child dbo:name ""Augustus""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?officeHolder
WHERE {
  ?officeHolder dbo:associate ?associate .
  ?associate dbo:name ""Marcus Calpurnius Bibulus""^^xsd:string .
  ?officeHolder dbo:child ?child .
  ?child dbo:name ""Augustus""^^xsd:string .
}",2.3192471031465984e-155,0.05,True,True
3945,How many different organizations own the railway lines which are a part of Norfolk Southern Railway?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/system> <http://dbpedia.org/resource/Norfolk_Southern_Railway> . ?x <http://dbpedia.org/property/owner> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many different organizations own the railway lines which are a part of Norfolk Southern Railway?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?organizationCount
WHERE {
  ?railway dbo:partOf ?nsRailway .
  ?nsRailway dbo:ownedBy ?organization .
  GROUP BY ?organization
  
  
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?organizationCount
WHERE {
  ?railway dbo:partOf ?nsRailway .
  ?nsRailway dbo:ownedBy ?organization .
  GROUP BY ?organization
  
  
}",2.426555136425675e-155,0.05,False,False
3245,Mota Engil built bridges over which rivers?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/builder> <http://dbpedia.org/resource/Mota-Engil> . ?x <http://dbpedia.org/ontology/crosses> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Mota Engil built bridges over which rivers?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river
WHERE {
  ?company dbo:constructionProject ?project .
  ?project dbo:location ?location .
  ?location dbo:locatedIn ?river .
  FILTER ( ?company = <http://dbpedia.org/resource/Mota-Engil> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river
WHERE {
  ?company dbo:constructionProject ?project .
  ?project dbo:location ?location .
  ?location dbo:locatedIn ?river .
  FILTER ( ?company = <http://dbpedia.org/resource/Mota-Engil> )
}",3.157656468883577e-155,0.07792207792207792,True,True
601,Does the Vadodara Railway station lie at the end of the Mathura Vadodara route?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Mathura–Vadodara_Section> <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Vadodara_Junction_railway_station> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the Vadodara Railway station lie at the end of the Mathura Vadodara route?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Vadodara Railway station"" .
  ?x dbo:location dbp:location_of_railway_station ?y .
  ?y dbo:name ""Mathura Vadodara route"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Vadodara Railway station"" .
  ?x dbo:location dbp:location_of_railway_station ?y .
  ?y dbo:name ""Mathura Vadodara route"" .
}",2.0868169697040566e-155,0.04225352112676056,False,False
929,Which television show is the subsequent work of Frasier and the opening theme is Gary Portnoy?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Frasier> . ?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Gary_Portnoy>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which television show is the subsequent work of Frasier and the opening theme is Gary Portnoy?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:previousWork ?frasier .
  ?frasier dbo:title ""Frasier"" .
  ?show dbp:openingTheme ?theme .
  ?theme dbo:composer ""Gary Portnoy"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:previousWork ?frasier .
  ?frasier dbo:title ""Frasier"" .
  ?show dbp:openingTheme ?theme .
  ?theme dbo:composer ""Gary Portnoy"" .
}",8.34186146802972e-232,0.0379746835443038,True,True
677,Who was the bronze medalist of Swimming at the 2008 Summer Olympics Men's 400 metre individual medley?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Swimming_at_the_2008_Summer_Olympics_–_Men's_400_metre_individual_medley> <http://dbpedia.org/ontology/bronzeMedalist> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the bronze medalist of Swimming at the 2008 Summer Olympics Men's 400 metre individual medley?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?athlete
WHERE {
  ?athlete dbo:olympicMedal ""Bronze""^^xsd:string .
  ?athlete dbo:olympicGames <http://dbpedia.org/resource/2008_Summer_Olympics> .
  ?athlete dbo:sport dbp:Swimming .
  ?athlete dbo:olympicEvent <http://dbpedia.org/resource/Men%27s_400_metre_individual_medley> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?athlete
WHERE {
  ?athlete dbo:olympicMedal ""Bronze""^^xsd:string .
  ?athlete dbo:olympicGames <http://dbpedia.org/resource/2008_Summer_Olympics> .
  ?athlete dbo:sport dbp:Swimming .
  ?athlete dbo:olympicEvent <http://dbpedia.org/resource/Men%27s_400_metre_individual_medley> .
}",2.2175133245798802e-155,0.05194805194805195,True,True
112,What is the province of Rouen Business School?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rouen_Business_School> <http://dbpedia.org/property/province> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the province of Rouen Business School?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?province
WHERE {
  ?school dbo:location ?location .
  ?location dbo:country ""France"" .
  ?location dbo:administrativeRegion ?province .
  FILTER (regex(?school, ""Rouen Business School"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?province
WHERE {
  ?school dbo:location ?location .
  ?location dbo:country ""France"" .
  ?location dbo:administrativeRegion ?province .
  FILTER (regex(?school, ""Rouen Business School"", ""i""))
}",2.3512210545397443e-155,0.05714285714285714,True,True
3351,In which part of the world can i find Xynisteri and Mavro?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xynisteri> <http://dbpedia.org/ontology/origin> ?uri. <http://dbpedia.org/resource/Mavro> <http://dbpedia.org/ontology/origin> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which part of the world can i find Xynisteri and Mavro?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?wine a dbo:Wine .
  ?wine dbo:variety ""Xynisteri""^^xsd:string .
  ?wine dbo:variety ""Mavro""^^xsd:string .
  ?wine dbo:origin ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?wine a dbo:Wine .
  ?wine dbo:variety ""Xynisteri""^^xsd:string .
  ?wine dbo:variety ""Mavro""^^xsd:string .
  ?wine dbo:origin ?location .
}",3.3624125453069686e-155,0.08333333333333333,True,True
2793,List the universities with athletics NCAA Division I Football Bowl Subdivision?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/athletics> <http://dbpedia.org/resource/NCAA_Division_I_Football_Bowl_Subdivision>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the universities with athletics NCAA Division I Football Bowl Subdivision?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university
WHERE {
  ?university dbo:wikiPageRedirects* dbo:University .
  ?university dbo:sportsTeam ?team .
  ?team dbo:sportsLeague ?league .
  ?league dbo:name ""NCAA Division I Football Bowl Subdivision"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university
WHERE {
  ?university dbo:wikiPageRedirects* dbo:University .
  ?university dbo:sportsTeam ?team .
  ?team dbo:sportsLeague ?league .
  ?league dbo:name ""NCAA Division I Football Bowl Subdivision"" .
}",2.2552086692851858e-155,0.05405405405405406,True,True
1652,Who produced the Pixar Image Computer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Pixar_Image_Computer>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who produced the Pixar Image Computer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?producer
WHERE {
  ?computer dbo:producedBy ?producer .
  FILTER (regex(?computer, ""Pixar Image Computer"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?producer
WHERE {
  ?computer dbo:producedBy ?producer .
  FILTER (regex(?computer, ""Pixar Image Computer"", ""i""))
}",8.875825067922154e-232,0.06153846153846154,True,True
1758,Which football players currently have their contracts with Stoke City F.C.?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/Stoke_City_F.C.> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which football players currently have their contracts with Stoke City F.C.?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?player ?playerLabel
WHERE {
  ?player dbo:playsFor ?club .
  ?club dbo:name ""Stoke City F.C."" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?player ?playerLabel
WHERE {
  ?player dbo:playsFor ?club .
  ?club dbo:name ""Stoke City F.C."" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.2552086692851858e-155,0.05194805194805195,False,False
3408,Give me an estimate number of races where horses grandsired by the Wild Risk have raced in?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/grandsire> <http://dbpedia.org/resource/Wild_Risk> . ?x <http://dbpedia.org/property/race> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HorseRace>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me an estimate number of races where horses grandsired by the Wild Risk have raced in?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?race) AS ?raceCount)
WHERE {
  ?horse dbo:grandsire ?grandsire .
  ?grandsire dbo:name ""Wild Risk""^^xsd:string .
  ?horse dbo:participatedIn ?race .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?race) AS ?raceCount)
WHERE {
  ?horse dbo:grandsire ?grandsire .
  ?grandsire dbo:name ""Wild Risk""^^xsd:string .
  ?horse dbo:participatedIn ?race .
}",2.344734865707205e-155,0.046511627906976744,True,True
4547,List the destinations of Novair International Airways ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Novair_International_Airways> <http://dbpedia.org/property/destinations> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the destinations of Novair International Airways ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?destination
WHERE {
  ?airline dbo:airlineDestinations ?destination .
  FILTER (str(?airline) = ""Novair International Airways"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?destination
WHERE {
  ?airline dbo:airlineDestinations ?destination .
  FILTER (str(?airline) = ""Novair International Airways"")
}",3.0940944781388835e-155,0.07462686567164178,True,True
3151,What is the common product of the Apple Productivity Experience Group and services of the 21Vianet ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Apple_Productivity_Experience_Group> <http://dbpedia.org/ontology/product> ?uri. <http://dbpedia.org/resource/21Vianet> <http://dbpedia.org/property/services> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the common product of the Apple Productivity Experience Group and services of the 21Vianet ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?product
WHERE {
  ?group dbo:product ?product .
  ?group rdfs:label ""Apple Productivity Experience Group"" .
  ?service dbo:product ?product .
  ?service rdfs:label ""21Vianet"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?product
WHERE {
  ?group dbo:product ?product .
  ?group rdfs:label ""Apple Productivity Experience Group"" .
  ?service dbo:product ?product .
  ?service rdfs:label ""21Vianet"" .
}",2.5806662832054458e-155,0.05194805194805195,True,True
1139,Which president of the United States had vice president as John Adams?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/John_Adams>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which president of the United States had vice president as John Adams?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?president
WHERE {
  ?president dbo:vicePresident ?johnAdams .
  ?johnAdams dbo:name ""John Adams"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?president
WHERE {
  ?president dbo:vicePresident ?johnAdams .
  ?johnAdams dbo:name ""John Adams"" .
}",8.120546156106983e-232,0.043478260869565216,True,True
3452,Is Rajya Sabha a house of parliament in India?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Parliament_of_India> <http://dbpedia.org/property/houses> <http://dbpedia.org/resource/Rajya_Sabha> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Rajya Sabha a house of parliament in India?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Rajya Sabha"" .
  ?x dbo:partOf ?y .
  ?y dbo:name ""Parliament of India"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Rajya Sabha"" .
  ?x dbo:partOf ?y .
  ?y dbo:name ""Parliament of India"" .
}",2.215756877004116e-155,0.045454545454545456,True,True
983,Which associated band of the Teddy Riley is also the performer of the Before I Let You Go?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Teddy_Riley> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Before_I_Let_You_Go> <http://dbpedia.org/ontology/musicalArtist> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which associated band of the Teddy Riley is also the performer of the Before I Let You Go?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?band
WHERE {
  ?artist dbo:associatedBand ?band .
  ?artist dbo:name ""Teddy Riley"" .
  ?band dbo:name ""Before I Let You Go"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?band
WHERE {
  ?artist dbo:associatedBand ?band .
  ?artist dbo:name ""Teddy Riley"" .
  ?band dbo:name ""Before I Let You Go"" .
}",2.0411965960034616e-155,0.038461538461538464,True,True
650,Who are the former partners of the figure skaters whose performance have been choreographed by Catarina Lindgren in the past?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/formerChoreographer> <http://dbpedia.org/resource/Catarina_Lindgren> . ?x <http://dbpedia.org/ontology/formerPartner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FigureSkater>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the former partners of the figure skaters whose performance have been choreographed by Catarina Lindgren in the past?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?formerPartner
WHERE {
  ?skater dbo:partner ?formerPartner .
  ?skater dbo:choreography ?choreography .
  ?choreography dbo:choreographer Catarina Lindgren .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?formerPartner
WHERE {
  ?skater dbo:partner ?formerPartner .
  ?skater dbo:choreography ?choreography .
  ?choreography dbo:choreographer Catarina Lindgren .
}",2.8559767164037747e-155,0.060240963855421686,False,False
3153,Name the sovereign state of Wallington railway station ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wallington_railway_station> <http://dbpedia.org/ontology/country> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the sovereign state of Wallington railway station ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?sovereignState
WHERE {
  ?station dbo:name ""Wallington railway station"" .
  ?station dbp:locatedIn ?location .
  ?location dbo:country ?sovereignState .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?sovereignState
WHERE {
  ?station dbo:name ""Wallington railway station"" .
  ?station dbp:locatedIn ?location .
  ?location dbo:country ?sovereignState .
}",2.3962983105918537e-155,0.05970149253731343,True,True
2316,Which admin center of pulau Ujong is also the largest city of Pulau Ubin ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/largestCity> ?uri. <http://dbpedia.org/resource/Pulau_Ujong> <http://dbpedia.org/ontology/capital> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which admin center of pulau Ujong is also the largest city of Pulau Ubin ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?city dbo:adminCenterOf ?location .
  ?location dbo:name ""Pulau Ujong""^^xsd:string .
  ?city dbo:locatedIn ?location2 .
  ?location2 dbo:name ""Pulau Ubin""^^xsd:string .
  ?city dbo:population ?population .
  FILTER ( ?population > 0 )
  ?city dbo:largestCityOf ?location3 .
  ?location3 dbo:name ""Pulau Ubin""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?city dbo:adminCenterOf ?location .
  ?location dbo:name ""Pulau Ujong""^^xsd:string .
  ?city dbo:locatedIn ?location2 .
  ?location2 dbo:name ""Pulau Ubin""^^xsd:string .
  ?city dbo:population ?population .
  FILTER ( ?population > 0 )
  ?city dbo:largestCityOf ?location3 .
  ?location3 dbo:name ""Pulau Ubin""^^xsd:string .
}",1.876064362016577e-155,0.034482758620689655,True,True
4898,Who was the parent of person whose child is William C P breckinridge?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/William_Campbell_Preston_Breckinridge> . ?x <http://dbpedia.org/ontology/parent> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the parent of person whose child is William C P breckinridge?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parent
WHERE {
  ?child dbo:child ?parent .
  FILTER (regex(?child, ""William C P breckinridge"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parent
WHERE {
  ?child dbo:child ?parent .
  FILTER (regex(?child, ""William C P breckinridge"", ""i""))
}",2.3809857162598948e-155,0.05333333333333334,True,True
4495,Which serving railway line of the Daund Junction railway station is the home port of INS Viraat ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/INS_Viraat_(R22)> <http://dbpedia.org/ontology/homeport> ?uri. <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which serving railway line of the Daund Junction railway station is the home port of INS Viraat ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?railwayLine
WHERE {
  ?station dbo:name ""Daund Junction"" .
  ?station dbo:servingRailwayLine ?railwayLine .
  ?railwayLine rdfs:label ?label .
  FILTER (regex(?label, ""INS Viraat"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?railwayLine
WHERE {
  ?station dbo:name ""Daund Junction"" .
  ?station dbo:servingRailwayLine ?railwayLine .
  ?railwayLine rdfs:label ?label .
  FILTER (regex(?label, ""INS Viraat"", ""i""))
}",2.5806662832054458e-155,0.047619047619047616,True,True
3836,Where does the network cofounded by Seewoosagur Ramgoolam air its shows?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Seewoosagur_Ramgoolam> . ?x <http://dbpedia.org/property/broadcastArea> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where does the network cofounded by Seewoosagur Ramgoolam air its shows?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?channel
WHERE {
  ?person dbo:birthPlace ""Mauritius"" .
  ?person dbo:name ""Seewoosagur Ramgoolam"" .
  ?person dbo:cofounded ?network .
  ?network dbp:broadcastsOn ?channel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?channel
WHERE {
  ?person dbo:birthPlace ""Mauritius"" .
  ?person dbo:name ""Seewoosagur Ramgoolam"" .
  ?person dbo:cofounded ?network .
  ?network dbp:broadcastsOn ?channel .
}",2.4123225276763925e-155,0.05194805194805195,True,True
4129,Is Robin Gibb the singer of Oh! Darling?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Oh!_Darling> <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Robin_Gibb> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Robin Gibb the singer of Oh! Darling?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:name ""Robin Gibb"" .
  ?x dbo:artist ""Oh! Darling"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:name ""Robin Gibb"" .
  ?x dbo:artist ""Oh! Darling"" .
}",2.259351571061102e-155,0.045454545454545456,True,True
4923,Which  person has opponent Ike Clanton?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Ike_Clanton>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which  person has opponent Ike Clanton?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:opponent ?opponent .
  ?opponent dbo:name ""Ike Clanton"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:opponent ?opponent .
  ?opponent dbo:name ""Ike Clanton"" .
}",8.289228799996742e-232,0.046153846153846156,True,True
993,What organisations purpose is Peace?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Peace>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What organisations purpose is Peace?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?organisation ?purpose
WHERE {
  ?organisation dbo:purpose ?purpose .
  FILTER (regex(?purpose, ""Peace"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?organisation ?purpose
WHERE {
  ?organisation dbo:purpose ?purpose .
  FILTER (regex(?purpose, ""Peace"", ""i""))
}",2.530465559854518e-155,0.06060606060606061,True,True
370,What are Monrow Carell Jr Children Hospital and Vanderbilt University Medical Center both affiliated with?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Monroe_Carell_Jr._Children's_Hospital_at_Vanderbilt> <http://dbpedia.org/property/affiliation> ?uri. <http://dbpedia.org/resource/Vanderbilt_University_Medical_Center> <http://dbpedia.org/property/affiliation> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are Monrow Carell Jr Children Hospital and Vanderbilt University Medical Center both affiliated with?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?affiliation
WHERE {
  ?hospital dbo:affiliatedWith ?affiliation .
  FILTER (regex(?hospital, ""Monrow Carell Jr Children Hospital"", ""i"") || regex(?hospital, ""Vanderbilt University Medical Center"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?affiliation
WHERE {
  ?hospital dbo:affiliatedWith ?affiliation .
  FILTER (regex(?hospital, ""Monrow Carell Jr Children Hospital"", ""i"") || regex(?hospital, ""Vanderbilt University Medical Center"", ""i""))
}",2.9346708496857675e-155,0.07317073170731707,True,True
1975,Name the office holder whose constituency is Haight-Ashbury?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Haight-Ashbury>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the office holder whose constituency is Haight-Ashbury?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?name
WHERE {
  ?person dbo:constituency ?constituency .
  ?constituency dbo:name ""Haight-Ashbury"" .
  ?person dbo:name ?name .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?name
WHERE {
  ?person dbo:constituency ?constituency .
  ?constituency dbo:name ""Haight-Ashbury"" .
  ?person dbo:name ?name .
}",8.147480343967206e-232,0.045454545454545456,True,True
4238,Who is the builder of the Stadium of Costa Rica women's national football team?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Costa_Rica_women's_national_football_team> <http://dbpedia.org/ontology/stadium> ?x . ?x <http://dbpedia.org/ontology/builder> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the builder of the Stadium of Costa Rica women's national football team?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?builder
WHERE {
  ?stadium dbo:builder ?builder .
  ?stadium dbp:name ""Stadium of Costa Rica"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?builder
WHERE {
  ?stadium dbo:builder ?builder .
  ?stadium dbp:name ""Stadium of Costa Rica"" .
}",2.50170125957988e-155,0.05555555555555555,True,True
3112,Which musical artists have collaborated with Waylon Jennings?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Waylon_Jennings>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which musical artists have collaborated with Waylon Jennings?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:collaborator ?waylon .
  ?waylon dbo:name ""Waylon Jennings"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:collaborator ?waylon .
  ?waylon dbo:name ""Waylon Jennings"" .
}",2.4775553999024465e-155,0.058823529411764705,True,True
2129,Does Ronaldinho play in the brazil's under 23 team?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Ronaldinho> <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Brazil_national_under-23_football_team> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Ronaldinho play in the brazil's under 23 team?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x rdf:type dbo:SportsTeam .
  ?x dbo:name ""Brazil U23"" .
  ?x dbo:member ?player .
  ?player dbo:name ""Ronaldinho"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x rdf:type dbo:SportsTeam .
  ?x dbo:name ""Brazil U23"" .
  ?x dbo:member ?player .
  ?player dbo:name ""Ronaldinho"" .
}",2.1483903094550452e-155,0.043478260869565216,True,True
1620,"Where did the president study, who's the president of Besiktas JK?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Beşiktaş_JK_(wheelchair_basketball)> <http://dbpedia.org/ontology/president> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the president study, who's the president of Besiktas JK?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?president ?presidentEducation
WHERE {
  ?president dbo:nationality ""Turkish"" .
  ?president dbo:position ""President"" .
  ?president dbo:memberOf <http://dbpedia.org/resource/Beşiktaş_J.K.> .
  ?president dbo:education ?presidentEducation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?president ?presidentEducation
WHERE {
  ?president dbo:nationality ""Turkish"" .
  ?president dbo:position ""President"" .
  ?president dbo:memberOf <http://dbpedia.org/resource/Beşiktaş_J.K.> .
  ?president dbo:education ?presidentEducation .
}",3.0025357216578434e-155,0.0684931506849315,True,True
3964,Who designed the stadiums which have been rented by Oakland athletics?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Oakland_Athletics> . ?x <http://dbpedia.org/property/architect> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who designed the stadiums which have been rented by Oakland athletics?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?designer
WHERE {
  ?stadium dbo:architect ?designer .
  ?stadium dbp:sportsTeam ?team .
  ?team dbo:name ""Oakland Athletics"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?designer
WHERE {
  ?stadium dbo:architect ?designer .
  ?stadium dbp:sportsTeam ?team .
  ?team dbo:name ""Oakland Athletics"" .
}",3.0566417519593477e-155,0.06578947368421052,True,True
4744,What is the launch site of the Juno I which was also the ground of 2016 Fort Lauderdale Strikers season ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juno_I> <http://dbpedia.org/ontology/launchSite> ?uri. <http://dbpedia.org/resource/2016_Fort_Lauderdale_Strikers_season> <http://dbpedia.org/ontology/ground> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the launch site of the Juno I which was also the ground of 2016 Fort Lauderdale Strikers season ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?launchSite
WHERE {
  ?spacecraft dbo:name ""Juno I"" .
  ?spacecraft dbo:launchSite ?launchSite .
  ?ground dbo:name ""2016 Fort Lauderdale Strikers season"" .
  ?ground dbo:location ?launchSite .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?launchSite
WHERE {
  ?spacecraft dbo:name ""Juno I"" .
  ?spacecraft dbo:launchSite ?launchSite .
  ?ground dbo:name ""2016 Fort Lauderdale Strikers season"" .
  ?ground dbo:location ?launchSite .
}",1.968084453516327e-155,0.03614457831325301,True,True
1243,Where did the 2015 MLS All-Star Game take place?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_MLS_All-Star_Game> <http://dbpedia.org/property/city> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the 2015 MLS All-Star Game take place?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?game dbo:location ?location .
  FILTER (regex(?game, ""2015 MLS All-Star Game"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?game dbo:location ?location .
  FILTER (regex(?game, ""2015 MLS All-Star Game"", ""i""))
}",2.4440718429993668e-155,0.05970149253731343,True,True
3883,Name the branch of Carroll E. Lanier ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carroll_E._Lanier> <http://dbpedia.org/property/branch> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the branch of Carroll E. Lanier ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?branch
WHERE {
  ?person dbo:name ""Carroll E. Lanier"" .
  ?person dbo:branch ?branch .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?branch
WHERE {
  ?person dbo:name ""Carroll E. Lanier"" .
  ?person dbo:branch ?branch .
}",2.4775553999024465e-155,0.0625,True,True
3585,List the common official language of the ladonia and Empire of Atlantium ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ladonia_(micronation)> <http://dbpedia.org/ontology/officialLanguage> ?uri. <http://dbpedia.org/resource/Empire_of_Atlantium> <http://dbpedia.org/ontology/officialLanguage> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the common official language of the ladonia and Empire of Atlantium ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?language
WHERE {
  ?country dbo:officialLanguage ?language .
  FILTER (regex(?country, ""Ladonia"", ""i"") || regex(?country, ""Atlantium"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?language
WHERE {
  ?country dbo:officialLanguage ?language .
  FILTER (regex(?country, ""Ladonia"", ""i"") || regex(?country, ""Atlantium"", ""i""))
}",3.0943809285865547e-155,0.08,True,True
1287,Which awards have been given to the horse who sired Triplicate?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Triplicate> <http://dbpedia.org/property/sire> ?x . ?x <http://dbpedia.org/ontology/honours> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which awards have been given to the horse who sired Triplicate?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?award
WHERE {
  ?horse dbo:sired ?offspring .
  ?offspring dbp:name ""Triplicate""^^xsd:string .
  ?horse dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?award
WHERE {
  ?horse dbo:sired ?offspring .
  ?offspring dbp:name ""Triplicate""^^xsd:string .
  ?horse dbo:award ?award .
}",3.53714058675999e-155,0.08108108108108109,True,True
1781,Terminal Station at Chattanooga is made by architects from which University?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Terminal_Station_(Chattanooga)> . ?x <http://dbpedia.org/property/education> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Terminal Station at Chattanooga is made by architects from which University?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?university
WHERE {
  ?station dbo:architect ?architect .
  ?architect dbo:memberOf ?university .
  ?station rdfs:label ""Terminal Station at Chattanooga"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?university
WHERE {
  ?station dbo:architect ?architect .
  ?architect dbo:memberOf ?university .
  ?station rdfs:label ""Terminal Station at Chattanooga"" .
}",2.4410426763339902e-155,0.05263157894736842,True,True
4804,Which constructor's team won the 1967 Mexican Grand Prix ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1967_Mexican_Grand_Prix> <http://dbpedia.org/property/firstTeam> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which constructor's team won the 1967 Mexican Grand Prix ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?constructor ?team
WHERE {
  ?constructor dbo:driver ?driver .
  ?driver dbp:participatedInRace ?race .
  ?race dbo:name ""1967 Mexican Grand Prix"" .
  ?team dbo:teamOf ?driver .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?constructor ?team
WHERE {
  ?constructor dbo:driver ?driver .
  ?driver dbp:participatedInRace ?race .
  ?race dbo:name ""1967 Mexican Grand Prix"" .
  ?team dbo:teamOf ?driver .
}",2.2552086692851858e-155,0.05555555555555555,True,True
4070,What is the origin of Xynisteri?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xynisteri> <http://dbpedia.org/ontology/origin> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the origin of Xynisteri?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?origin
WHERE {
  ?wine dbo:origin ?origin .
  FILTER (regex(?wine, ""Xynisteri"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?origin
WHERE {
  ?wine dbo:origin ?origin .
  FILTER (regex(?wine, ""Xynisteri"", ""i""))
}",2.5488701582353735e-155,0.06349206349206349,True,True
4167,where did Deion Sanders debut?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Deion_Sanders> <http://dbpedia.org/property/debutteam> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: where did Deion Sanders debut?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?debutLocation
WHERE {
  ?person dbo:name ""Deion Sanders"" .
  ?person dbo:debutLocation ?debutLocation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?debutLocation
WHERE {
  ?person dbo:name ""Deion Sanders"" .
  ?person dbo:debutLocation ?debutLocation .
}",2.5488701582353735e-155,0.06451612903225806,True,True
3257,Give me some administrators of bridges over which cars can go?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/carries> <http://dbpedia.org/resource/Motor_vehicle> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me some administrators of bridges over which cars can go?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bridge ?admin
WHERE {
  ?bridge dbo:type dbo:Bridge .
  ?bridge dbp:hasVehicleType ""car"" .
  ?bridge dbo:hasAdministrator ?admin .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bridge ?admin
WHERE {
  ?bridge dbo:type dbo:Bridge .
  ?bridge dbp:hasVehicleType ""car"" .
  ?bridge dbo:hasAdministrator ?admin .
}",3.0566417519593477e-155,0.06578947368421052,True,True
2688,Who were the pole drivers in GP when Damon hill was the first driver?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/firstDriver> <http://dbpedia.org/resource/Damon_Hill> . ?x <http://dbpedia.org/ontology/poleDriver> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who were the pole drivers in GP when Damon hill was the first driver?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?driver
WHERE {
  ?driver dbo:birthDate ?birthDate .
  ?driver dbo:profession ""Formula One driver""^^rdfs:Literal .
  ?driver dbo:participatedInEvent ?event .
  ?event dbo:name ""British Grand Prix"" .
  ?event dbo:startYear ?startYear .
  FILTER(?startYear = 1996)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?driver
WHERE {
  ?driver dbo:birthDate ?birthDate .
  ?driver dbo:profession ""Formula One driver""^^rdfs:Literal .
  ?driver dbo:participatedInEvent ?event .
  ?event dbo:name ""British Grand Prix"" .
  ?event dbo:startYear ?startYear .
  FILTER(?startYear = 1996)
}",2.7832917260583544e-155,0.056818181818181816,True,True
4837,Is San Salvador Island a part of the Bahamas?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/San_Salvador_Island> <http://dbpedia.org/ontology/archipelago> <http://dbpedia.org/resource/The_Bahamas> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is San Salvador Island a part of the Bahamas?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:country ""Bahamas"" .
  ?x dbo:partOf ?y .
  ?y dbo:name ""San Salvador Island"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:country ""Bahamas"" .
  ?x dbo:partOf ?y .
  ?y dbo:name ""San Salvador Island"" .
}",2.2300068516948962e-155,0.046153846153846156,True,True
1411,Who is the developer of Montecito Inn?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Montecito_Inn> <http://dbpedia.org/property/developer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the developer of Montecito Inn?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?developer
WHERE {
  ?hotel dbo:developer ?developer .
  FILTER (str(?hotel) = ""Montecito Inn"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?developer
WHERE {
  ?hotel dbo:developer ?developer .
  FILTER (str(?hotel) = ""Montecito Inn"")
}",2.5124539841526692e-155,0.06153846153846154,True,True
817,Henry McDaniel's trained horses have won which awards?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Henry_McDaniel_(racehorse_trainer)> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Henry McDaniel's trained horses have won which awards?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?horse dbo:trainedBy <http://dbpedia.org/resource/Henry_McDaniel> .
  ?horse dbo:wins ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?horse dbo:trainedBy <http://dbpedia.org/resource/Henry_McDaniel> .
  ?horse dbo:wins ?award .
}",3.2833699258334827e-155,0.07246376811594203,True,True
2119,List all crafts of the people whose one of the profession is Kingdom of Naples ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Kingdom_of_Naples> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all crafts of the people whose one of the profession is Kingdom of Naples ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?craft
WHERE {
  ?person dbo:profession dbp:Kingdom_of_Naples .
  ?person dbo:craft ?craft .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?craft
WHERE {
  ?person dbo:profession dbp:Kingdom_of_Naples .
  ?person dbo:craft ?craft .
}",3.0382827129023445e-155,0.06756756756756757,True,True
3203,Which gadgets are made by companies of New Taipei City?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/locationCity> <http://dbpedia.org/resource/New_Taipei_City> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which gadgets are made by companies of New Taipei City?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?gadget ?company
WHERE {
  ?gadget dbo:manufacturer ?company .
  ?company dbo:location dbo:NewTaipeiCity .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?gadget ?company
WHERE {
  ?gadget dbo:manufacturer ?company .
  ?company dbo:location dbo:NewTaipeiCity .
}",3.627276877392474e-155,0.08333333333333333,True,True
1149,Where does Dennis DeConcini and Scott Berkun both live?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Scott_Berkun> <http://dbpedia.org/property/residence> ?uri. <http://dbpedia.org/resource/Dennis_DeConcini> <http://dbpedia.org/property/residence> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where does Dennis DeConcini and Scott Berkun both live?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?person dbo:birthDate ?birth_date .
  ?person dbo:placeOfBirth ?location .
  FILTER ( ?person IN ( dbo:Dennis_DeConcini , dbo:Scott_Berkun ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?person dbo:birthDate ?birth_date .
  ?person dbo:placeOfBirth ?location .
  FILTER ( ?person IN ( dbo:Dennis_DeConcini , dbo:Scott_Berkun ) )
}",3.0566417519593477e-155,0.08,True,True
1835,Which club of perianne Lones is also the home town of the Kady O'Malley ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kady_O'Malley> <http://dbpedia.org/property/homeTown> ?uri. <http://dbpedia.org/resource/Perianne_Jones> <http://dbpedia.org/property/club> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which club of perianne Lones is also the home town of the Kady O'Malley ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?club
WHERE {
  ?person dbo:birthPlace ?town .
  ?town rdfs:label ""Kady O'Malley"" .
  ?person dbo:memberOf ?club .
  ?club dbo:location ?town .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?club
WHERE {
  ?person dbo:birthPlace ?town .
  ?town rdfs:label ""Kady O'Malley"" .
  ?person dbo:memberOf ?club .
  ?club dbo:location ?town .
}",2.637082623203696e-155,0.05128205128205128,True,True
1154,"Who is the person whose home town is Fairmount, Indiana?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Fairmount,_Indiana>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the person whose home town is Fairmount, Indiana?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:birthPlace dbp:Fairmount_Indiana .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:birthPlace dbp:Fairmount_Indiana .
}",8.319100378795605e-232,0.046875,True,True
3037,Where was the deadbody discovered of one of the alumni of General Educational Development?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/education> <http://dbpedia.org/resource/General_Educational_Development> . ?x <http://dbpedia.org/property/bodyDiscovered> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where was the deadbody discovered of one of the alumni of General Educational Development?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?person dbo:alumniOf <http://dbpedia.org/resource/General_Educational_Development> .
  ?person dbo:deathPlace ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?person dbo:alumniOf <http://dbpedia.org/resource/General_Educational_Development> .
  ?person dbo:deathPlace ?location .
}",3.954266712463121e-155,0.09722222222222222,True,True
2844,Name the common distributing label of the Chinga Chang Records and StandBy Records?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chinga_Chang_Records> <http://dbpedia.org/ontology/distributingLabel> ?uri. <http://dbpedia.org/resource/StandBy_Records> <http://dbpedia.org/ontology/distributingLabel> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the common distributing label of the Chinga Chang Records and StandBy Records?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?label
WHERE {
  ?recordLabel dbo:distributedBy ?recordCompany .
  ?recordCompany dbo:name ""Chinga Chang Records"" .
  ?recordCompany dbo:name ""StandBy Records"" .
  ?recordLabel rdfs:label ?label .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?label
WHERE {
  ?recordLabel dbo:distributedBy ?recordCompany .
  ?recordCompany dbo:name ""Chinga Chang Records"" .
  ?recordCompany dbo:name ""StandBy Records"" .
  ?recordLabel rdfs:label ?label .
}",3.229753418204598e-155,0.07894736842105263,True,True
382,Give the distinct number of other party of the people which have one of the party as Janata Party?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/otherParty> <http://dbpedia.org/resource/Janata_Party> . ?x <http://dbpedia.org/ontology/otherParty> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give the distinct number of other party of the people which have one of the party as Janata Party?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?otherParty
WHERE {
  ?person dbo:party ?party .
  ?party dbo:name ""Janata Party""^^xsd:string .
  ?person dbp:otherParty ?otherParty .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?otherParty
WHERE {
  ?person dbo:party ?party .
  ?party dbo:name ""Janata Party""^^xsd:string .
  ?person dbp:otherParty ?otherParty .
}",2.968021523431445e-155,0.07894736842105263,True,True
1157,List the shows whose company's successor is Amblin Television.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Amblin_Television> . ?uri <http://dbpedia.org/ontology/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the shows whose company's successor is Amblin Television.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?show
WHERE {
  ?show dbo:company ?company .
  ?company dbo:successor ?successor .
  ?successor dbo:name ""Amblin Television"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?show
WHERE {
  ?show dbo:company ?company .
  ?company dbo:successor ?successor .
  ?successor dbo:name ""Amblin Television"" .
}",3.1537059338519422e-155,0.06944444444444445,True,True
2578,Who is the publisher of The Rolling Stone Album Guide ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Rolling_Stone_Album_Guide> <http://dbpedia.org/ontology/publisher> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the publisher of The Rolling Stone Album Guide ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?publisher
WHERE {
  ?book dbo:title ""The Rolling Stone Album Guide"" .
  ?book dbo:publisher ?publisher .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?publisher
WHERE {
  ?book dbo:title ""The Rolling Stone Album Guide"" .
  ?book dbo:publisher ?publisher .
}",2.3962983105918537e-155,0.05970149253731343,True,True
4587,Name the river mouth of Moordener Kill ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moordener_Kill> <http://dbpedia.org/ontology/riverMouth> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the river mouth of Moordener Kill ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?riverMouth
WHERE {
  ?riverMouth dbo:mouthOf ?kill .
  ?kill dbo:name ""Moordener Kill"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?riverMouth
WHERE {
  ?riverMouth dbo:mouthOf ?kill .
  ?kill dbo:name ""Moordener Kill"" .
}",2.494821638843469e-155,0.0625,True,True
4116,What do the banks owned by Norwegian ministry of finance produce?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentCompany> <http://dbpedia.org/resource/Ministry_of_Finance_(Norway)> . ?x <http://dbpedia.org/property/products> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What do the banks owned by Norwegian ministry of finance produce?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?product
WHERE {
  ?bank dbo:country ""Norway""^^xsd:string .
  ?bank dbo:owner ?owner .
  ?owner dbo:name ""Norwegian Ministry of Finance""^^xsd:string .
  ?bank dbo:produces ?product .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?product
WHERE {
  ?bank dbo:country ""Norway""^^xsd:string .
  ?bank dbo:owner ?owner .
  ?owner dbo:name ""Norwegian Ministry of Finance""^^xsd:string .
  ?bank dbo:produces ?product .
}",2.951204860745888e-155,0.06329113924050633,True,True
4601,Katharevousa writers have been given which awards?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/movement> <http://dbpedia.org/resource/Katharevousa> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Katharevousa writers have been given which awards?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?writer dbo:birthPlace ""Greece"" .
  ?writer dbo:language ""Katharevousa"" .
  ?writer dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?writer dbo:birthPlace ""Greece"" .
  ?writer dbo:language ""Katharevousa"" .
  ?writer dbo:award ?award .
}",3.1537059338519422e-155,0.06944444444444445,True,True
1864,List the school of Bobby Skinstad?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bobby_Skinstad> <http://dbpedia.org/property/school> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the school of Bobby Skinstad?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Bobby Skinstad"" .
  ?person dbo:school ?school .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Bobby Skinstad"" .
  ?person dbo:school ?school .
}",2.530465559854518e-155,0.06451612903225806,True,True
3391,What is the municipality of Homestead Grays Bridge ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Homestead_Grays_Bridge> <http://dbpedia.org/ontology/municipality> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the municipality of Homestead Grays Bridge ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?municipality
WHERE {
  ?bridge dbo:location ?location .
  ?location dbp:municipality ?municipality .
  FILTER ( ?bridge = <http://dbpedia.org/resource/Homestead_Grays_Bridge> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?municipality
WHERE {
  ?bridge dbo:location ?location .
  ?location dbp:municipality ?municipality .
  FILTER ( ?bridge = <http://dbpedia.org/resource/Homestead_Grays_Bridge> )
}",2.533776972251024e-155,0.07246376811594203,True,True
3250,What is the area of Tar Heel Sports Network ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tar_Heel_Sports_Network> <http://dbpedia.org/property/area> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the area of Tar Heel Sports Network ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?area
WHERE {
  ?network dbo:area ?area .
  FILTER (regex(?network, ""Tar Heel Sports Network"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?area
WHERE {
  ?network dbo:area ?area .
  FILTER (regex(?network, ""Tar Heel Sports Network"", ""i""))
}",2.427831263680579e-155,0.058823529411764705,True,True
2118,What is the official residence of Sarah Kazemy ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sarah_Kazemy> <http://dbpedia.org/property/residence> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the official residence of Sarah Kazemy ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?residence
WHERE {
  ?person dbo:name ""Sarah Kazemy"" .
  ?person dbo:officialResidence ?residence .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?residence
WHERE {
  ?person dbo:name ""Sarah Kazemy"" .
  ?person dbo:officialResidence ?residence .
}",2.4775553999024465e-155,0.06153846153846154,True,True
254,Who are the politicians whose death place is Ontario?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Ontario>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the politicians whose death place is Ontario?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?politician ?politicianLabel
WHERE {
  ?politician dbo:deathPlace dbp:Ontario .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?politician ?politicianLabel
WHERE {
  ?politician dbo:deathPlace dbp:Ontario .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.4119102000777368e-155,0.056338028169014086,False,False
4065,"Through which important cities the does the river originating from the Duwamish, flow?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Green_River_(Duwamish_River)> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Through which important cities the does the river originating from the Duwamish, flow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?river dbo:source ?source .
  ?source dbo:name ""Duwamish"" .
  ?river dbo:flowsThrough ?city .
  FILTER (lang(?city) = 'en')
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?river dbo:source ?source .
  ?source dbo:name ""Duwamish"" .
  ?river dbo:flowsThrough ?city .
  FILTER (lang(?city) = 'en')
}",2.968021523431445e-155,0.06329113924050633,True,True
2199,What are some bands out to texarkana?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/origin> <http://dbpedia.org/resource/Texarkana,_Texas>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some bands out to texarkana?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?band ?bandLabel
WHERE {
  ?band dbo:genre ""Rock Music"" .
  ?band dbp:location ""Texarkana"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?band ?bandLabel
WHERE {
  ?band dbo:genre ""Rock Music"" .
  ?band dbp:location ""Texarkana"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.3659629744803227e-155,0.0547945205479452,False,False
2955,Whose children are married to Fredric Joliot-Curie?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Frédéric_Joliot-Curie> . ?uri <http://dbpedia.org/property/children> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose children are married to Fredric Joliot-Curie?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:spouse FredricJoliotCurie .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:spouse FredricJoliotCurie .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",3.2566703570358492e-155,0.08333333333333333,False,False
3897,How many information appliance are manufactured by companies located in Taiwan?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/locationCity> <http://dbpedia.org/resource/Taiwan> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many information appliance are manufactured by companies located in Taiwan?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?infoAppliance) AS ?count)
WHERE {
  ?infoAppliance dbo:type dbo:InformationAppliance .
  ?infoAppliance dbo:manufacturer ?manufacturer .
  ?manufacturer dbo:country ""Taiwan"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?infoAppliance) AS ?count)
WHERE {
  ?infoAppliance dbo:type dbo:InformationAppliance .
  ?infoAppliance dbo:manufacturer ?manufacturer .
  ?manufacturer dbo:country ""Taiwan"" .
}",2.455792850056901e-155,0.05063291139240506,True,True
2968,List the battles in which alumni of US Army Command and General Staff College fought?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/United_States_Army_Command_and_General_Staff_College> . ?x <http://dbpedia.org/property/battles> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the battles in which alumni of US Army Command and General Staff College fought?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?battle
WHERE {
  ?person dbo:alumniOf <http://dbpedia.org/resource/United_States_Army_Command_and_General_Staff_College> .
  ?person dbo:involvedIn ?battle .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?battle
WHERE {
  ?person dbo:alumniOf <http://dbpedia.org/resource/United_States_Army_Command_and_General_Staff_College> .
  ?person dbo:involvedIn ?battle .
}",3.929931607904104e-155,0.09333333333333334,True,True
3946,"What is the job of the George Arceneaux, Jr. which is also the office of the Blanche Bruce?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/George_Arceneaux,_Jr.> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/Blanche_Bruce> <http://dbpedia.org/property/office> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the job of the George Arceneaux, Jr. which is also the office of the Blanche Bruce?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?job
WHERE {
  ?person dbo:birthPlace ""Louisiana, USA"" .
  ?person dbo:job ?job .
  FILTER (STR(?person) = ""http://dbpedia.org/resource/George_Arceneaux,_Jr."")
  ?person2 dbo:birthPlace ""Mississippi, USA"" .
  ?person2 dbo:job ?job .
  FILTER (STR(?person2) = ""http://dbpedia.org/resource/Blanche_Bruce"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?job
WHERE {
  ?person dbo:birthPlace ""Louisiana, USA"" .
  ?person dbo:job ?job .
  FILTER (STR(?person) = ""http://dbpedia.org/resource/George_Arceneaux,_Jr."")
  ?person2 dbo:birthPlace ""Mississippi, USA"" .
  ?person2 dbo:job ?job .
  FILTER (STR(?person2) = ""http://dbpedia.org/resource/Blanche_Bruce"")
}",1.978049756642675e-155,0.0375,True,True
720,How many services does the company who made Onedrive provide?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/service> <http://dbpedia.org/resource/OneDrive> . ?x <http://dbpedia.org/property/services> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many services does the company who made Onedrive provide?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?count
WHERE {
  ?company dbo:product ?product .
  ?product rdfs:label ""Onedrive"" .
  ?company dbo:offersService ?service .
  GROUP BY ?company
  
  
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?count
WHERE {
  ?company dbo:product ?product .
  ?product rdfs:label ""Onedrive"" .
  ?company dbo:offersService ?service .
  GROUP BY ?company
  
  
}",2.5703190919374843e-155,0.06578947368421052,False,False
2980,What sports are played at Vishwajyot High School?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vishwajyot_High_School> <http://dbpedia.org/ontology/sport> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What sports are played at Vishwajyot High School?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?sport
WHERE {
  ?school dbo:sports ?sport .
  FILTER (regex(?school, ""Vishwajyot High School"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?sport
WHERE {
  ?school dbo:sports ?sport .
  FILTER (regex(?school, ""Vishwajyot High School"", ""i""))
}",3.0940944781388835e-155,0.07352941176470588,True,True
3586,What is the name of the characters created by Frank Miller?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Frank_Miller_(comics)> . ?x <http://dbpedia.org/property/characterName> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the name of the characters created by Frank Miller?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?characterName
WHERE {
  ?character dbo:creator dbr:Frank_Miller .
  ?character rdfs:label ?characterName .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?characterName
WHERE {
  ?character dbo:creator dbr:Frank_Miller .
  ?character rdfs:label ?characterName .
}",2.5502845355614067e-155,0.056338028169014086,True,True
2799,Which sports are played in schools founded by Fr Almeida?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Fr._Almeida> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports are played in schools founded by Fr Almeida?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?school dbo:founder ?founder .
  ?founder dbo:name ""Fr Almeida"" .
  ?school dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?school dbo:founder ?founder .
  ?founder dbo:name ""Fr Almeida"" .
  ?school dbo:sports ?sport .
}",3.075337680136661e-155,0.06578947368421052,True,True
3139,What is the division of Serbia national American football team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Serbia_national_American_football_team> <http://dbpedia.org/ontology/division> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the division of Serbia national American football team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?division
WHERE {
  ?team dbo:nationalTeamOf ""Serbia"" .
  ?team dbo:sportsTeamDivision ?division .
  FILTER (regex(?team, ""American football"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?division
WHERE {
  ?team dbo:nationalTeamOf ""Serbia"" .
  ?team dbo:sportsTeamDivision ?division .
  FILTER (regex(?team, ""American football"", ""i""))
}",2.3809857162598948e-155,0.056338028169014086,True,True
113,What religions do politicians in the Korean Minjoo Party follow?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Minjoo_Party_of_Korea> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What religions do politicians in the Korean Minjoo Party follow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?religion
WHERE {
  ?politician dbo:memberOf <http://dbpedia.org/resource/Korean_Minjoo_Party> .
  ?politician dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?religion
WHERE {
  ?politician dbo:memberOf <http://dbpedia.org/resource/Korean_Minjoo_Party> .
  ?politician dbo:religion ?religion .
}",3.1742523358973992e-155,0.06944444444444445,True,True
644,Name a scientist whose official residence is Cape Town and also won a gold medal at the Royal Astronomical Society ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Gold_Medal_of_the_Royal_Astronomical_Society> . ?uri <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Cape_Town>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name a scientist whose official residence is Cape Town and also won a gold medal at the Royal Astronomical Society ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:officialResidence dbp:CapeTown .
  ?scientist dbo:award dbp:GoldMedal .
  ?scientist dbo:award rdfs:label ""Gold Medal"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:officialResidence dbp:CapeTown .
  ?scientist dbo:award dbp:GoldMedal .
  ?scientist dbo:award rdfs:label ""Gold Medal"" .
}",2.306811013701292e-155,0.04819277108433735,False,False
2790,What other awards have been given to Golden Globe winners?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Golden_Globe_Award> . ?x <http://dbpedia.org/property/awards> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What other awards have been given to Golden Globe winners?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?winner dbo:award ?award .
  FILTER (regex(?award, ""Golden Globe"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?winner dbo:award ?award .
  FILTER (regex(?award, ""Golden Globe"", ""i""))
}",3.216579438360415e-155,0.0821917808219178,True,True
2201,Which cover artist of the The Adventures of Tom Sawyer is also the source of inspiration of The Appple Tree ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> <http://dbpedia.org/ontology/coverArtist> ?uri. <http://dbpedia.org/resource/The_Apple_Tree> <http://dbpedia.org/ontology/basedOn> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which cover artist of the The Adventures of Tom Sawyer is also the source of inspiration of The Appple Tree ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:coverArtist ?book .
  ?book dbo:title ""The Adventures of Tom Sawyer""^^xsd:string .
  ?artist dbo:inspiration ?inspiration .
  ?inspiration dbo:title ""The Apple Tree""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:coverArtist ?book .
  ?book dbo:title ""The Adventures of Tom Sawyer""^^xsd:string .
  ?artist dbo:inspiration ?inspiration .
  ?inspiration dbo:title ""The Apple Tree""^^xsd:string .
}",2.4900858824700132e-155,0.04878048780487805,True,True
2062,"Where was Live in Detroit, MI recorded and was also palce of birth of the Bodhin Kjolhede?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri. <http://dbpedia.org/resource/Bodhin_Kjolhede> <http://dbpedia.org/property/placeOfBirth> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where was Live in Detroit, MI recorded and was also palce of birth of the Bodhin Kjolhede?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?album ?city
WHERE {
  ?album dbo:recordingLocation ?city .
  ?album dbo:title ""Live in Detroit, MI"" .
  ?person dbo:placeOfBirth ?city .
  ?person dbo:name ""Bodhin Kjolhede"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?album ?city
WHERE {
  ?album dbo:recordingLocation ?city .
  ?album dbo:title ""Live in Detroit, MI"" .
  ?person dbo:placeOfBirth ?city .
  ?person dbo:name ""Bodhin Kjolhede"" .
}",2.553782876480489e-155,0.04938271604938271,True,True
519,What is the label of things produced by the band If?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/If_(band)> . ?x <http://dbpedia.org/property/label> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the label of things produced by the band If?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?label
WHERE {
  ?band dbo:name ""If""@en .
  ?band dbo:produced ?work .
  ?work rdfs:label ?label .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?label
WHERE {
  ?band dbo:name ""If""@en .
  ?band dbo:produced ?work .
  ?work rdfs:label ?label .
}",3.0943809285865547e-155,0.06944444444444445,True,True
2487,How many non fiction topics does Thud! deals with?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Thud!> <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many non fiction topics does Thud! deals with?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?topic) AS ?count)
WHERE {
  ?book dbo:title ""Thud!"" .
  ?book dbo:genre ?genre .
  ?genre dbo:subGenre ?topic .
  FILTER(?genre != ""Fiction"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?topic) AS ?count)
WHERE {
  ?book dbo:title ""Thud!"" .
  ?book dbo:genre ?genre .
  ?genre dbo:subGenre ?topic .
  FILTER(?genre != ""Fiction"")
}",2.426555136425675e-155,0.0641025641025641,True,True
2304,What are the names of the casualties of Eric Harris and Dylan Klebold?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/deathCause> <http://dbpedia.org/resource/Eric_Harris_and_Dylan_Klebold>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the names of the casualties of Eric Harris and Dylan Klebold?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?casualtyName
WHERE {
  ?event dbo:victim ?casualty .
  ?casualty dbo:name ?casualtyName .
  FILTER (regex(?event, ""Eric Harris and Dylan Klebold"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?casualtyName
WHERE {
  ?event dbo:victim ?casualty .
  ?casualty dbo:name ?casualtyName .
  FILTER (regex(?event, ""Eric Harris and Dylan Klebold"", ""i""))
}",2.294894159058245e-155,0.0547945205479452,True,True
3092,Name the common editor of Easy Street (film) and Work (film)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Easy_Street_(film)> <http://dbpedia.org/ontology/editing> ?uri. <http://dbpedia.org/resource/Work_(film)> <http://dbpedia.org/ontology/editing> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the common editor of Easy Street (film) and Work (film)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?editor
WHERE {
  ?film dbo:director ?editor .
  FILTER ( ?film IN (
    <http://dbpedia.org/resource/Easy_Street_(film)>,
    <http://dbpedia.org/resource/Work_(film)>
  ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?editor
WHERE {
  ?film dbo:director ?editor .
  FILTER ( ?film IN (
    <http://dbpedia.org/resource/Easy_Street_(film)>,
    <http://dbpedia.org/resource/Work_(film)>
  ) )
}",3.2361225152319982e-155,0.0958904109589041,True,True
3949,Which royalty's spouse is Ptolemy XIV of Egypt?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ptolemy_XIV_of_Egypt>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which royalty's spouse is Ptolemy XIV of Egypt?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?royalty
WHERE {
  ?royalty dbo:spouse ?person .
  ?person dbo:birthDate ""1st century BC""^^xsd:gYear .
  ?person dbo:name ""Ptolemy XIV"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?royalty
WHERE {
  ?royalty dbo:spouse ?person .
  ?person dbo:birthDate ""1st century BC""^^xsd:gYear .
  ?person dbo:name ""Ptolemy XIV"" .
}",8.06798322521923e-232,0.04225352112676056,True,True
512,Who is the fictional character whose relative is Vestigial Peter?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Vestigial_Peter>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the fictional character whose relative is Vestigial Peter?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?character
WHERE {
  ?character dbo:relative ?relative .
  ?relative dbo:name ""Vestigial Peter"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?character
WHERE {
  ?character dbo:relative ?relative .
  ?relative dbo:name ""Vestigial Peter"" .
}",8.174867218666773e-232,0.04477611940298507,True,True
2090,Who is married to Susan Weber Soros?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Susan_Weber_Soros>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is married to Susan Weber Soros?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouse
WHERE {
  ?person dbo:spouse ?spouse .
  FILTER ( ?spouse = <http://dbpedia.org/resource/Susan_Weber_Soros> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouse
WHERE {
  ?person dbo:spouse ?spouse .
  FILTER ( ?spouse = <http://dbpedia.org/resource/Susan_Weber_Soros> )
}",9.352284301430419e-232,0.07462686567164178,True,True
3154,Which TV show's theme was composed by a band in which Todd Huth used to perform?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Todd_Huth> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which TV show's theme was composed by a band in which Todd Huth used to perform?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?show ?band
WHERE {
  ?show dbo:theme ?theme .
  ?theme dbo:composer ?composer .
  ?composer dbo:memberOf ?band .
  ?band dbo:member ?person .
  ?person dbo:name ""Todd Huth""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?show ?band
WHERE {
  ?show dbo:theme ?theme .
  ?theme dbo:composer ?composer .
  ?composer dbo:memberOf ?band .
  ?band dbo:member ?person .
  ?person dbo:name ""Todd Huth""^^xsd:string .
}",2.8262253362411533e-155,0.058823529411764705,True,True
4260,Which mainter of Pandaruan Bridge is also the land of Malaysia junior Hockey league ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pandaruan_Bridge> <http://dbpedia.org/ontology/maintainedBy> ?uri. <http://dbpedia.org/resource/Malaysia_Junior_Hockey_League> <http://dbpedia.org/ontology/country> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which mainter of Pandaruan Bridge is also the land of Malaysia junior Hockey league ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?maintainer ?land
WHERE {
  ?maintainer dbo:maintainerOf <http://dbpedia.org/resource/Pandaruan_Bridge> .
  ?land dbo:locationOf <http://dbpedia.org/resource/Malaysia_junior_Hockey_league> .
  ?maintainer rdfs:label ?maintainerLabel .
  ?land rdfs:label ?landLabel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?maintainer ?land
WHERE {
  ?maintainer dbo:maintainerOf <http://dbpedia.org/resource/Pandaruan_Bridge> .
  ?land dbo:locationOf <http://dbpedia.org/resource/Malaysia_junior_Hockey_league> .
  ?maintainer rdfs:label ?maintainerLabel .
  ?land rdfs:label ?landLabel .
}",2.788375385094078e-155,0.06329113924050633,True,True
4335,Which scientist is known for writing Philosophi Naturalis Principia Mathematica?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Philosophiæ_Naturalis_Principia_Mathematica> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which scientist is known for writing Philosophi Naturalis Principia Mathematica?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?scientist
WHERE {
  ?scientist dbo:birthPlace ?birthPlace .
  ?scientist dbo:knownFor dbp:Philosophi_Naturalis_Principia_Mathematica .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?scientist
WHERE {
  ?scientist dbo:birthPlace ?birthPlace .
  ?scientist dbo:knownFor dbp:Philosophi_Naturalis_Principia_Mathematica .
}",8.202720662090001e-232,0.046153846153846156,True,True
551,Which boarder country of Korean Peninsula was the state of Sodagreen?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Korean_Peninsula> <http://dbpedia.org/ontology/border> ?uri. <http://dbpedia.org/resource/Sodagreen> <http://dbpedia.org/ontology/country> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which boarder country of Korean Peninsula was the state of Sodagreen?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?band dbo:country ?country .
  ?band dbo:name ""Sodagreen"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?band dbo:country ?country .
  ?band dbo:name ""Sodagreen"" .
}",2.8496950006247937e-155,0.056338028169014086,True,True
3517,Was True Grit a novel of the western genre?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/True_Grit_(novel)> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Western_(genre)> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was True Grit a novel of the western genre?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?genre
WHERE {
  ?movie dbo:genre ?genre .
  FILTER ( ?genre = dbo:Western )
  ?movie dbo:title ""True Grit"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?genre
WHERE {
  ?movie dbo:genre ?genre .
  FILTER ( ?genre = dbo:Western )
  ?movie dbo:title ""True Grit"" .
}",2.215756877004116e-155,0.04411764705882353,True,True
886,What is the draft team of Gene Conley?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gene_Conley> <http://dbpedia.org/property/draftTeam> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the draft team of Gene Conley?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?draftTeam
WHERE {
  ?person dbo:name ""Gene Conley"" .
  ?person dbp:draftTeam ?draftTeam .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?draftTeam
WHERE {
  ?person dbo:name ""Gene Conley"" .
  ?person dbp:draftTeam ?draftTeam .
}",2.494821638843469e-155,0.0625,True,True
4429,Which child of Jack Ferguson became a Prime Minister?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ferguson> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which child of Jack Ferguson became a Prime Minister?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?child
WHERE {
  ?child dbo:father ?jack .
  ?jack dbo:name ""Jack Ferguson"" .
  ?child dbo:occupation ""Prime Minister"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?child
WHERE {
  ?child dbo:father ?jack .
  ?jack dbo:name ""Jack Ferguson"" .
  ?child dbo:occupation ""Prime Minister"" .
}",3.0943809285865547e-155,0.0684931506849315,True,True
613,List the newspapers which has headquarters in Stockholm?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Stockholm>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the newspapers which has headquarters in Stockholm?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?newspaper
WHERE {
  ?newspaper dbo:wikiPageRedirects* dbr:Stockholm
  ?newspaper dbo:headquarters ?location .
  ?location dbo:country ?country .
  FILTER ( ?country = dbr:Sweden )
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?newspaper
WHERE {
  ?newspaper dbo:wikiPageRedirects* dbr:Stockholm
  ?newspaper dbo:headquarters ?location .
  ?location dbo:country ?country .
  FILTER ( ?country = dbr:Sweden )
}",2.308595628361502e-155,0.05333333333333334,False,False
2027,GetTV is owned by which organisation?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: GetTV is owned by which organisation?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organisation
WHERE {
  <http://dbpedia.org/resource/GetTV> dbo:ownedBy ?organisation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organisation
WHERE {
  <http://dbpedia.org/resource/GetTV> dbo:ownedBy ?organisation .
}",9.59903638430083e-79,0.08333333333333333,True,True
1780,Which companies are founded in the city of which Collin County Texas is a part?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/part> <http://dbpedia.org/resource/Collin_County,_Texas> . ?uri <http://dbpedia.org/ontology/foundationPlace> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which companies are founded in the city of which Collin County Texas is a part?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?county dbo:locatedIn ?city .
  ?city dbo:country ?country .
  FILTER(?country = <http://dbpedia.org/resource/United_States>)
  ?county dbp:name ""Collin County, Texas"" .
  ?company dbo:foundedIn ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?county dbo:locatedIn ?city .
  ?city dbo:country ?country .
  FILTER(?country = <http://dbpedia.org/resource/United_States>)
  ?county dbp:name ""Collin County, Texas"" .
  ?company dbo:foundedIn ?city .
}",2.8559767164037747e-155,0.058823529411764705,True,True
2579,In which country was Gumus first aired which is also the mouth country of Upper Neretva?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Upper_Neretva> <http://dbpedia.org/ontology/mouthCountry> ?uri. <http://dbpedia.org/resource/Gümüş_(TV_series)> <http://dbpedia.org/property/firstAired> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which country was Gumus first aired which is also the mouth country of Upper Neretva?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?country
WHERE {
  ?tvShow dbo:country ?country .
  ?tvShow dbo:name ""Gumus"" .
  ?river dbo:mouth ?location .
  ?location dbo:country ?country .
  ?river dbo:name ""Upper Neretva"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?country
WHERE {
  ?tvShow dbo:country ?country .
  ?tvShow dbo:name ""Gumus"" .
  ?river dbo:mouth ?location .
  ?location dbo:country ?country .
  ?river dbo:name ""Upper Neretva"" .
}",2.0194805030799393e-155,0.0379746835443038,True,True
4941,Which band had members who are now in The Bleeding Heart Band?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/The_Bleeding_Heart_Band> . ?uri <http://dbpedia.org/ontology/formerBandMember> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which band had members who are now in The Bleeding Heart Band?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?band
WHERE {
  ?band dbo:member ?musician .
  ?musician dbo:member <http://dbpedia.org/resource/The_Bleeding_Heart_Band> .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?band
WHERE {
  ?band dbo:member ?musician .
  ?musician dbo:member <http://dbpedia.org/resource/The_Bleeding_Heart_Band> .
}",3.6040982025556637e-155,0.08108108108108109,True,True
4990,Who are the tenants of the stadium which is a venue of WCW Mayhem ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WCW_Mayhem> <http://dbpedia.org/property/venue> ?x . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the tenants of the stadium which is a venue of WCW Mayhem ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?tenant
WHERE {
  ?stadium dbo:venueOf ?event .
  ?event dbo:name ""WCW Mayhem"" .
  ?stadium dbo:tenant ?tenant .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?tenant
WHERE {
  ?stadium dbo:venueOf ?event .
  ?event dbo:name ""WCW Mayhem"" .
  ?stadium dbo:tenant ?tenant .
}",2.9851289841006984e-155,0.06493506493506493,True,True
4175,What kind of games are made by Interplay Entertainment?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Interplay_Entertainment> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What kind of games are made by Interplay Entertainment?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?gameType
WHERE {
  ?game dbo:producer Interplay Entertainment .
  ?game dbo:genre ?gameType .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?gameType
WHERE {
  ?game dbo:producer Interplay Entertainment .
  ?game dbo:genre ?gameType .
}",3.2383880054191053e-155,0.07142857142857142,False,False
51,Where did the office holder died who is successor to Elmer Burkett ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Elmer_Burkett> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the office holder died who is successor to Elmer Burkett ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?successor dbo:successorOf ?predecessor .
  ?predecessor dbo:name ""Elmer Burkett"" .
  ?successor dbo:deathPlace ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?successor dbo:successorOf ?predecessor .
  ?predecessor dbo:name ""Elmer Burkett"" .
  ?successor dbo:deathPlace ?location .
}",2.486113577066771e-155,0.05333333333333334,True,True
2109,What religion is Kabir Suman from?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/birthName> <http://dbpedia.org/resource/Kabir_Suman> . ?x <http://dbpedia.org/property/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What religion is Kabir Suman from?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religion
WHERE {
  <http://dbpedia.org/resource/Kabir_Suman> dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religion
WHERE {
  <http://dbpedia.org/resource/Kabir_Suman> dbo:religion ?religion .
}",3.4569587276028865e-155,0.09523809523809523,True,True
1361,Which person's successor is Samsu-iluna?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Samsu-iluna>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which person's successor is Samsu-iluna?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:successor Samsu-iluna .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:successor Samsu-iluna .
}",8.477028509227734e-232,0.04918032786885246,False,False
3562,Who owns the broadcast network founded by CNN?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/CNN> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who owns the broadcast network founded by CNN?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?owner
WHERE {
  ?network dbo:foundedBy <http://dbpedia.org/resource/Ted_Turner> .
  ?network dbo:parentOrganization ?owner .
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?owner
WHERE {
  ?network dbo:foundedBy <http://dbpedia.org/resource/Ted_Turner> .
  ?network dbo:parentOrganization ?owner .
}",2.601812955123188e-155,0.058823529411764705,True,True
2553,Murray Gold has composed music for how many things?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Murray_Gold>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Murray Gold has composed music for how many things?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?composition) AS ?count)
WHERE {
  ?composition dbo:composer Murray Gold .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?composition) AS ?count)
WHERE {
  ?composition dbo:composer Murray Gold .
}",2.4606427705034855e-155,0.05970149253731343,False,False
1349,List the organisation with motive for peace and environmentalism?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Peace> . ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the organisation with motive for peace and environmentalism?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?organisation
WHERE {
  ?organisation dbo:wikiPageRedirects* dbo:Organisation .
  ?organisation dbo:description ?description .
  FILTER (regex(?description, ""peace"", ""i"") && regex(?description, ""environment"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?organisation
WHERE {
  ?organisation dbo:wikiPageRedirects* dbo:Organisation .
  ?organisation dbo:description ?description .
  FILTER (regex(?description, ""peace"", ""i"") && regex(?description, ""environment"", ""i""))
}",3.0943809285865547e-155,0.06756756756756757,True,True
1196,Of what all has David Ian Salter been an editor of?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/David_Ian_Salter> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Of what all has David Ian Salter been an editor of?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?item
WHERE {
  ?item dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/David_Ian_Salter> .
  ?item dbo:editorship ?editor .
  FILTER ( ?editor = <http://dbpedia.org/resource/David_Ian_Salter> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?item
WHERE {
  ?item dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/David_Ian_Salter> .
  ?item dbo:editorship ?editor .
  FILTER ( ?editor = <http://dbpedia.org/resource/David_Ian_Salter> )
}",2.486113577066771e-155,0.0684931506849315,True,True
1360,Which engine's successor's predecessor is BMW M10?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/BMW_M10> . ?uri <http://dbpedia.org/ontology/successor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Engine>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which engine's successor's predecessor is BMW M10?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?engine ?successor
WHERE {
  ?engine dbo:successor ?successor .
  ?successor dbo:predecessor <http://dbpedia.org/resource/BMW_M10> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?engine ?successor
WHERE {
  ?engine dbo:successor ?successor .
  ?successor dbo:predecessor <http://dbpedia.org/resource/BMW_M10> .
}",3.776411644491886e-155,0.08823529411764706,True,True
4364,Who is considered to be the deciding person when it comes to crustaceans from the Balanidae family?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Balanidae> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Crustacean>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is considered to be the deciding person when it comes to crustaceans from the Balanidae family?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:description ""deciding person for crustaceans from the Balanidae family"".
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:description ""deciding person for crustaceans from the Balanidae family"".
}",2.135639655544596e-155,0.04054054054054054,True,True
3774,What are some cartoons distributed by a subsidiary of Time Warner?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentCompany> <http://dbpedia.org/resource/Time_Warner> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cartoon>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some cartoons distributed by a subsidiary of Time Warner?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?cartoon WHERE {
  ?cartoon dbo:distributor ?distributor .
  ?distributor dbo:parentOrganization ?parent .
  ?parent dbo:name ""Time Warner"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?cartoon WHERE {
  ?cartoon dbo:distributor ?distributor .
  ?distributor dbo:parentOrganization ?parent .
  ?parent dbo:name ""Time Warner"" .
}",3.0566417519593477e-155,0.06578947368421052,True,True
3455,List the trainers of Shinya Aoki ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Shinya_Aoki> <http://dbpedia.org/ontology/trainer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the trainers of Shinya Aoki ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?trainer
WHERE {
  ?person dbo:name ""Shinya Aoki"" .
  ?person dbp:trainer ?trainer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?trainer
WHERE {
  ?person dbo:name ""Shinya Aoki"" .
  ?person dbp:trainer ?trainer .
}",3.1370721297783126e-155,0.078125,True,True
284,Greater Napanee is the home town of what people?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Greater_Napanee>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Greater Napanee is the home town of what people?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo: hometown ?location .
  ?location dbo:name ""Greater Napanee"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo: hometown ?location .
  ?location dbo:name ""Greater Napanee"" .
}",2.4440718429993668e-155,0.058823529411764705,False,False
4976,How many have family as Ape and order (taxonomy) is Primate ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Ape> . ?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Primate> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many have family as Ape and order (taxonomy) is Primate ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x rdf:type dbo:Animal .
  ?x dbo:family ""Ape"" .
  ?x dbo:order ?order .
  FILTER (regex(?order, ""Primate"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x rdf:type dbo:Animal .
  ?x dbo:family ""Ape"" .
  ?x dbo:order ?order .
  FILTER (regex(?order, ""Primate"", ""i""))
}",8.412065649527267e-232,0.04878048780487805,True,True
1825,"How many awards have been received by graduates of University of Melbourne, Faculty of VCA & MCM?",google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/training> <http://dbpedia.org/resource/University_of_Melbourne_Faculty_of_VCA_and_MCM> . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many awards have been received by graduates of University of Melbourne, Faculty of VCA & MCM?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ex: <http://example.org/>

SELECT (COUNT(?award) AS ?awardCount)
WHERE {
  ?graduate dbo:almaMater ?university .
  ?university rdfs:label ""University of Melbourne"" .
  ?graduate dbo:memberOf ?faculty .
  ?faculty rdfs:label ""Faculty of VCA & MCM"" .
  ?graduate dbo:award ?award .
}
GROUP BY ?university
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ex: <http://example.org/>

SELECT (COUNT(?award) AS ?awardCount)
WHERE {
  ?graduate dbo:almaMater ?university .
  ?university rdfs:label ""University of Melbourne"" .
  ?graduate dbo:memberOf ?faculty .
  ?faculty rdfs:label ""Faculty of VCA & MCM"" .
  ?graduate dbo:award ?award .
}
GROUP BY ?university",2.665354403099517e-155,0.054945054945054944,True,True
1938,In which state is Dorchester Bay (Boston Harbor)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dorchester_Bay_(Boston_Harbor)> <http://dbpedia.org/property/state> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which state is Dorchester Bay (Boston Harbor)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?bay dbo:location ?location .
  ?location dbo:country ""United States"" .
  ?location dbo:state ?state .
  FILTER (regex(?bay, ""Dorchester Bay""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?bay dbo:location ?location .
  ?location dbo:country ""United States"" .
  ?location dbo:state ?state .
  FILTER (regex(?bay, ""Dorchester Bay""))
}",2.3659629744803227e-155,0.056338028169014086,True,True
933,Count all the games whose distributors are located in America.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/country> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/distributor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all the games whose distributors are located in America.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?gameCount
WHERE {
  ?game dbo:distributor ?distributor .
  ?distributor dbo:country ""America""^^xsd:string .
  
}
GROUP BY ?game
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?gameCount
WHERE {
  ?game dbo:distributor ?distributor .
  ?distributor dbo:country ""America""^^xsd:string .
  
}
GROUP BY ?game",3.195205633963664e-155,0.06944444444444445,True,True
2927,Count the number of sports played by the universities whose one of the sports is baketball ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/athletics> <http://dbpedia.org/resource/Basketball> . ?x <http://dbpedia.org/property/athletics> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of sports played by the universities whose one of the sports is baketball ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?university ?sports
WHERE {
  ?university dbo:sports ?sports .
  ?sports dbo:name ""Basketball"" .
  
}
GROUP BY ?university
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?university ?sports
WHERE {
  ?university dbo:sports ?sports .
  ?sports dbo:name ""Basketball"" .
  
}
GROUP BY ?university",2.3983374600418706e-155,0.06578947368421052,True,True
679,Which country's people work in the Birdman enterprises?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/Birdman_Enterprises> . ?x <http://dbpedia.org/property/nationality> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Engineer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which country's people work in the Birdman enterprises?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?company dbo:country ?country .
  ?company dbo:name ""Birdman enterprises"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?company dbo:country ?country .
  ?company dbo:name ""Birdman enterprises"" .
}",3.2606462774617748e-155,0.07246376811594203,True,True
2275,What are the baseball teams who belongs to Guggenheim Partners?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Guggenheim_Partners>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the baseball teams who belongs to Guggenheim Partners?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?team dbo:owner ?owner .
  ?owner dbo:name ""Guggenheim Partners"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?team dbo:owner ?owner .
  ?owner dbo:name ""Guggenheim Partners"" .
}",2.4440718429993668e-155,0.057971014492753624,True,True
875,Who are the characters of Batman Live?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Batman_Live> <http://dbpedia.org/property/characters> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the characters of Batman Live?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?character
WHERE {
  ?character dbo:wikiPageRedirects ?batmanLive .
  ?batmanLive dbo:character ?character .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?character
WHERE {
  ?character dbo:wikiPageRedirects ?batmanLive .
  ?batmanLive dbo:character ?character .
}",3.159243630213636e-155,0.08064516129032258,True,True
1167,From how many different places have people gone to the Harward Medical School?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/Harvard_Medical_School> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: From how many different places have people gone to the Harward Medical School?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?placeCount
WHERE {
  ?school dbo:almaMater ?person .
  ?person dbp:birthPlace ?place .
  GROUP BY ?place
  
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?placeCount
WHERE {
  ?school dbo:almaMater ?person .
  ?person dbp:birthPlace ?place .
  GROUP BY ?place
  
}",2.6349938432494677e-155,0.06666666666666667,False,False
2552,In which mountain range does the Rochers De Naye lie?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentMountainPeak> <http://dbpedia.org/resource/Rochers_de_Naye> . ?x <http://dbpedia.org/ontology/mountainRange> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which mountain range does the Rochers De Naye lie?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?mountainRange
WHERE {
  ?mountainRange dbo:locatedIn ?location .
  ?location dbo:name ""Rochers De Naye"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?mountainRange
WHERE {
  ?mountainRange dbo:locatedIn ?location .
  ?location dbo:name ""Rochers De Naye"" .
}",3.6750083101231446e-155,0.08571428571428572,True,True
2575,List the destinations to which the airlines headquartered at the Gatwick Airport fly to?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Gatwick_Airport> . ?x <http://dbpedia.org/ontology/destination> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the destinations to which the airlines headquartered at the Gatwick Airport fly to?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?destination
WHERE {
  ?airline dbo:headquarters <http://dbpedia.org/resource/Gatwick_Airport> .
  ?airline dbo:fliesTo ?destination .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?destination
WHERE {
  ?airline dbo:headquarters <http://dbpedia.org/resource/Gatwick_Airport> .
  ?airline dbo:fliesTo ?destination .
}",3.559043432561587e-155,0.08108108108108109,True,True
4703,Who is the  distributor of Rev (drink) ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rev_(drink)> <http://dbpedia.org/ontology/distributor> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the  distributor of Rev (drink) ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?distributor
WHERE {
  ?drink dbo:distributor ?distributor .
  FILTER (str(?drink) = ""Rev (drink)"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?distributor
WHERE {
  ?drink dbo:distributor ?distributor .
  FILTER (str(?drink) = ""Rev (drink)"")
}",2.494821638843469e-155,0.06060606060606061,True,True
4064,Who wrote A house not meant to stand and Akale?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A_House_Not_Meant_to_Stand> <http://dbpedia.org/property/writer> ?uri. <http://dbpedia.org/resource/Akale> <http://dbpedia.org/ontology/writer> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who wrote A house not meant to stand and Akale?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?author
WHERE {
  ?book dbo:author ?author .
  FILTER (regex(?book, ""A house not meant to stand"", ""i""))
  UNION
  FILTER (regex(?book, ""Akale"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?author
WHERE {
  ?book dbo:author ?author .
  FILTER (regex(?book, ""A house not meant to stand"", ""i""))
  UNION
  FILTER (regex(?book, ""Akale"", ""i""))
}",2.7453983469116385e-155,0.05405405405405406,False,False
2519,From what american football teams did Carlos Emmons play?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carlos_Emmons_(American_football)> <http://dbpedia.org/ontology/formerTeam> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: From what american football teams did Carlos Emmons play?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthPlace ""United States"" .
  ?player dbo:name ""Carlos Emmons"" .
  ?player dbp:playedFor ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthPlace ""United States"" .
  ?player dbo:name ""Carlos Emmons"" .
  ?player dbp:playedFor ?team .
}",2.99393103522275e-155,0.07142857142857142,True,True
4607,List the subjects of the books whose one of the topics is Pau Broca ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/subject> <http://dbpedia.org/resource/Paul_Broca> . ?x <http://dbpedia.org/property/subject> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the subjects of the books whose one of the topics is Pau Broca ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?book
WHERE {
  ?book rdf:type dbo:Book .
  ?book dbo:topic ?topic .
  ?topic dbo:subject ?subject .
  FILTER (regex(?subject, ""Pau Broca"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?book
WHERE {
  ?book rdf:type dbo:Book .
  ?book dbo:topic ?topic .
  ?topic dbo:subject ?subject .
  FILTER (regex(?subject, ""Pau Broca"", ""i""))
}",2.91841165985534e-155,0.0625,True,True
753,Name the river whose source mountain is Baikal Mountains and mouth location is Arctic Ocean?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Baikal_Mountains> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Arctic_Ocean>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the river whose source mountain is Baikal Mountains and mouth location is Arctic Ocean?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:sourceMountain <http://dbpedia.org/resource/Baikal_Mountains> .
  ?river dbo:mouth <http://dbpedia.org/resource/Arctic_Ocean> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:sourceMountain <http://dbpedia.org/resource/Baikal_Mountains> .
  ?river dbo:mouth <http://dbpedia.org/resource/Arctic_Ocean> .
}",3.0943809285865547e-155,0.06756756756756757,True,True
2196,In which cities are there stations of SCOLA?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/broadcastNetwork> <http://dbpedia.org/resource/SCOLA_(TV_service)> . ?x <http://dbpedia.org/property/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionStation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which cities are there stations of SCOLA?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city ?station
WHERE {
  ?station dbo:operator ?operator .
  ?operator dbo:name ""SCOLA""^^xsd:string .
  ?station dbp:location ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city ?station
WHERE {
  ?station dbo:operator ?operator .
  ?operator dbo:name ""SCOLA""^^xsd:string .
  ?station dbp:location ?city .
}",3.1137823863213763e-155,0.0684931506849315,True,True
1293,List the awards given to the race horses bred by Willis Sharpe Kilmer.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/breeder> <http://dbpedia.org/resource/Willis_Sharpe_Kilmer> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RaceHorse>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the awards given to the race horses bred by Willis Sharpe Kilmer.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?award
WHERE {
  ?horse dbo:bredBy ?breeder .
  ?breeder dbo:name ""Willis Sharpe Kilmer"" .
  ?horse dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?award
WHERE {
  ?horse dbo:bredBy ?breeder .
  ?breeder dbo:name ""Willis Sharpe Kilmer"" .
  ?horse dbo:award ?award .
}",3.0025357216578434e-155,0.06493506493506493,True,True
3542,What are the movies with Daniel Waters as screenwriter?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Daniel_Waters_(screenwriter)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the movies with Daniel Waters as screenwriter?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movieLabel ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Daniel Waters"" .
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movieLabel ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Daniel Waters"" .
}",2.4440718429993668e-155,0.057971014492753624,True,True
2665,In what tv shows did Jason Carter act?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In what tv shows did Jason Carter act?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?show
WHERE {
  ?actor dbo:name ""Jason Carter"" .
  ?actor dbp:filmography ?show .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?show
WHERE {
  ?actor dbo:name ""Jason Carter"" .
  ?actor dbp:filmography ?show .
}",2.4775553999024465e-155,0.058823529411764705,True,True
183,Count the wars in which people awarded with the Croix de guerre fought.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Croix_de_guerre_1939–1945_(France)> . ?x <http://dbpedia.org/property/battles> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the wars in which people awarded with the Croix de guerre fought.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?war
WHERE {
  ?person dbo:award dbo:CroixDeGuerre .
  ?person dbo:participatedIn ?war .
}
GROUP BY ?war
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?war
WHERE {
  ?person dbo:award dbo:CroixDeGuerre .
  ?person dbo:participatedIn ?war .
}
GROUP BY ?war",2.4708136900731027e-155,0.05263157894736842,True,True
4988,Who is the father of Edith Vonnegut and is also a writer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edith_Vonnegut>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the father of Edith Vonnegut and is also a writer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?father ?fatherLabel
WHERE {
  ?father dbo:child ?edith .
  ?edith dbo:name ""Edith Vonnegut"" .
  ?father dbo:occupation ""Writer"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?father ?fatherLabel
WHERE {
  ?father dbo:child ?edith .
  ?edith dbo:name ""Edith Vonnegut"" .
  ?father dbo:occupation ""Writer"" .
}",7.992219124248642e-232,0.04285714285714286,True,True
2595,Is morrissey in the smiths?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Morrissey> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/The_Smiths> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is morrissey in the smiths?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Morrissey"" .
  ?x dbo:memberOf ?y .
  ?y dbo:name ""The Smiths"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Morrissey"" .
  ?x dbo:memberOf ?y .
  ?y dbo:name ""The Smiths"" .
}",2.305625093843957e-155,0.04918032786885246,True,True
299,How many maintainers are there of the bridges that can carry motor vehicles over them?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/carries> <http://dbpedia.org/resource/Motor_vehicle> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many maintainers are there of the bridges that can carry motor vehicles over them?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?maintainer) AS ?count)
WHERE {
  ?bridge dbo:bridgeType ""Bridge"" .
  ?bridge dbo:hasPart ?part .
  ?part dbo:isPartOf ?bridge .
  ?bridge dbo:maintainer ?maintainer .
  ?bridge dbo:hasPart ?vehicle_carrying_part .
  ?vehicle_carrying_part dbo:vehicleType ""Motor vehicle"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?maintainer) AS ?count)
WHERE {
  ?bridge dbo:bridgeType ""Bridge"" .
  ?bridge dbo:hasPart ?part .
  ?part dbo:isPartOf ?bridge .
  ?bridge dbo:maintainer ?maintainer .
  ?bridge dbo:hasPart ?vehicle_carrying_part .
  ?vehicle_carrying_part dbo:vehicleType ""Motor vehicle"" .
}",2.7832917260583544e-155,0.058823529411764705,True,True
395,How many golf players are there in Arizona State Sun Devils?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/college> <http://dbpedia.org/resource/Arizona_State_Sun_Devils>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many golf players are there in Arizona State Sun Devils?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:sportsTeam ?sport .
  ?sport rdfs:label ""American football""@en .
  ?team dbo:location dbo:Arizona .
  ?team dbo:name ""Arizona State Sun Devils""@en .
  ?player dbo:memberOf ?team .
  ?player dbo:occupation dbo:Golfer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:sportsTeam ?sport .
  ?sport rdfs:label ""American football""@en .
  ?team dbo:location dbo:Arizona .
  ?team dbo:name ""Arizona State Sun Devils""@en .
  ?player dbo:memberOf ?team .
  ?player dbo:occupation dbo:Golfer .
}",7.601159375410181e-232,0.03529411764705882,True,True
4919,Tell me the total number of organizations who maintain the bridges made by the malaysian PWD?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Malaysian_Public_Works_Department> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Tell me the total number of organizations who maintain the bridges made by the malaysian PWD?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?org) AS ?count)
WHERE {
  ?bridge dbo:maintainer ?org .
  ?bridge dbo:constructionCompany ""Malaysian Public Works Department""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?org) AS ?count)
WHERE {
  ?bridge dbo:maintainer ?org .
  ?bridge dbo:constructionCompany ""Malaysian Public Works Department""^^xsd:string .
}",2.384592839964215e-155,0.04819277108433735,True,True
1890,Which movies' music is composed by people associated with the band Yes?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Yes_(band)> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which movies' music is composed by people associated with the band Yes?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?movie ?composer
WHERE {
  ?movie dbo:musicBy ?composer .
  ?composer dbo:memberOf ?band .
  ?band dbo:name ""Yes"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?movie ?composer
WHERE {
  ?movie dbo:musicBy ?composer .
  ?composer dbo:memberOf ?band .
  ?band dbo:name ""Yes"" .
}",3.0382827129023445e-155,0.06578947368421052,True,True
607,What religion's politicians are in the Malaysian Chinese association?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Malaysian_Chinese_Association> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What religion's politicians are in the Malaysian Chinese association?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion ?politician
WHERE {
  ?politician dbo:religion ?religion .
  ?politician dbp:memberOf ?association .
  ?association dbo:name ""Malaysian Chinese Association"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion ?politician
WHERE {
  ?politician dbo:religion ?religion .
  ?politician dbp:memberOf ?association .
  ?association dbo:name ""Malaysian Chinese Association"" .
}",3.1137823863213763e-155,0.06944444444444445,True,True
2846,Which line of the Vadodara Junction railway station is the route end of Mumbai Vadodara Expressway?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mumbai_Vadodara_Expressway> <http://dbpedia.org/ontology/routeEnd> ?uri. <http://dbpedia.org/resource/Vadodara_Junction_railway_station> <http://dbpedia.org/property/line> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which line of the Vadodara Junction railway station is the route end of Mumbai Vadodara Expressway?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?line
WHERE {
  ?station dbo:location/dbp:location ?location .
  ?location dbo:name ""Vadodara Junction"" .
  ?station dbo:railwayLine ?line .
  ?line rdfs:label ""Mumbai Vadodara Expressway"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?line
WHERE {
  ?station dbo:location/dbp:location ?location .
  ?location dbo:name ""Vadodara Junction"" .
  ?station dbo:railwayLine ?line .
  ?line rdfs:label ""Mumbai Vadodara Expressway"" .
}",2.5944303248170386e-155,0.05,True,True
251,Under which archipelago does Canary Islands fall?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/archipelago> <http://dbpedia.org/resource/Canary_Islands> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Under which archipelago does Canary Islands fall?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?archipelago WHERE {
  ?island dbo:location ?location .
  ?location dbp:partOf ?archipelago .
  FILTER ( ?island = <http://dbpedia.org/resource/Canary_Islands> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?archipelago WHERE {
  ?island dbo:location ?location .
  ?location dbp:partOf ?archipelago .
  FILTER ( ?island = <http://dbpedia.org/resource/Canary_Islands> )
}",8.726094729337945e-232,0.058823529411764705,True,True
4625,Who are the tenants of the stadium where the UFC 140 is located?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/UFC_140> <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the tenants of the stadium where the UFC 140 is located?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?tenant
WHERE {
  ?stadium dbo:location <http://dbpedia.org/resource/Toronto> .
  ?stadium dbo:name ""Air Canada Centre""@en .
  ?stadium dbp:tenant ?tenant .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?tenant
WHERE {
  ?stadium dbo:location <http://dbpedia.org/resource/Toronto> .
  ?stadium dbo:name ""Air Canada Centre""@en .
  ?stadium dbp:tenant ?tenant .
}",3.0025357216578434e-155,0.06493506493506493,True,True
4296,List the awards given to the key people in Pixar ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pixar> <http://dbpedia.org/property/keyPeople> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the awards given to the key people in Pixar ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?person ?award
WHERE {
  ?person dbo:type dbo:Person .
  ?person dbo:occupation dbp:film_director .
  ?person dbo:award ?award .
  FILTER (regex(str(?person), ""Pixar"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?person ?award
WHERE {
  ?person dbo:type dbo:Person .
  ?person dbo:occupation dbp:film_director .
  ?person dbo:award ?award .
  FILTER (regex(str(?person), ""Pixar"", ""i""))
}",3.102414336582158e-155,0.07792207792207792,True,True
396,Which rivers start in Wyoming?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/Wyoming> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which rivers start in Wyoming?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?river
WHERE {
  ?river dbo:wikiPageRedirects* dbo:River .
  ?river dbp:sourceLocation dbo:Wyoming .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?river
WHERE {
  ?river dbo:wikiPageRedirects* dbo:River .
  ?river dbp:sourceLocation dbo:Wyoming .
}",2.5488701582353735e-155,0.06451612903225806,True,True
2447,Name the city of Duwamish River ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Duwamish_River> <http://dbpedia.org/ontology/city> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the city of Duwamish River ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?river dbo:location ?city .
  FILTER (regex(?river, ""Duwamish River"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?river dbo:location ?city .
  FILTER (regex(?river, ""Duwamish River"", ""i""))
}",2.5124539841526692e-155,0.06153846153846154,True,True
2875,Count the number of tenants whose one of the tenant is Toronto Phantoms ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Toronto_Phantoms> . ?x <http://dbpedia.org/ontology/tenant> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of tenants whose one of the tenant is Toronto Phantoms ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?tenant
WHERE {
  ?tenant dbo:tenant dbp:Toronto_Phantoms .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?tenant
WHERE {
  ?tenant dbo:tenant dbp:Toronto_Phantoms .
}",2.567119010698462e-155,0.07142857142857142,True,True
3189,"Which maintainer of Cheasty Boulevard South is also the county seat of King County, Washington?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cheasty_Boulevard_South> <http://dbpedia.org/ontology/maintainedBy> ?uri. <http://dbpedia.org/resource/King_County,_Washington> <http://dbpedia.org/ontology/countySeat> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which maintainer of Cheasty Boulevard South is also the county seat of King County, Washington?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?maintainer
WHERE {
  ?maintainer dbo:maintainerOf dbo:Cheasty_Boulevard_South .
  ?maintainer dbo:countySeatOf ?county .
  ?county dbo:name ""King County, Washington"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?maintainer
WHERE {
  ?maintainer dbo:maintainerOf dbo:Cheasty_Boulevard_South .
  ?maintainer dbo:countySeatOf ?county .
  ?county dbo:name ""King County, Washington"" .
}",2.1108049473741715e-155,0.03896103896103896,True,True
2386,Philadelphia City Council is the governing body of which city?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Philadelphia_City_Council> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Philadelphia City Council is the governing body of which city?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  <http://dbpedia.org/resource/Philadelphia_City_Council> dbo:governs ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  <http://dbpedia.org/resource/Philadelphia_City_Council> dbo:governs ?city .
}",8.93945512687472e-232,0.06349206349206349,True,True
1964,"Which educational institution has Kaplan, Inc as it's affiliation?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which educational institution has Kaplan, Inc as it's affiliation?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?institution
WHERE {
  ?institution dbo:affiliation ?affiliation .
  ?affiliation dbo:name ""Kaplan, Inc"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?institution
WHERE {
  ?institution dbo:affiliation ?affiliation .
  ?affiliation dbo:name ""Kaplan, Inc"" .
}",8.202720662090001e-232,0.04411764705882353,True,True
196,"Where did they debut their careers, those who have played for US men's national soccer team?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/United_States_men's_national_soccer_team> . ?x <http://dbpedia.org/property/debutteam> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did they debut their careers, those who have played for US men's national soccer team?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?player ?debutLocation
WHERE {
  ?player dbo:birthDate ?birthDate .
  ?player dbo:country ?country .
  FILTER(?country = ""United States"")
  ?player dbo:playsFor ?team .
  ?team dbo:name ""US men's national soccer team"" .
  ?player dbo:debutLocation ?debutLocation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?player ?debutLocation
WHERE {
  ?player dbo:birthDate ?birthDate .
  ?player dbo:country ?country .
  FILTER(?country = ""United States"")
  ?player dbo:playsFor ?team .
  ?team dbo:name ""US men's national soccer team"" .
  ?player dbo:debutLocation ?debutLocation .
}",3.1387693160635146e-155,0.06818181818181818,True,True
1445,Which team has had both Martin prochzka and garry unger as its players ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martin_Procházka> <http://dbpedia.org/ontology/formerTeam> ?uri. <http://dbpedia.org/resource/Garry_Unger> <http://dbpedia.org/ontology/formerTeam> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which team has had both Martin prochzka and garry unger as its players ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?team dbo:player ?player1 .
  ?player1 dbo:name ""Martin Procházka"" .
  ?team dbo:player ?player2 .
  ?player2 dbo:name ""Garry Unger"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?team dbo:player ?player1 .
  ?player1 dbo:name ""Martin Procházka"" .
  ?team dbo:player ?player2 .
  ?player2 dbo:name ""Garry Unger"" .
}",3.229753418204598e-155,0.0759493670886076,True,True
2179,List the honorary title given to the spouse of Lillian Disney ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lillian_Disney> <http://dbpedia.org/property/spouse> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the honorary title given to the spouse of Lillian Disney ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouseTitle
WHERE {
  ?lillian dbo:spouse ?spouse .
  ?spouse dbo:honorificPrefix ?spouseTitle .
  FILTER ( ?lillian = <http://dbpedia.org/resource/Lillian_Disney> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouseTitle
WHERE {
  ?lillian dbo:spouse ?spouse .
  ?spouse dbo:honorificPrefix ?spouseTitle .
  FILTER ( ?lillian = <http://dbpedia.org/resource/Lillian_Disney> )
}",2.7042882068441944e-155,0.08108108108108109,True,True
369,Name someone known for a project involved in the Occupation of Japan?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Occupation_of_Japan> . ?uri <http://dbpedia.org/property/knownFor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name someone known for a project involved in the Occupation of Japan?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:occupation ?occupation .
  ?occupation dbo:wikiPageRedirects ?occupationPage .
  ?occupationPage rdfs:label ""Occupation of Japan"" .
  FILTER (lang(?occupationPage) = 'en')
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:occupation ?occupation .
  ?occupation dbo:wikiPageRedirects ?occupationPage .
  ?occupationPage rdfs:label ""Occupation of Japan"" .
  FILTER (lang(?occupationPage) = 'en')
}",3.1205049827277816e-155,0.07894736842105263,True,True
2063,Which animal is the mascot of the 1502nd Infantry Brigade (Ready Reserve) and Galatasaray Handball Team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1502nd_Infantry_Brigade_(Ready_Reserve)> <http://dbpedia.org/property/mascot> ?uri. <http://dbpedia.org/resource/Galatasaray_Handball_Team> <http://dbpedia.org/property/mascot> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Animal>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which animal is the mascot of the 1502nd Infantry Brigade (Ready Reserve) and Galatasaray Handball Team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?animal
WHERE {
  ?animal dbo:mascotOf ?team .
  ?team dbo:name ""1502nd Infantry Brigade (Ready Reserve)"" .
  UNION
  ?team dbo:name ""Galatasaray Handball Team"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?animal
WHERE {
  ?animal dbo:mascotOf ?team .
  ?team dbo:name ""1502nd Infantry Brigade (Ready Reserve)"" .
  UNION
  ?team dbo:name ""Galatasaray Handball Team"" .
}",2.7287223683914353e-155,0.06172839506172839,False,False
3123,Momoko Kochi has acted in which movie ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Momoko_Kōchi>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Momoko Kochi has acted in which movie ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?movie
WHERE {
  dbr:Momoko_Kochi dbo:filmography ?movie .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?movie
WHERE {
  dbr:Momoko_Kochi dbo:filmography ?movie .
}",8.289228799996742e-232,0.045454545454545456,True,True
1565,What place is the birthplace of Vijay Chavan where Eka Lagnachi Teesri Goshta is located as well?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eka_Lagnachi_Teesri_Goshta> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Vijay_Chavan> <http://dbpedia.org/property/placeOfBirth> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What place is the birthplace of Vijay Chavan where Eka Lagnachi Teesri Goshta is located as well?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?place
WHERE {
  ?person dbo:birthPlace ?place .
  FILTER ( ?person = <http://dbpedia.org/resource/Vijay_Chavan> )
  ?place dbo:country ?country .
  ?country dbo:name ""India"" .
  ?movie dbo:country ?country .
  FILTER ( ?movie = <http://dbpedia.org/resource/Eka_Lagnachi_Teesri_Goshta> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?place
WHERE {
  ?person dbo:birthPlace ?place .
  FILTER ( ?person = <http://dbpedia.org/resource/Vijay_Chavan> )
  ?place dbo:country ?country .
  ?country dbo:name ""India"" .
  ?movie dbo:country ?country .
  FILTER ( ?movie = <http://dbpedia.org/resource/Eka_Lagnachi_Teesri_Goshta> )
}",2.9324767017223683e-155,0.09195402298850575,True,True
3008,Which river's source place is Gloucestershire and has mouth in North Sea?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Gloucestershire> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/North_Sea>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which river's source place is Gloucestershire and has mouth in North Sea?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river
WHERE {
  ?river dbo:sourcePlace dbo:Gloucestershire .
  ?river dbo:mouth dbp:North_Sea .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river
WHERE {
  ?river dbo:sourcePlace dbo:Gloucestershire .
  ?river dbo:mouth dbp:North_Sea .
}",2.5175858750356875e-155,0.05405405405405406,True,True
455,List the battles fought by Ali Habib Mahmud?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ali_Habib_Mahmud> <http://dbpedia.org/property/battles> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the battles fought by Ali Habib Mahmud?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?battle
WHERE {
  ?person dbo:name ""Ali Habib Mahmud"" .
  ?person dbo:involvedIn ?battle .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?battle
WHERE {
  ?person dbo:name ""Ali Habib Mahmud"" .
  ?person dbo:involvedIn ?battle .
}",3.0940944781388835e-155,0.07692307692307693,True,True
3993,What are the ideologies of the Union of Cambodian Democrats?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_of_Cambodian_Democrats> <http://dbpedia.org/ontology/ideology> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the ideologies of the Union of Cambodian Democrats?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?ideology
WHERE {
  ?party dbo:name ""Union of Cambodian Democrats"" .
  ?party dbo:ideology ?ideology .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?ideology
WHERE {
  ?party dbo:name ""Union of Cambodian Democrats"" .
  ?party dbo:ideology ?ideology .
}",3.032816514970993e-155,0.07692307692307693,True,True
3900,Who is the writer of mark twain Tonight?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/writer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the writer of mark twain Tonight?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?book dbo:author ?author .
  ?book rdfs:label ""Mark Twain Tonight""@en .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?book dbo:author ?author .
  ?book rdfs:label ""Mark Twain Tonight""@en .
}",2.4775553999024465e-155,0.06153846153846154,True,True
1788,Who was the australian flag bearer of 2008 Summer Olympics?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Australia_at_the_2008_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the australian flag bearer of 2008 Summer Olympics?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:birthPlace ""Australia"" .
  ?person dbo:olympicFlagBearer ""2008 Summer Olympics"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:birthPlace ""Australia"" .
  ?person dbo:olympicFlagBearer ""2008 Summer Olympics"" .
}",2.3962983105918537e-155,0.058823529411764705,True,True
586,List the opponents of the relatives of Thomas Helwys?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Thomas_Helwys> . ?x <http://dbpedia.org/ontology/opponent> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the opponents of the relatives of Thomas Helwys?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?relative ?opponent
WHERE {
  ?relative rdf:type dbo:Person .
  ?relative dbo:spouse ?helwys .
  ?helwys dbo:name ""Thomas Helwys""^^xsd:string .
  ?opponent dbo:opponentOf ?relative .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?relative ?opponent
WHERE {
  ?relative rdf:type dbo:Person .
  ?relative dbo:spouse ?helwys .
  ?helwys dbo:name ""Thomas Helwys""^^xsd:string .
  ?opponent dbo:opponentOf ?relative .
}",3.0025357216578434e-155,0.06756756756756757,True,True
394,Name the office holder whose child is Lori Black and predecessor is Henry E Catto Jr?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Lori_Black> . ?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Henry_E._Catto,_Jr.>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the office holder whose child is Lori Black and predecessor is Henry E Catto Jr?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:child ?child .
  ?child dbo:name ""Lori Black""^^xsd:string .
  ?person dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Henry E Catto Jr""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:child ?child .
  ?child dbo:name ""Lori Black""^^xsd:string .
  ?person dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Henry E Catto Jr""^^xsd:string .
}",8.34186146802972e-232,0.038461538461538464,True,True
989,What is the religion of the person who founded the Emel magazine?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Emel_(magazine)> <http://dbpedia.org/property/founder> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the religion of the person who founded the Emel magazine?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?religion
WHERE {
  ?founder dbo:founded <http://dbpedia.org/resource/Emel_(magazine)> .
  ?founder dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?religion
WHERE {
  ?founder dbo:founded <http://dbpedia.org/resource/Emel_(magazine)> .
  ?founder dbo:religion ?religion .
}",2.6519400145405025e-155,0.07042253521126761,True,True
4310,Name the musician who was given label by Celluloid Records and has been associated with Africa'70 ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records> . ?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Africa_'70_(band)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the musician who was given label by Celluloid Records and has been associated with Africa'70 ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?musician
WHERE {
  ?musician dbo:label ?label .
  ?musician dbp:recordLabel ?recordLabel .
  ?recordLabel dbo:name ""Celluloid Records"" .
  ?musician dbo:genre ?genre .
  ?genre dbo:name ""Afrobeat"" .
  FILTER (regex(?genre, ""Africa'70"", ""i""))
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?musician
WHERE {
  ?musician dbo:label ?label .
  ?musician dbp:recordLabel ?recordLabel .
  ?recordLabel dbo:name ""Celluloid Records"" .
  ?musician dbo:genre ?genre .
  ?genre dbo:name ""Afrobeat"" .
  FILTER (regex(?genre, ""Africa'70"", ""i""))
}",2.225022327381878e-155,0.045454545454545456,True,True
176,What is the largest city in the country where the San Marcos River originates?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/San_Marcos_River> <http://dbpedia.org/ontology/sourceMountain> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the largest city in the country where the San Marcos River originates?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city ?country
WHERE {
  ?river dbo:source ?location .
  ?location dbo:country ?country .
  ?country dbo:largestCity ?city .
  FILTER ( ?river = <http://dbpedia.org/resource/San_Marcos_River> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city ?country
WHERE {
  ?river dbo:source ?location .
  ?location dbo:country ?country .
  ?country dbo:largestCity ?city .
  FILTER ( ?river = <http://dbpedia.org/resource/San_Marcos_River> )
}",2.454081903007032e-155,0.0625,True,True
273,How many TV shows have been created by Simon Fuller ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many TV shows have been created by Simon Fuller ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?show) AS ?count)
WHERE {
  ?show dbo:creator Simon Fuller .
  FILTER (regex(?show, ""TV show"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?show) AS ?count)
WHERE {
  ?show dbo:creator Simon Fuller .
  FILTER (regex(?show, ""TV show"", ""i""))
}",7.992219124248642e-232,0.03896103896103896,False,False
1407,Name the founders of the record labels whose one of the founders is Frank Rogers?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Frank_Rogers_(record_producer)> . ?x <http://dbpedia.org/property/founder> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RecordLabel>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the founders of the record labels whose one of the founders is Frank Rogers?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?label ?founder
WHERE {
  ?label dbo:founder ?founder .
  ?founder dbo:name ""Frank Rogers""^^xsd:string .
  
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?label ?founder
WHERE {
  ?label dbo:founder ?founder .
  ?founder dbo:name ""Frank Rogers""^^xsd:string .
  
}",3.0382827129023445e-155,0.0684931506849315,True,True
3983,How many things belong to phylum of Chordate?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many things belong to phylum of Chordate?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x dbo:classification dbo:Chordata .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x dbo:classification dbo:Chordata .
}",2.5488701582353735e-155,0.06060606060606061,True,True
2733,"Which religion do the people follow, whose constituency is Jadavpur?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Jadavpur_(Lok_Sabha_constituency)> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which religion do the people follow, whose constituency is Jadavpur?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:constituency ""Jadavpur"" .
  ?person dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:constituency ""Jadavpur"" .
  ?person dbo:religion ?religion .
}",3.2383880054191053e-155,0.07142857142857142,True,True
3431,Who has produced movies that have a James Horner score?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/James_Horner> . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who has produced movies that have a James Horner score?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?director
WHERE {
  ?movie dbo:director ?director .
  ?movie dbp:musicComposer ?composer .
  ?composer dbo:name ""James Horner"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?director
WHERE {
  ?movie dbo:director ?director .
  ?movie dbp:musicComposer ?composer .
  ?composer dbo:name ""James Horner"" .
}",3.075337680136661e-155,0.06756756756756757,True,True
3699,Who is the prime minister of the successor of Kingsley Wood?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kingsley_Wood> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the prime minister of the successor of Kingsley Wood?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?successor ?successorPrimeMinister
WHERE {
  ?person dbo:birthName ""Kingsley Wood"" .
  ?person dbo:successor ?successor .
  ?successor dbo:primeMinister ?successorPrimeMinister .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?successor ?successorPrimeMinister
WHERE {
  ?person dbo:birthName ""Kingsley Wood"" .
  ?person dbo:successor ?successor .
  ?successor dbo:primeMinister ?successorPrimeMinister .
}",3.0566417519593477e-155,0.06944444444444445,True,True
3950,Which race is the Best Mate is also the race of the Martin Molony?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Best_Mate> <http://dbpedia.org/property/race> ?uri. <http://dbpedia.org/resource/Martin_Molony> <http://dbpedia.org/ontology/race> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which race is the Best Mate is also the race of the Martin Molony?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?race
WHERE {
  ?bestMate dbo:race ?race .
  ?martinMolony dbo:race ?race .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?race
WHERE {
  ?bestMate dbo:race ?race .
  ?martinMolony dbo:race ?race .
}",2.7960888070028265e-155,0.05714285714285714,True,True
2465,Which sports are played at both the Polytech uni of Bataan and Taguig?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_–_Bataan> <http://dbpedia.org/ontology/sport> ?uri. <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> <http://dbpedia.org/ontology/sport> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports are played at both the Polytech uni of Bataan and Taguig?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:sports ?sport .
  FILTER(?university IN (dbp:Polytech_University_of_Bataan , dbp:Taguig_City))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:sports ?sport .
  FILTER(?university IN (dbp:Polytech_University_of_Bataan , dbp:Taguig_City))
}",3.0943809285865547e-155,0.07894736842105263,True,True
2310,List the television shows whose network's owning company is Turner Broadcasting System?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Turner_Broadcasting_System> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the television shows whose network's owning company is Turner Broadcasting System?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?showLabel ?networkLabel
WHERE {
  ?show dbo:network ?network .
  ?network dbo:parentOrganization ?parentOrg .
  ?parentOrg dbo:name ""Turner Broadcasting System"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?showLabel ?networkLabel
WHERE {
  ?show dbo:network ?network .
  ?network dbo:parentOrganization ?parentOrg .
  ?parentOrg dbo:name ""Turner Broadcasting System"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.8866879095378115e-155,0.060240963855421686,False,False
4497,Name the route start of Saint Petersburg  Moscow Railway ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saint_Petersburg_–_Moscow_Railway> <http://dbpedia.org/ontology/routeStart> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the route start of Saint Petersburg  Moscow Railway ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?routeStart
WHERE {
  ?railway dbo:routeStart ?routeStart .
  FILTER (STR(?railway) = ""http://dbpedia.org/resource/Saint_Petersburg-Moscow_Railway"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?routeStart
WHERE {
  ?railway dbo:routeStart ?routeStart .
  FILTER (STR(?railway) = ""http://dbpedia.org/resource/Saint_Petersburg-Moscow_Railway"")
}",2.4775553999024465e-155,0.05970149253731343,True,True
270,What is the affiliation of tani University?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ōtani_University> <http://dbpedia.org/property/affiliation> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the affiliation of tani University?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?affiliation
WHERE {
  ?university dbo:name ""Tani University"" .
  ?university dbo:affiliation ?affiliation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?affiliation
WHERE {
  ?university dbo:name ""Tani University"" .
  ?university dbo:affiliation ?affiliation .
}",2.5124539841526692e-155,0.06349206349206349,True,True
4663,How many people have trained the wrestlers who were billed in Wisconsin?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/billed> <http://dbpedia.org/resource/Wisconsin> . ?x <http://dbpedia.org/ontology/trainer> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people have trained the wrestlers who were billed in Wisconsin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?trainer) AS ?count)
WHERE {
  ?wrestler dbo:birthDate ?birth.
  ?wrestler dbo:billedIn ?location.
  FILTER(?location = ""Wisconsin"")
  ?wrestler dbo:trainedBy ?trainer.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?trainer) AS ?count)
WHERE {
  ?wrestler dbo:birthDate ?birth.
  ?wrestler dbo:billedIn ?location.
  FILTER(?location = ""Wisconsin"")
  ?wrestler dbo:trainedBy ?trainer.
}",2.135639655544596e-155,0.036585365853658534,True,True
331,With whom is Heinz Kokott a relative to who also served Nazi Army?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Heinz_Kokott> <http://dbpedia.org/ontology/relation> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: With whom is Heinz Kokott a relative to who also served Nazi Army?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?relative ?relativeName
WHERE {
  ?person dbo:birthPlace ""Germany"" .
  ?person dbo:name ""Heinz Kokott"" .
  ?person dbo:spouse ?relative .
  ?relative dbo:name ?relativeName .
  ?relative dbo:occupation ?occupation .
  FILTER (regex(?occupation, ""Nazi Army"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?relative ?relativeName
WHERE {
  ?person dbo:birthPlace ""Germany"" .
  ?person dbo:name ""Heinz Kokott"" .
  ?person dbo:spouse ?relative .
  ?relative dbo:name ?relativeName .
  ?relative dbo:occupation ?occupation .
  FILTER (regex(?occupation, ""Nazi Army"", ""i""))
}",2.6727411373916324e-155,0.06097560975609756,True,True
3406,Were the 1995 south pacific games hosted in tahiti?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/1995_South_Pacific_Games> <http://dbpedia.org/property/hostCity> <http://dbpedia.org/resource/Tahiti> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Were the 1995 south pacific games hosted in tahiti?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/1995_South_Pacific_Games> .
  ?x dbo:location ?y .
  ?y dbo:name ""Tahiti"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/1995_South_Pacific_Games> .
  ?x dbo:location ?y .
  ?y dbo:name ""Tahiti"" .
}",2.215756877004116e-155,0.04477611940298507,True,True
819,List down the important people of The Elders?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Elders_(organization)> <http://dbpedia.org/property/keyPeople> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List down the important people of The Elders?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?name
WHERE {
  ?person dbo:memberOf <http://dbpedia.org/resource/The_Elders> .
  ?person dbo:name ?name .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?name
WHERE {
  ?person dbo:memberOf <http://dbpedia.org/resource/The_Elders> .
  ?person dbo:name ?name .
}",3.1153609837288e-155,0.078125,True,True
1063,Which administrative headquarters of the Pulau Ubin is also the resting place of the Nicole Lai?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/capital> ?uri. <http://dbpedia.org/resource/Nicole_Lai> <http://dbpedia.org/ontology/restingPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which administrative headquarters of the Pulau Ubin is also the resting place of the Nicole Lai?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?administrativeHeadquarters ?restingPlace
WHERE {
  ?administrativeHeadquarters dbo:administrativeHeadquarters ?place .
  ?place dbp:location ?location .
  ?location dbo:name ""Pulau Ubin"" .
  ?restingPlace dbo:restingPlace ?person .
  ?person dbo:name ""Nicole Lai"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?administrativeHeadquarters ?restingPlace
WHERE {
  ?administrativeHeadquarters dbo:administrativeHeadquarters ?place .
  ?place dbp:location ?location .
  ?location dbo:name ""Pulau Ubin"" .
  ?restingPlace dbo:restingPlace ?person .
  ?person dbo:name ""Nicole Lai"" .
}",1.998443100417405e-155,0.037037037037037035,True,True
4322,How many different writers have written for Jump Square?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/magazine> <http://dbpedia.org/resource/Jump_Square> . ?x <http://dbpedia.org/property/author> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many different writers have written for Jump Square?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT (COUNT(DISTINCT ?writer) AS ?count)
WHERE {
  ?magazine dbo:genre ""Manga"" .
  ?magazine dbp:title ""Jump Square"" .
  ?writer dbo:work ?magazine .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT (COUNT(DISTINCT ?writer) AS ?count)
WHERE {
  ?magazine dbo:genre ""Manga"" .
  ?magazine dbp:title ""Jump Square"" .
  ?writer dbo:work ?magazine .
}",3.0566417519593477e-155,0.06493506493506493,True,True
3318,Name the home ground of  2015 Fort Lauderdale Strikers season ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_Fort_Lauderdale_Strikers_season> <http://dbpedia.org/ontology/ground> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the home ground of  2015 Fort Lauderdale Strikers season ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?homeGround
WHERE {
  ?team dbo:name ""2015 Fort Lauderdale Strikers"" .
  ?team dbo:homeGround ?homeGround .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?homeGround
WHERE {
  ?team dbo:name ""2015 Fort Lauderdale Strikers"" .
  ?team dbo:homeGround ?homeGround .
}",2.3659629744803227e-155,0.057971014492753624,True,True
4045,Music of how many things has been given by Akira Ifukube?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Akira_Ifukube>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Music of how many things has been given by Akira Ifukube?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?count
WHERE {
  ?thing dbo:composer Akira Ifukube .
  ?thing rdfs:label ?label .
  
  FILTER (lang(?label) = 'en')
  
  
}
GROUP BY ?label
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?count
WHERE {
  ?thing dbo:composer Akira Ifukube .
  ?thing rdfs:label ?label .
  
  FILTER (lang(?label) = 'en')
  
  
}
GROUP BY ?label",8.485327127592046e-232,0.05194805194805195,False,False
2839,Who has fought in wars under commander Arthur St Clair?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Arthur_St._Clair> . ?x <http://dbpedia.org/property/combatant> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who has fought in wars under commander Arthur St Clair?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?soldier
WHERE {
  ?soldier dbo:commander ?commander .
  ?commander dbo:name ""Arthur St Clair"" .
  ?soldier dbo:involvedInWar ?war .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?soldier
WHERE {
  ?soldier dbo:commander ?commander .
  ?commander dbo:name ""Arthur St Clair"" .
  ?soldier dbo:involvedInWar ?war .
}",3.5156372159951298e-155,0.08,True,True
4448,Where can one find the Dzogchen Ponolop Rinpoche?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dzogchen_Ponlop_Rinpoche> <http://dbpedia.org/property/location> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where can one find the Dzogchen Ponolop Rinpoche?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?location
WHERE {
  ?person dbo:name ""Dzogchen Ponolop Rinpoche"" .
  ?person dbo:birthPlace ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?location
WHERE {
  ?person dbo:name ""Dzogchen Ponolop Rinpoche"" .
  ?person dbo:birthPlace ?location .
}",2.427831263680579e-155,0.06060606060606061,True,True
4515,Who succeeded Lucius Crus as an office holder?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Lucius_Cornelius_Lentulus_Crus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who succeeded Lucius Crus as an office holder?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?successor
WHERE {
  ?person dbo:successor ?successor .
  FILTER (regex(?person, ""Lucius Crus"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?successor
WHERE {
  ?person dbo:successor ?successor .
  FILTER (regex(?person, ""Lucius Crus"", ""i""))
}",8.231055179516831e-232,0.043478260869565216,True,True
3796,Who is the writer with notable works like Adventures of Huckleberry Finn and The Adventures of Tom Sawyer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Adventures_of_Huckleberry_Finn> . ?uri <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the writer with notable works like Adventures of Huckleberry Finn and The Adventures of Tom Sawyer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?author
WHERE {
  ?author dbo:birthPlace ""Missouri"" .
  ?author dbo:work ?work .
  ?work dbo:title ""Adventures of Huckleberry Finn"" .
  FILTER (regex(?author, ""Mark Twain""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?author
WHERE {
  ?author dbo:birthPlace ""Missouri"" .
  ?author dbo:work ?work .
  ?work dbo:title ""Adventures of Huckleberry Finn"" .
  FILTER (regex(?author, ""Mark Twain""))
}",2.8409841948588806e-155,0.060240963855421686,True,True
4960,"Whose relatives are Clan McDuck and Huey, Dewey, and Louie?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clan_McDuck> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Huey,_Dewey,_and_Louie> . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose relatives are Clan McDuck and Huey, Dewey, and Louie?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?relative
WHERE {
  ?person dbo:family ?relative .
  FILTER ( ?person IN ( dbo:Clan_McDuck , dbo:Huey , dbo:Dewey , dbo:Louie ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?relative
WHERE {
  ?person dbo:family ?relative .
  FILTER ( ?person IN ( dbo:Clan_McDuck , dbo:Huey , dbo:Dewey , dbo:Louie ) )
}",2.9851289841006984e-155,0.07894736842105263,True,True
4743,To which county of New York city does the Tremount Avenue street belong?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tremont_Avenue> <http://dbpedia.org/property/counties> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which county of New York city does the Tremount Avenue street belong?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?county
WHERE {
  ?street dbo:streetAddress ""Tremount Avenue"" .
  ?street dbo:locatedIn ?county .
  ?county dbo:country ""United States"" .
  ?county dbo:name ?countyName .
  FILTER (regex(?countyName, ""New York""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?county
WHERE {
  ?street dbo:streetAddress ""Tremount Avenue"" .
  ?street dbo:locatedIn ?county .
  ?county dbo:country ""United States"" .
  ?county dbo:name ?countyName .
  FILTER (regex(?countyName, ""New York""))
}",2.1934084870059202e-155,0.05,True,True
1038,Which wars were fought by the commander whose deputy was Robert T. Herres?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deputy> <http://dbpedia.org/resource/Robert_T._Herres> . ?uri <http://dbpedia.org/ontology/commander> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which wars were fought by the commander whose deputy was Robert T. Herres?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?war
WHERE {
  ?commander dbo:deputy ?deputy .
  ?deputy dbo:name ""Robert T. Herres"" .
  ?commander dbo:involvedInWar ?war .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?war
WHERE {
  ?commander dbo:deputy ?deputy .
  ?deputy dbo:name ""Robert T. Herres"" .
  ?commander dbo:involvedInWar ?war .
}",3.0566417519593477e-155,0.06578947368421052,True,True
3741,Where is the venue of the History of Penny Arcade Expo located?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/History_of_Penny_Arcade_Expo> <http://dbpedia.org/property/venue> ?x . ?x <http://dbpedia.org/property/address> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where is the venue of the History of Penny Arcade Expo located?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?expo dbo:venue ?location .
  FILTER (regex(?expo, ""History of Penny Arcade Expo"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?expo dbo:venue ?location .
  FILTER (regex(?expo, ""History of Penny Arcade Expo"", ""i""))
}",2.5175858750356875e-155,0.07042253521126761,True,True
1607,Which city was founded by George Washington and John Forbes (British Army officer)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/George_Washington> . ?uri <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/John_Forbes_(British_Army_officer)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which city was founded by George Washington and John Forbes (British Army officer)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?city
WHERE {
  ?city dbo:founder ?founder .
  ?founder dbo:name ""George Washington"" .
  ?founder dbo:name ""John Forbes"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?city
WHERE {
  ?city dbo:founder ?founder .
  ?founder dbo:name ""George Washington"" .
  ?founder dbo:name ""John Forbes"" .
}",2.4123225276763925e-155,0.05128205128205128,True,True
3237,Does Sonny Bill Williams belong in the Canterbury Bankstown Bulldogs club?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Sonny_Bill_Williams> <http://dbpedia.org/property/club> <http://dbpedia.org/resource/Canterbury-Bankstown_Bulldogs> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Sonny Bill Williams belong in the Canterbury Bankstown Bulldogs club?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Sonny Bill Williams"" .
  ?x dbo:memberOf ?y .
  ?y dbo:name ""Canterbury Bankstown Bulldogs"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Sonny Bill Williams"" .
  ?x dbo:memberOf ?y .
  ?y dbo:name ""Canterbury Bankstown Bulldogs"" .
}",2.135639655544596e-155,0.04285714285714286,True,True
599,Name the profession of Oamr D Conger for which Jack Ryan was also nominated?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ryan_(politician)> <http://dbpedia.org/ontology/nominee> ?uri. <http://dbpedia.org/resource/Omar_D._Conger> <http://dbpedia.org/property/order> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the profession of Oamr D Conger for which Jack Ryan was also nominated?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession
WHERE {
  ?person dbo:profession ?profession .
  ?person dbo:name ""Oamr D Conger""^^xsd:string .
  ?person dbo:award ?award .
  ?award dbo:recipient ?jackryan .
  ?jackryan dbo:name ""Jack Ryan""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession
WHERE {
  ?person dbo:profession ?profession .
  ?person dbo:name ""Oamr D Conger""^^xsd:string .
  ?person dbo:award ?award .
  ?award dbo:recipient ?jackryan .
  ?jackryan dbo:name ""Jack Ryan""^^xsd:string .
}",2.0523206950207848e-155,0.038461538461538464,True,True
4219,Who was the head coach of Middlesbrough F.C. season 2006-7 also the coach of England national under 21 footbal team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2006–07_Middlesbrough_F.C._season> <http://dbpedia.org/ontology/manager> ?uri. <http://dbpedia.org/resource/England_national_under-21_football_team> <http://dbpedia.org/property/coach> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the head coach of Middlesbrough F.C. season 2006-7 also the coach of England national under 21 footbal team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?coach
WHERE {
  ?coach rdf:type dbo:FootballManager .
  ?coach dbo:headCoachOf ?team .
  ?team dbo:name ""Middlesbrough F.C."" .
  FILTER(?team dbo:season ""2006-7"")
  ?coach dbo:coachOf ?team2 .
  ?team2 dbo:name ""England national under 21 football team"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?coach
WHERE {
  ?coach rdf:type dbo:FootballManager .
  ?coach dbo:headCoachOf ?team .
  ?team dbo:name ""Middlesbrough F.C."" .
  FILTER(?team dbo:season ""2006-7"")
  ?coach dbo:coachOf ?team2 .
  ?team2 dbo:name ""England national under 21 football team"" .
}",1.893436069619061e-155,0.033707865168539325,False,False
2473,Who is the manager of the club whose homeground is the riverside stadium?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Riverside_Stadium> . ?uri <http://dbpedia.org/ontology/managerClub> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the manager of the club whose homeground is the riverside stadium?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?manager
WHERE {
  ?club dbo:homeGround ""Riverside Stadium"" .
  ?club dbo:manager ?manager .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?manager
WHERE {
  ?club dbo:homeGround ""Riverside Stadium"" .
  ?club dbo:manager ?manager .
}",2.50170125957988e-155,0.05555555555555555,True,True
2125,What religion do the Wickramabahu Centeral College and Neungin High School both follow?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)> <http://dbpedia.org/property/religiousAffiliation> ?uri. <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What religion do the Wickramabahu Centeral College and Neungin High School both follow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?school dbo:religion ?religion .
  FILTER (regex(?school, ""Wickramabahu Centeral College"") || regex(?school, ""Neungin High School""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?school dbo:religion ?religion .
  FILTER (regex(?school, ""Wickramabahu Centeral College"") || regex(?school, ""Neungin High School""))
}",2.426555136425675e-155,0.0641025641025641,True,True
2004,Which key person of maryland jockey club is the appointer of Joseph Clay ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joseph_Clay_(Georgia)> <http://dbpedia.org/ontology/appointer> ?uri. <http://dbpedia.org/resource/Maryland_Jockey_Club> <http://dbpedia.org/property/keyPeople> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which key person of maryland jockey club is the appointer of Joseph Clay ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:appointer ?clay .
  ?clay dbo:name ""Joseph Clay""^^xsd:string .
  ?person dbo:memberOf ?club .
  ?club dbo:name ""Maryland Jockey Club""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:appointer ?clay .
  ?clay dbo:name ""Joseph Clay""^^xsd:string .
  ?person dbo:memberOf ?club .
  ?club dbo:name ""Maryland Jockey Club""^^xsd:string .
}",2.0636286749776556e-155,0.0379746835443038,True,True
2996,Who is the writer of Neverwhere (radio play) ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neverwhere_(radio_play)> <http://dbpedia.org/ontology/writer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the writer of Neverwhere (radio play) ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?writer
WHERE {
  ?radioPlay dbo:workTitle ""Neverwhere (radio play)"" .
  ?radioPlay dbo:writer ?writer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?writer
WHERE {
  ?radioPlay dbo:workTitle ""Neverwhere (radio play)"" .
  ?radioPlay dbo:writer ?writer .
}",2.4606427705034855e-155,0.06153846153846154,True,True
2558,Who was the cover artist of The Adventure of Tom Sawyer and also wrote mark Twain Tonight?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> <http://dbpedia.org/ontology/coverArtist> ?uri. <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/writer> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the cover artist of The Adventure of Tom Sawyer and also wrote mark Twain Tonight?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:coverArtist ?book .
  ?book dbo:title ""The Adventure of Tom Sawyer""^^xsd:string .
  ?artist dbo:wrote ?performance .
  ?performance dbo:title ""Mark Twain Tonight""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:coverArtist ?book .
  ?book dbo:title ""The Adventure of Tom Sawyer""^^xsd:string .
  ?artist dbo:wrote ?performance .
  ?performance dbo:title ""Mark Twain Tonight""^^xsd:string .
}",2.5406524524079725e-155,0.04938271604938271,True,True
4747,What are the mascots of the teams participating in the Turkish Handball Super League?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/Turkish_Handball_Super_League> . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the mascots of the teams participating in the Turkish Handball Super League?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team ?mascot
WHERE {
  ?team dbo:sportsLeague dbp:TurkishHandballSuperLeague .
  ?team dbo:mascot ?mascot .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team ?mascot
WHERE {
  ?team dbo:sportsLeague dbp:TurkishHandballSuperLeague .
  ?team dbo:mascot ?mascot .
}",3.075337680136661e-155,0.06756756756756757,True,True
4525,Name the ones who debuted in the San Francisco 49ers.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/debutTeam> <http://dbpedia.org/resource/San_Francisco_49ers>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the ones who debuted in the San Francisco 49ers.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?player
WHERE {
  ?player dbo:birthPlace ""San Francisco, California, USA""^^xsd:string .
  ?player dbo:sportsTeam dbp:San_Francisco_49ers .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?player
WHERE {
  ?player dbo:birthPlace ""San Francisco, California, USA""^^xsd:string .
  ?player dbo:sportsTeam dbp:San_Francisco_49ers .
}",3.032816514970993e-155,0.07246376811594203,True,True
2115,What is the genre of the things developed by Interplay Entertainment?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/Interplay_Entertainment> . ?x <http://dbpedia.org/ontology/genre> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the genre of the things developed by Interplay Entertainment?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?genre
WHERE {
  ?game dbo:developer Interplay Entertainment .
  ?game dbo:genre ?genre .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?genre
WHERE {
  ?game dbo:developer Interplay Entertainment .
  ?game dbo:genre ?genre .
}",3.6750083101231446e-155,0.08695652173913043,False,False
4741,Name the part of Liverpool city region >,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liverpool_City_Region> <http://dbpedia.org/ontology/part> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the part of Liverpool city region >
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?part
WHERE {
  ?part dbo:partOf <http://dbpedia.org/resource/Liverpool_city_region> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?part
WHERE {
  ?part dbo:partOf <http://dbpedia.org/resource/Liverpool_city_region> .
}",3.2286895410078598e-155,0.08064516129032258,True,True
1249,Who was the president at the time when the opponent of Benjamin Spock held office?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Benjamin_Spock> . ?x <http://dbpedia.org/property/incumbent> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the president at the time when the opponent of Benjamin Spock held office?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?president
WHERE {
  ?spock dbo:birthDate ?spockBirthdate .
  ?spock dbo:opponent ?opponent .
  ?opponent dbo:birthDate ?opponentBirthdate .
  ?president dbo:office ?office .
  FILTER(?opponentBirthdate < ?spockBirthdate)
  FILTER(?spockBirthdate < ?office)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?president
WHERE {
  ?spock dbo:birthDate ?spockBirthdate .
  ?spock dbo:opponent ?opponent .
  ?opponent dbo:birthDate ?opponentBirthdate .
  ?president dbo:office ?office .
  FILTER(?opponentBirthdate < ?spockBirthdate)
  FILTER(?spockBirthdate < ?office)
}",2.401580582872042e-155,0.06097560975609756,True,True
1876,Which fictional character's relatives were made by Ted Osborne?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Ted_Osborne> . ?uri <http://dbpedia.org/property/relatives> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which fictional character's relatives were made by Ted Osborne?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?character ?relative
WHERE {
  ?character dbo:characterType ""Fictional character"" .
  ?character dbo:creator ?creator .
  ?creator dbo:name ""Ted Osborne"" .
  ?character dbp:relative ?relative .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?character ?relative
WHERE {
  ?character dbo:characterType ""Fictional character"" .
  ?character dbo:creator ?creator .
  ?creator dbo:name ""Ted Osborne"" .
  ?character dbp:relative ?relative .
}",2.9851289841006984e-155,0.0641025641025641,True,True
698,How many fictional characters were humans?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Human>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many fictional characters were humans?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?character) AS ?count)
WHERE {
  ?character dbo:type dbo:FictionalCharacter .
  ?character dbo:abstract ?abstract .
  FILTER (regex(?abstract, ""human"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?character) AS ?count)
WHERE {
  ?character dbo:type dbo:FictionalCharacter .
  ?character dbo:abstract ?abstract .
  FILTER (regex(?abstract, ""human"", ""i""))
}",8.120546156106983e-232,0.0410958904109589,True,True
3236,What are the binomial authority of Menetries's warbler?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Menetries's_warbler> <http://dbpedia.org/ontology/binomialAuthority> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the binomial authority of Menetries's warbler?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?binomialAuthority
WHERE {
  ?menetriesWarbler dbo:wikiPageRedirects ?page .
  ?page rdfs:label ""Menetries's warbler"" .
  ?page dbo:binomialAuthority ?binomialAuthority .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?binomialAuthority
WHERE {
  ?menetriesWarbler dbo:wikiPageRedirects ?page .
  ?page rdfs:label ""Menetries's warbler"" .
  ?page dbo:binomialAuthority ?binomialAuthority .
}",2.3809857162598948e-155,0.058823529411764705,True,True
4174,How many leagues have used the O.co Coliseum?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/O.co_Coliseum> <http://dbpedia.org/ontology/tenant> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many leagues have used the O.co Coliseum?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?league)) AS ?count
WHERE {
  ?stadium dbo:location ""Oakland, California, USA"".
  ?stadium dbo:name ""O.co Coliseum"".
  ?stadium dbp:usedBy ?league.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?league)) AS ?count
WHERE {
  ?stadium dbo:location ""Oakland, California, USA"".
  ?stadium dbo:name ""O.co Coliseum"".
  ?stadium dbp:usedBy ?league.
}",2.3962983105918537e-155,0.0547945205479452,False,False
3222,Name the television show where Mona Marshall has given voice and is distributed by Comedy Central?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the television show where Mona Marshall has given voice and is distributed by Comedy Central?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showName
WHERE {
  ?actor dbo:name ""Mona Marshall"" .
  ?actor dbo:voiceOf ?show .
  ?show dbo:distributor ""Comedy Central"" .
  ?show ?showName rdfs:label .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showName
WHERE {
  ?actor dbo:name ""Mona Marshall"" .
  ?actor dbo:voiceOf ?show .
  ?show dbo:distributor ""Comedy Central"" .
  ?show ?showName rdfs:label .
}",8.319100378795605e-232,0.036585365853658534,True,True
905,Which city do both Arthur Ross and Edward Niesen come from?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Arthur_A._Ross> <http://dbpedia.org/property/placeOfBirth> ?uri. <http://dbpedia.org/resource/Edward_Niesen> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which city do both Arthur Ross and Edward Niesen come from?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  FILTER (?person IN (dbo:Arthur_Ross, dbo:Edward_Niesen))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  FILTER (?person IN (dbo:Arthur_Ross, dbo:Edward_Niesen))
}",2.8871942127949523e-155,0.0547945205479452,True,True
1560,Who hold stocks in the bank which is located at 731 Lexington Avenue?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/731_Lexington_Avenue> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who hold stocks in the bank which is located at 731 Lexington Avenue?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?stockholder
WHERE {
  ?bank dbo:address ""731 Lexington Avenue"" .
  ?bank dbo:stockholder ?stockholder .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?stockholder
WHERE {
  ?bank dbo:address ""731 Lexington Avenue"" .
  ?bank dbo:stockholder ?stockholder .
}",3.075337680136661e-155,0.06578947368421052,True,True
291,Is Bacillus belong to the domain Bacteria?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Bacillus> <http://dbpedia.org/property/domain> <http://dbpedia.org/resource/Bacteria> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Bacillus belong to the domain Bacteria?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:domain ""Bacteria"" .
  ?x dbo:subclassOf <http://dbpedia.org/resource/Bacillus> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:domain ""Bacteria"" .
  ?x dbo:subclassOf <http://dbpedia.org/resource/Bacillus> .
}",2.530465559854518e-155,0.06557377049180328,True,True
3427,"Mazhar Ul Haq High School, Beerwah is affiliated to Islamic Religion",google/gemma-2-9b-it,"ASK WHERE { <http://dbpedia.org/resource/Mazhar_Ul_Haq_High_School,_Beerwah> <http://dbpedia.org/property/religiousAffiliation> <http://dbpedia.org/resource/Islam> }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Mazhar Ul Haq High School, Beerwah is affiliated to Islamic Religion
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school WHERE {
  ?school dbo:name ""Mazhar Ul Haq High School, Beerwah"" .
  ?school dbo:affiliation ?affiliation .
  ?affiliation dbo:religion ""Islamic Religion"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school WHERE {
  ?school dbo:name ""Mazhar Ul Haq High School, Beerwah"" .
  ?school dbo:affiliation ?affiliation .
  ?affiliation dbo:religion ""Islamic Religion"" .
}",2.1483903094550452e-155,0.04285714285714286,True,True
1359,How many sitcoms were produced by the company whose predecessor was the Desilu Productions?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Desilu_Productions> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many sitcoms were produced by the company whose predecessor was the Desilu Productions?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?sitcom) AS ?count)
WHERE {
  ?company dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Desilu Productions"" .
  ?company dbo:production ?sitcom .
  FILTER (
    ?sitcom a dbo:Sitcom
  )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?sitcom) AS ?count)
WHERE {
  ?company dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Desilu Productions"" .
  ?company dbo:production ?sitcom .
  FILTER (
    ?sitcom a dbo:Sitcom
  )
}",2.3192471031465984e-155,0.047058823529411764,False,False
1336,Which moto of american Classical League is also the academic discipline of Probus?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/American_Classical_League> <http://dbpedia.org/property/motto> ?uri. <http://dbpedia.org/resource/Probus_(journal)> <http://dbpedia.org/ontology/academicDiscipline> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which moto of american Classical League is also the academic discipline of Probus?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?moto ?probus
WHERE {
  ?moto dbo:wikiPageRedirects ?americanClassicalLeague .
  ?americanClassicalLeague dbo: motto ?moto .
  ?probus dbo:occupation ?occupation .
  ?occupation rdfs:label ""Classical philology""@en .
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?moto ?probus
WHERE {
  ?moto dbo:wikiPageRedirects ?americanClassicalLeague .
  ?americanClassicalLeague dbo: motto ?moto .
  ?probus dbo:occupation ?occupation .
  ?occupation rdfs:label ""Classical philology""@en .
}",2.0751256583633507e-155,0.03896103896103896,False,False
1158,Count the total number of battles fought by the military people which fought in Levant?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Levant> . ?x <http://dbpedia.org/property/battles> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the total number of battles fought by the military people which fought in Levant?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?battle) AS ?battleCount)
WHERE {
  ?person dbo:militaryService ?militaryService .
  ?militaryService dbo:location ?location .
  FILTER(?location = <http://dbpedia.org/resource/Levant>)
  ?person dbo:involvedInWar ?war .
  ?war dbo:battle ?battle .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?battle) AS ?battleCount)
WHERE {
  ?person dbo:militaryService ?militaryService .
  ?militaryService dbo:location ?location .
  FILTER(?location = <http://dbpedia.org/resource/Levant>)
  ?person dbo:involvedInWar ?war .
  ?war dbo:battle ?battle .
}",2.294572857803015e-155,0.05952380952380952,True,True
1837,What is the television show whose opening theme's album is Cheers?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/album> <http://dbpedia.org/resource/Cheers> . ?uri <http://dbpedia.org/ontology/openingTheme> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the television show whose opening theme's album is Cheers?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:openingTheme ?theme .
  ?theme dbp:album ""Cheers"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:openingTheme ?theme .
  ?theme dbp:album ""Cheers"" .
}",2.5502845355614067e-155,0.056338028169014086,True,True
546,Name the species of Liger?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liger> <http://dbpedia.org/ontology/species> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the species of Liger?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?species
WHERE {
  ?ligera dbo:species ?species .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?species
WHERE {
  ?ligera dbo:species ?species .
}",2.6473239134663774e-155,0.06896551724137931,True,True
4437,Give me some nominees of politicians in the US?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/nominee> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me some nominees of politicians in the US?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?politician ?politicianLabel
WHERE {
  ?politician dbo:country ""United States""^^xsd:string .
  ?politician dbo:profession ""Politician"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?politician ?politicianLabel
WHERE {
  ?politician dbo:country ""United States""^^xsd:string .
  ?politician dbo:profession ""Politician"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",3.075337680136661e-155,0.06578947368421052,False,False
4621,Which American football player is a former team player of Indianapolis Colts and current team is Michigan Wolverines?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Indianapolis_Colts> . ?uri <http://dbpedia.org/property/currentteam> <http://dbpedia.org/resource/Michigan_Wolverines>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which American football player is a former team player of Indianapolis Colts and current team is Michigan Wolverines?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?player
WHERE {
  ?player dbo:team ?team .
  ?team dbo:name ""Indianapolis Colts"" .
  ?player dbo:currentTeam ?currentTeam .
  ?currentTeam dbo:name ""Michigan Wolverines"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?player
WHERE {
  ?player dbo:team ?team .
  ?team dbo:name ""Indianapolis Colts"" .
  ?player dbo:currentTeam ?currentTeam .
  ?currentTeam dbo:name ""Michigan Wolverines"" .
}",8.27449233497142e-232,0.0375,True,True
3091,"List all the locations of the companies whose are also located in Rancho Cucamonga, California ?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/locationCountry> <http://dbpedia.org/resource/Rancho_Cucamonga,_California> . ?x <http://dbpedia.org/ontology/locationCountry> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the locations of the companies whose are also located in Rancho Cucamonga, California ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company ?companyLocation
WHERE {
  ?company dbo:location dbp:Rancho_Cucamonga.
  ?company dbo:location ?companyLocation.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company ?companyLocation
WHERE {
  ?company dbo:location dbp:Rancho_Cucamonga.
  ?company dbo:location ?companyLocation.
}",2.7788812895482627e-155,0.05263157894736842,True,True
1757,What cities are near to Nihoa which is also known as Bird Island?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nihoa> <http://dbpedia.org/property/nearestCity> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What cities are near to Nihoa which is also known as Bird Island?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?island dbo:name ""Nihoa"" .
  ?island dbo:altLabel ""Bird Island"" .
  ?island dbo:locatedIn ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?island dbo:name ""Nihoa"" .
  ?island dbo:altLabel ""Bird Island"" .
  ?island dbo:locatedIn ?city .
}",2.8856766331839354e-155,0.06666666666666667,True,True
4808,Which company created BASIC and Language Integrated Query ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Microsoft_BASIC> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which company created BASIC and Language Integrated Query ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:foundedSoftware ?software .
  ?software dbo:name ""BASIC"" .
  FILTER (BOUND(?software))
  ?company dbo:foundedSoftware ?software2 .
  ?software2 dbo:name ""Language Integrated Query"" .
  FILTER (BOUND(?software2))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:foundedSoftware ?software .
  ?software dbo:name ""BASIC"" .
  FILTER (BOUND(?software))
  ?company dbo:foundedSoftware ?software2 .
  ?software2 dbo:name ""Language Integrated Query"" .
  FILTER (BOUND(?software2))
}",2.9851289841006984e-155,0.08108108108108109,True,True
3578,How many people are in the band with Juelz Santana?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Juelz_Santana> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people are in the band with Juelz Santana?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?bandCount
WHERE {
  ?person dbo:name ""Juelz Santana""^^xsd:string .
  ?person dbo:memberOf ?band .
  ?band dbo:members ?member .
  FILTER ( ?member != ?person )
  GROUP BY ?band
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?bandCount
WHERE {
  ?person dbo:name ""Juelz Santana""^^xsd:string .
  ?person dbo:memberOf ?band .
  ?band dbo:members ?member .
  FILTER ( ?member != ?person )
  GROUP BY ?band
}",2.3983374600418706e-155,0.05,False,False
91,How many party leaders are there whose parties are headquartered in Berlin?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Berlin> . ?x <http://dbpedia.org/ontology/leader> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many party leaders are there whose parties are headquartered in Berlin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?leader) AS ?count)
WHERE {
  ?leader dbo:party ?party .
  ?party dbp:headquarters ?location .
  ?location dbo:country ?country .
  FILTER ( ?country = dbo:Germany )
  FILTER ( ?location = dbo:Berlin )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?leader) AS ?count)
WHERE {
  ?leader dbo:party ?party .
  ?party dbp:headquarters ?location .
  ?location dbo:country ?country .
  FILTER ( ?country = dbo:Germany )
  FILTER ( ?location = dbo:Berlin )
}",2.306811013701292e-155,0.047619047619047616,True,True
642,Which company owns the manufacturer of the Edsel Ranger?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Edsel_Ranger> . ?x <http://dbpedia.org/property/parent> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which company owns the manufacturer of the Edsel Ranger?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?company ?manufacturer
WHERE {
  ?manufacturer dbo:product ?edsel .
  ?edsel rdfs:label ""Edsel Ranger"" .
  ?manufacturer dbo:company ?company .
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?company ?manufacturer
WHERE {
  ?manufacturer dbo:product ?edsel .
  ?edsel rdfs:label ""Edsel Ranger"" .
  ?manufacturer dbo:company ?company .
}",3.0943809285865547e-155,0.07142857142857142,True,True
1317,Where is the assembly of Caterpillar 797?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Caterpillar_797> <http://dbpedia.org/ontology/assembly> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where is the assembly of Caterpillar 797?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?company dbo:assemblyLocation ?location .
  FILTER (regex(?company, ""Caterpillar"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?company dbo:assemblyLocation ?location .
  FILTER (regex(?company, ""Caterpillar"", ""i""))
}",2.530465559854518e-155,0.0625,True,True
2070,What is a common nickname given to both Lyons Township high school and the wheaton college in massachusetts?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lyons_Township_High_School> <http://dbpedia.org/property/nickname> ?uri. <http://dbpedia.org/resource/Wheaton_College_(Massachusetts)> <http://dbpedia.org/property/nickname> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is a common nickname given to both Lyons Township high school and the wheaton college in massachusetts?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?nickname
WHERE {
  ?school dbo:commonNickname ?nickname .
  FILTER (regex(?nickname, ""Lyons Township"") || regex(?nickname, ""Wheaton College""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?nickname
WHERE {
  ?school dbo:commonNickname ?nickname .
  FILTER (regex(?nickname, ""Lyons Township"") || regex(?nickname, ""Wheaton College""))
}",2.384592839964215e-155,0.06097560975609756,True,True
3500,List the ideologies of the party of Boonchu Rojanastien?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Boonchu_Rojanastien> <http://dbpedia.org/property/party> ?x . ?x <http://dbpedia.org/ontology/ideology> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the ideologies of the party of Boonchu Rojanastien?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?ideology
WHERE {
  ?person dbo:name ""Boonchu Rojanastien"" .
  ?person dbo:party ?party .
  ?party dbo:ideology ?ideology .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?ideology
WHERE {
  ?person dbo:name ""Boonchu Rojanastien"" .
  ?person dbo:party ?party .
  ?party dbo:ideology ?ideology .
}",3.559043432561587e-155,0.08450704225352113,True,True
4839,Which  NASA astronaut was on mission Gemini 8?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/NASA> . ?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Gemini_8>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which  NASA astronaut was on mission Gemini 8?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?astronaut
WHERE {
  ?astronaut dbo:birthPlace ""United States"" .
  ?astronaut dbo:occupation ""Astronaut"" .
  ?astronaut dbo:mission ?mission .
  ?mission dbo:name ""Gemini 8"" .
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?astronaut
WHERE {
  ?astronaut dbo:birthPlace ""United States"" .
  ?astronaut dbo:occupation ""Astronaut"" .
  ?astronaut dbo:mission ?mission .
  ?mission dbo:name ""Gemini 8"" .
}",8.510469113101058e-232,0.04,True,True
108,What is the region of the Kim Sawchuk which is also served by the Airtours International Airways ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kim_Sawchuk> <http://dbpedia.org/property/region> ?uri. <http://dbpedia.org/resource/Airtours_International_Airways> <http://dbpedia.org/property/destinations> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the region of the Kim Sawchuk which is also served by the Airtours International Airways ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?region
WHERE {
  ?person dbo:name ""Kim Sawchuk"" .
  ?person dbo:region ?region .
  ?airline dbo:name ""Airtours International Airways"" .
  ?airline dbo:serves ?region .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?region
WHERE {
  ?person dbo:name ""Kim Sawchuk"" .
  ?person dbo:region ?region .
  ?airline dbo:name ""Airtours International Airways"" .
  ?airline dbo:serves ?region .
}",2.0194805030799393e-155,0.0375,True,True
3717,Whay common comic is written by Karakuri Dji Ultimo and narrated by The Incredible Hulk ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Karakuri_Dôji_Ultimo> <http://dbpedia.org/property/author> ?uri. <http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)> <http://dbpedia.org/property/narrated> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whay common comic is written by Karakuri Dji Ultimo and narrated by The Incredible Hulk ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?comic
WHERE {
  ?comic rdf:type dbo:Comic.
  ?comic dbo:author ?author .
  ?author dbo:name ""Karakuri Dji Ultimo"" .
  ?comic dbo:narrator ?narrator .
  ?narrator dbo:name ""The Incredible Hulk"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?comic
WHERE {
  ?comic rdf:type dbo:Comic.
  ?comic dbo:author ?author .
  ?author dbo:name ""Karakuri Dji Ultimo"" .
  ?comic dbo:narrator ?narrator .
  ?narrator dbo:name ""The Incredible Hulk"" .
}",2.5406524524079725e-155,0.04819277108433735,True,True
963,Who is the President of United World College of Costa Rica?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_World_College_of_Costa_Rica> <http://dbpedia.org/property/president> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the President of United World College of Costa Rica?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?president
WHERE {
  ?school dbo:country ""Costa Rica"" .
  ?school dbo:name ""United World College of Costa Rica"" .
  ?school dbo:president ?president .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?president
WHERE {
  ?school dbo:country ""Costa Rica"" .
  ?school dbo:name ""United World College of Costa Rica"" .
  ?school dbo:president ?president .
}",2.308595628361502e-155,0.058823529411764705,True,True
1813,Where is the tombstone of the congressman who died in the McLean hospital?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/McLean_Hospital> . ?x <http://dbpedia.org/property/restingplace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Congressman>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where is the tombstone of the congressman who died in the McLean hospital?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?location
WHERE {
  ?congressman dbo:deathPlace McLean Hospital .
  ?congressman dbo:tombstone ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?location
WHERE {
  ?congressman dbo:deathPlace McLean Hospital .
  ?congressman dbo:tombstone ?location .
}",2.50170125957988e-155,0.05555555555555555,False,False
2925,What are the TV shows whose network is also known as the CW?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterNames> <http://dbpedia.org/resource/The_CW> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the TV shows whose network is also known as the CW?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?showLabel ?show
WHERE {
  ?show dbo:network ?network .
  ?network dbo:name ""The CW"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?showLabel ?show
WHERE {
  ?show dbo:network ?network .
  ?network dbo:name ""The CW"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.951204860745888e-155,0.06172839506172839,False,False
783,Who has written the mary poppins musical?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mary_Poppins_(musical)> <http://dbpedia.org/ontology/author> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who has written the mary poppins musical?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?musical dbo:composer ?author .
  FILTER (str(?musical) = ""Mary Poppins (musical)"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?musical dbo:composer ?author .
  FILTER (str(?musical) = ""Mary Poppins (musical)"")
}",2.494821638843469e-155,0.06060606060606061,True,True
3886,Which magazines were founded by ann Wenner ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Jann_Wenner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which magazines were founded by ann Wenner ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?magazine
WHERE {
  ?magazine dbo:founder dbr:Ann_Wenner .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?magazine
WHERE {
  ?magazine dbo:founder dbr:Ann_Wenner .
}",2.5124539841526692e-155,0.05970149253731343,True,True
2324,What is the total number of other destinations of the airlines whose one of the destinations is Mediterranean Sea?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/destinations> <http://dbpedia.org/resource/Mediterranean_Sea> . ?x <http://dbpedia.org/property/destinations> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the total number of other destinations of the airlines whose one of the destinations is Mediterranean Sea?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?otherDestination) AS ?totalDestinations)
WHERE {
  ?airline dbo:destination ?destination .
  ?destination dbo:name ""Mediterranean Sea""^^xsd:string .
  ?airline dbo:destination ?otherDestination .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?otherDestination) AS ?totalDestinations)
WHERE {
  ?airline dbo:destination ?destination .
  ?destination dbo:name ""Mediterranean Sea""^^xsd:string .
  ?airline dbo:destination ?otherDestination .
}",2.3192471031465984e-155,0.06329113924050633,True,True
576,Which railway line goes through the stations which are a part of the North Caucasus railway?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/North_Caucasus_Railway> . ?x <http://dbpedia.org/ontology/servingRailwayLine> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Station>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which railway line goes through the stations which are a part of the North Caucasus railway?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?railwayLine
WHERE {
  ?station dbo:partOf ?northCaucasusRailway .
  ?northCaucasusRailway dbo:hasRailwayLine ?railwayLine .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?railwayLine
WHERE {
  ?station dbo:partOf ?northCaucasusRailway .
  ?northCaucasusRailway dbo:hasRailwayLine ?railwayLine .
}",3.0566417519593477e-155,0.06578947368421052,True,True
3136,To which country does Peter Blay owe his allegiance?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Peter_Blay> <http://dbpedia.org/property/allegiance> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which country does Peter Blay owe his allegiance?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?country
WHERE {
  ?person dbo:birthPlace ?place .
  ?place dbo:country ?country .
  ?person dbo:name ""Peter Blay"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?country
WHERE {
  ?person dbo:birthPlace ?place .
  ?place dbo:country ?country .
  ?person dbo:name ""Peter Blay"" .
}",2.4119102000777368e-155,0.058823529411764705,True,True
4254,Which military conflict took place in Israel and had commander as Jaber Al-Ahmad Al-Sabah?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Israel> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Jaber_Al-Ahmad_Al-Sabah>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which military conflict took place in Israel and had commander as Jaber Al-Ahmad Al-Sabah?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?conflict
WHERE {
  ?conflict dbo:involvedIn ?militaryConflict .
  ?militaryConflict dbp:location ?location .
  ?location dbo:country ?country .
  ?country rdfs:label ""Israel"" .
  ?militaryConflict dbo:commander ?commander .
  ?commander rdfs:label ""Jaber Al-Ahmad Al-Sabah"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?conflict
WHERE {
  ?conflict dbo:involvedIn ?militaryConflict .
  ?militaryConflict dbp:location ?location .
  ?location dbo:country ?country .
  ?country rdfs:label ""Israel"" .
  ?militaryConflict dbo:commander ?commander .
  ?commander rdfs:label ""Jaber Al-Ahmad Al-Sabah"" .
}",2.2474984413337904e-155,0.047619047619047616,True,True
1084,Name the resting place of Charles Edward Magoon?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_Edward_Magoon> <http://dbpedia.org/property/restingplace> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the resting place of Charles Edward Magoon?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?restingPlace
WHERE {
  ?person dbo:name ""Charles Edward Magoon"" .
  ?person dbo:restingPlace ?restingPlace .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?restingPlace
WHERE {
  ?person dbo:name ""Charles Edward Magoon"" .
  ?person dbo:restingPlace ?restingPlace .
}",2.4775553999024465e-155,0.0625,True,True
23,Which band's former member are Kevin Jonas and Joe Jonas?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Kevin_Jonas> . ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Joe_Jonas>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which band's former member are Kevin Jonas and Joe Jonas?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?band
WHERE {
  ?band dbo:member ?person .
  ?person dbo:memberOf ?band .
  ?person dbo:name ""Kevin Jonas"" .
  FILTER (BOUND(?band))
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?band
WHERE {
  ?band dbo:member ?person .
  ?person dbo:memberOf ?band .
  ?person dbo:name ""Kevin Jonas"" .
  FILTER (BOUND(?band))
}",2.4410426763339902e-155,0.05263157894736842,True,True
3845,Louis Dunbar is the coach of which basketball team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Louis_Dunbar>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Louis Dunbar is the coach of which basketball team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?person dbo:name ""Louis Dunbar"" .
  ?person dbo:coachOf ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?person dbo:name ""Louis Dunbar"" .
  ?person dbo:coachOf ?team .
}",8.174867218666773e-232,0.04411764705882353,True,True
2016,What is the resting place of the politician who succeeded Samuel Hayes?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Samuel_Hayes_(settler)> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the resting place of the politician who succeeded Samuel Hayes?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?politician ?restingPlace
WHERE {
  ?politician dbo:successorOf dbo:Samuel_Hayes .
  ?politician dbo:restingPlace ?restingPlace .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?politician ?restingPlace
WHERE {
  ?politician dbo:successorOf dbo:Samuel_Hayes .
  ?politician dbo:restingPlace ?restingPlace .
}",2.5175858750356875e-155,0.05555555555555555,True,True
4375,What are some things people born in Louisiana are famous for?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Louisiana> . ?x <http://dbpedia.org/property/knownFor> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some things people born in Louisiana are famous for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:birthPlace dbp:Louisiana .
  ?person dbo:occupation ?occupation .
  ?occupation rdfs:label ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:birthPlace dbp:Louisiana .
  ?person dbo:occupation ?occupation .
  ?occupation rdfs:label ?thing .
}",3.53714058675999e-155,0.08,True,True
571,What is the basketball team whose President's college is Brockport Golden Eagles?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/college> <http://dbpedia.org/resource/Brockport_Golden_Eagles> . ?uri <http://dbpedia.org/property/president> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the basketball team whose President's college is Brockport Golden Eagles?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?team
WHERE {
  ?team dbo:president ?president .
  ?president dbp:almaMater ?college .
  ?college rdfs:label ""Brockport Golden Eagles"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?team
WHERE {
  ?team dbo:president ?president .
  ?president dbp:almaMater ?college .
  ?college rdfs:label ""Brockport Golden Eagles"" .
}",2.4410426763339902e-155,0.05333333333333334,True,True
424,Who is the owner of the bank where Thomas Secunda works?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thomas_Secunda> <http://dbpedia.org/ontology/occupation> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the owner of the bank where Thomas Secunda works?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?owner
WHERE {
  ?person dbo:occupation ""banker"" .
  ?person dbp:employedBy ?bank .
  ?bank dbo:owner ?owner .
  FILTER ( ?person = <http://dbpedia.org/resource/Thomas_Secunda> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?owner
WHERE {
  ?person dbo:occupation ""banker"" .
  ?person dbp:employedBy ?bank .
  ?bank dbo:owner ?owner .
  FILTER ( ?person = <http://dbpedia.org/resource/Thomas_Secunda> )
}",2.5548810418069474e-155,0.06578947368421052,True,True
2613,Where can one find some quick bread in the world?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Quick_bread> . ?x <http://dbpedia.org/ontology/region> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where can one find some quick bread in the world?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?location dbo:cuisine ?cuisine .
  ?cuisine rdfs:subClassOf* dbo:QuickBread .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?location dbo:cuisine ?cuisine .
  ?cuisine rdfs:subClassOf* dbo:QuickBread .
}",3.650908595319347e-155,0.08450704225352113,True,True
2796,Which ancient country had capital as Nicomedia and History of Trier?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Nicomedia> . ?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/History_of_Trier> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which ancient country had capital as Nicomedia and History of Trier?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?country dbo:capital ?capital .
  ?capital dbo:name ""Nicomedia"" .
  ?country dbo:history ?history .
  ?history dbo:name ""History of Trier"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?country dbo:capital ?capital .
  ?capital dbo:name ""Nicomedia"" .
  ?country dbo:history ?history .
  ?history dbo:name ""History of Trier"" .
}",2.968021523431445e-155,0.06578947368421052,True,True
2695,Which airlines fly to Gimhae International Airport?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Gimhae_International_Airport> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which airlines fly to Gimhae International Airport?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?airline
WHERE {
  ?airline dbo:wikiPageRedirects* dbp:Gimhae_International_Airport .
  ?airline dbo:airlineType ?type .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?airline
WHERE {
  ?airline dbo:wikiPageRedirects* dbp:Gimhae_International_Airport .
  ?airline dbo:airlineType ?type .
}",2.4606427705034855e-155,0.06060606060606061,True,True
2220,Name the broadcast area of Radio Philippines Network ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Radio_Philippines_Network> <http://dbpedia.org/property/area> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the broadcast area of Radio Philippines Network ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?broadcastArea
WHERE {
  ?radio a dbo:RadioStation ;
  dbp:broadcastArea ?broadcastArea .
  FILTER (STR(?radio) = ""http://dbpedia.org/resource/Radio_Philippines_Network"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?broadcastArea
WHERE {
  ?radio a dbo:RadioStation ;
  dbp:broadcastArea ?broadcastArea .
  FILTER (STR(?radio) = ""http://dbpedia.org/resource/Radio_Philippines_Network"")
}",2.4440718429993668e-155,0.058823529411764705,True,True
3623,What have been made in the state whose capital is Boston?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/capital> <http://dbpedia.org/resource/Boston> . ?uri <http://dbpedia.org/ontology/location> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What have been made in the state whose capital is Boston?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?item
WHERE {
  ?state dbo:capital ?city .
  ?city dbo:name ""Boston""^^xsd:string .
  ?item dbo:location ?state .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?item
WHERE {
  ?state dbo:capital ?city .
  ?city dbo:name ""Boston""^^xsd:string .
  ?item dbo:location ?state .
}",3.53714058675999e-155,0.08108108108108109,True,True
733,Does Gibby Haynes play the saxophone?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Gibby_Haynes> <http://dbpedia.org/property/instrument> <http://dbpedia.org/resource/Saxophone> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Gibby Haynes play the saxophone?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?instrument
WHERE {
  ?person dbo:name ""Gibby Haynes"" .
  ?person dbo:playsInstrument ?instrument .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?instrument
WHERE {
  ?person dbo:name ""Gibby Haynes"" .
  ?person dbo:playsInstrument ?instrument .
}",2.3548635457910922e-155,0.04918032786885246,True,True
76,Which country has given citizenship to both saima chowdhury and edmund john?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saima_Chowdhury> <http://dbpedia.org/ontology/citizenship> ?uri. <http://dbpedia.org/resource/Edmund_John> <http://dbpedia.org/ontology/citizenship> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which country has given citizenship to both saima chowdhury and edmund john?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?person dbo:nationality ?country .
  FILTER (regex(?person, ""saima chowdhury"", ""i"") || regex(?person, ""edmund john"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?person dbo:nationality ?country .
  FILTER (regex(?person, ""saima chowdhury"", ""i"") || regex(?person, ""edmund john"", ""i""))
}",3.075337680136661e-155,0.0759493670886076,True,True
4055,Who is the parent organization of Get TV is also the label provider of I Pray on CHristmas ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/I_Pray_on_Christmas> <http://dbpedia.org/property/label> ?uri. <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the parent organization of Get TV is also the label provider of I Pray on CHristmas ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?parentOrganization ?labelProvider
WHERE {
  ?parentOrganization dbo:wikiPageRedirects ?tvShow .
  ?tvShow dbo:parentOrganization ?parentOrganization2 .
  ?tvShow dbo:label ?tvShowLabel .
  ?labelProvider dbo:wikiPageRedirects ?christmasPrayer .
  ?christmasPrayer dbo:label ?christmasPrayerLabel .
  FILTER (str(?tvShowLabel) = ""Get TV"")
  FILTER (str(?christmasPrayerLabel) = ""I Pray on CHristmas"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?parentOrganization ?labelProvider
WHERE {
  ?parentOrganization dbo:wikiPageRedirects ?tvShow .
  ?tvShow dbo:parentOrganization ?parentOrganization2 .
  ?tvShow dbo:label ?tvShowLabel .
  ?labelProvider dbo:wikiPageRedirects ?christmasPrayer .
  ?christmasPrayer dbo:label ?christmasPrayerLabel .
  FILTER (str(?tvShowLabel) = ""Get TV"")
  FILTER (str(?christmasPrayerLabel) = ""I Pray on CHristmas"")
}",1.876064362016577e-155,0.033707865168539325,True,True
448,Which shows are voiced by US citizens?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/stateOfOrigin> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/voices> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which shows are voiced by US citizens?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?show ?actor
WHERE {
  ?show dbo:genre ""TV Show"" .
  ?show dbp:voicedBy ?actor .
  ?actor dbo:nationality ""United States"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?show ?actor
WHERE {
  ?show dbo:genre ""TV Show"" .
  ?show dbp:voicedBy ?actor .
  ?actor dbo:nationality ""United States"" .
}",3.1537059338519422e-155,0.06944444444444445,True,True
3010,Which award has been won by Claudia Moro?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Claudia_Moro> <http://dbpedia.org/property/title> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which award has been won by Claudia Moro?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?award
WHERE {
  ?person dbo:name ""Claudia Moro"" .
  ?person dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?award
WHERE {
  ?person dbo:name ""Claudia Moro"" .
  ?person dbo:award ?award .
}",2.494821638843469e-155,0.06153846153846154,True,True
4727,How many television shows have  Fox Broadcasting Company as their channel?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many television shows have  Fox Broadcasting Company as their channel?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?show) AS ?count)
WHERE {
  ?show dbo:channel dbp:Fox Broadcasting Company .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?show) AS ?count)
WHERE {
  ?show dbo:channel dbp:Fox Broadcasting Company .
}",8.174867218666773e-232,0.04225352112676056,False,False
2640,Who holds shares in something famous for the Seven Spring Mountain Resort?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Seven_Springs_Mountain_Resort> . ?uri <http://dbpedia.org/property/owner> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who holds shares in something famous for the Seven Spring Mountain Resort?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?shareholder
WHERE {
  ?resort dbo:name ""Seven Spring Mountain Resort"" .
  ?resort dbo:partOf ?company .
  ?company dbo:shareholder ?shareholder .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?shareholder
WHERE {
  ?resort dbo:name ""Seven Spring Mountain Resort"" .
  ?resort dbo:partOf ?company .
  ?company dbo:shareholder ?shareholder .
}",3.0202505652128895e-155,0.06756756756756757,True,True
2166,What is the national origin of Focke-Wulf Fw 260 ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Focke-Wulf_Fw_260> <http://dbpedia.org/property/nationalOrigin> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the national origin of Focke-Wulf Fw 260 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?nationalOrigin
WHERE {
  ?aircraft dbo:nationalOrigin ?nationalOrigin .
  FILTER (regex(?aircraft, ""Focke-Wulf Fw 260"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?nationalOrigin
WHERE {
  ?aircraft dbo:nationalOrigin ?nationalOrigin .
  FILTER (regex(?aircraft, ""Focke-Wulf Fw 260"", ""i""))
}",2.4440718429993668e-155,0.058823529411764705,True,True
995,Where are the headquarters of Metro Transit (Minnesota)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Metro_Transit_(Minnesota)> <http://dbpedia.org/property/headquarters> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where are the headquarters of Metro Transit (Minnesota)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?location
WHERE {
  ?transit dbo:headquarters ?location .
  FILTER (regex(?transit, ""Metro Transit"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?location
WHERE {
  ?transit dbo:headquarters ?location .
  FILTER (regex(?transit, ""Metro Transit"", ""i""))
}",2.4440718429993668e-155,0.058823529411764705,True,True
2904,Georg Meissner was doctoral supervisor of which scientist ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Georg Meissner was doctoral supervisor of which scientist ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?student
WHERE {
  ?student dbo:doctoralAdvisor ?supervisor .
  ?supervisor dbo:name ""Georg Meissner"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?student
WHERE {
  ?student dbo:doctoralAdvisor ?supervisor .
  ?supervisor dbo:name ""Georg Meissner"" .
}",8.202720662090001e-232,0.04411764705882353,True,True
966,What is the major shrine of the monarchs whose successor is Dragimir of Travunia and Zachlumia?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Dragimir_of_Travunia_and_Zachlumia> . ?x <http://dbpedia.org/property/majorShrine> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Monarch>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the major shrine of the monarchs whose successor is Dragimir of Travunia and Zachlumia?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?majorShrine
WHERE {
  ?monarch dbo:successor ?successor .
  ?successor rdf:type dbo:Monarch .
  ?successor dbo:name ""Dragimir of Travunia and Zachlumia""^^xsd:string .
  ?monarch dbo:majorShrine ?majorShrine .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?majorShrine
WHERE {
  ?monarch dbo:successor ?successor .
  ?successor rdf:type dbo:Monarch .
  ?successor dbo:name ""Dragimir of Travunia and Zachlumia""^^xsd:string .
  ?monarch dbo:majorShrine ?majorShrine .
}",2.8559767164037747e-155,0.06329113924050633,True,True
3779,Which borough of the Corringham railway station is also the local authority of Buckhurst Hill County High School ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Corringham_railway_station> <http://dbpedia.org/property/borough> ?uri. <http://dbpedia.org/resource/Buckhurst_Hill_County_High_School> <http://dbpedia.org/ontology/localAuthority> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which borough of the Corringham railway station is also the local authority of Buckhurst Hill County High School ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?borough
WHERE {
  ?station dbo:borough ?borough .
  ?station rdfs:label ""Corringham railway station""@en .
  ?school dbo:location ?borough .
  ?school rdfs:label ""Buckhurst Hill County High School""@en .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?borough
WHERE {
  ?station dbo:borough ?borough .
  ?station rdfs:label ""Corringham railway station""@en .
  ?school dbo:location ?borough .
  ?school rdfs:label ""Buckhurst Hill County High School""@en .
}",1.978049756642675e-155,0.036585365853658534,True,True
629,Under whom did Charles Drummond Ellis do his PhD?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/Charles_Drummond_Ellis> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Under whom did Charles Drummond Ellis do his PhD?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?advisor
WHERE {
  ?advisor dbo:student ?charles
  ?charles dbo:birthDate ""1877-01-01""^^xsd:date .
  FILTER (regex(?charles, ""Charles Drummond Ellis""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?advisor
WHERE {
  ?advisor dbo:student ?charles
  ?charles dbo:birthDate ""1877-01-01""^^xsd:date .
  FILTER (regex(?charles, ""Charles Drummond Ellis""))
}",8.120546156106983e-232,0.043478260869565216,False,False
1513,What is the title of the successor of Kaulahea I?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kaulahea_I> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/property/title> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the title of the successor of Kaulahea I?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?successorTitle
WHERE {
  ?king dbo:successor ?successor .
  ?king dbo:name ""Kaulahea I"" .
  ?successor dbo:name ?successorTitle .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?successorTitle
WHERE {
  ?king dbo:successor ?successor .
  ?king dbo:name ""Kaulahea I"" .
  ?successor dbo:name ?successorTitle .
}",3.1537059338519422e-155,0.07352941176470588,True,True
918,"What is the number of occupation of the people who died in Tampa, Florida?",google/gemma-2-9b-it,"SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the number of occupation of the people who died in Tampa, Florida?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?occupation
WHERE {
  ?person dbo:deathPlace ""Tampa, Florida""^^geo:Place .
  ?person dbo:occupation ?occupation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?occupation
WHERE {
  ?person dbo:deathPlace ""Tampa, Florida""^^geo:Place .
  ?person dbo:occupation ?occupation .
}",3.0943809285865547e-155,0.06756756756756757,True,True
489,Name the species of Southwest African lion?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Southwest_African_lion> <http://dbpedia.org/ontology/species> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the species of Southwest African lion?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?species
WHERE {
  ?lion dbo:species ?species .
  FILTER (regex(?lion, ""Southwest African lion"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?species
WHERE {
  ?lion dbo:species ?species .
  FILTER (regex(?lion, ""Southwest African lion"", ""i""))
}",2.494821638843469e-155,0.06153846153846154,True,True
3872,What is the place of death of the lieutenant of Frank Steunenberg?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frank_Steunenberg> <http://dbpedia.org/property/lieutenant> ?x . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the place of death of the lieutenant of Frank Steunenberg?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?placeOfDeath
WHERE {
  ?person dbo:placeOfDeath ?placeOfDeath .
  ?person dbo:name ""Frank Steunenberg"" .
  ?person dbo:occupation ""Lieutenant"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?placeOfDeath
WHERE {
  ?person dbo:placeOfDeath ?placeOfDeath .
  ?person dbo:name ""Frank Steunenberg"" .
  ?person dbo:occupation ""Lieutenant"" .
}",3.0566417519593477e-155,0.06944444444444445,True,True
4718,What is the state whose largest city is Denver?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Denver>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the state whose largest city is Denver?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?city dbo:population ?population .
  ?city dbo:name ""Denver"" .
  ?city dbp:locatedIn ?state .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?city dbo:population ?population .
  ?city dbo:name ""Denver"" .
  ?city dbp:locatedIn ?state .
}",2.427831263680579e-155,0.06060606060606061,True,True
813,What are some movies written by British writers?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/British_people> . ?uri <http://dbpedia.org/ontology/writer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some movies written by British writers?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?movie ?writer
WHERE {
  ?movie dbo:writer ?writer .
  ?writer dbo:nationality ""British"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?movie ?writer
WHERE {
  ?movie dbo:writer ?writer .
  ?writer dbo:nationality ""British"" .
}",3.195205633963664e-155,0.07042253521126761,True,True
2069,Which are the comics characters painted by Bruce Timm and created by Paul Dini?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Bruce_Timm> . ?uri <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Paul_Dini>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which are the comics characters painted by Bruce Timm and created by Paul Dini?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?character
WHERE {
  ?character dbo:creator ?creator .
  ?creator dbo:name ""Paul Dini"" .
  ?character dbo:artist ?artist .
  ?artist dbo:name ""Bruce Timm"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?character
WHERE {
  ?character dbo:creator ?creator .
  ?creator dbo:name ""Paul Dini"" .
  ?character dbo:artist ?artist .
  ?artist dbo:name ""Bruce Timm"" .
}",2.344734865707205e-155,0.05063291139240506,True,True
935,Which builder of Ford Straight-6 engine is also the automobile platform provider of Chiva bus?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> ?uri. <http://dbpedia.org/resource/Ford_Straight-6_engine> <http://dbpedia.org/ontology/manufacturer> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which builder of Ford Straight-6 engine is also the automobile platform provider of Chiva bus?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?builder
WHERE {
  ?builder dbo:manufacturerOf ?engine .
  ?engine dbo:name ""Ford Straight-6 engine""^^xsd:string .
  ?builder dbo:produces ?vehicle .
  ?vehicle rdfs:subClassOf dbo:Bus .
  ?vehicle dbo:platformProvider dbo:Chiva .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?builder
WHERE {
  ?builder dbo:manufacturerOf ?engine .
  ?engine dbo:name ""Ford Straight-6 engine""^^xsd:string .
  ?builder dbo:produces ?vehicle .
  ?vehicle rdfs:subClassOf dbo:Bus .
  ?vehicle dbo:platformProvider dbo:Chiva .
}",2.567119010698462e-155,0.04878048780487805,True,True
4406,Who is the builder of Presidio Santa Cruz de Terrenate ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Presidio_Santa_Cruz_de_Terrenate> <http://dbpedia.org/ontology/builder> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the builder of Presidio Santa Cruz de Terrenate ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?builder
WHERE {
  ?building dbo:builder ?builder .
  FILTER (str(?building) = ""Presidio Santa Cruz de Terrenate"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?builder
WHERE {
  ?building dbo:builder ?builder .
  FILTER (str(?building) = ""Presidio Santa Cruz de Terrenate"")
}",2.3962983105918537e-155,0.057971014492753624,True,True
4490,How many people work in the Massachusetts house of Representatives?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Massachusetts_House_of_Representatives>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people work in the Massachusetts house of Representatives?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?house dbo:member ?person .
  FILTER (regex(?person, ""Massachusetts House of Representatives"", ""i""))
  GROUP BY ?house
  
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?house dbo:member ?person .
  FILTER (regex(?person, ""Massachusetts House of Representatives"", ""i""))
  GROUP BY ?house
  
}",8.642045500889408e-232,0.0547945205479452,False,False
4977,Count the total awards won by the writer who has won Goethe Prize ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Goethe_Prize> . ?x <http://dbpedia.org/property/awards> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the total awards won by the writer who has won Goethe Prize ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?award) AS ?awardCount)
WHERE {
  ?writer dbo:birthDate ?birth.
  ?writer dbo:award ?award.
  ?award dbo:name ""Goethe Prize"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?award) AS ?awardCount)
WHERE {
  ?writer dbo:birthDate ?birth.
  ?writer dbo:award ?award.
  ?award dbo:name ""Goethe Prize"" .
}",2.426555136425675e-155,0.06329113924050633,True,True
3846,Do the White Plains Road lie in the Bronx county?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/White_Plains_Road> <http://dbpedia.org/property/counties> <http://dbpedia.org/resource/The_Bronx> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Do the White Plains Road lie in the Bronx county?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?road ?county
WHERE {
  ?road dbo:name ""White Plains Road"" .
  ?road dbo:location ?county .
  ?county dbo:name ""Bronx County"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?road ?county
WHERE {
  ?road dbo:name ""White Plains Road"" .
  ?road dbo:location ?county .
  ?county dbo:name ""Bronx County"" .
}",2.1483903094550452e-155,0.04411764705882353,True,True
1750,Does the Amazon River start in Arequipa Region?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Amazon_River> <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/Arequipa_Region> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the Amazon River start in Arequipa Region?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:location dbo:ArequipaRegion .
  ?x dbo:source dbp:AmazonRiver .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:location dbo:ArequipaRegion .
  ?x dbo:source dbp:AmazonRiver .
}",2.2898861187450904e-155,0.046875,True,True
1409,What are the television shows whose starting music is composed by Ron Grainer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the television shows whose starting music is composed by Ron Grainer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:composer ?composer .
  ?composer dbo:name ""Ron Grainer"" .
  ?show dbo:genre ""Television show"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:composer ?composer .
  ?composer dbo:name ""Ron Grainer"" .
  ?show dbo:genre ""Television show"" .
}",2.2814337887592556e-155,0.05194805194805195,True,True
4942,In which cities do some railways operated by Russian railways start?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/operatedBy> <http://dbpedia.org/resource/Russian_Railways> . ?x <http://dbpedia.org/ontology/routeStart> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which cities do some railways operated by Russian railways start?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?railway dbo:operator ?operator .
  ?operator dbo:name ""Russian Railways"" .
  ?railway dbp:startsIn ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?railway dbo:operator ?operator .
  ?operator dbo:name ""Russian Railways"" .
  ?railway dbp:startsIn ?city .
}",3.5156372159951298e-155,0.08,True,True
102,Which country's leader is David Johnston?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/David_Johnston>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which country's leader is David Johnston?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?country
WHERE {
  ?leader dbo:birthDate ""1939-01-01""^^xsd:date .
  ?leader dbo:name ""David Johnston"" .
  ?leader dbo:country ?country .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?country
WHERE {
  ?leader dbo:birthDate ""1939-01-01""^^xsd:date .
  ?leader dbo:name ""David Johnston"" .
  ?leader dbo:country ?country .
}",8.174867218666773e-232,0.04477611940298507,True,True
413,What are the movies whose cinematographer is Gregg Toland?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Gregg_Toland>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the movies whose cinematographer is Gregg Toland?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Gregg Toland"" .
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Gregg Toland"" .
}",2.4606427705034855e-155,0.058823529411764705,True,True
20,Which source country of SamurAbsheron channel is the birth place of Anar Salmanov?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Samur–Absheron_channel> <http://dbpedia.org/ontology/sourceCountry> ?uri. <http://dbpedia.org/resource/Anar_Salmanov> <http://dbpedia.org/property/placeOfBirth> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which source country of SamurAbsheron channel is the birth place of Anar Salmanov?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?birthPlace
WHERE {
  ?channel dbo:sourceCountry ?country .
  ?country rdfs:label ""Azerbaijan"" .
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:name ""Anar Salmanov"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?birthPlace
WHERE {
  ?channel dbo:sourceCountry ?country .
  ?country rdfs:label ""Azerbaijan"" .
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:name ""Anar Salmanov"" .
}",2.09870814592606e-155,0.038461538461538464,True,True
2527,"What sport amongst the one Lagos Preparatory School practices, did Willian Garne play for?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lagos_Preparatory_School> <http://dbpedia.org/ontology/sport> ?uri. <http://dbpedia.org/resource/William_Garne> <http://dbpedia.org/ontology/occupation> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What sport amongst the one Lagos Preparatory School practices, did Willian Garne play for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?sport
WHERE {
  ?school dbo:location ""Lagos, Nigeria""@en .
  ?school dbo:name ""Lagos Preparatory School""@en .
  ?school dbo:practicesSport ?sport .
  ?player dbo:name ""Willian Garne""@en .
  ?player dbo:playsFor ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?sport
WHERE {
  ?school dbo:location ""Lagos, Nigeria""@en .
  ?school dbo:name ""Lagos Preparatory School""@en .
  ?school dbo:practicesSport ?sport .
  ?player dbo:name ""Willian Garne""@en .
  ?player dbo:playsFor ?sport .
}",2.0088791894285736e-155,0.036585365853658534,True,True
2730,What is the nickname of the home stadium of Angels Toru?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Angels_Toruń> <http://dbpedia.org/ontology/homeStadium> ?x . ?x <http://dbpedia.org/property/nickname> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the nickname of the home stadium of Angels Toru?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?nickname
WHERE {
  ?stadium dbo:officialName ""Angels Toru"" .
  ?stadium dbo:nickname ?nickname .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?nickname
WHERE {
  ?stadium dbo:officialName ""Angels Toru"" .
  ?stadium dbo:nickname ?nickname .
}",3.1537059338519422e-155,0.07142857142857142,True,True
3389,What is the route end of Birmingham and Oxford Junction Railway ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway> <http://dbpedia.org/ontology/routeEnd> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the route end of Birmingham and Oxford Junction Railway ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?routeEnd
WHERE {
  ?railway dbo:routeEnd ?routeEnd .
  FILTER (STR(?railway) = ""Birmingham_and_Oxford_Junction_Railway"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?routeEnd
WHERE {
  ?railway dbo:routeEnd ?routeEnd .
  FILTER (STR(?railway) = ""Birmingham_and_Oxford_Junction_Railway"")
}",2.4440718429993668e-155,0.058823529411764705,True,True
3511,Where did the conflict take place where Liu Mingchuan fought?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liu_Mingchuan> <http://dbpedia.org/property/battles> ?x . ?x <http://dbpedia.org/ontology/territory> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the conflict take place where Liu Mingchuan fought?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?conflict dbo:participant ?person .
  ?person dbo:name ""Liu Mingchuan"" .
  ?conflict dbo:location ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?conflict dbo:participant ?person .
  ?person dbo:name ""Liu Mingchuan"" .
  ?conflict dbo:location ?location .
}",3.6040982025556637e-155,0.08333333333333333,True,True
3332,In which company is Raymond Conner at an important position?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Raymond_Conner> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which company is Raymond Conner at an important position?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?company
WHERE {
  ?person dbo:name ""Raymond Conner"" .
  ?person dbo:position ?position .
  ?person dbo:company ?company .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?company
WHERE {
  ?person dbo:name ""Raymond Conner"" .
  ?person dbo:position ?position .
  ?person dbo:company ?company .
}",2.3809857162598948e-155,0.05714285714285714,True,True
2535,Where did Andy Wyant die and Robert Rodi was born in?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_Rodi> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/Andy_Wyant> <http://dbpedia.org/property/placeOfDeath> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did Andy Wyant die and Robert Rodi was born in?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?deathPlace ?birthPlace
WHERE {
  ?person a dbo:Person ;
    dbo:name ?name .
  FILTER(?name = ""Andy Wyant"")
  ?person dbo:deathPlace ?deathPlace .
  
  ?person2 a dbo:Person ;
    dbo:name ?name2 .
  FILTER(?name2 = ""Robert Rodi"")
  ?person2 dbo:birthPlace ?birthPlace .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?deathPlace ?birthPlace
WHERE {
  ?person a dbo:Person ;
    dbo:name ?name .
  FILTER(?name = ""Andy Wyant"")
  ?person dbo:deathPlace ?deathPlace .
  
  ?person2 a dbo:Person ;
    dbo:name ?name2 .
  FILTER(?name2 = ""Robert Rodi"")
  ?person2 dbo:birthPlace ?birthPlace .
}",2.5024440083160195e-155,0.047058823529411764,True,True
3099,Which team did Wilfred McDonalds and Cam Plante play for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wilfred_McDonald> <http://dbpedia.org/property/playedFor> ?uri. <http://dbpedia.org/resource/Cam_Plante> <http://dbpedia.org/property/playedFor> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which team did Wilfred McDonalds and Cam Plante play for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthDate ?birth.
  ?player dbo:name ?name.
  FILTER (regex(?name, ""Wilfred McDonalds"", ""i"") || regex(?name, ""Cam Plante"", ""i""))
  ?player dbo:memberOf ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthDate ?birth.
  ?player dbo:name ?name.
  FILTER (regex(?name, ""Wilfred McDonalds"", ""i"") || regex(?name, ""Cam Plante"", ""i""))
  ?player dbo:memberOf ?team .
}",3.322851996412995e-155,0.07407407407407407,True,True
3553,Which set of researchers won the Gold Medal of the Royal Astronomical Society award?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Gold_Medal_of_the_Royal_Astronomical_Society>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which set of researchers won the Gold Medal of the Royal Astronomical Society award?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?researcher
WHERE {
  ?researcher dbo:award <http://dbpedia.org/resource/Gold_Medal_of_the_Royal_Astronomical_Society> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?researcher
WHERE {
  ?researcher dbo:award <http://dbpedia.org/resource/Gold_Medal_of_the_Royal_Astronomical_Society> .
}",3.032816514970993e-155,0.07142857142857142,True,True
14,What tv series can be said to be related to the sarah jane adventure and dr who confidential?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/The_Sarah_Jane_Adventures> . ?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Doctor_Who_Confidential> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What tv series can be said to be related to the sarah jane adventure and dr who confidential?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?tvSeries
WHERE {
  ?tvSeries dbo:genre ?genre .
  ?genre rdfs:subClassOf* dbo:ScienceFictionTelevisionSeries .
  ?tvSeries dbo:relatedTo ?relatedTo .
  ?relatedTo dbo:wikiPageRedirects* dbo:SarahJaneAdventures .
  FILTER(?relatedTo != dbo:SarahJaneAdventures)
  UNION
  ?tvSeries dbo:genre ?genre .
  ?genre rdfs:subClassOf* dbo:ScienceFictionTelevisionSeries .
  ?tvSeries dbo:relatedTo ?relatedTo .
  ?relatedTo dbo:wikiPageRedirects* dbo:DoctorWhoConfidential .
  FILTER(?relatedTo != dbo:DoctorWhoConfidential)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?tvSeries
WHERE {
  ?tvSeries dbo:genre ?genre .
  ?genre rdfs:subClassOf* dbo:ScienceFictionTelevisionSeries .
  ?tvSeries dbo:relatedTo ?relatedTo .
  ?relatedTo dbo:wikiPageRedirects* dbo:SarahJaneAdventures .
  FILTER(?relatedTo != dbo:SarahJaneAdventures)
  UNION
  ?tvSeries dbo:genre ?genre .
  ?genre rdfs:subClassOf* dbo:ScienceFictionTelevisionSeries .
  ?tvSeries dbo:relatedTo ?relatedTo .
  ?relatedTo dbo:wikiPageRedirects* dbo:DoctorWhoConfidential .
  FILTER(?relatedTo != dbo:DoctorWhoConfidential)
}",2.684820574213228e-155,0.07058823529411765,False,False
2704,"Name the river whose source is located in Itasca State Park and mouth is located in Pilottown, Louisiana?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Itasca_State_Park> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Pilottown,_Louisiana>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the river whose source is located in Itasca State Park and mouth is located in Pilottown, Louisiana?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:source ?source .
  ?source dbo:locatedIn <http://dbpedia.org/resource/Itasca_State_Park> .
  ?river dbo:mouth ?mouth .
  ?mouth dbo:locatedIn <http://dbpedia.org/resource/Pilottown,_Louisiana> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:source ?source .
  ?source dbo:locatedIn <http://dbpedia.org/resource/Itasca_State_Park> .
  ?river dbo:mouth ?mouth .
  ?mouth dbo:locatedIn <http://dbpedia.org/resource/Pilottown,_Louisiana> .
}",2.9024197612372904e-155,0.0641025641025641,True,True
1657,Name some TV shows whose theme is made by a band associated with Buckethead?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Buckethead> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name some TV shows whose theme is made by a band associated with Buckethead?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?showTitle
WHERE {
  ?show dbo:theme ?theme .
  ?theme dbo:composer ?composer .
  ?composer dbo:memberOf ?band .
  ?band dbo:member ?buckethead .
  ?show dbo:title ?showTitle .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?showTitle
WHERE {
  ?show dbo:theme ?theme .
  ?theme dbo:composer ?composer .
  ?composer dbo:memberOf ?band .
  ?band dbo:member ?buckethead .
  ?show dbo:title ?showTitle .
}",2.8409841948588806e-155,0.06097560975609756,True,True
118,Name the sea with Helsinki as one of the shore city and is also an outflow for Danish straits?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Helsinki> . ?uri <http://dbpedia.org/property/outflow> <http://dbpedia.org/resource/Danish_straits>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the sea with Helsinki as one of the shore city and is also an outflow for Danish straits?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?sea
WHERE {
  ?sea dbo:capital ?city .
  ?city dbo:locatedIn ?country .
  ?country dbo:name ""Finland""@en .
  ?sea dbo:waterBodyType ""Sea""@en .
  ?sea dbo:connectedTo ?connectedTo .
  ?connectedTo dbo:connectedTo ?danishStraits .
  FILTER (regex(?danishStraits, ""Danish Straits"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?sea
WHERE {
  ?sea dbo:capital ?city .
  ?city dbo:locatedIn ?country .
  ?country dbo:name ""Finland""@en .
  ?sea dbo:waterBodyType ""Sea""@en .
  ?sea dbo:connectedTo ?connectedTo .
  ?connectedTo dbo:connectedTo ?danishStraits .
  FILTER (regex(?danishStraits, ""Danish Straits"", ""i""))
}",8.029654430073048e-232,0.033707865168539325,True,True
1692,Who was the architect of the stadium currently run by Brandenton?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Bradenton,_Florida> . ?x <http://dbpedia.org/property/architect> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the architect of the stadium currently run by Brandenton?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?architect
WHERE {
  ?stadium dbo:operator ?operator .
  ?operator dbo:name ""Brandenton""@en .
  ?stadium dbo:architect ?architect .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?architect
WHERE {
  ?stadium dbo:operator ?operator .
  ?operator dbo:name ""Brandenton""@en .
  ?stadium dbo:architect ?architect .
}",2.486113577066771e-155,0.0547945205479452,True,True
1481,Which sports are played typically in private schools?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/schooltype> <http://dbpedia.org/resource/Private_school> . ?x <http://dbpedia.org/ontology/sport> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports are played typically in private schools?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?sport
WHERE {
  ?school dbo:type dbo:PrivateSchool .
  ?school dbp:sportsPlayed ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?sport
WHERE {
  ?school dbo:type dbo:PrivateSchool .
  ?school dbp:sportsPlayed ?sport .
}",3.776411644491886e-155,0.08823529411764706,True,True
3756,How many subjects are covered in the publications of Doubleday?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Doubleday_(publisher)> . ?x <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many subjects are covered in the publications of Doubleday?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT (COUNT(DISTINCT ?subject) AS ?count)
WHERE {
  ?publisher dbr:name ""Doubleday"" .
  ?publisher dbo:publications ?publication .
  ?publication dbo:subject ?subject .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT (COUNT(DISTINCT ?subject) AS ?count)
WHERE {
  ?publisher dbr:name ""Doubleday"" .
  ?publisher dbo:publications ?publication .
  ?publication dbo:subject ?subject .
}",3.0566417519593477e-155,0.06493506493506493,True,True
661,Who was in military unit which played the role of Air interdiction?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/role> <http://dbpedia.org/resource/Air_interdiction> . ?uri <http://dbpedia.org/ontology/militaryUnit> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was in military unit which played the role of Air interdiction?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:militaryUnit ?unit .
  ?unit dbo:role ?role .
  ?role rdfs:label ""Air interdiction""@en .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:militaryUnit ?unit .
  ?unit dbo:role ?role .
  ?role rdfs:label ""Air interdiction""@en .
}",3.473781407941057e-155,0.07792207792207792,True,True
2625,"What is the river whose source region is North-Western Province, Zambia and river mouth is Indian Ocean?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Indian_Ocean>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the river whose source region is North-Western Province, Zambia and river mouth is Indian Ocean?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:sourceRegion <http://dbpedia.org/resource/North-Western_Province,_Zambia> .
  ?river dbo:mouth <http://dbpedia.org/resource/Indian_Ocean> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:sourceRegion <http://dbpedia.org/resource/North-Western_Province,_Zambia> .
  ?river dbo:mouth <http://dbpedia.org/resource/Indian_Ocean> .
}",3.0566417519593477e-155,0.06756756756756757,True,True
2078,What games are played at universities in Lanao Del Sur?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/state> <http://dbpedia.org/resource/Lanao_del_Sur> . ?x <http://dbpedia.org/ontology/athletics> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What games are played at universities in Lanao Del Sur?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?game
WHERE {
  ?university dbo:location <http://dbpedia.org/resource/Lanao_del_Sur> .
  ?university dbo:sportsEvent ?game .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?game
WHERE {
  ?university dbo:location <http://dbpedia.org/resource/Lanao_del_Sur> .
  ?university dbo:sportsEvent ?game .
}",3.650908595319347e-155,0.0821917808219178,True,True
3671,What is the alma mater of the senator who is the successor of Warren Magnuson ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Warren_Magnuson> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Senator>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the alma mater of the senator who is the successor of Warren Magnuson ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?successor ?successorAlmaMater
WHERE {
  ?successor dbo:successorOf <http://dbpedia.org/resource/Warren_Magnuson> .
  ?successor dbo:almaMater ?successorAlmaMater .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?successor ?successorAlmaMater
WHERE {
  ?successor dbo:successorOf <http://dbpedia.org/resource/Warren_Magnuson> .
  ?successor dbo:almaMater ?successorAlmaMater .
}",2.5703190919374843e-155,0.0684931506849315,True,True
4336,What is the profession of the William Luther Hill and also the office of the Richard Coke ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Luther_Hill> <http://dbpedia.org/ontology/profession> ?uri. <http://dbpedia.org/resource/Richard_Coke> <http://dbpedia.org/property/office> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the profession of the William Luther Hill and also the office of the Richard Coke ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession ?office
WHERE {
  ?person dbo:name ""William Luther Hill"" .
  ?person dbo:profession ?profession .
  ?person2 dbo:name ""Richard Coke"" .
  ?person2 dbo:office ?office .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession ?office
WHERE {
  ?person dbo:name ""William Luther Hill"" .
  ?person dbo:profession ?profession .
  ?person2 dbo:name ""Richard Coke"" .
  ?person2 dbo:office ?office .
}",2.0411965960034616e-155,0.03896103896103896,True,True
3328,Does the Jordan River start in the Golan Heights?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Jordan_River> <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/Golan_Heights> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the Jordan River start in the Golan Heights?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?start
WHERE {
  ?river dbo:name ""Jordan River"" .
  ?river dbo:source ?start .
  ?start dbo:name ""Golan Heights"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?start
WHERE {
  ?river dbo:name ""Jordan River"" .
  ?river dbo:source ?start .
  ?start dbo:name ""Golan Heights"" .
}",2.1880577381778143e-155,0.04477611940298507,True,True
2573,What is the county of Saint Lucia national cricket team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saint_Lucia_national_cricket_team> <http://dbpedia.org/ontology/county> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the county of Saint Lucia national cricket team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?county
WHERE {
  ?team dbo:nationalTeamOf ?country .
  ?country dbo:county ?county .
  FILTER (regex(?team, ""Saint Lucia national cricket team"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?county
WHERE {
  ?team dbo:nationalTeamOf ?country .
  ?country dbo:county ?county .
  FILTER (regex(?team, ""Saint Lucia national cricket team"", ""i""))
}",2.336751314796786e-155,0.056338028169014086,True,True
3358,What are all the countires where food related to tuna salad is consumed?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Tuna_salad> . ?x <http://dbpedia.org/property/country> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are all the countires where food related to tuna salad is consumed?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?country dbo:cuisine ?cuisine .
  ?cuisine rdfs:label ?cuisineLabel .
  FILTER (regex(?cuisineLabel, ""tuna"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?country dbo:cuisine ?cuisine .
  ?cuisine rdfs:label ?cuisineLabel .
  FILTER (regex(?cuisineLabel, ""tuna"", ""i""))
}",3.157656468883577e-155,0.07692307692307693,True,True
426,What country had the title of 2001 Speedway Ekstraliga?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2001_Speedway_Ekstraliga> <http://dbpedia.org/property/title> ?x . ?x <http://dbpedia.org/ontology/country> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What country had the title of 2001 Speedway Ekstraliga?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?country
WHERE {
  ?league dbo:title ""2001 Speedway Ekstraliga"" .
  ?league dbo:champion ?team .
  ?team dbo:country ?country .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?country
WHERE {
  ?league dbo:title ""2001 Speedway Ekstraliga"" .
  ?league dbo:champion ?team .
  ?team dbo:country ?country .
}",3.0943809285865547e-155,0.06944444444444445,True,True
4066,The fugitive Kind and the Notebook of Trigorin is written by what author?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Fugitive_Kind> <http://dbpedia.org/property/writer> ?uri. <http://dbpedia.org/resource/The_Notebook_of_Trigorin> <http://dbpedia.org/ontology/author> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: The fugitive Kind and the Notebook of Trigorin is written by what author?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?work dbo:author ?author .
  ?work rdfs:label ""The fugitive Kind and the Notebook of Trigorin"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?work dbo:author ?author .
  ?work rdfs:label ""The fugitive Kind and the Notebook of Trigorin"" .
}",2.9204463302606032e-155,0.06944444444444445,True,True
4341,Ricky Gervais is the executive producer of the series having how many fictional characters?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Ricky_Gervais> . ?uri <http://dbpedia.org/ontology/series> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Ricky Gervais is the executive producer of the series having how many fictional characters?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?numberOfCharacters
WHERE {
  ?series dbo:executiveProducer <http://dbpedia.org/resource/Ricky_Gervais> .
  ?series dbo:numberOfCharacters ?numberOfCharacters .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?numberOfCharacters
WHERE {
  ?series dbo:executiveProducer <http://dbpedia.org/resource/Ricky_Gervais> .
  ?series dbo:numberOfCharacters ?numberOfCharacters .
}",3.1137823863213763e-155,0.06666666666666667,True,True
4225,When did Aghasalim Childagh die?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aghasalim_Childagh> <http://dbpedia.org/property/deathDate> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When did Aghasalim Childagh die?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?deathDate
WHERE {
  <http://dbpedia.org/resource/Aghasalim_Childagh> dbo:deathDate ?deathDate .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?deathDate
WHERE {
  <http://dbpedia.org/resource/Aghasalim_Childagh> dbo:deathDate ?deathDate .
}",9.713104353077714e-79,0.0847457627118644,True,True
1444,What sports are played at universities affiliated by States Colleges and Universities athletic association?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/State_Colleges_and_Universities_Athletic_Association> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What sports are played at universities affiliated by States Colleges and Universities athletic association?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX schema: <http://schema.org/>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:affiliatedWith ?association .
  ?association rdfs:label ""States Colleges and Universities athletic association"" .
  ?university dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX schema: <http://schema.org/>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:affiliatedWith ?association .
  ?association rdfs:label ""States Colleges and Universities athletic association"" .
  ?university dbo:sports ?sport .
}",2.9346708496857675e-155,0.06329113924050633,True,True
1846,List the producers who produced movies starring Michael Jackson.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Michael_Jackson> . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the producers who produced movies starring Michael Jackson.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?producer
WHERE {
  ?movie dbo:starring dbr:Michael_Jackson .
  ?movie dbo:producer ?producer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?producer
WHERE {
  ?movie dbo:starring dbr:Michael_Jackson .
  ?movie dbo:producer ?producer .
}",3.195205633963664e-155,0.07042253521126761,True,True
755,Which organisation has superintendent as Lieutenant general (United States)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/superintendent> <http://dbpedia.org/resource/Lieutenant_general_(United_States)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which organisation has superintendent as Lieutenant general (United States)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organisation
WHERE {
  ?organisation dbo:chairman ?person .
  ?person dbo:militaryRank ""Lieutenant general""^^xsd:string .
  ?person dbo:country ""United States""^^xsd:string .
  FILTER (regex(?organisation, ""organisation""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organisation
WHERE {
  ?organisation dbo:chairman ?person .
  ?person dbo:militaryRank ""Lieutenant general""^^xsd:string .
  ?person dbo:country ""United States""^^xsd:string .
  FILTER (regex(?organisation, ""organisation""))
}",7.992219124248642e-232,0.04054054054054054,True,True
4282,Where in the us military did pierre r graham and edwin f hunter work?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pierre_R._Graham> <http://dbpedia.org/property/branch> ?uri. <http://dbpedia.org/resource/Edwin_F._Hunter> <http://dbpedia.org/property/branch> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where in the us military did pierre r graham and edwin f hunter work?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?branch
WHERE {
  ?person dbo:birthPlace ""United States"" .
  ?person dbo:name ""Pierre R. Graham"" .
  ?person dbo:occupation ""Military officer"" .
  ?person dbo:memberOf ?branch .
  
  ?person2 dbo:birthPlace ""United States"" .
  ?person2 dbo:name ""Edwin F. Hunter"" .
  ?person2 dbo:occupation ""Military officer"" .
  ?person2 dbo:memberOf ?branch .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?branch
WHERE {
  ?person dbo:birthPlace ""United States"" .
  ?person dbo:name ""Pierre R. Graham"" .
  ?person dbo:occupation ""Military officer"" .
  ?person dbo:memberOf ?branch .
  
  ?person2 dbo:birthPlace ""United States"" .
  ?person2 dbo:name ""Edwin F. Hunter"" .
  ?person2 dbo:occupation ""Military officer"" .
  ?person2 dbo:memberOf ?branch .
}",2.9361994042171736e-155,0.07142857142857142,True,True
506,List the awards received of the person whose child is Daine Disney Miller?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Diane_Disney_Miller> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the awards received of the person whose child is Daine Disney Miller?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:child ?child .
  ?child dbo:name ""Daine Disney Miller""^^xsd:string .
  ?person dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:child ?child .
  ?child dbo:name ""Daine Disney Miller""^^xsd:string .
  ?person dbo:award ?award .
}",3.0566417519593477e-155,0.06666666666666667,True,True
4810,Among which basket ball team having arena as The Palace of Auburn hills has president as Stan Van Gundy ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/arena> <http://dbpedia.org/resource/The_Palace_of_Auburn_Hills> . ?uri <http://dbpedia.org/property/president> <http://dbpedia.org/resource/Stan_Van_Gundy>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Among which basket ball team having arena as The Palace of Auburn hills has president as Stan Van Gundy ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team
WHERE {
  ?team dbo:name ?teamName .
  ?team dbo:arena ?arena .
  ?arena dbo:name ""The Palace of Auburn Hills""^^xsd:string .
  ?team dbo:president ?president .
  ?president dbo:name ""Stan Van Gundy""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team
WHERE {
  ?team dbo:name ?teamName .
  ?team dbo:arena ?arena .
  ?arena dbo:name ""The Palace of Auburn Hills""^^xsd:string .
  ?team dbo:president ?president .
  ?president dbo:name ""Stan Van Gundy""^^xsd:string .
}",2.182021659333324e-155,0.045454545454545456,True,True
1489,Name all the venues of the convention which has also been hosted in San Diego Convention ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/venue> <http://dbpedia.org/resource/San_Diego_Convention_Center> . ?x <http://dbpedia.org/property/venue> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name all the venues of the convention which has also been hosted in San Diego Convention ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?venue
WHERE {
  ?convention dbo:location ?location .
  ?location dbo:name ""San Diego Convention"" .
  ?convention dbo:venue ?venue .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?venue
WHERE {
  ?convention dbo:location ?location .
  ?location dbo:name ""San Diego Convention"" .
  ?convention dbo:venue ?venue .
}",3.3753507584714003e-155,0.0759493670886076,True,True
2142,Who operates the bridges designed by Malaysian PWD?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Malaysian_Public_Works_Department> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who operates the bridges designed by Malaysian PWD?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?operator
WHERE {
  ?bridge dbo:designedBy ?designer .
  ?designer dbo:country ?country .
  FILTER(?country = ""Malaysia"")
  ?bridge dbo:operatedBy ?operator .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?operator
WHERE {
  ?bridge dbo:designedBy ?designer .
  ?designer dbo:country ?country .
  FILTER(?country = ""Malaysia"")
  ?bridge dbo:operatedBy ?operator .
}",3.075337680136661e-155,0.06666666666666667,True,True
1764,Where are renaissance centers located?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Renaissance_Center> <http://dbpedia.org/property/address> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where are renaissance centers located?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?location dbo:wikiPageRedirects ?page .
  ?page dbo:description ""Renaissance"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?location dbo:wikiPageRedirects ?page .
  ?page dbo:description ""Renaissance"" .
}",3.2050345448863812e-155,0.08064516129032258,True,True
1340,Give me a count of everything owned by the network whose sister name is The CW?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/sisterNames> <http://dbpedia.org/resource/The_CW> . ?uri <http://dbpedia.org/property/network> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me a count of everything owned by the network whose sister name is The CW?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?ownedItem) AS ?count)
WHERE {
  ?network dbo:sisterNetwork ?sisterNetwork .
  ?sisterNetwork rdfs:label ""The CW"" .
  ?network dbo:owns ?ownedItem .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?ownedItem) AS ?count)
WHERE {
  ?network dbo:sisterNetwork ?sisterNetwork .
  ?sisterNetwork rdfs:label ""The CW"" .
  ?network dbo:owns ?ownedItem .
}",2.951204860745888e-155,0.06097560975609756,True,True
4034,Which animator of Tommy Tucker's Tooth is also the film director of Alice's Wonderland ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alice's_Wonderland> <http://dbpedia.org/ontology/director> ?uri. <http://dbpedia.org/resource/Tommy_Tucker's_Tooth> <http://dbpedia.org/property/animator> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which animator of Tommy Tucker's Tooth is also the film director of Alice's Wonderland ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?animator ?filmDirector
WHERE {
  ?animator dbo:animatorOf ?film .
  ?film dbo:title ""Tommy Tucker's Tooth""^^xsd:string .
  ?filmDirector dbo:directorOf ?film2 .
  ?film2 dbo:title ""Alice's Wonderland""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?animator ?filmDirector
WHERE {
  ?animator dbo:animatorOf ?film .
  ?film dbo:title ""Tommy Tucker's Tooth""^^xsd:string .
  ?filmDirector dbo:directorOf ?film2 .
  ?film2 dbo:title ""Alice's Wonderland""^^xsd:string .
}",2.5944303248170386e-155,0.04938271604938271,True,True
4778,Which developer of  the Spider-Man: Edge of Time is the  successor of PlayStation 2 ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spider-Man:_Edge_of_Time> <http://dbpedia.org/ontology/developer> ?uri. <http://dbpedia.org/resource/PlayStation_2> <http://dbpedia.org/ontology/successor> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which developer of  the Spider-Man: Edge of Time is the  successor of PlayStation 2 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?developer
WHERE {
  ?developer dbo:developerOf ?game .
  ?game dbo:title ""Spider-Man: Edge of Time"" .
  ?game dbo:successor ?successor .
  ?successor dbo:title ""PlayStation 2"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?developer
WHERE {
  ?developer dbo:developerOf ?game .
  ?game dbo:title ""Spider-Man: Edge of Time"" .
  ?game dbo:successor ?successor .
  ?successor dbo:title ""PlayStation 2"" .
}",2.0411965960034616e-155,0.03896103896103896,True,True
4370,Who is related to Kelly Osbourne & Ozzy Osbourne?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Kelly_Osbourne> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ozzy_Osbourne> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is related to Kelly Osbourne & Ozzy Osbourne?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Kelly Osbourne""^^xsd:string .
  FILTER (regex(?person, ""Ozzy""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Kelly Osbourne""^^xsd:string .
  FILTER (regex(?person, ""Ozzy""))
}",3.2989683217270633e-155,0.08333333333333333,True,True
3403,Count the number of sports played by the school which also plays Association football ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/sport> <http://dbpedia.org/resource/Association_football> . ?x <http://dbpedia.org/ontology/sport> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of sports played by the school which also plays Association football ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?school ?sports
WHERE {
  ?school dbo:sports ?sports .
  ?school dbo:sports dbp:Association football .
  
}
GROUP BY ?school ?sports
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?school ?sports
WHERE {
  ?school dbo:sports ?sports .
  ?school dbo:sports dbp:Association football .
  
}
GROUP BY ?school ?sports",2.3983374600418706e-155,0.06666666666666667,False,False
1700,Who are the baseball players who played for San Francisco Giants?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/San_Francisco_Giants>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the baseball players who played for San Francisco Giants?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player
WHERE {
  ?player dbo:playsFor ?team .
  ?team dbo:name ""San Francisco Giants"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player
WHERE {
  ?player dbo:playsFor ?team .
  ?team dbo:name ""San Francisco Giants"" .
}",2.3659629744803227e-155,0.056338028169014086,True,True
1241,To which political party does the writer of In the Bazaars of Hyderabad belong?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/In_the_Bazaars_of_Hyderabad> <http://dbpedia.org/property/writer> ?x . ?x <http://dbpedia.org/ontology/party> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which political party does the writer of In the Bazaars of Hyderabad belong?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?party
WHERE {
  ?book dbo:author ?author .
  ?author dbo:politicalParty ?party .
  FILTER ( ?book = <http://dbpedia.org/resource/In_the_Bazaars_of_Hyderabad> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?party
WHERE {
  ?book dbo:author ?author .
  ?author dbo:politicalParty ?party .
  FILTER ( ?book = <http://dbpedia.org/resource/In_the_Bazaars_of_Hyderabad> )
}",2.6240214537570328e-155,0.07792207792207792,True,True
3589,What is the service of the Laemmle Theatres and is also the award of the Jos Rivera (playwright)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Laemmle_Theatres> <http://dbpedia.org/ontology/service> ?uri. <http://dbpedia.org/resource/José_Rivera_(playwright)> <http://dbpedia.org/property/awards> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the service of the Laemmle Theatres and is also the award of the Jos Rivera (playwright)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?service ?award
WHERE {
  ?theatre dbo:service ?service .
  FILTER(?theatre = <http://dbpedia.org/resource/Laemmle_Theatres>)
  ?playwright dbo:award ?award .
  FILTER(?playwright = <http://dbpedia.org/resource/Jos_Rivera_(playwright)>)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?service ?award
WHERE {
  ?theatre dbo:service ?service .
  FILTER(?theatre = <http://dbpedia.org/resource/Laemmle_Theatres>)
  ?playwright dbo:award ?award .
  FILTER(?playwright = <http://dbpedia.org/resource/Jos_Rivera_(playwright)>)
}",2.6226323115709007e-155,0.05063291139240506,True,True
3046,"Where is the tombstone of the parliament members who served with James Roberts as the Vice President, US?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/James_Roberts_(trade_unionist)> . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MemberOfParliament>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where is the tombstone of the parliament members who served with James Roberts as the Vice President, US?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?tombstoneLocation
WHERE {
  ?parliamentMember dbo:vicePresident ?vicePresident .
  ?vicePresident dbo:name ""James Roberts""^^xsd:string .
  ?parliamentMember dbo:tombstone ?tombstone .
  ?tombstone dbo:location ?tombstoneLocation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?tombstoneLocation
WHERE {
  ?parliamentMember dbo:vicePresident ?vicePresident .
  ?vicePresident dbo:name ""James Roberts""^^xsd:string .
  ?parliamentMember dbo:tombstone ?tombstone .
  ?tombstone dbo:location ?tombstoneLocation .
}",2.8712091323971647e-155,0.060240963855421686,True,True
133,In which time zone is Pong Pha?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pong_Pha> <http://dbpedia.org/ontology/timeZone> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which time zone is Pong Pha?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?timeZone
WHERE {
  dbp:locationOf <http://dbpedia.org/resource/Pong_Pha> dbo:timeZone ?timeZone .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?timeZone
WHERE {
  dbp:locationOf <http://dbpedia.org/resource/Pong_Pha> dbo:timeZone ?timeZone .
}",2.7353319119103705e-155,0.08064516129032258,False,False
4235,Name all the hubs of the airlines whose one of the hubs is Selangir ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/Selangor> . ?x <http://dbpedia.org/property/hubs> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name all the hubs of the airlines whose one of the hubs is Selangir ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?airline ?hub
WHERE {
  ?airline dbo:hub ?hub .
  ?hub dbo:name ""Selangir""^^xsd:string .
  ?airline dbo:hub ?hub2 .
  FILTER (NOT EXISTS { ?airline dbo:hub ?hub2 . })
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?airline ?hub
WHERE {
  ?airline dbo:hub ?hub .
  ?hub dbo:name ""Selangir""^^xsd:string .
  ?airline dbo:hub ?hub2 .
  FILTER (NOT EXISTS { ?airline dbo:hub ?hub2 . })
}",2.8409841948588806e-155,0.06493506493506493,True,True
3311,List the launch site of the rockets whose one of the launch site has been Cape Canaveral Air Force Station Launch Complex 26 ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Cape_Canaveral_Air_Force_Station_Launch_Complex_26> . ?x <http://dbpedia.org/ontology/launchSite> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Rocket>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the launch site of the rockets whose one of the launch site has been Cape Canaveral Air Force Station Launch Complex 26 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?rocket ?launchSite
WHERE {
  ?rocket dbo:launchSite ?launchSite .
  ?launchSite dbo:name ""Cape Canaveral Air Force Station Launch Complex 26"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?rocket ?launchSite
WHERE {
  ?rocket dbo:launchSite ?launchSite .
  ?launchSite dbo:name ""Cape Canaveral Air Force Station Launch Complex 26"" .
}",2.7973847928929533e-155,0.06172839506172839,True,True
2611,What are the books written by authors who died in Madrid?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Madrid> . ?uri <http://dbpedia.org/property/author> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the books written by authors who died in Madrid?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?book ?author
WHERE {
  ?author dbo:birthPlace ?birthPlace .
  ?author dbo:deathPlace ""Madrid"" .
  ?author dbo:authorOf ?book .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?book ?author
WHERE {
  ?author dbo:birthPlace ?birthPlace .
  ?author dbo:deathPlace ""Madrid"" .
  ?author dbo:authorOf ?book .
}",3.0566417519593477e-155,0.06666666666666667,True,True
478,How many other Guests are there of the television episodes whose Guests is Brian d'Arcy James?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/guests> <http://dbpedia.org/resource/Brian_d'Arcy_James> . ?x <http://dbpedia.org/property/guests> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many other Guests are there of the television episodes whose Guests is Brian d'Arcy James?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?otherGuest) AS ?count)
WHERE {
  ?episode dbo:guest ?guest .
  ?guest dbo:name ""Brian d'Arcy James""^^xsd:string .
  ?episode dbo:guest ?otherGuest .
  FILTER (NOT EXISTS { ?guest = ?otherGuest })
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?otherGuest) AS ?count)
WHERE {
  ?episode dbo:guest ?guest .
  ?guest dbo:name ""Brian d'Arcy James""^^xsd:string .
  ?episode dbo:guest ?otherGuest .
  FILTER (NOT EXISTS { ?guest = ?otherGuest })
}",2.2589949720910505e-155,0.058823529411764705,False,False
794,Name the origin of Henry Cluney?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henry_Cluney> <http://dbpedia.org/property/origin> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the origin of Henry Cluney?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?origin
WHERE {
  ?person dbo:name ""Henry Cluney"" .
  ?person dbo:birthPlace ?origin .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?origin
WHERE {
  ?person dbo:name ""Henry Cluney"" .
  ?person dbo:birthPlace ?origin .
}",2.530465559854518e-155,0.06451612903225806,True,True
2964,"Over which things, does a cable stayed bridge exists?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/design> <http://dbpedia.org/resource/Cable-stayed_bridge> . ?x <http://dbpedia.org/property/crosses> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Over which things, does a cable stayed bridge exists?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?thing
WHERE {
  ?bridge dbo:bridgeType ""cable-stayed bridge""^^xsd:string .
  ?bridge dbo:existsOver ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?thing
WHERE {
  ?bridge dbo:bridgeType ""cable-stayed bridge""^^xsd:string .
  ?bridge dbo:existsOver ?thing .
}",3.7246750897077527e-155,0.08695652173913043,True,True
3831,How many games are played at universities affiliated with the Association of Southeast Asian Institutions of Higher Learning?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/Association_of_Southeast_Asian_Institutions_of_Higher_Learning> . ?x <http://dbpedia.org/ontology/sport> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many games are played at universities affiliated with the Association of Southeast Asian Institutions of Higher Learning?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?game) AS ?count)
WHERE {
  ?university dbo:country ?country .
  ?university dbo:memberOf ?asean .
  ?asean dbo:name ""Association of Southeast Asian Institutions of Higher Learning""^^xsd:string .
  ?university dbo:location ?location .
  ?game dbo:location ?location .
  FILTER (lang(?game) = 'en')
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?game) AS ?count)
WHERE {
  ?university dbo:country ?country .
  ?university dbo:memberOf ?asean .
  ?asean dbo:name ""Association of Southeast Asian Institutions of Higher Learning""^^xsd:string .
  ?university dbo:location ?location .
  ?game dbo:location ?location .
  FILTER (lang(?game) = 'en')
}",2.241286962947119e-155,0.054945054945054944,True,True
3640,What religion does roshan ranasinghe and nhiek tioulong follow?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Roshan_Ranasinghe> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Nhiek_Tioulong> <http://dbpedia.org/ontology/religion> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What religion does roshan ranasinghe and nhiek tioulong follow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:religion ?religion .
  FILTER (regex(?person, ""roshan ranasinghe"", ""i"") || regex(?person, ""nhiek tioulong"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:religion ?religion .
  FILTER (regex(?person, ""roshan ranasinghe"", ""i"") || regex(?person, ""nhiek tioulong"", ""i""))
}",2.8314851544960777e-155,0.05263157894736842,True,True
1122,What are the regions served by Toll Global Express which is also the country of LPGA?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Toll_Global_Express> <http://dbpedia.org/ontology/regionServed> ?uri. <http://dbpedia.org/resource/LPGA> <http://dbpedia.org/ontology/country> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the regions served by Toll Global Express which is also the country of LPGA?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?region ?country
WHERE {
  ?company dbo:name ""Toll Global Express"" .
  ?company dbo:serves ?region .
  ?country dbo:name ""United States"" .
  ?country dbo:officialName ""United States of America"" .
  ?country dbo:countryOfOrigin ?region .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?region ?country
WHERE {
  ?company dbo:name ""Toll Global Express"" .
  ?company dbo:serves ?region .
  ?country dbo:name ""United States"" .
  ?country dbo:officialName ""United States of America"" .
  ?country dbo:countryOfOrigin ?region .
}",2.4900858824700132e-155,0.047619047619047616,True,True
594,"Which relative of George Madison was the leader of United States House of Representatives elections, 1788 and 1789 ?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/George_Madison> <http://dbpedia.org/ontology/relation> ?uri. <http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1788_and_1789> <http://dbpedia.org/property/leader> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which relative of George Madison was the leader of United States House of Representatives elections, 1788 and 1789 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?relative
WHERE {
  ?relative dbo:spouse ?georgeMadison .
  ?georgeMadison dbo:birthDate ""1751-01-01""^^xsd:date .
  ?georgeMadison dbo:name ""George Madison"" .
  ?relative dbo:role ""Leader of United States House of Representatives elections"" .
  FILTER (YEAR(?relative dbo:birthDate) < 1788)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?relative
WHERE {
  ?relative dbo:spouse ?georgeMadison .
  ?georgeMadison dbo:birthDate ""1751-01-01""^^xsd:date .
  ?georgeMadison dbo:name ""George Madison"" .
  ?relative dbo:role ""Leader of United States House of Representatives elections"" .
  FILTER (YEAR(?relative dbo:birthDate) < 1788)
}",1.9112994652876815e-155,0.034482758620689655,False,False
3675,List the names of the soccer club seasons whose division is 2012 Campeonato Brasileiro Serie A.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/2012_Campeonato_Brasileiro_Série_A> . ?x <http://dbpedia.org/property/name> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the names of the soccer club seasons whose division is 2012 Campeonato Brasileiro Serie A.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?seasonName
WHERE {
  ?season dbo:division ?division .
  ?division dbo:name ""2012 Campeonato Brasileiro Serie A"" .
  ?season rdfs:label ?seasonName .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?seasonName
WHERE {
  ?season dbo:division ?division .
  ?division dbo:name ""2012 Campeonato Brasileiro Serie A"" .
  ?season rdfs:label ?seasonName .
}",2.91841165985534e-155,0.0625,True,True
241,Which predecessor of Alexander Downer was deputy to Neil Brown ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Alexander_Downer> . ?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Neil_Brown_(Australian_politician)>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which predecessor of Alexander Downer was deputy to Neil Brown ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?predecessor dbo:predecessorOf  <http://dbpedia.org/resource/Alexander_Downer> .
  ?predecessor dbo:deputyTo ?deputy .
  ?deputy dbo:predecessorOf <http://dbpedia.org/resource/Neil_Brown> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?predecessor dbo:predecessorOf  <http://dbpedia.org/resource/Alexander_Downer> .
  ?predecessor dbo:deputyTo ?deputy .
  ?deputy dbo:predecessorOf <http://dbpedia.org/resource/Neil_Brown> .
}",3.1537059338519422e-155,0.07042253521126761,True,True
419,List the ingredient of Blodpalt?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blodpalt> <http://dbpedia.org/ontology/ingredient> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the ingredient of Blodpalt?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?ingredient
WHERE {
  ?food dbo:name ""Blodpalt"" .
  ?food dbp:ingredient ?ingredient .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?ingredient
WHERE {
  ?food dbo:name ""Blodpalt"" .
  ?food dbp:ingredient ?ingredient .
}",3.2050345448863812e-155,0.08196721311475409,True,True
1314,How many other home stadium are there of the soccer club whose home stadium is Luzhniki Stadium?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/homeStadium> <http://dbpedia.org/resource/Luzhniki_Stadium> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many other home stadium are there of the soccer club whose home stadium is Luzhniki Stadium?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?otherStadium
WHERE {
  ?club dbo:homeStadium <http://dbpedia.org/resource/Luzhniki_Stadium> .
  ?club dbo:homeStadium ?otherStadium .
  FILTER ( ?otherStadium != <http://dbpedia.org/resource/Luzhniki_Stadium> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?otherStadium
WHERE {
  ?club dbo:homeStadium <http://dbpedia.org/resource/Luzhniki_Stadium> .
  ?club dbo:homeStadium ?otherStadium .
  FILTER ( ?otherStadium != <http://dbpedia.org/resource/Luzhniki_Stadium> )
}",2.951204860745888e-155,0.07692307692307693,True,True
686,What company made facebook messenger and is the platform where Words of Gold can be played?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Words_of_Gold> <http://dbpedia.org/ontology/computingPlatform> ?uri. <http://dbpedia.org/resource/Facebook_Messenger> <http://dbpedia.org/property/developer> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What company made facebook messenger and is the platform where Words of Gold can be played?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company ?platform
WHERE {
  ?company dbo:product ?messenger .
  ?messenger dbo:name ""Facebook Messenger""^^xsd:string .
  ?platform dbo:name ""Words of Gold""^^xsd:string .
  ?company dbo:product ?platform .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company ?platform
WHERE {
  ?company dbo:product ?messenger .
  ?messenger dbo:name ""Facebook Messenger""^^xsd:string .
  ?platform dbo:name ""Words of Gold""^^xsd:string .
  ?company dbo:product ?platform .
}",2.7287223683914353e-155,0.06097560975609756,True,True
2370,Which appointer of William Clark is the successor of Levi Lincoln Sr ?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Levi_Lincoln,_Sr.> <http://dbpedia.org/property/successor> ?uri. <http://dbpedia.org/resource/William_Clark> <http://dbpedia.org/property/appointer> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which appointer of William Clark is the successor of Levi Lincoln Sr ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?appointer
WHERE {
  ?appointer dbo:appointerOf ?person .
  ?person dbo:name ""William Clark"" .
  ?appointer dbo:successorOf ?successor .
  ?successor dbo:name ""Levi Lincoln Sr"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?appointer
WHERE {
  ?appointer dbo:appointerOf ?person .
  ?person dbo:name ""William Clark"" .
  ?appointer dbo:successorOf ?successor .
  ?successor dbo:name ""Levi Lincoln Sr"" .
}",2.0751256583633507e-155,0.03896103896103896,True,True
1525,Who is the scientist whose academic advisor was Karl Ewald Hasse?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/academicAdvisor> <http://dbpedia.org/resource/Karl_Ewald_Hasse>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the scientist whose academic advisor was Karl Ewald Hasse?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?scientist
WHERE {
  ?scientist dbo:academicAdvisor ?advisor .
  ?advisor dbo:name ""Karl Ewald Hasse"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?scientist
WHERE {
  ?scientist dbo:academicAdvisor ?advisor .
  ?advisor dbo:name ""Karl Ewald Hasse"" .
}",8.120546156106983e-232,0.043478260869565216,True,True
977,Erik Jendresen is the writer of which television show?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Erik Jendresen is the writer of which television show?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?show
WHERE {
  <http://dbpedia.org/resource/Erik_Jendresen> dbo:creator ?show .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?show
WHERE {
  <http://dbpedia.org/resource/Erik_Jendresen> dbo:creator ?show .
}",8.972141065609098e-232,0.0625,True,True
3472,List few musical artist whose notable instruments are Ludwig Drums and Remo?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Ludwig_Drums> . ?uri <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Remo>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List few musical artist whose notable instruments are Ludwig Drums and Remo?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:instruments ?instrument .
  ?instrument dbo:brand ?brand .
  FILTER (regex(?brand, ""Ludwig Drums"", ""i"") || regex(?brand, ""Remo"", ""i""))
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:instruments ?instrument .
  ?instrument dbo:brand ?brand .
  FILTER (regex(?brand, ""Ludwig Drums"", ""i"") || regex(?brand, ""Remo"", ""i""))
}",2.384592839964215e-155,0.04819277108433735,True,True
674,Is Truth prevails the national motto of Czechoslovakia?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Czechoslovakia> <http://dbpedia.org/property/nationalMotto> <http://dbpedia.org/resource/Truth_prevails> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Truth prevails the national motto of Czechoslovakia?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:nationalMotto ""Truth prevails"" .
  FILTER (regex(?x, ""Czechoslovakia"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:nationalMotto ""Truth prevails"" .
  FILTER (regex(?x, ""Czechoslovakia"", ""i""))
}",2.321693139700891e-155,0.046153846153846156,True,True
4690,Spanish harlem incident and girl from the north country were originally composed by whom?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spanish_Harlem_Incident> <http://dbpedia.org/ontology/composer> ?uri. <http://dbpedia.org/resource/Girl_from_the_North_Country> <http://dbpedia.org/ontology/composer> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Spanish harlem incident and girl from the north country were originally composed by whom?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?composer
WHERE {
  ?song dbo:composer ?composer .
  FILTER (regex(?song, ""Spanish Harlem Incident"", ""i"") || regex(?song, ""Girl from the North Country"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?composer
WHERE {
  ?song dbo:composer ?composer .
  FILTER (regex(?song, ""Spanish Harlem Incident"", ""i"") || regex(?song, ""Girl from the North Country"", ""i""))
}",2.91841165985534e-155,0.07142857142857142,True,True
326,Name the movies distributed by RKO Pictures and has music composer as Bernard Herrmann?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/RKO_Pictures> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Bernard_Herrmann>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the movies distributed by RKO Pictures and has music composer as Bernard Herrmann?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?movieLabel
WHERE {
  ?movie dbo:distributor RKO_Pictures .
  ?movie dbo:musicComposer Bernard_Herrmann .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?movieLabel
WHERE {
  ?movie dbo:distributor RKO_Pictures .
  ?movie dbo:musicComposer Bernard_Herrmann .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.384592839964215e-155,0.04938271604938271,False,False
4250,What is the home stadium of Kenya's women national football team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kenya_women's_national_football_team> <http://dbpedia.org/property/homeStadium> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the home stadium of Kenya's women national football team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?stadium
WHERE {
  ?team dbo:country ""Kenya"" .
  ?team dbo:name ""Kenya women's national football team"" .
  ?team dbo:homeStadium ?stadium .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?stadium
WHERE {
  ?team dbo:country ""Kenya"" .
  ?team dbo:name ""Kenya women's national football team"" .
  ?team dbo:homeStadium ?stadium .
}",2.2814337887592556e-155,0.0547945205479452,True,True
1833,Among the scientist known for Manhattan Project who had a doctoral student named Charles Ellis ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Charles_Drummond_Ellis> . ?uri <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Manhattan_Project>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Among the scientist known for Manhattan Project who had a doctoral student named Charles Ellis ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:doctoralStudents ?student .
  ?student rdfs:label ""Charles Ellis"" .
  FILTER ( ?scientist dbo:occupation ""Scientist"" )
  FILTER ( ?scientist dbo:involvedInProject ""Manhattan Project"" )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:doctoralStudents ?student .
  ?student rdfs:label ""Charles Ellis"" .
  FILTER ( ?scientist dbo:occupation ""Scientist"" )
  FILTER ( ?scientist dbo:involvedInProject ""Manhattan Project"" )
}",2.2706697534775395e-155,0.047058823529411764,False,False
3251,What is the alma mater of the scientists known for String theory?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/String_theory> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the alma mater of the scientists known for String theory?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?scientist ?almaMater
WHERE {
  ?scientist rdf:type dbo:Scientist .
  ?scientist dbo:knownFor ""String theory"" .
  ?scientist dbo:almaMater ?almaMater .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?scientist ?almaMater
WHERE {
  ?scientist rdf:type dbo:Scientist .
  ?scientist dbo:knownFor ""String theory"" .
  ?scientist dbo:almaMater ?almaMater .
}",3.0202505652128895e-155,0.06666666666666667,True,True
4531,Which sea is surrounded by Rostock and Kaliningrad?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Rostock> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Kaliningrad> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sea is surrounded by Rostock and Kaliningrad?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sea
WHERE {
  ?city dbo:locatedIn ?sea .
  ?city rdfs:label ""Rostock"" .
  ?city2 rdfs:label ""Kaliningrad"" .
  ?city2 dbo:locatedIn ?sea .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sea
WHERE {
  ?city dbo:locatedIn ?sea .
  ?city rdfs:label ""Rostock"" .
  ?city2 rdfs:label ""Kaliningrad"" .
  ?city2 dbo:locatedIn ?sea .
}",3.0566417519593477e-155,0.07042253521126761,True,True
2506,What is the governing body of Fort Monroe ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fort_Monroe> <http://dbpedia.org/property/governingBody> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the governing body of Fort Monroe ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?governingBody
WHERE {
  ?fort dbo:officialWebsite ""http://www.fortmonroe.com/"" .
  ?fort dbo:governingBody ?governingBody .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?governingBody
WHERE {
  ?fort dbo:officialWebsite ""http://www.fortmonroe.com/"" .
  ?fort dbo:governingBody ?governingBody .
}",2.494821638843469e-155,0.0625,True,True
3618,Who married crystal harris?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Crystal_Harris>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who married crystal harris?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouse
WHERE {
  ?person dbo:spouse ?spouse .
  FILTER ( ?person = <http://dbpedia.org/resource/Hugh_Grant> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouse
WHERE {
  ?person dbo:spouse ?spouse .
  FILTER ( ?person = <http://dbpedia.org/resource/Hugh_Grant> )
}",8.93945512687472e-232,0.0625,True,True
4115,How many movies have been directed by Orson Welles ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Orson_Welles>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many movies have been directed by Orson Welles ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?director dbo:name ""Orson Welles"" .
  ?director dbo:directed ?movie .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?director dbo:name ""Orson Welles"" .
  ?director dbo:directed ?movie .
}",8.120546156106983e-232,0.0410958904109589,True,True
2599,What fictional characters are American Pekin duck species?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/American_Pekin_duck> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What fictional characters are American Pekin duck species?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?character ?characterLabel
WHERE {
  ?character dbo:species ?duck .
  ?duck rdfs:label ""American Pekin duck"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?character ?characterLabel
WHERE {
  ?character dbo:species ?duck .
  ?duck rdfs:label ""American Pekin duck"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.336751314796786e-155,0.05555555555555555,False,False
2835,Which work are both Neil Cross and Lars Pearson known for ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neil_Cross> <http://dbpedia.org/ontology/notableWork> ?uri. <http://dbpedia.org/resource/Lars_Pearson> <http://dbpedia.org/ontology/notableWork> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which work are both Neil Cross and Lars Pearson known for ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?work
WHERE {
  ?person dbo:knownFor ?work .
  FILTER (?person IN (dbo:Neil_Cross, dbo:Lars_Pearson))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?work
WHERE {
  ?person dbo:knownFor ?work .
  FILTER (?person IN (dbo:Neil_Cross, dbo:Lars_Pearson))
}",3.1137823863213763e-155,0.08,True,True
2716,What is the religion of the ethnic group to which Clara Ng belongs?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Clara_Ng> <http://dbpedia.org/ontology/ethnicity> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the religion of the ethnic group to which Clara Ng belongs?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religion
WHERE {
  ?person dbo:name ""Clara Ng"" .
  ?person dbo:ethnicity ?ethnicity .
  ?ethnicity dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religion
WHERE {
  ?person dbo:name ""Clara Ng"" .
  ?person dbo:ethnicity ?ethnicity .
  ?ethnicity dbo:religion ?religion .
}",2.486113577066771e-155,0.05405405405405406,True,True
3995,What is the draft team of the Antoine Bibeau and also had player named Nathan Dempsey?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Antoine_Bibeau> <http://dbpedia.org/property/draftTeam> ?uri. <http://dbpedia.org/resource/Nathan_Dempsey> <http://dbpedia.org/property/playedFor> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the draft team of the Antoine Bibeau and also had player named Nathan Dempsey?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:team ?team .
  FILTER(?player IN (dbo:Antoine_Bibeau, dbo:Nathan_Dempsey))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:team ?team .
  FILTER(?player IN (dbo:Antoine_Bibeau, dbo:Nathan_Dempsey))
}",2.8136200030849624e-155,0.05333333333333334,True,True
1232,Is Gaza Strip the result of Operation Autumn Clouds?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Operation_Autumn_Clouds> <http://dbpedia.org/property/result> <http://dbpedia.org/resource/Gaza_Strip> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Gaza Strip the result of Operation Autumn Clouds?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Gaza Strip"" .
  ?x dbp:involvedInOperation ?y .
  ?y dbo:name ""Operation Autumn Clouds"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Gaza Strip"" .
  ?x dbp:involvedInOperation ?y .
  ?y dbo:name ""Operation Autumn Clouds"" .
}",2.1745921280630745e-155,0.04411764705882353,True,True
3683,Name the river with mouth place Essex and source place as Gloucestershire ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex> . ?uri <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Gloucestershire>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the river with mouth place Essex and source place as Gloucestershire ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?river WHERE {
  ?river dbo:mouthPlace ?mouthPlace .
  ?mouthPlace dbo:name ""Essex"" .
  ?river dbo:sourcePlace ?sourcePlace .
  ?sourcePlace dbo:name ""Gloucestershire"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?river WHERE {
  ?river dbo:mouthPlace ?mouthPlace .
  ?mouthPlace dbo:name ""Essex"" .
  ?river dbo:sourcePlace ?sourcePlace .
  ?sourcePlace dbo:name ""Gloucestershire"" .
}",8.510469113101058e-232,0.0410958904109589,True,True
3056,How many developers were involved in creating games whose score is composed by Gerard Marino?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Gerard_Marino> . ?x <http://dbpedia.org/ontology/developer> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many developers were involved in creating games whose score is composed by Gerard Marino?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?developer) AS ?count)
WHERE {
  ?game dbo:composer Gerard Marino .
  ?game dbo:developer ?developer .
  FILTER (NOT EXISTS { ?game dbo:developer ?duplicateDeveloper . })
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?developer) AS ?count)
WHERE {
  ?game dbo:composer Gerard Marino .
  ?game dbo:developer ?developer .
  FILTER (NOT EXISTS { ?game dbo:developer ?duplicateDeveloper . })
}",2.4274055150866183e-155,0.058823529411764705,False,False
1585,"Which office holder owes its allegiance to a state whose capital town is Jamestown, Virginia?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Jamestown,_Virginia> . ?uri <http://dbpedia.org/property/allegiance> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which office holder owes its allegiance to a state whose capital town is Jamestown, Virginia?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?officeHolder
WHERE {
  ?officeHolder dbo:office rdf:type dbo:PoliticalOffice .
  ?officeHolder dbo:allegiance ?allegiance .
  ?allegiance dbo:capital ?capital .
  ?capital dbo:name ""Jamestown, Virginia""@en .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?officeHolder
WHERE {
  ?officeHolder dbo:office rdf:type dbo:PoliticalOffice .
  ?officeHolder dbo:allegiance ?allegiance .
  ?allegiance dbo:capital ?capital .
  ?capital dbo:name ""Jamestown, Virginia""@en .
}",2.9024197612372904e-155,0.060240963855421686,False,False
2563,Which battles were fought under the president when Chung Won Shik was the prime minister?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Chung_Won-shik> . ?x <http://dbpedia.org/property/battles> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which battles were fought under the president when Chung Won Shik was the prime minister?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?battle
WHERE {
  ?president dbo:primeMinister ?primeMinister .
  ?primeMinister rdfs:label ""Chung Won Shik"" .
  ?president dbo:involvedIn ?battle .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?battle
WHERE {
  ?president dbo:primeMinister ?primeMinister .
  ?primeMinister rdfs:label ""Chung Won Shik"" .
  ?president dbo:involvedIn ?battle .
}",2.968021523431445e-155,0.06329113924050633,True,True
1056,In how many languages did Marika Gombitova sing?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Marika_Gombitová> . ?x <http://dbpedia.org/property/language> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In how many languages did Marika Gombitova sing?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?language) AS ?count)
WHERE {
  ?person dbo:name ""Marika Gombitova"" .
  ?person dbp:languages ?language .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?language) AS ?count)
WHERE {
  ?person dbo:name ""Marika Gombitova"" .
  ?person dbp:languages ?language .
}",3.216579438360415e-155,0.0684931506849315,True,True
4894,Name the people living in a place governed by William W Brien?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/William_W._Brien> . ?uri <http://dbpedia.org/ontology/residence> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the people living in a place governed by William W Brien?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?place dbo:governor ?governor .
  ?governor dbo:name ""William W Brien"" .
  ?person dbo:livesIn ?place .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?place dbo:governor ?governor .
  ?governor dbo:name ""William W Brien"" .
  ?person dbo:livesIn ?place .
}",3.53714058675999e-155,0.0821917808219178,True,True
1695,Does Jean Louis Arcand work for Geneva?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Jean-Louis_Arcand> <http://dbpedia.org/property/institution> <http://dbpedia.org/resource/Geneva> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Jean Louis Arcand work for Geneva?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:birthPlace ""Geneva"" .
  ?x dbo:occupation ""Film director"" .
  FILTER (str(?x) = ""Jean Louis Arcand"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:birthPlace ""Geneva"" .
  ?x dbo:occupation ""Film director"" .
  FILTER (str(?x) = ""Jean Louis Arcand"")
}",2.2445353519102238e-155,0.04477611940298507,True,True
1395,Charles Willing Byrd was the governor under which politician?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/governor> <http://dbpedia.org/resource/Charles_Willing_Byrd> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Charles Willing Byrd was the governor under which politician?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?politician
WHERE {
  ?governor dbo:governorOf ?state .
  ?governor dbo:birthDate ""1910-01-01""^^xsd:date .
  ?governor dbo:name ""Charles Willing Byrd"" .
  ?politician dbo:presidentOf ?state .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?politician
WHERE {
  ?governor dbo:governorOf ?state .
  ?governor dbo:birthDate ""1910-01-01""^^xsd:date .
  ?governor dbo:name ""Charles Willing Byrd"" .
  ?politician dbo:presidentOf ?state .
}",7.9677403708478e-232,0.043478260869565216,True,True
925,Which animator of the The Skeleton Dance is also the cinematographer of the Mickey's Mellerdrammer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Skeleton_Dance> <http://dbpedia.org/ontology/animator> ?uri. <http://dbpedia.org/resource/Mickey's_Mellerdrammer> <http://dbpedia.org/property/cinematography> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which animator of the The Skeleton Dance is also the cinematographer of the Mickey's Mellerdrammer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?animator
WHERE {
  ?animator dbo:occupation ""Animator"" .
  ?animator dbo:work ?work .
  ?work dbo:title ""The Skeleton Dance"" .
  ?animator dbo:work ?work2 .
  ?work2 dbo:title ""Mickey's Mellerdrammer"" .
  ?work2 dbp:cinematographer ?animator .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?animator
WHERE {
  ?animator dbo:occupation ""Animator"" .
  ?animator dbo:work ?work .
  ?work dbo:title ""The Skeleton Dance"" .
  ?animator dbo:work ?work2 .
  ?work2 dbo:title ""Mickey's Mellerdrammer"" .
  ?work2 dbp:cinematographer ?animator .
}",2.5024440083160195e-155,0.05,True,True
1928,To which families does the Koolakamba belong?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Koolakamba> <http://dbpedia.org/ontology/family> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which families does the Koolakamba belong?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?family
WHERE {
  ?koolakamba dbo:family ?family .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?family
WHERE {
  ?koolakamba dbo:family ?family .
}",3.252876171537949e-155,0.08196721311475409,True,True
4654,Who are the  judges of the television show whose anchor is Josh Groban?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Josh_Groban> . ?x <http://dbpedia.org/property/judges> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the  judges of the television show whose anchor is Josh Groban?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?judge
WHERE {
  ?show dbo:anchor ?anchor .
  ?anchor dbo:name ""Josh Groban""^^xsd:string .
  ?show dbo:judge ?judge .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?judge
WHERE {
  ?show dbo:anchor ?anchor .
  ?anchor dbo:name ""Josh Groban""^^xsd:string .
  ?show dbo:judge ?judge .
}",3.075337680136661e-155,0.06666666666666667,True,True
2056,What is the military unit whose command structures are United States Department of the Navy and United States Department of Defense?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_the_Navy> . ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the military unit whose command structures are United States Department of the Navy and United States Department of Defense?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?militaryUnit
WHERE {
  ?militaryUnit dbo:militaryUnitType ""Navy"" .
  ?militaryUnit dbo:commandStructure ?commandStructure1 .
  ?commandStructure1 dbo:partOf ?commandStructure2 .
  ?commandStructure2 dbo:name ""United States Department of the Navy"" .
  ?commandStructure2 dbo:partOf ?commandStructure3 .
  ?commandStructure3 dbo:name ""United States Department of Defense"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?militaryUnit
WHERE {
  ?militaryUnit dbo:militaryUnitType ""Navy"" .
  ?militaryUnit dbo:commandStructure ?commandStructure1 .
  ?commandStructure1 dbo:partOf ?commandStructure2 .
  ?commandStructure2 dbo:name ""United States Department of the Navy"" .
  ?commandStructure2 dbo:partOf ?commandStructure3 .
  ?commandStructure3 dbo:name ""United States Department of Defense"" .
}",2.112416088207527e-155,0.04878048780487805,True,True
2886,What is the protected area whose nearest city is Kenya?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/nearestCity> <http://dbpedia.org/resource/Kenya>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ProtectedArea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the protected area whose nearest city is Kenya?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?protectedArea ?protectedAreaLabel
WHERE {
  ?protectedArea dbo:nearestCity ?city .
  ?city dbo:country ?country .
  ?country rdfs:label ""Kenya"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?protectedArea ?protectedAreaLabel
WHERE {
  ?protectedArea dbo:nearestCity ?city .
  ?city dbo:country ?country .
  ?country rdfs:label ""Kenya"" .
}",8.06798322521923e-232,0.043478260869565216,True,True
1547,Which company builds Microsoft Azure and Microsoft Surface?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Microsoft_Azure> . ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Microsoft_Surface> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which company builds Microsoft Azure and Microsoft Surface?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:product ?product .
  ?product dbo:brand ""Microsoft""^^xsd:string .
  ?product dbo:name ""Azure""^^xsd:string .
  FILTER (regex(?product, ""Surface"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:product ?product .
  ?product dbo:brand ""Microsoft""^^xsd:string .
  ?product dbo:name ""Azure""^^xsd:string .
  FILTER (regex(?product, ""Surface"", ""i""))
}",3.1137823863213763e-155,0.06944444444444445,True,True
4274,"Over how many cities did the Bellaton MMA, Season 11 take place?",google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Bellator_MMA:_Season_Eleven> <http://dbpedia.org/property/city> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Over how many cities did the Bellaton MMA, Season 11 take place?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?city) AS ?cityCount)
WHERE {
  ?event dbo:name ""Bellaton MMA, Season 11"" .
  ?event dbo:location ?location .
  ?location dbo:country ?country .
  ?location dbo:city ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?city) AS ?cityCount)
WHERE {
  ?event dbo:name ""Bellaton MMA, Season 11"" .
  ?event dbo:location ?location .
  ?location dbo:country ?country .
  ?location dbo:city ?city .
}",2.7730960408256417e-155,0.0625,True,True
2224,"What place did Edwin Adams die at, which gave birth to William A Purtell?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edwin_Adams_(politician)> <http://dbpedia.org/property/placeOfDeath> ?uri. <http://dbpedia.org/resource/William_A._Purtell> <http://dbpedia.org/ontology/birthPlace> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What place did Edwin Adams die at, which gave birth to William A Purtell?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?place
WHERE {
  ?person dbo:deathPlace ?place .
  FILTER ( ?person = dbo:EdwinAdams )
  ?place dbp:birthPlace ?birthPlace .
  FILTER ( ?birthPlace = dbo:WilliamAPurtell )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?place
WHERE {
  ?person dbo:deathPlace ?place .
  FILTER ( ?person = dbo:EdwinAdams )
  ?place dbp:birthPlace ?birthPlace .
  FILTER ( ?birthPlace = dbo:WilliamAPurtell )
}",2.3318865198845825e-155,0.06097560975609756,True,True
2138,Who are some people whose religion is headquartered in Gold Base?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Gold_Base> . ?uri <http://dbpedia.org/ontology/religion> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are some people whose religion is headquartered in Gold Base?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:religion ?religion .
  ?religion dbo:headquarters ?headquarters .
  ?headquarters dbo:name ""Gold Base"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:religion ?religion .
  ?religion dbo:headquarters ?headquarters .
  ?headquarters dbo:name ""Gold Base"" .
}",3.559043432561587e-155,0.08,True,True
4008,Was james watt a mechanical engineer?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/James_Watt> <http://dbpedia.org/ontology/field> <http://dbpedia.org/resource/Mechanical_engineering> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was james watt a mechanical engineer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?occupation
WHERE {
  <http://dbpedia.org/resource/James_Watt> dbo:occupation ?occupation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?occupation
WHERE {
  <http://dbpedia.org/resource/James_Watt> dbo:occupation ?occupation .
}",9.0782081149686e-79,0.06896551724137931,True,True
4221,How many players are in the San Francisco Giants?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/San_Francisco_Giants>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many players are in the San Francisco Giants?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:name ""San Francisco Giants"" .
  ?team dbo:sportsTeam .
  ?team dbo:player ?player .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:name ""San Francisco Giants"" .
  ?team dbo:sportsTeam .
  ?team dbo:player ?player .
}",8.042329535708995e-232,0.041666666666666664,False,False
4752,Which automobile platform provider of Chiva bus is also the parent company of the Ford Falcon Cobra ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> ?uri. <http://dbpedia.org/resource/Ford_Falcon_Cobra> <http://dbpedia.org/ontology/parentCompany> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which automobile platform provider of Chiva bus is also the parent company of the Ford Falcon Cobra ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?platformProvider ?platformProviderLabel
WHERE {
  ?platformProvider dbo:vehiclePlatform ?platform .
  ?platform dbo:manufacturer ?manufacturer .
  ?manufacturer dbo:parentCompany ?parentCompany .
  ?parentCompany dbo:name ""Ford Falcon Cobra"" .
  FILTER (regex(?platformProvider, ""Chiva""))
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?platformProvider ?platformProviderLabel
WHERE {
  ?platformProvider dbo:vehiclePlatform ?platform .
  ?platform dbo:manufacturer ?manufacturer .
  ?manufacturer dbo:parentCompany ?parentCompany .
  ?parentCompany dbo:name ""Ford Falcon Cobra"" .
  FILTER (regex(?platformProvider, ""Chiva""))
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",1.9204228723166036e-155,0.03333333333333333,False,False
192,What are some famous people out of the Filipinos?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/stateOfOrigin> <http://dbpedia.org/resource/Filipinos> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some famous people out of the Filipinos?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?name
WHERE {
  ?person dbo: nationality ""Filipino"" .
  ?person dbo: name ?name .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?name
WHERE {
  ?person dbo: nationality ""Filipino"" .
  ?person dbo: name ?name .
}",2.427831263680579e-155,0.06153846153846154,False,False
2140,Which New Mexico company provides One Drive as a service ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/New_Mexico> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/OneDrive>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which New Mexico company provides One Drive as a service ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?company dbo:country ""New Mexico"" .
  ?company dbo:industry ?industry .
  ?industry rdfs:label ""Software"" .
  ?company dbo:offersService ?service .
  ?service rdfs:label ""OneDrive"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?company dbo:country ""New Mexico"" .
  ?company dbo:industry ?industry .
  ?industry rdfs:label ""Software"" .
  ?company dbo:offersService ?service .
  ?service rdfs:label ""OneDrive"" .
}",2.344734865707205e-155,0.05063291139240506,True,True
4130,Where do networks affiliated with ETC broadcast?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/affiliation> <http://dbpedia.org/resource/ETC_(TV_channel)> . ?x <http://dbpedia.org/property/area> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where do networks affiliated with ETC broadcast?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?broadcastLocation
WHERE {
  ?network dbo:affiliatedWith ?organization .
  ?organization dbo:name ""ETC"" .
  ?network dbp:broadcastLocation ?broadcastLocation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?broadcastLocation
WHERE {
  ?network dbo:affiliatedWith ?organization .
  ?organization dbo:name ""ETC"" .
  ?network dbp:broadcastLocation ?broadcastLocation .
}",3.216579438360415e-155,0.07142857142857142,True,True
1633,Which key perosn of the Elders is also the president of united World College?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Elders_(organization)> <http://dbpedia.org/property/keyPeople> ?uri. <http://dbpedia.org/resource/United_World_Colleges> <http://dbpedia.org/ontology/president> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which key perosn of the Elders is also the president of united World College?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person
WHERE {
  ?person dbo:birthPlace ""United World College"" .
  ?person dbo:occupation ""Elders"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person
WHERE {
  ?person dbo:birthPlace ""United World College"" .
  ?person dbo:occupation ""Elders"" .
}",2.761987611388054e-155,0.05405405405405406,True,True
4786,For how many different presidents have people in the Continental Army served?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Continental_Army> . ?x <http://dbpedia.org/property/president> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: For how many different presidents have people in the Continental Army served?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?presidentCount
WHERE {
  ?president dbo:presidentOf ?country .
  ?country dbo:army ?army .
  ?army rdf:type dbo:ContinentalArmy .
  GROUP BY ?president
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?presidentCount
WHERE {
  ?president dbo:presidentOf ?country .
  ?country dbo:army ?army .
  ?army rdf:type dbo:ContinentalArmy .
  GROUP BY ?president
}",2.539717873455559e-155,0.0641025641025641,False,False
2680,Which military unit's garrison is Pentagon and command structure is United States Department of Defense?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/The_Pentagon> . ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which military unit's garrison is Pentagon and command structure is United States Department of Defense?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?unit
WHERE {
  ?unit dbo:garrison ?pentagon .
  ?pentagon dbo:name ""Pentagon"" .
  ?unit dbo:commandStructure ?defense .
  ?defense dbo:name ""United States Department of Defense"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?unit
WHERE {
  ?unit dbo:garrison ?pentagon .
  ?pentagon dbo:name ""Pentagon"" .
  ?unit dbo:commandStructure ?defense .
  ?defense dbo:name ""United States Department of Defense"" .
}",2.344734865707205e-155,0.05194805194805195,True,True
2755,Name the licensee of the TV station whose one of the licensee is Incorporation ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/licensee> <http://dbpedia.org/resource/Incorporation_(business)> . ?x <http://dbpedia.org/property/licensee> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionStation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the licensee of the TV station whose one of the licensee is Incorporation ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?licensee
WHERE {
  ?station dbo:licensee ?licensee .
  ?station dbo:licensee dbo:Incorporation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?licensee
WHERE {
  ?station dbo:licensee ?licensee .
  ?station dbo:licensee dbo:Incorporation .
}",2.486113577066771e-155,0.05714285714285714,True,True
2197,Was His New Job edited by Charlie Chaplin?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/His_New_Job> <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Charlie_Chaplin> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was His New Job edited by Charlie Chaplin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movie
WHERE {
  ?movie dbo:director Charlie Chaplin .
  ?movie dbo:title ""His New Job"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movie
WHERE {
  ?movie dbo:director Charlie Chaplin .
  ?movie dbo:title ""His New Job"" .
}",2.2898861187450904e-155,0.046875,False,False
1449,What is the total number of builder of the military structures whose builder is also United States?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/builder> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/builder> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the total number of builder of the military structures whose builder is also United States?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?militaryStructure) AS ?count)
WHERE {
  ?militaryStructure dbo:builder ?builder .
  ?builder dbo:country ?country .
  ?country rdfs:label ""United States"" .
  ?militaryStructure dbo:builder ?builder2 .
  FILTER (NOT EXISTS { ?militaryStructure dbo:builder ?builder3 . ?builder3 != ?builder2 })
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?militaryStructure) AS ?count)
WHERE {
  ?militaryStructure dbo:builder ?builder .
  ?builder dbo:country ?country .
  ?country rdfs:label ""United States"" .
  ?militaryStructure dbo:builder ?builder2 .
  FILTER (NOT EXISTS { ?militaryStructure dbo:builder ?builder3 . ?builder3 != ?builder2 })
}",2.1614356288612335e-155,0.05747126436781609,False,False
3454,List the architect of the buildings whose one of the architect is Philip Webb?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/architect> <http://dbpedia.org/resource/Philip_Webb> . ?x <http://dbpedia.org/property/architect> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the architect of the buildings whose one of the architect is Philip Webb?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?building ?architect
WHERE {
  ?building dbo:architect ?architect .
  ?architect dbo:architect ?PhilipWebb .
  FILTER ( ?architect != ?PhilipWebb )
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?building ?architect
WHERE {
  ?building dbo:architect ?architect .
  ?architect dbo:architect ?PhilipWebb .
  FILTER ( ?architect != ?PhilipWebb )
}",2.968021523431445e-155,0.06756756756756757,True,True
4114,Which band produced the album Aida?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/album> <http://dbpedia.org/resource/Aida_(musical)> . ?x <http://dbpedia.org/ontology/musicalArtist> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which band produced the album Aida?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?band
WHERE {
  ?band dbo:musicAlbum ?album .
  ?album dbo:title ""Aida"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?band
WHERE {
  ?band dbo:musicAlbum ?album .
  ?album dbo:title ""Aida"" .
}",3.330279963995667e-155,0.07575757575757576,True,True
1347,Was Yabanc Damat first aired in UAE?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Yabancı_Damat> <http://dbpedia.org/property/firstAired> <http://dbpedia.org/resource/United_Arab_Emirates> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Yabanc Damat first aired in UAE?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?country
WHERE {
  ?tvShow dbo:country ?country .
  ?tvShow dbo:title ""Yabanc Damat"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?country
WHERE {
  ?tvShow dbo:country ?country .
  ?tvShow dbo:title ""Yabanc Damat"" .
}",2.2898861187450904e-155,0.046153846153846156,True,True
3176,To which family does korean fox belongs to ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Korean_fox> <http://dbpedia.org/ontology/family> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which family does korean fox belongs to ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?family
WHERE {
  ?koreanFox dbo:family ?family .
  FILTER (regex(?koreanFox, ""Korean fox"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?family
WHERE {
  ?koreanFox dbo:family ?family .
  FILTER (regex(?koreanFox, ""Korean fox"", ""i""))
}",2.4775553999024465e-155,0.058823529411764705,True,True
2863,Is the Chiva Bus by the Ford Motor Company?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/Ford_Motor_Company> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is the Chiva Bus by the Ford Motor Company?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:manufacturer dbo:FordMotorCompany .
  ?x dbo:name ""Chiva Bus"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:manufacturer dbo:FordMotorCompany .
  ?x dbo:name ""Chiva Bus"" .
}",2.259351571061102e-155,0.046153846153846156,True,True
4439,In which races have Tillingdale's horses participated?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Tillingdale> . ?x <http://dbpedia.org/property/race> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which races have Tillingdale's horses participated?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?race
WHERE {
  ?horse dbo:trainer ?trainer .
  ?trainer dbo:name ""Tillingdale"" .
  ?horse dbp:participatedIn ?race .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?race
WHERE {
  ?horse dbo:trainer ?trainer .
  ?trainer dbo:name ""Tillingdale"" .
  ?horse dbp:participatedIn ?race .
}",3.216579438360415e-155,0.07142857142857142,True,True
3510,Where does the river flow into which begins in Lebrsnik?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Lebršnik> . ?x <http://dbpedia.org/ontology/riverMouth> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where does the river flow into which begins in Lebrsnik?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river ?destination
WHERE {
  ?river dbo:location dbo:Lebrsnik .
  ?river dbo:endsAt ?destination .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river ?destination
WHERE {
  ?river dbo:location dbo:Lebrsnik .
  ?river dbo:endsAt ?destination .
}",3.1742523358973992e-155,0.07142857142857142,True,True
4350,Count the different genres of games published by Titus Software,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Titus_Software> . ?x <http://dbpedia.org/ontology/genre> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the different genres of games published by Titus Software
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?genre
WHERE {
  ?game dbo:publisher dbo:TitusSoftware .
  ?game dbo:genre ?genre .
}
GROUP BY ?genre
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?genre
WHERE {
  ?game dbo:publisher dbo:TitusSoftware .
  ?game dbo:genre ?genre .
}
GROUP BY ?genre",3.1335534263807668e-155,0.0684931506849315,True,True
3035,Where is Dofinivka Estuary located ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dofinivka_Estuary> <http://dbpedia.org/property/location> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where is Dofinivka Estuary located ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  dbp:location dbo:Dofinivka_Estuary ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  dbp:location dbo:Dofinivka_Estuary ?location .
}",2.62672060505751e-155,0.06666666666666667,True,True
3128,Which college of the Luke List (golfer) is the alma mater of the Park Trammell ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Luke_List_(golfer)> <http://dbpedia.org/property/college> ?uri. <http://dbpedia.org/resource/Park_Trammell> <http://dbpedia.org/ontology/almaMater> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which college of the Luke List (golfer) is the alma mater of the Park Trammell ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?college
WHERE {
  ?golfer dbo:almaMater ?college .
  ?golfer rdf:type dbo:Person ;
           dbp:name ""Luke List""^^xsd:string .
  ?college rdf:type dbo:EducationalInstitution ;
           dbp:name ?collegeName .
  FILTER (regex(?collegeName, ""Park Trammell"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?college
WHERE {
  ?golfer dbo:almaMater ?college .
  ?golfer rdf:type dbo:Person ;
           dbp:name ""Luke List""^^xsd:string .
  ?college rdf:type dbo:EducationalInstitution ;
           dbp:name ?collegeName .
  FILTER (regex(?collegeName, ""Park Trammell"", ""i""))
}",2.527722503725714e-155,0.047058823529411764,True,True
2263,How many venues are located in the US?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/address> <http://dbpedia.org/resource/United_States>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Venue>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many venues are located in the US?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?venue) AS ?count)
WHERE {
  ?venue dbo:country ""United States""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?venue) AS ?count)
WHERE {
  ?venue dbo:country ""United States""^^xsd:string .
}",8.289228799996742e-232,0.04411764705882353,True,True
4871,Count the number of sports played by university which also plays Taekwondo ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/athletics> <http://dbpedia.org/resource/Taekwondo> . ?x <http://dbpedia.org/property/athletics> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of sports played by university which also plays Taekwondo ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?university ?sports
WHERE {
  ?university dbo:sports ?sports .
  ?university dbo:sports ""Taekwondo""^^xsd:string .
  FILTER (regex(?sports, ""Taekwondo"", ""i""))
}
GROUP BY ?university ?sports
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?university ?sports
WHERE {
  ?university dbo:sports ?sports .
  ?university dbo:sports ""Taekwondo""^^xsd:string .
  FILTER (regex(?sports, ""Taekwondo"", ""i""))
}
GROUP BY ?university ?sports",2.384592839964215e-155,0.0641025641025641,True,True
2620,What is the river on which the Kariba Dam and Batoka Gorge Hydroelectirc power station exist?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kariba_Dam> <http://dbpedia.org/ontology/river> ?uri. <http://dbpedia.org/resource/Batoka_Gorge_Hydroelectric_Power_Station> <http://dbpedia.org/ontology/river> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the river on which the Kariba Dam and Batoka Gorge Hydroelectirc power station exist?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?dam dbo:location ?location .
  ?location dbo:locatedIn ?river .
  FILTER (regex(?dam, ""Kariba Dam"") || regex(?dam, ""Batoka Gorge Hydroelectric Power Station""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?dam dbo:location ?location .
  ?location dbo:locatedIn ?river .
  FILTER (regex(?dam, ""Kariba Dam"") || regex(?dam, ""Batoka Gorge Hydroelectric Power Station""))
}",2.3192471031465984e-155,0.05952380952380952,True,True
1284,Which are the previous broadcast networks of sister channels of WGBC?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WGBC_(DT2)> <http://dbpedia.org/property/sisterStations> ?x . ?x <http://dbpedia.org/ontology/formerBroadcastNetwork> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which are the previous broadcast networks of sister channels of WGBC?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?sisterChannel ?previousBroadcastNetwork
WHERE {
  ?sisterChannel dbo:parentOrganization dbr:WGBC .
  ?sisterChannel dbo:previousBroadcastNetwork ?previousBroadcastNetwork .
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?sisterChannel ?previousBroadcastNetwork
WHERE {
  ?sisterChannel dbo:parentOrganization dbr:WGBC .
  ?sisterChannel dbo:previousBroadcastNetwork ?previousBroadcastNetwork .
}",3.53714058675999e-155,0.08333333333333333,True,True
1641,How many units follow the US Navy Department's command structure?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_the_Navy>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many units follow the US Navy Department's command structure?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?unitCount
WHERE {
  ?department dbo:partOf ?organization .
  ?organization dbo:name ""US Navy Department"" .
  ?department dbo:subOrganization ?unit .
  
  FILTER ( ?unit != ?department )
}
GROUP BY ?department
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?unitCount
WHERE {
  ?department dbo:partOf ?organization .
  ?organization dbo:name ""US Navy Department"" .
  ?department dbo:subOrganization ?unit .
  
  FILTER ( ?unit != ?department )
}
GROUP BY ?department",7.82830916853581e-232,0.038461538461538464,True,True
388,Who designed the bridge in Oddamavadi?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Oddamavadi> . ?x <http://dbpedia.org/property/designer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who designed the bridge in Oddamavadi?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?designer
WHERE {
  ?bridge dbo:designedBy ?designer .
  ?bridge dbp:location ""Oddamavadi"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?designer
WHERE {
  ?bridge dbo:designedBy ?designer .
  ?bridge dbp:location ""Oddamavadi"" .
}",2.6951020595591624e-155,0.06153846153846154,True,True
4415,How many bacterias have taxonomy as Bacillales and domain as Bacteria?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales> . ?uri <http://dbpedia.org/property/domain> <http://dbpedia.org/resource/Bacteria> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many bacterias have taxonomy as Bacillales and domain as Bacteria?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?bacteria) AS ?count)
WHERE {
  ?bacteria dbo:wikiPageID ?wikiPageID .
  ?bacteria dbo:dbpediaClass ?class .
  FILTER (regex(?wikiPageID, ""Bacteria"", ""i""))
  FILTER (regex(?wikiPageID, ""Bacillales"", ""i""))
  FILTER (str(?class) = ""Bacteria"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?bacteria) AS ?count)
WHERE {
  ?bacteria dbo:wikiPageID ?wikiPageID .
  ?bacteria dbo:dbpediaClass ?class .
  FILTER (regex(?wikiPageID, ""Bacteria"", ""i""))
  FILTER (regex(?wikiPageID, ""Bacillales"", ""i""))
  FILTER (str(?class) = ""Bacteria"")
}",8.34186146802972e-232,0.04878048780487805,True,True
2323,What are some cars similar to luxury cars?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/class> <http://dbpedia.org/resource/Luxury_vehicle> . ?x <http://dbpedia.org/property/related> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some cars similar to luxury cars?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?car
WHERE {
  ?car dbo:carType ""Luxury car"" .
  ?car dbo:similarTo ?similarCar .
  ?similarCar dbo:carType ?carType .
  FILTER ( ?carType != ""Luxury car"" )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?car
WHERE {
  ?car dbo:carType ""Luxury car"" .
  ?car dbo:similarTo ?similarCar .
  ?similarCar dbo:carType ?carType .
  FILTER ( ?carType != ""Luxury car"" )
}",3.0382827129023445e-155,0.06666666666666667,True,True
3725,Current players of Colorado Avalanche have previously played for how many different teams?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Colorado_Avalanche> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Current players of Colorado Avalanche have previously played for how many different teams?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?player ?teams
WHERE {
  ?player dbo:team ""Colorado Avalanche""^^xsd:string .
  ?player dbo:previousTeam ?team .
  ?team dbo:name ?teams .
  FILTER (NOT EXISTS { ?player dbo:previousTeam ?team . })
}
GROUP BY ?player ?teams
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?player ?teams
WHERE {
  ?player dbo:team ""Colorado Avalanche""^^xsd:string .
  ?player dbo:previousTeam ?team .
  ?team dbo:name ?teams .
  FILTER (NOT EXISTS { ?player dbo:previousTeam ?team . })
}
GROUP BY ?player ?teams",2.2589949720910505e-155,0.047619047619047616,True,True
2359,Colin Powell was the commander of which military conflict ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Colin_Powell>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Colin Powell was the commander of which military conflict ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?conflict
WHERE {
  ?person dbo:birthPlace ""Colin Powell"" .
  ?person dbo:occupation ""Military officer"" .
  ?person dbo:role ?conflict .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?conflict
WHERE {
  ?person dbo:birthPlace ""Colin Powell"" .
  ?person dbo:occupation ""Military officer"" .
  ?person dbo:role ?conflict .
}",8.042329535708995e-232,0.04225352112676056,True,True
3385,Does the US navy have the structure of command of us department of defence?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/property/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the US navy have the structure of command of us department of defence?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/United_States_Navy> .
  ?x dbo:partOf ?y .
  ?y dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/United_States_Department_of_Defense> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/United_States_Navy> .
  ?x dbo:partOf ?y .
  ?y dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/United_States_Department_of_Defense> .
}",2.1483903094550452e-155,0.04477611940298507,True,True
2019,List the people who influenced the comedian who acted in Good Hair ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Good_Hair> <http://dbpedia.org/property/starring> ?x . ?x <http://dbpedia.org/ontology/influencedBy> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Comedian>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the people who influenced the comedian who acted in Good Hair ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person
WHERE {
  ?comedian dbo:actedIn <http://dbpedia.org/resource/Good_Hair> .
  ?comedian dbo:influencedBy ?person .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person
WHERE {
  ?comedian dbo:actedIn <http://dbpedia.org/resource/Good_Hair> .
  ?comedian dbo:influencedBy ?person .
}",3.2361225152319982e-155,0.0821917808219178,True,True
2805,Who is on the board of Kate Spade and company?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Kate_Spade_&_Company>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is on the board of Kate Spade and company?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?company dbo:company ?KateSpade .
  ?KateSpade dbp:boardMember ?person .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?company dbo:company ?KateSpade .
  ?KateSpade dbp:boardMember ?person .
}",3.0940944781388835e-155,0.07575757575757576,True,True
4312,"List all the movies whose directors were born in Kenosha, Wisconsin?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Kenosha,_Wisconsin> . ?uri <http://dbpedia.org/property/director> ?x  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the movies whose directors were born in Kenosha, Wisconsin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movie ?director
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:birthDate ?birthDate .
  ?birthDate dbo:birthPlace <http://dbpedia.org/resource/Kenosha,_Wisconsin> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movie ?director
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:birthDate ?birthDate .
  ?birthDate dbo:birthPlace <http://dbpedia.org/resource/Kenosha,_Wisconsin> .
}",3.979059567726874e-155,0.09722222222222222,True,True
2629,Where did ed podolak go to high school,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ed_Podolak> <http://dbpedia.org/ontology/highschool> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did ed podolak go to high school
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Ed Podolak"" .
  ?person dbo:almaMater ?school .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Ed Podolak"" .
  ?person dbo:almaMater ?school .
}",2.494821638843469e-155,0.06153846153846154,True,True
1285,On which subjects does the author of the novel Thud! delve?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thud!> <http://dbpedia.org/ontology/nonFictionSubject> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: On which subjects does the author of the novel Thud! delve?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?subject
WHERE {
  ?book dbo:title ""Thud!"".
  ?book dbo:author ?author.
  ?author dbo:topic ?subject.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?subject
WHERE {
  ?book dbo:title ""Thud!"".
  ?book dbo:author ?author.
  ?author dbo:topic ?subject.
}",2.99393103522275e-155,0.07042253521126761,True,True
4979,Whose resting place is William Henry Harrison Tomb State Memorial and has kids named John Scott Harrison?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/William_Henry_Harrison_Tomb_State_Memorial> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/John_Scott_Harrison>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose resting place is William Henry Harrison Tomb State Memorial and has kids named John Scott Harrison?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?person
WHERE {
  ?person dbo:restingPlace ?tomb .
  ?tomb dbo:name ""William Henry Harrison Tomb State Memorial"" .
  ?person dbo:children ?child .
  ?child dbo:name ""John Scott Harrison"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?person
WHERE {
  ?person dbo:restingPlace ?tomb .
  ?tomb dbo:name ""William Henry Harrison Tomb State Memorial"" .
  ?person dbo:children ?child .
  ?child dbo:name ""John Scott Harrison"" .
}",2.2589949720910505e-155,0.04878048780487805,True,True
2800,In which wars did Percy Fitzwallace fight?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Percy_Fitzwallace> <http://dbpedia.org/property/battles> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which wars did Percy Fitzwallace fight?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?war
WHERE {
  ?person dbo:birthPlace ""South Africa"" .
  ?person dbo:name ""Percy Fitzwallace"" .
  ?person dbo:involvedInWar ?war .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?war
WHERE {
  ?person dbo:birthPlace ""South Africa"" .
  ?person dbo:name ""Percy Fitzwallace"" .
  ?person dbo:involvedInWar ?war .
}",3.032816514970993e-155,0.07352941176470588,True,True
2468,What layout can be found in cars similar to the Subaru Outback?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/related> <http://dbpedia.org/resource/Subaru_Outback> . ?x <http://dbpedia.org/ontology/layout> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What layout can be found in cars similar to the Subaru Outback?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?layout
WHERE {
  ?car dbo:model ""Subaru Outback"" .
  ?car dbo:hasLayout ?layout .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?layout
WHERE {
  ?car dbo:model ""Subaru Outback"" .
  ?car dbo:hasLayout ?layout .
}",3.1137823863213763e-155,0.06666666666666667,True,True
4146,Is the Hyundai Lavita assembled in Kulim?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Kulim> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is the Hyundai Lavita assembled in Kulim?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:model ""Hyundai Lavita"" .
  ?x dbo:assemblyLocation <http://dbpedia.org/resource/Kulim> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:model ""Hyundai Lavita"" .
  ?x dbo:assemblyLocation <http://dbpedia.org/resource/Kulim> .
}",2.4606427705034855e-155,0.0625,True,True
1456,Name the home town of Rolando Gomez?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rolando_Gomez> <http://dbpedia.org/property/homeTown> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the home town of Rolando Gomez?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hometown
WHERE {
  ?person dbo:name ""Rolando Gomez"" .
  ?person dbo: hometown ?hometown .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hometown
WHERE {
  ?person dbo:name ""Rolando Gomez"" .
  ?person dbo: hometown ?hometown .
}",2.494821638843469e-155,0.06349206349206349,False,False
2693,Which party won both the general election and the andhra pradesh election in 2004?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indian_general_election,_2004_(Delhi)> <http://dbpedia.org/ontology/affiliation> ?uri. <http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)> <http://dbpedia.org/ontology/affiliation> ?uri . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which party won both the general election and the andhra pradesh election in 2004?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?party
WHERE {
  ?party dbo:wikiPageRedirects ?redirect .
  ?redirect dbo:abstract ""won the 2004 Indian general election"" .
  ?party dbo:wikiPageRedirects ?redirect2 .
  ?redirect2 dbo:abstract ""won the 2004 Andhra Pradesh Legislative Assembly election"" .
  FILTER (STR(?party) != """")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?party
WHERE {
  ?party dbo:wikiPageRedirects ?redirect .
  ?redirect dbo:abstract ""won the 2004 Indian general election"" .
  ?party dbo:wikiPageRedirects ?redirect2 .
  ?redirect2 dbo:abstract ""won the 2004 Andhra Pradesh Legislative Assembly election"" .
  FILTER (STR(?party) != """")
}",2.1925377309400425e-155,0.060240963855421686,True,True
2818,Who was in youth clubs of FC Barcelona and Newell's Old Boys?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/FC_Barcelona> . ?uri <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/Newell's_Old_Boys> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was in youth clubs of FC Barcelona and Newell's Old Boys?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?person
WHERE {
  ?person dbo:memberOf ?club .
  ?club dbo:name ""FC Barcelona"" .
  FILTER (regex(?person, ""youth club"", ""i""))
  UNION
  ?person dbo:memberOf ?club .
  ?club dbo:name ""Newell's Old Boys"" .
  FILTER (regex(?person, ""youth club"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?person
WHERE {
  ?person dbo:memberOf ?club .
  ?club dbo:name ""FC Barcelona"" .
  FILTER (regex(?person, ""youth club"", ""i""))
  UNION
  ?person dbo:memberOf ?club .
  ?club dbo:name ""Newell's Old Boys"" .
  FILTER (regex(?person, ""youth club"", ""i""))
}",2.8782193009504276e-155,0.07407407407407407,False,False
452,What region is governed by Mario Olivero?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Mario_Oliverio> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What region is governed by Mario Olivero?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?region
WHERE {
  ?person dbo:name ""Mario Olivero"" .
  ?person dbo:governes ?region .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?region
WHERE {
  ?person dbo:name ""Mario Olivero"" .
  ?person dbo:governes ?region .
}",8.259885936748448e-232,0.046875,True,True
3218,Give me the count of interests of the philosopher whose primary interest is Metaphysics ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Metaphysics> . ?x <http://dbpedia.org/property/mainInterests> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me the count of interests of the philosopher whose primary interest is Metaphysics ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?philosopher dbo:primaryInterest dbo:Metaphysics .
  ?philosopher dbo:interests ?interests .
  ?count = COUNT(DISTINCT ?interests)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?philosopher dbo:primaryInterest dbo:Metaphysics .
  ?philosopher dbo:interests ?interests .
  ?count = COUNT(DISTINCT ?interests)
}",2.4708136900731027e-155,0.06666666666666667,False,False
2724,What are the notableworks of Russell T Davies?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/property/notableworks> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the notableworks of Russell T Davies?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?work
WHERE {
  ?person dbo:name ""Russell T Davies"" .
  ?person dbo:notableWorks ?work .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?work
WHERE {
  ?person dbo:name ""Russell T Davies"" .
  ?person dbo:notableWorks ?work .
}",3.0940944781388835e-155,0.07692307692307693,True,True
3498,What award was won by the father of Angelina Jolie?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Angelina_Jolie> . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What award was won by the father of Angelina Jolie?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?award
WHERE {
  ?father dbo:fatherOf Angelina Jolie .
  ?father dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?award
WHERE {
  ?father dbo:fatherOf Angelina Jolie .
  ?father dbo:award ?award .
}",3.2383880054191053e-155,0.07352941176470588,False,False
3868,What team had the debut of Marv Throneberry and Curt Coleman?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marv_Throneberry> <http://dbpedia.org/property/debutteam> ?uri. <http://dbpedia.org/resource/Curt_Coleman> <http://dbpedia.org/ontology/debutTeam> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What team had the debut of Marv Throneberry and Curt Coleman?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:debutTeam ?team .
  FILTER (?player IN (dbo:Marv_Throneberry , dbo:Curt_Coleman))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:debutTeam ?team .
  FILTER (?player IN (dbo:Marv_Throneberry , dbo:Curt_Coleman))
}",2.8682607706800413e-155,0.0547945205479452,True,True
4384,Is Pulau Ubin the largest city of Singapore?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Singapore> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Pulau Ubin the largest city of Singapore?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Pulau Ubin"" .
  ?x dbo:country ""Singapore"" .
  ?x dbo:population ?pop .
  FILTER (BOUND(?pop))
  
  ?y dbo:name ""Singapore"" .
  ?y dbo:largestCity ?largestCity .
  FILTER (BOUND(?largestCity))
  
  ?largestCity dbo:name ?largestCityName .
  FILTER ( ?largestCityName = ""Pulau Ubin"" )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Pulau Ubin"" .
  ?x dbo:country ""Singapore"" .
  ?x dbo:population ?pop .
  FILTER (BOUND(?pop))
  
  ?y dbo:name ""Singapore"" .
  ?y dbo:largestCity ?largestCity .
  FILTER (BOUND(?largestCity))
  
  ?largestCity dbo:name ?largestCityName .
  FILTER ( ?largestCityName = ""Pulau Ubin"" )
}",1.948597508855997e-155,0.03896103896103896,True,True
3364,How many people played for Newell's Old Boys?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/Newell's_Old_Boys>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people played for Newell's Old Boys?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?player)) AS ?count
WHERE {
  ?player dbo:playsFor ?team .
  ?team dbo:name ""Newell's Old Boys"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?player)) AS ?count
WHERE {
  ?player dbo:playsFor ?team .
  ?team dbo:name ""Newell's Old Boys"" .
}",2.427831263680579e-155,0.057971014492753624,False,False
2858,Which builder of Edwin Andrews Air Base is also place of birth of the Akinoumi Setsuo ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edwin_Andrews_Air_Base> <http://dbpedia.org/ontology/builder> ?uri. <http://dbpedia.org/resource/Akinoumi_Setsuo> <http://dbpedia.org/property/placeOfBirth> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which builder of Edwin Andrews Air Base is also place of birth of the Akinoumi Setsuo ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?builder
WHERE {
  ?builder dbo:wikiPageRedirects ?airbase .
  ?airbase dbo:builder ?builder .
  ?builder dbo:placeOfBirth ?birthplace .
  ?birthplace dbo:wikiPageRedirects ?person .
  ?person dbo:name ""Akinoumi Setsuo"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?builder
WHERE {
  ?builder dbo:wikiPageRedirects ?airbase .
  ?airbase dbo:builder ?builder .
  ?builder dbo:placeOfBirth ?birthplace .
  ?birthplace dbo:wikiPageRedirects ?person .
  ?person dbo:name ""Akinoumi Setsuo"" .
}",2.553782876480489e-155,0.04938271604938271,True,True
2809,What is the death location of the scientist who is the known authority of Hallopus ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hallopus> <http://dbpedia.org/ontology/binomialAuthority> ?x . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the death location of the scientist who is the known authority of Hallopus ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?deathLocation
WHERE {
  ?scientist dbo:knownFor ?hallopus .
  ?hallopus dbo:authority ?scientist .
  ?scientist dbo:deathPlace ?deathLocation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?deathLocation
WHERE {
  ?scientist dbo:knownFor ?hallopus .
  ?hallopus dbo:authority ?scientist .
  ?scientist dbo:deathPlace ?deathLocation .
}",2.4123225276763925e-155,0.05405405405405406,True,True
3001,What are some seas inside europe ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Europe>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some seas inside europe ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sea ?seaLabel
WHERE {
  ?sea dbo:locatedIn ?country .
  ?country dbo:countryName ""Europe"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sea ?seaLabel
WHERE {
  ?sea dbo:locatedIn ?country .
  ?country dbo:countryName ""Europe"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.336751314796786e-155,0.05405405405405406,False,False
4339,Los Angeles Lakers is the team of which basketball players?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Los_Angeles_Lakers>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Los Angeles Lakers is the team of which basketball players?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player
WHERE {
  ?team dbo:name ""Los Angeles Lakers"" .
  ?team dbo:player ?player .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player
WHERE {
  ?team dbo:name ""Los Angeles Lakers"" .
  ?team dbo:player ?player .
}",2.3809857162598948e-155,0.056338028169014086,True,True
3966,How many different people have been in any political seat in places which are under the Indian Standard timezone?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/Indian_Standard_Time> . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many different people have been in any political seat in places which are under the Indian Standard timezone?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>

SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?place dbo:country ?country .
  ?country dbo:officialName ""India"" .
  ?place geo:geoContains ?location .
  ?location geo:timeZoneId ""Asia/Kolkata"" .
  ?person dbo:birthPlace ?place .
  ?person dbo:occupation dbo:Politician .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>

SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?place dbo:country ?country .
  ?country dbo:officialName ""India"" .
  ?place geo:geoContains ?location .
  ?location geo:timeZoneId ""Asia/Kolkata"" .
  ?person dbo:birthPlace ?place .
  ?person dbo:occupation dbo:Politician .
}",2.6902653402532207e-155,0.053763440860215055,True,True
743,Which publisher of Stone Canoe is also the university for which Michael Powell plays for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stone_Canoe> <http://dbpedia.org/ontology/publisher> ?uri. <http://dbpedia.org/resource/Michael_Powell_(lacrosse)> <http://dbpedia.org/ontology/team> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which publisher of Stone Canoe is also the university for which Michael Powell plays for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?publisher
WHERE {
  ?book dbo:author ?author .
  ?author dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country ?country .
  ?country dbo:name ""United States""^^xsd:string .
  ?book dbo:publisher ?publisher .
  ?publisher dbo:name ""Stone Canoe"" .
  ?university dbo:student ?author .
  ?university dbo:name ?universityName .
  FILTER (regex(?universityName, ""University""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?publisher
WHERE {
  ?book dbo:author ?author .
  ?author dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country ?country .
  ?country dbo:name ""United States""^^xsd:string .
  ?book dbo:publisher ?publisher .
  ?publisher dbo:name ""Stone Canoe"" .
  ?university dbo:student ?author .
  ?university dbo:name ?universityName .
  FILTER (regex(?universityName, ""University""))
}",2.3865239465594637e-155,0.044444444444444446,True,True
705,How many races have the horses bred by Jacques Van't Hart participated in?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/breeder> <http://dbpedia.org/resource/Jacques_Van't_Hart> . ?x <http://dbpedia.org/property/race> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many races have the horses bred by Jacques Van't Hart participated in?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?race) AS ?count)
WHERE {
  ?horse dbo:bredBy ?breeder .
  ?breeder dbo:name ""Jacques Van't Hart"" .
  ?horse rdf:type dbo:Racehorse .
  ?horse dbo:participatedIn ?race .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?race) AS ?count)
WHERE {
  ?horse dbo:bredBy ?breeder .
  ?breeder dbo:name ""Jacques Van't Hart"" .
  ?horse rdf:type dbo:Racehorse .
  ?horse dbo:participatedIn ?race .
}",2.91841165985534e-155,0.06097560975609756,True,True
3069,"Which university's affiliation is with Kalpan, Inc. and has campus at Iowa ?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.> . ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Iowa>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which university's affiliation is with Kalpan, Inc. and has campus at Iowa ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?university
WHERE {
  ?university dbo:affiliation ?company .
  ?company dbo:name ""Kalpan, Inc."" .
  ?university dbo:location ?location .
  ?location dbo:name ""Iowa"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?university
WHERE {
  ?university dbo:affiliation ?company .
  ?company dbo:name ""Kalpan, Inc."" .
  ?university dbo:location ?location .
  ?location dbo:name ""Iowa"" .
}",2.371081855250832e-155,0.05063291139240506,True,True
368,Which university was attended by both Richard H Immerman and Franklin W Olin?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Richard_H._Immerman> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Franklin_W._Olin> <http://dbpedia.org/property/education> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which university was attended by both Richard H Immerman and Franklin W Olin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university
WHERE {
  ?person dbo:attendedUniversity ?university .
  FILTER (?person IN (dbo:Richard_H_Immerman, dbo:Franklin_W_Olin))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university
WHERE {
  ?person dbo:attendedUniversity ?university .
  FILTER (?person IN (dbo:Richard_H_Immerman, dbo:Franklin_W_Olin))
}",3.1537059338519422e-155,0.08,True,True
1567,Ernest Rutherford was the advisor of how many people?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Ernest_Rutherford>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Ernest Rutherford was the advisor of how many people?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?person dbo:advisor ?rutherford .
  ?rutherford dbo:name ""Ernest Rutherford""^^xsd:string .
  FILTER (BOUND(?person))
}
GROUP BY ?rutherford
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?person dbo:advisor ?rutherford .
  ?rutherford dbo:name ""Ernest Rutherford""^^xsd:string .
  FILTER (BOUND(?person))
}
GROUP BY ?rutherford",8.669612184277444e-232,0.056338028169014086,True,True
1114,Name the species of Panthera leo fossilis?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Panthera_leo_fossilis> <http://dbpedia.org/ontology/species> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the species of Panthera leo fossilis?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?species
WHERE {
  ?fossil dbo:species ?species .
  FILTER (str(?fossil) = ""http://dbpedia.org/resource/Panthera_leo_fossilis"")
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?species
WHERE {
  ?fossil dbo:species ?species .
  FILTER (str(?fossil) = ""http://dbpedia.org/resource/Panthera_leo_fossilis"")
}",2.4775553999024465e-155,0.06060606060606061,True,True
1128,What is the genre of the Band whose home town is County Westmeath?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/County_Westmeath> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the genre of the Band whose home town is County Westmeath?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?genre
WHERE {
  ?band dbo: hometown dbp:CountyWestmeath .
  ?band dbo:genre ?genre .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?genre
WHERE {
  ?band dbo: hometown dbp:CountyWestmeath .
  ?band dbo:genre ?genre .
}",2.50170125957988e-155,0.05555555555555555,False,False
1138,Does Lousana lie at the end of Alberta Highway 42?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Alberta_Highway_42> <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Lousana>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Lousana lie at the end of Alberta Highway 42?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Lousana"" .
  ?x dbp:location dbp:AlbertaHighway42 .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Lousana"" .
  ?x dbp:location dbp:AlbertaHighway42 .
}",2.8871942127949523e-155,0.05970149253731343,True,True
3643,What is the religion of the ones in the Kampuchean Union of Salvation?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Kampuchean_United_Front_for_National_Salvation> . ?x <http://dbpedia.org/ontology/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the religion of the ones in the Kampuchean Union of Salvation?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religion
WHERE {
  ?organization dbo:name ""Kampuchean Union of Salvation"" .
  ?organization dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religion
WHERE {
  ?organization dbo:name ""Kampuchean Union of Salvation"" .
  ?organization dbo:religion ?religion .
}",3.1335534263807668e-155,0.07246376811594203,True,True
4131,Which borough is common for Duddeston and Bordesley railway station ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Duddeston_railway_station> <http://dbpedia.org/property/borough> ?uri. <http://dbpedia.org/resource/Bordesley_railway_station> <http://dbpedia.org/property/borough> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which borough is common for Duddeston and Bordesley railway station ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?borough
WHERE {
  ?station dbo:location ?location .
  ?location dbo:borough ?borough .
  FILTER (regex(?station, ""Duddeston"", ""i"") || regex(?station, ""Bordesley"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?borough
WHERE {
  ?station dbo:location ?location .
  ?location dbo:borough ?borough .
  FILTER (regex(?station, ""Duddeston"", ""i"") || regex(?station, ""Bordesley"", ""i""))
}",3.0025357216578434e-155,0.0759493670886076,True,True
1891,What is the death place of the Marina Pankova and Viktor Ulyanich?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marina_Pankova> <http://dbpedia.org/ontology/deathPlace> ?uri. <http://dbpedia.org/resource/Viktor_Ulyanich> <http://dbpedia.org/ontology/deathPlace> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the death place of the Marina Pankova and Viktor Ulyanich?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?deathPlace
WHERE {
  ?person dbo:deathPlace ?deathPlace .
  FILTER (regex(?person, ""Marina Pankova"", ""i"") || regex(?person, ""Viktor Ulyanich"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?deathPlace
WHERE {
  ?person dbo:deathPlace ?deathPlace .
  FILTER (regex(?person, ""Marina Pankova"", ""i"") || regex(?person, ""Viktor Ulyanich"", ""i""))
}",2.486113577066771e-155,0.06578947368421052,True,True
4377,What is the  name of the television show whose developer is J. Michael Straczynski and actor is Jason Carter (actor)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/J._Michael_Straczynski> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the  name of the television show whose developer is J. Michael Straczynski and actor is Jason Carter (actor)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showName
WHERE {
  ?show dbo:developer J.MichaelStraczynski .
  ?show dbo:actor ?actor .
  ?actor dbo:name ""Jason Carter"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showName
WHERE {
  ?show dbo:developer J.MichaelStraczynski .
  ?show dbo:actor ?actor .
  ?actor dbo:name ""Jason Carter"" .
}",8.34186146802972e-232,0.037037037037037035,False,False
1798,Does Mt St. Peter Churt follow the architectural style of art deco?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Mount_St._Peter_Church> <http://dbpedia.org/property/architecture> <http://dbpedia.org/resource/Art_Deco> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Mt St. Peter Churt follow the architectural style of art deco?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?style
WHERE {
  <http://dbpedia.org/resource/Mount_St._Peter_Churt> dbo:architecturalStyle ?style .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?style
WHERE {
  <http://dbpedia.org/resource/Mount_St._Peter_Churt> dbo:architecturalStyle ?style .
}",2.2898861187450904e-155,0.045454545454545456,True,True
1737,What is the common country of Ganz UV and Balaton wine region?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ganz_UV> <http://dbpedia.org/ontology/operator> ?uri. <http://dbpedia.org/resource/Balaton_wine_region> <http://dbpedia.org/ontology/location> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the common country of Ganz UV and Balaton wine region?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?wineRegion dbo:country ?country .
  FILTER (regex(?wineRegion, ""Ganz UV"", ""i"") || regex(?wineRegion, ""Balaton"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?wineRegion dbo:country ?country .
  FILTER (regex(?wineRegion, ""Ganz UV"", ""i"") || regex(?wineRegion, ""Balaton"", ""i""))
}",2.7960888070028265e-155,0.05194805194805195,True,True
4,Name the municipality of Roberto Clemente Bridge ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Roberto_Clemente_Bridge> <http://dbpedia.org/ontology/municipality> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the municipality of Roberto Clemente Bridge ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?municipality
WHERE {
  <http://dbpedia.org/resource/Roberto_Clemente_Bridge> dbo:locatedIn ?municipality .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?municipality
WHERE {
  <http://dbpedia.org/resource/Roberto_Clemente_Bridge> dbo:locatedIn ?municipality .
}",9.380005307821995e-79,0.08196721311475409,True,True
3579,To which series does Lost special belong to ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Lost_Special> <http://dbpedia.org/property/series> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which series does Lost special belong to ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?series
WHERE {
  ?special dbo:genre ?series .
  FILTER (regex(?series, ""Lost""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?series
WHERE {
  ?special dbo:genre ?series .
  FILTER (regex(?series, ""Lost""))
}",2.5124539841526692e-155,0.06060606060606061,True,True
1763,Where are Thomas Franois Burgers and Johannes Gerhardus Strijdom buried?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thomas_François_Burgers> <http://dbpedia.org/property/restingplace> ?uri. <http://dbpedia.org/resource/Johannes_Gerhardus_Strijdom> <http://dbpedia.org/property/restingplace> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where are Thomas Franois Burgers and Johannes Gerhardus Strijdom buried?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?burialPlace
WHERE {
  ?person a dbo:Person ;
    dbo:name ?name .
  FILTER (regex(?name, ""Thomas Franois Burgers"", ""i"") || regex(?name, ""Johannes Gerhardus Strijdom"", ""i"")) .
  ?person dbo:burialPlace ?burialPlace .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?burialPlace
WHERE {
  ?person a dbo:Person ;
    dbo:name ?name .
  FILTER (regex(?name, ""Thomas Franois Burgers"", ""i"") || regex(?name, ""Johannes Gerhardus Strijdom"", ""i"")) .
  ?person dbo:burialPlace ?burialPlace .
}",3.194645317303101e-155,0.07228915662650602,True,True
2772,Where is the birthplace of Ferrel Harris ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ferrel_Harris> <http://dbpedia.org/property/birthplace> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where is the birthplace of Ferrel Harris ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:birthPlace ?location .
  FILTER (regex(?person, ""Ferrel Harris"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:birthPlace ?location .
  FILTER (regex(?person, ""Ferrel Harris"", ""i""))
}",2.494821638843469e-155,0.06060606060606061,True,True
1369,Is Cologny a neighbouring city of Geneva?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Geneva> <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Cologny a neighbouring city of Geneva?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:neighbourhood ?y .
  ?y dbo:name ""Geneva"" .
  FILTER (str(?x) = ""Cologny"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:neighbourhood ?y .
  ?y dbo:name ""Geneva"" .
  FILTER (str(?x) = ""Cologny"")
}",2.2898861187450904e-155,0.046153846153846156,True,True
1677,Which spouse of Ptolemy XIV had a father named Ptolemy XII auletes?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ptolemy_XII_Auletes> . ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ptolemy_XIV_of_Egypt>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which spouse of Ptolemy XIV had a father named Ptolemy XII auletes?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?spouse
WHERE {
  ?spouse dbo:spouse ?person .
  ?person dbo:father ?father .
  ?father dbo:name ""Ptolemy XII Auletes"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?spouse
WHERE {
  ?spouse dbo:spouse ?person .
  ?person dbo:father ?father .
  ?father dbo:name ""Ptolemy XII Auletes"" .
}",3.075337680136661e-155,0.0684931506849315,True,True
4998,Is NY Rangers a prospective team for Robin Kovacs?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Robin_Kovacs> <http://dbpedia.org/ontology/prospectTeam> <http://dbpedia.org/resource/New_York_Rangers> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is NY Rangers a prospective team for Robin Kovacs?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""NY Rangers"" .
  ?x dbo:teamMember ?y .
  ?y dbo:name ""Robin Kovacs"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""NY Rangers"" .
  ?x dbo:teamMember ?y .
  ?y dbo:name ""Robin Kovacs"" .
}",2.1880577381778143e-155,0.04477611940298507,True,True
3936,How many companies have developed cross platformed software?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Cross-platform> . ?x <http://dbpedia.org/ontology/developer> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many companies have developed cross platformed software?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT (COUNT(DISTINCT ?company) AS ?count)
WHERE {
  ?company dbo:companyType ""Software Company""@en .
  ?company dbo:develops ?software .
  ?software dbo:platform ""Cross-platform""@en .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT (COUNT(DISTINCT ?company) AS ?count)
WHERE {
  ?company dbo:companyType ""Software Company""@en .
  ?company dbo:develops ?software .
  ?software dbo:platform ""Cross-platform""@en .
}",3.1335534263807668e-155,0.06666666666666667,True,True
2229,Which team did Dough Acomb played for which is also the draft team of Dale Mitchell ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dale_Mitchell_(ice_hockey)> <http://dbpedia.org/ontology/draftTeam> ?uri. <http://dbpedia.org/resource/Doug_Acomb> <http://dbpedia.org/property/playedFor> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which team did Dough Acomb played for which is also the draft team of Dale Mitchell ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:memberOf ?team .
  ?player dbo:name ""Dough Acomb""^^xsd:string .
  ?team dbp:draftTeam ?draftTeam .
  ?draftTeam dbo:name ""Dale Mitchell""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:memberOf ?team .
  ?player dbo:name ""Dough Acomb""^^xsd:string .
  ?team dbp:draftTeam ?draftTeam .
  ?draftTeam dbo:name ""Dale Mitchell""^^xsd:string .
}",2.5944303248170386e-155,0.04938271604938271,True,True
957,What is the type of Naval Station Bremerton?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Naval_Station_Bremerton> <http://dbpedia.org/property/type> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the type of Naval Station Bremerton?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?type
WHERE {
  <http://dbpedia.org/resource/Naval_Station_Bremerton> dbo:type ?type .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?type
WHERE {
  <http://dbpedia.org/resource/Naval_Station_Bremerton> dbo:type ?type .
}",9.380005307821995e-79,0.08196721311475409,True,True
1943,What are the teams for which Wilfred McDonald played for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wilfred_McDonald> <http://dbpedia.org/property/playedFor> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the teams for which Wilfred McDonald played for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:name ""Wilfred McDonald"" .
  ?player dbp:playedFor ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:name ""Wilfred McDonald"" .
  ?player dbp:playedFor ?team .
}",3.0732576399341766e-155,0.07575757575757576,True,True
3926,How many guests have been there on broadway?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/On_Broadway_(Smash)> <http://dbpedia.org/property/guests> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many guests have been there on broadway?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?guest)) AS ?count
WHERE {
  ?production dbo:genre ""Broadway"" .
  ?production dbo:cast ?guest .
  FILTER NOT EXISTS { ?guest dbo:deathYear ?deathYear . }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?guest)) AS ?count
WHERE {
  ?production dbo:genre ""Broadway"" .
  ?production dbo:cast ?guest .
  FILTER NOT EXISTS { ?guest dbo:deathYear ?deathYear . }
}",2.938309220081021e-155,0.06756756756756757,False,False
2501,How many teams have someone playing at the defenceman position?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/position> <http://dbpedia.org/resource/Defenceman> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many teams have someone playing at the defenceman position?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?team) AS ?count)
WHERE {
  ?player dbo:position ""Defenceman"" .
  ?player dbp:playsFor ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?team) AS ?count)
WHERE {
  ?player dbo:position ""Defenceman"" .
  ?player dbp:playsFor ?team .
}",2.5175858750356875e-155,0.05263157894736842,True,True
3313,What are some causes of death of European Americans?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/ethnicity> <http://dbpedia.org/resource/European_Americans> . ?x <http://dbpedia.org/ontology/deathCause> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some causes of death of European Americans?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?cause
WHERE {
  ?person dbo:causeOfDeath ?cause .
  FILTER (lang(?person) = 'en')
  FILTER (regex(?person, ""European American""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?cause
WHERE {
  ?person dbo:causeOfDeath ?cause .
  FILTER (lang(?person) = 'en')
  FILTER (regex(?person, ""European American""))
}",3.1742523358973992e-155,0.0821917808219178,True,True
4974,What is the scientist whose doctoral students are Erich Bagge and erban ieica?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/Erich_Bagge> . ?uri <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/Șerban_Țițeica> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the scientist whose doctoral students are Erich Bagge and erban ieica?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?scientist
WHERE {
  ?scientist dbo:doctoralAdvisorOf ?student .
  ?student  a dbo:Person .
  FILTER (regex(?student, ""Erich Bagge"", ""i"") || regex(?student, ""erban ieica"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?scientist
WHERE {
  ?scientist dbo:doctoralAdvisorOf ?student .
  ?student  a dbo:Person .
  FILTER (regex(?student, ""Erich Bagge"", ""i"") || regex(?student, ""erban ieica"", ""i""))
}",2.52482152501334e-155,0.0641025641025641,True,True
2872,Who wrote the subsequent work of One Day at a Time (Em's Version) ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/One_Day_at_a_Time_(Em's_Version)> <http://dbpedia.org/ontology/subsequentWork> ?x . ?x <http://dbpedia.org/ontology/writer> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who wrote the subsequent work of One Day at a Time (Em's Version) ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?work dbo:title ""One Day at a Time (Em's Version)"" .
  ?work dbo:author ?author .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?work dbo:title ""One Day at a Time (Em's Version)"" .
  ?work dbo:author ?author .
}",3.0566417519593477e-155,0.06944444444444445,True,True
4818,Whose mayors are affiliated with Christen-Democratisch en Vlaams?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/affiliation> <http://dbpedia.org/resource/Christen-Democratisch_en_Vlaams> . ?uri <http://dbpedia.org/ontology/leaderName> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose mayors are affiliated with Christen-Democratisch en Vlaams?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?mayor ?city
WHERE {
  ?city dbo:mayor ?mayor .
  ?mayor dbo:party ?party .
  ?party rdfs:label ""Christen-Democratisch en Vlaams""@en .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?mayor ?city
WHERE {
  ?city dbo:mayor ?mayor .
  ?mayor dbo:party ?party .
  ?party rdfs:label ""Christen-Democratisch en Vlaams""@en .
}",3.53714058675999e-155,0.0821917808219178,True,True
4053,Where are the tombstones of the successors of Edward Wolcott?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edward_O._Wolcott> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where are the tombstones of the successors of Edward Wolcott?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?successor ?successorTombstone
WHERE {
  ?successor dbo:successorOf Edward Wolcott .
  ?successor dbo:tombstone ?successorTombstone .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?successor ?successorTombstone
WHERE {
  ?successor dbo:successorOf Edward Wolcott .
  ?successor dbo:tombstone ?successorTombstone .
}",3.6040982025556637e-155,0.08695652173913043,False,False
2540,For which band did Dave Hollister perform in the past?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Dave_Hollister> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: For which band did Dave Hollister perform in the past?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?band
WHERE {
  ?person dbo:name ""Dave Hollister"" .
  ?person dbo:memberOf ?band .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?band
WHERE {
  ?person dbo:name ""Dave Hollister"" .
  ?person dbo:memberOf ?band .
}",2.4440718429993668e-155,0.05970149253731343,True,True
4276,Is Baker's Dozen Donuts in the coffee industry?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Baker's_Dozen_Donuts> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Coffee> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Baker's Dozen Donuts in the coffee industry?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Baker's Dozen Donuts"" .
  ?x dbo:industry ?y .
  FILTER (regex(?y, ""coffee""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Baker's Dozen Donuts"" .
  ?x dbo:industry ?y .
  FILTER (regex(?y, ""coffee""))
}",2.259351571061102e-155,0.045454545454545456,True,True
4320,Which countries led by Elizabeth II?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/Elizabeth_II>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which countries led by Elizabeth II?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?country dbo:officialName ?name .
  ?country dbp:ruler ?ruler .
  ?ruler dbo:name ""Elizabeth II"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?country dbo:officialName ?name .
  ?country dbp:ruler ?ruler .
  ?ruler dbo:name ""Elizabeth II"" .
}",2.4440718429993668e-155,0.058823529411764705,True,True
4155,Is the national endowment of arts under the jurisdiction of federal government of US?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/National_Endowment_for_the_Arts> <http://dbpedia.org/property/jurisdiction> <http://dbpedia.org/resource/Federal_government_of_the_United_States> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is the national endowment of arts under the jurisdiction of federal government of US?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:nationalGoverningBody dbp:United_States_federal_government .
  ?x dbo:name ""National Endowment for the Arts"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:nationalGoverningBody dbp:United_States_federal_government .
  ?x dbo:name ""National Endowment for the Arts"" .
}",2.1483903094550452e-155,0.043478260869565216,True,True
233,What railway lines go through the stations maintained by Western Australian Public Transport Authority?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owningOrganisation> <http://dbpedia.org/resource/Public_Transport_Authority_(Western_Australia)> . ?x <http://dbpedia.org/ontology/servingRailwayLine> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Station>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What railway lines go through the stations maintained by Western Australian Public Transport Authority?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?railwayLine
WHERE {
  ?station dbo:operator ?operator .
  ?operator dbo:name ""Western Australian Public Transport Authority"" .
  ?station dbp:railwayLine ?railwayLine .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?railwayLine
WHERE {
  ?station dbo:operator ?operator .
  ?operator dbo:name ""Western Australian Public Transport Authority"" .
  ?station dbp:railwayLine ?railwayLine .
}",2.951204860745888e-155,0.06329113924050633,True,True
776,In which city is the distributor of Jeevan Mrityu located?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jeevan_Mrityu> <http://dbpedia.org/property/distributor> ?x . ?x <http://dbpedia.org/ontology/locationCity> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which city is the distributor of Jeevan Mrityu located?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?distributor dbo:distributorOf ?movie .
  ?movie dbo:title ""Jeevan Mrityu"" .
  ?distributor dbo:locatedIn ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?distributor dbo:distributorOf ?movie .
  ?movie dbo:title ""Jeevan Mrityu"" .
  ?distributor dbo:locatedIn ?city .
}",3.1537059338519422e-155,0.07042253521126761,True,True
3590,Which co founder of Sea gayle Music is also the artist of Brad Paisley Discography?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Brad_Paisley_discography> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/Sea_Gayle_Music> <http://dbpedia.org/property/founder> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which co founder of Sea gayle Music is also the artist of Brad Paisley Discography?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?coFounder
WHERE {
  ?coFounder dbo:coFounderOf seagayleMusic .
  ?coFounder dbo:artist ?artist .
  ?artist dbo:discography ?discography .
  ?discography dbo:subject BradPaisley .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?coFounder
WHERE {
  ?coFounder dbo:coFounderOf seagayleMusic .
  ?coFounder dbo:artist ?artist .
  ?artist dbo:discography ?discography .
  ?discography dbo:subject BradPaisley .
}",2.6517744597115435e-155,0.05063291139240506,False,False
906,Who is married to Tony Ramo?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/partner> <http://dbpedia.org/resource/Tony_Romo>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is married to Tony Ramo?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouse
WHERE {
  ?person dbo:spouse ?spouse .
  FILTER (regex(?person, ""Tony Ramo"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouse
WHERE {
  ?person dbo:spouse ?spouse .
  FILTER (regex(?person, ""Tony Ramo"", ""i""))
}",8.90735602648238e-232,0.06060606060606061,True,True
4504,"Does the mississippi orignate in the clearwater county, minnesota?",google/gemma-2-9b-it,"ASK WHERE { <http://dbpedia.org/resource/Mississippi_River> <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/Clearwater_County,_Minnesota> }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the mississippi orignate in the clearwater county, minnesota?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:name ""Mississippi"" .
  ?river dbo:origin ?origin .
  ?origin dbo:name ""Clearwater County, Minnesota"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:name ""Mississippi"" .
  ?river dbo:origin ?origin .
  ?origin dbo:name ""Clearwater County, Minnesota"" .
}",2.1880577381778143e-155,0.04477611940298507,True,True
3895,Did Johann Gottfried Galle invent Neptune?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Neptune> <http://dbpedia.org/property/discoverer> <http://dbpedia.org/resource/Johann_Gottfried_Galle> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Did Johann Gottfried Galle invent Neptune?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:birthPlace ""Düsseldorf"" .
  ?x dbo:deathPlace ""Düsseldorf"" .
  ?x dbo:profession ""Astronomer"" .
  ?x dbo:discovered ?y .
  ?y rdfs:label ""Neptune"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:birthPlace ""Düsseldorf"" .
  ?x dbo:deathPlace ""Düsseldorf"" .
  ?x dbo:profession ""Astronomer"" .
  ?x dbo:discovered ?y .
  ?y rdfs:label ""Neptune"" .
}",2.1880577381778143e-155,0.045454545454545456,True,True
4855,Who were the first drivers in the grand prix which took place at Autodromo Enzo e Dino Ferrari?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Autodromo_Enzo_e_Dino_Ferrari> . ?x <http://dbpedia.org/ontology/firstDriver> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who were the first drivers in the grand prix which took place at Autodromo Enzo e Dino Ferrari?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?driver
WHERE {
  ?grandprix dbo:location <http://dbpedia.org/resource/Autodromo_Enzo_e_Dino_Ferrari> .
  ?grandprix dbo:firstDriver ?driver .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?driver
WHERE {
  ?grandprix dbo:location <http://dbpedia.org/resource/Autodromo_Enzo_e_Dino_Ferrari> .
  ?grandprix dbo:firstDriver ?driver .
}",3.859536543477373e-155,0.08974358974358974,True,True
681,Which team of Dan Shamash is also the debut team of John Estes?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Estes> <http://dbpedia.org/ontology/debutTeam> ?uri. <http://dbpedia.org/resource/Dan_Shamash> <http://dbpedia.org/ontology/team> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which team of Dan Shamash is also the debut team of John Estes?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?team dbo:teamMember ?player1 .
  ?player1 dbo:name ""Dan Shamash""^^xsd:string .
  ?player1 dbo:teamMember ?team2 .
  ?team2 dbo:teamMember ?player2 .
  ?player2 dbo:name ""John Estes""^^xsd:string .
  FILTER ( ?team = ?team2 )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?team dbo:teamMember ?player1 .
  ?player1 dbo:name ""Dan Shamash""^^xsd:string .
  ?player1 dbo:teamMember ?team2 .
  ?team2 dbo:teamMember ?player2 .
  ?player2 dbo:name ""John Estes""^^xsd:string .
  FILTER ( ?team = ?team2 )
}",2.553782876480489e-155,0.05063291139240506,True,True
606,Who is the commander of Battle of Brownstown?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_Brownstown> <http://dbpedia.org/ontology/commander> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the commander of Battle of Brownstown?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?commander
WHERE {
  ?battle dbo:battleOf ?commander .
  FILTER (regex(?battle, ""Brownstown"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?commander
WHERE {
  ?battle dbo:battleOf ?commander .
  FILTER (regex(?battle, ""Brownstown"", ""i""))
}",2.5124539841526692e-155,0.0625,True,True
4520,Who was once married to both Kelly Brook and Rosie Huntington-Whiteley?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kelly_Brook> <http://dbpedia.org/ontology/partner> ?uri. <http://dbpedia.org/resource/Rosie_Huntington-Whiteley> <http://dbpedia.org/ontology/partner> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was once married to both Kelly Brook and Rosie Huntington-Whiteley?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?spouse
WHERE {
  ?spouse dbo:spouse ?person1 .
  ?person1 dbo:spouse ?person2 .
  ?person1 dbo:name ""Kelly Brook"" .
  ?person2 dbo:name ""Rosie Huntington-Whiteley"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?spouse
WHERE {
  ?spouse dbo:spouse ?person1 .
  ?person1 dbo:spouse ?person2 .
  ?person1 dbo:name ""Kelly Brook"" .
  ?person2 dbo:name ""Rosie Huntington-Whiteley"" .
}",3.3424566934858732e-155,0.08108108108108109,True,True
247,What is the birthplace of Liudmila Privivkova and Qadir Huseynov?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liudmila_Privivkova> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/Qadir_Huseynov> <http://dbpedia.org/ontology/birthPlace> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the birthplace of Liudmila Privivkova and Qadir Huseynov?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?birthplace
WHERE {
  ?person dbo:birthPlace ?birthplace .
  FILTER (regex(?person, ""Liudmila Privivkova"", ""i"") || regex(?person, ""Qadir Huseynov"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?birthplace
WHERE {
  ?person dbo:birthPlace ?birthplace .
  FILTER (regex(?person, ""Liudmila Privivkova"", ""i"") || regex(?person, ""Qadir Huseynov"", ""i""))
}",3.1137823863213763e-155,0.07894736842105263,True,True
4158,Which employer of Michael M. Sears is also the producer of Delta III ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_M._Sears> <http://dbpedia.org/ontology/employer> ?uri. <http://dbpedia.org/resource/Delta_III> <http://dbpedia.org/ontology/manufacturer> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which employer of Michael M. Sears is also the producer of Delta III ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?employer
WHERE {
  ?employer dbo:employee ?person .
  ?person dbo:name ""Michael M. Sears""^^xsd:string .
  ?employer dbo:production ?movie .
  ?movie dbo:title ""Delta III"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?employer
WHERE {
  ?employer dbo:employee ?person .
  ?person dbo:name ""Michael M. Sears""^^xsd:string .
  ?employer dbo:production ?movie .
  ?movie dbo:title ""Delta III"" .
}",2.6226323115709007e-155,0.05,True,True
4334,What municipalities are adjacent to Chne-Bougeries?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Chêne-Bougeries>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What municipalities are adjacent to Chne-Bougeries?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?municipality
WHERE {
  ?municipality dbo:adjacentTo <http://dbpedia.org/resource/Chêne-Bougeries> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?municipality
WHERE {
  ?municipality dbo:adjacentTo <http://dbpedia.org/resource/Chêne-Bougeries> .
}",1.0989929781835515e-78,0.0967741935483871,True,True
539,Name the movie written by Monty Python and distributed by Cinema International Corporation?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Monty_Python>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the movie written by Monty Python and distributed by Cinema International Corporation?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?movie
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Monty Python"" .
  ?movie dbo:distributor ?distributor .
  ?distributor dbo:name ""Cinema International Corporation"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?movie
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Monty Python"" .
  ?movie dbo:distributor ?distributor .
  ?distributor dbo:name ""Cinema International Corporation"" .
}",8.364937377160846e-232,0.03896103896103896,True,True
3789,What is the nationality of the chancellor who was served by Michael Mayr?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michael_Mayr> <http://dbpedia.org/ontology/deputy> ?x . ?x <http://dbpedia.org/ontology/nationality> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Chancellor>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the nationality of the chancellor who was served by Michael Mayr?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?chancellorNationality
WHERE {
  ?chancellor dbo:servedBy ?mayr .
  ?mayr dbo:name ""Michael Mayr""^^xsd:string .
  ?chancellor dbo:nationality ?chancellorNationality .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?chancellorNationality
WHERE {
  ?chancellor dbo:servedBy ?mayr .
  ?mayr dbo:name ""Michael Mayr""^^xsd:string .
  ?chancellor dbo:nationality ?chancellorNationality .
}",2.486113577066771e-155,0.05405405405405406,True,True
174,Name the tenant of Ever bank field which has also has player named Dan Shamash ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dan_Shamash> <http://dbpedia.org/ontology/team> ?uri. <http://dbpedia.org/resource/EverBank_Field> <http://dbpedia.org/ontology/tenant> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the tenant of Ever bank field which has also has player named Dan Shamash ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?tenant
WHERE {
  ?tenant dbo:sportsTeam ?team .
  ?team dbp:stadium ?stadium .
  ?stadium dbo:name ""Ever Bank Field"" .
  ?team dbo:player ?player .
  ?player dbo:name ""Dan Shamash"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?tenant
WHERE {
  ?tenant dbo:sportsTeam ?team .
  ?team dbp:stadium ?stadium .
  ?stadium dbo:name ""Ever Bank Field"" .
  ?team dbo:player ?player .
  ?player dbo:name ""Dan Shamash"" .
}",1.998443100417405e-155,0.03614457831325301,True,True
4955,Which city council owns the Ted Williams tunnel and Leonard Memorial ridge?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ted_Williams_Tunnel> <http://dbpedia.org/property/owner> ?uri. <http://dbpedia.org/resource/Leonard_P._Zakim_Bunker_Hill_Memorial_Bridge> <http://dbpedia.org/property/owner> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which city council owns the Ted Williams tunnel and Leonard Memorial ridge?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?cityCouncil
WHERE {
  ?tunnel dbo:ownedBy ?cityCouncil .
  ?tunnel dbo:name ""Ted Williams Tunnel"" .
  ?ridge dbo:ownedBy ?cityCouncil .
  ?ridge dbo:name ""Leonard Memorial Ridge"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?cityCouncil
WHERE {
  ?tunnel dbo:ownedBy ?cityCouncil .
  ?tunnel dbo:name ""Ted Williams Tunnel"" .
  ?ridge dbo:ownedBy ?cityCouncil .
  ?ridge dbo:name ""Leonard Memorial Ridge"" .
}",3.229753418204598e-155,0.07894736842105263,True,True
4385,Which sitcoms are made by a company headquartered in NYC?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/New_York_City> . ?uri <http://dbpedia.org/ontology/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sitcoms are made by a company headquartered in NYC?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sitcom ?company
WHERE {
  ?sitcom dbo:genre ""Sitcom"" .
  ?sitcom dbo:producer ?company .
  ?company dbo:headquarters ?location .
  ?location dbo:country ""United States"" .
  ?location dbo:city ""New York City"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sitcom ?company
WHERE {
  ?sitcom dbo:genre ""Sitcom"" .
  ?sitcom dbo:producer ?company .
  ?company dbo:headquarters ?location .
  ?location dbo:country ""United States"" .
  ?location dbo:city ""New York City"" .
}",2.8866879095378115e-155,0.06172839506172839,True,True
801,Which offices were held by the politicians who held their allegiance to the union of american civil war?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/allegiance> <http://dbpedia.org/resource/Union_(American_Civil_War)> . ?x <http://dbpedia.org/property/office> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which offices were held by the politicians who held their allegiance to the union of american civil war?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?politician ?office
WHERE {
  ?politician dbo:birthPlace ?birthPlace .
  ?politician dbo:allegiance ?allegiance .
  FILTER (regex(?allegiance, ""Union"", ""i""))
  ?politician dbo:holdsOffice ?office .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?politician ?office
WHERE {
  ?politician dbo:birthPlace ?birthPlace .
  ?politician dbo:allegiance ?allegiance .
  FILTER (regex(?allegiance, ""Union"", ""i""))
  ?politician dbo:holdsOffice ?office .
}",2.8712091323971647e-155,0.05952380952380952,True,True
4306,People born in Saint-Amand-en-Puisaye are famous for what things ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Saint-Amand-en-Puisaye> . ?x <http://dbpedia.org/property/knownFor> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: People born in Saint-Amand-en-Puisaye are famous for what things ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:birthPlace dbp:Saint_Amand_en_Puisaye .
  ?person dbo:knownFor ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:birthPlace dbp:Saint_Amand_en_Puisaye .
  ?person dbo:knownFor ?thing .
}",3.650908595319347e-155,0.08450704225352113,True,True
2685,Where did the people beatified by Pope Pius X die?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/beatifiedBy> <http://dbpedia.org/resource/Pope_Pius_X> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the people beatified by Pope Pius X die?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?place
WHERE {
  ?person dbo:deathPlace ?place .
  ?person dbo:beatifiedBy <http://dbpedia.org/resource/Pope_Pius_X> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?place
WHERE {
  ?person dbo:deathPlace ?place .
  ?person dbo:beatifiedBy <http://dbpedia.org/resource/Pope_Pius_X> .
}",3.7246750897077527e-155,0.08571428571428572,True,True
3778,"Fairfield, Connecticut is hometown to which persons?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Fairfield,_Connecticut>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Fairfield, Connecticut is hometown to which persons?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:birthPlace ?location .
  ?location dbo:name ""Fairfield, Connecticut""@en .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:birthPlace ?location .
  ?location dbo:name ""Fairfield, Connecticut""@en .
}",2.494821638843469e-155,0.05970149253731343,True,True
2380,What sports are played in schools in Vashi?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Vashi> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What sports are played in schools in Vashi?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?school dbo:location <http://dbpedia.org/resource/Vashi> .
  ?school dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?school dbo:location <http://dbpedia.org/resource/Vashi> .
  ?school dbo:sports ?sport .
}",3.699591675882789e-155,0.08571428571428572,True,True
1770,Did Trish Stratus train Christina Crawford?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Christina_Crawford_(wrestler)> <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Trish_Stratus> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Did Trish Stratus train Christina Crawford?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:trainer Christina Crawford .
  ?x dbo:name ""Trish Stratus"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:trainer Christina Crawford .
  ?x dbo:name ""Trish Stratus"" .
}",2.338101885922867e-155,0.04838709677419355,False,False
2565,Which are the automobile platform whose one of the automobile platform is Dodge ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/Dodge> . ?x <http://dbpedia.org/ontology/automobilePlatform> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which are the automobile platform whose one of the automobile platform is Dodge ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?platform
WHERE {
  ?platform dbo:platform ?car .
  ?car dbo:manufacturer ""Dodge"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?platform
WHERE {
  ?platform dbo:platform ?car .
  ?car dbo:manufacturer ""Dodge"" .
}",3.0943809285865547e-155,0.06944444444444445,True,True
3310,In which country is Bocas del toro a capital of some region?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/capital> <http://dbpedia.org/resource/Bocas_Town,_Bocas_del_Toro> . ?x <http://dbpedia.org/property/country> ?uri  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which country is Bocas del toro a capital of some region?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?region dbo:capital ?city .
  ?city dbp:locatedIn ?country .
  ?city dbo:name ""Bocas del Toro"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?region dbo:capital ?city .
  ?city dbp:locatedIn ?country .
  ?city dbo:name ""Bocas del Toro"" .
}",3.473781407941057e-155,0.07894736842105263,True,True
584,What team did J P Paris was former team of Bert McCaffrey play for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/J._P._Parisé> <http://dbpedia.org/property/playedFor> ?uri. <http://dbpedia.org/resource/Bert_McCaffrey> <http://dbpedia.org/ontology/formerTeam> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What team did J P Paris was former team of Bert McCaffrey play for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team
WHERE {
  ?player dbo:name ""Bert McCaffrey"" .
  ?player dbo:formerTeam ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team
WHERE {
  ?player dbo:name ""Bert McCaffrey"" .
  ?player dbo:formerTeam ?team .
}",3.0131856032309288e-155,0.06756756756756757,True,True
4565,Where did the conflict take place where Louis Briere de I'Isle was a commander?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Louis_Brière_de_l'Isle> . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the conflict take place where Louis Briere de I'Isle was a commander?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?conflictLocation
WHERE {
  ?person dbo:birthPlace ""Louis Briere de l'Isle"" .
  ?person dbo:occupation ""Military commander"" .
  ?person dbo:involvedInConflict ?conflict .
  ?conflict dbo:location ?conflictLocation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?conflictLocation
WHERE {
  ?person dbo:birthPlace ""Louis Briere de l'Isle"" .
  ?person dbo:occupation ""Military commander"" .
  ?person dbo:involvedInConflict ?conflict .
  ?conflict dbo:location ?conflictLocation .
}",2.8866879095378115e-155,0.06172839506172839,True,True
2319,What is the ideology of the Union of Cambodian Democrats which is also the ideology of Palang Dharma Party ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_of_Cambodian_Democrats> <http://dbpedia.org/ontology/ideology> ?uri. <http://dbpedia.org/resource/Palang_Dharma_Party> <http://dbpedia.org/ontology/ideology> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the ideology of the Union of Cambodian Democrats which is also the ideology of Palang Dharma Party ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?ideology
WHERE {
  ?party dbo:ideology ?ideology .
  FILTER ( ?party IN (
    <http://dbpedia.org/resource/Union_of_Cambodian_Democrats>,
    <http://dbpedia.org/resource/Palang_Dharma_Party>
  ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?ideology
WHERE {
  ?party dbo:ideology ?ideology .
  FILTER ( ?party IN (
    <http://dbpedia.org/resource/Union_of_Cambodian_Democrats>,
    <http://dbpedia.org/resource/Palang_Dharma_Party>
  ) )
}",2.454081903007032e-155,0.07692307692307693,True,True
467,What is the largest city of the country which hosted the 1951 Asian Games?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1951_Asian_Games> <http://dbpedia.org/property/hostCity> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the largest city of the country which hosted the 1951 Asian Games?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city ?cityLabel
WHERE {
  ?country dbo:countryOfOrigin ?athlete .
  ?athlete dbo:birthPlace ?city .
  ?city rdfs:label ?cityLabel .
  FILTER (regex(?cityLabel, ""largest city"", ""i""))
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city ?cityLabel
WHERE {
  ?country dbo:countryOfOrigin ?athlete .
  ?athlete dbo:birthPlace ?city .
  ?city rdfs:label ?cityLabel .
  FILTER (regex(?cityLabel, ""largest city"", ""i""))
}",2.3577979608859863e-155,0.05,True,True
1262,What are some journals of academic Philosophy?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/discipline> <http://dbpedia.org/resource/Philosophy> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some journals of academic Philosophy?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?journal
WHERE {
  ?journal dbo:genre ""Philosophy"" .
  ?journal dbo:wikiPageRedirects* dbr:Journal .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?journal
WHERE {
  ?journal dbo:genre ""Philosophy"" .
  ?journal dbo:wikiPageRedirects* dbr:Journal .
}",2.5124539841526692e-155,0.0625,True,True
298,Who are the major stockholders of the bank which is the company of Bloomberg Markets?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bloomberg_Markets> <http://dbpedia.org/property/company> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the major stockholders of the bank which is the company of Bloomberg Markets?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?stockholder
WHERE {
  ?company dbo:parentOrganization ?bloombergMarkets .
  ?bloombergMarkets dbo:name ""Bloomberg Markets"" .
  ?company dbo:industry ""Financial services"" .
  ?company dbo:stockholder ?stockholder .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?stockholder
WHERE {
  ?company dbo:parentOrganization ?bloombergMarkets .
  ?bloombergMarkets dbo:name ""Bloomberg Markets"" .
  ?company dbo:industry ""Financial services"" .
  ?company dbo:stockholder ?stockholder .
}",2.344734865707205e-155,0.05063291139240506,True,True
1143,Give me a count of movies whose producer is Larry J. Franco?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Larry_J._Franco>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me a count of movies whose producer is Larry J. Franco?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Larry J. Franco"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Larry J. Franco"" .
}",8.042329535708995e-232,0.04054054054054054,True,True
740,Name all the bands which have members of QDT in them.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/QDT> <http://dbpedia.org/ontology/bandMember> ?x . ?x <http://dbpedia.org/ontology/associatedBand> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name all the bands which have members of QDT in them.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT DISTINCT ?bandName
WHERE {
  ?band dbo:member ?member .
  ?member rdf:type dbo:Person .
  ?member dbo:birthDate ?birthDate .
  FILTER (regex(?birthDate, ""1970-01-01"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
SELECT DISTINCT ?bandName
WHERE {
  ?band dbo:member ?member .
  ?member rdf:type dbo:Person .
  ?member dbo:birthDate ?birthDate .
  FILTER (regex(?birthDate, ""1970-01-01"", ""i""))
}",3.1205049827277816e-155,0.0759493670886076,True,True
1216,Is the magnolia place of the greek revival architectural style?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Magnolia_Place> <http://dbpedia.org/ontology/architecturalStyle> <http://dbpedia.org/resource/Greek_Revival_architecture> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is the magnolia place of the greek revival architectural style?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x
WHERE {
  ?x dbo:style ?style .
  ?style rdfs:label ""Greek Revival"" .
  ?x dbp:place ""Magnolia"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x
WHERE {
  ?x dbo:style ?style .
  ?style rdfs:label ""Greek Revival"" .
  ?x dbp:place ""Magnolia"" .
}",2.1880577381778143e-155,0.04411764705882353,True,True
2660,"Which military unit garrison is Arlington County, Virginia and The Pentagon?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Arlington_County,_Virginia> . ?uri <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/The_Pentagon>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which military unit garrison is Arlington County, Virginia and The Pentagon?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?unit
WHERE {
  ?unit dbo:location dbo:Arlington_County,Virginia .
  ?unit dbo:location dbo:The_Pentagon .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?unit
WHERE {
  ?unit dbo:location dbo:Arlington_County,Virginia .
  ?unit dbo:location dbo:The_Pentagon .
}",2.533776972251024e-155,0.05555555555555555,False,False
2533,What is the territory of the conflict whose commander is Feng Zicai?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Feng_Zicai> . ?x <http://dbpedia.org/ontology/territory> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the territory of the conflict whose commander is Feng Zicai?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?territory
WHERE {
  ?conflict dbo:commander ?commander .
  ?commander rdfs:label ""Feng Zicai"" .
  ?conflict dbp:territory ?territory .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?territory
WHERE {
  ?conflict dbo:commander ?commander .
  ?commander rdfs:label ""Feng Zicai"" .
  ?conflict dbp:territory ?territory .
}",2.50170125957988e-155,0.05555555555555555,True,True
3550,Which licensee of the WRVU is also the alma mater of the Todd J. Campbell ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WRVU> <http://dbpedia.org/property/licensee> ?uri. <http://dbpedia.org/resource/Todd_J._Campbell> <http://dbpedia.org/ontology/almaMater> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which licensee of the WRVU is also the alma mater of the Todd J. Campbell ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?licensee
WHERE {
  ?licensee dbo:licenseeOf ?wrvu .
  ?wrvu dbo:almaMater ?almaMater .
  ?almaMater dbo:name ""Todd J. Campbell""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?licensee
WHERE {
  ?licensee dbo:licenseeOf ?wrvu .
  ?wrvu dbo:almaMater ?almaMater .
  ?almaMater dbo:name ""Todd J. Campbell""^^xsd:string .
}",2.6667146252330243e-155,0.05194805194805195,True,True
2356,What water bodies have primary inflows as Kemijoki?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/inflow> <http://dbpedia.org/resource/Kemijoki> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What water bodies have primary inflows as Kemijoki?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?waterBody
WHERE {
  ?waterBody dbo:primaryInflow ?inflow .
  ?inflow dbp:name ""Kemijoki"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?waterBody
WHERE {
  ?waterBody dbo:primaryInflow ?inflow .
  ?inflow dbp:name ""Kemijoki"" .
}",2.494821638843469e-155,0.06153846153846154,True,True
1020,What is the official residence of the Helen Getachew which is also the palce of death of the Haile Selassie Gugsa?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Helen_Getachew> <http://dbpedia.org/ontology/residence> ?uri. <http://dbpedia.org/resource/Haile_Selassie_Gugsa> <http://dbpedia.org/property/placeOfDeath> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the official residence of the Helen Getachew which is also the palce of death of the Haile Selassie Gugsa?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?residence
WHERE {
  ?person dbo:officialResidence ?residence .
  FILTER ( ?person = <http://dbpedia.org/resource/Helen_Getachew> )
  FILTER ( ?residence = <http://dbpedia.org/resource/National_Palace_of_Ethiopia> )
  ?person dbo:placeOfDeath ?deathPlace .
  FILTER ( ?deathPlace = <http://dbpedia.org/resource/National_Palace_of_Ethiopia> )
  FILTER ( ?person = <http://dbpedia.org/resource/Haile_Selassie_I> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?residence
WHERE {
  ?person dbo:officialResidence ?residence .
  FILTER ( ?person = <http://dbpedia.org/resource/Helen_Getachew> )
  FILTER ( ?residence = <http://dbpedia.org/resource/National_Palace_of_Ethiopia> )
  ?person dbo:placeOfDeath ?deathPlace .
  FILTER ( ?deathPlace = <http://dbpedia.org/resource/National_Palace_of_Ethiopia> )
  FILTER ( ?person = <http://dbpedia.org/resource/Haile_Selassie_I> )
}",2.006819431579028e-155,0.04878048780487805,True,True
2390,Name the Glover's distributor?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Glover_(video_game)> <http://dbpedia.org/ontology/distributor> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the Glover's distributor?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?distributor
WHERE {
  ?glover dbo:distributor ?distributor .
  FILTER (regex(?distributor, ""Glover""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?distributor
WHERE {
  ?glover dbo:distributor ?distributor .
  FILTER (regex(?distributor, ""Glover""))
}",2.606590994551401e-155,0.06666666666666667,True,True
2032,Which state of Timothy J. Roemer is also the location city of Dad's Root Beer ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dad's_Root_Beer> <http://dbpedia.org/property/locationCity> ?uri. <http://dbpedia.org/resource/Timothy_J._Roemer> <http://dbpedia.org/property/state> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which state of Timothy J. Roemer is also the location city of Dad's Root Beer ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?state ?city
WHERE {
  ?person dbo:name ""Timothy J. Roemer"" .
  ?person dbo:birthPlace ?state .
  ?city dbo:name ""Dad's Root Beer"" .
  ?city dbp:location ?state .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?state ?city
WHERE {
  ?person dbo:name ""Timothy J. Roemer"" .
  ?person dbo:birthPlace ?state .
  ?city dbo:name ""Dad's Root Beer"" .
  ?city dbp:location ?state .
}",2.0194805030799393e-155,0.0375,True,True
3402,What is the outflow of Lake Uniamsi and the inflow of Cahora Bassa?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lake_Uniamési> <http://dbpedia.org/property/outflow> ?uri. <http://dbpedia.org/resource/Cahora_Bassa> <http://dbpedia.org/property/inflow> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the outflow of Lake Uniamsi and the inflow of Cahora Bassa?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?outflow ?inflow
WHERE {
  ?lake1 dbo:outflow ?outflow .
  ?lake2 dbo:inflow ?inflow .
  FILTER (STR(?lake1) = ""Lake Uniamsi"")
  FILTER (STR(?lake2) = ""Cahora Bassa"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?outflow ?inflow
WHERE {
  ?lake1 dbo:outflow ?outflow .
  ?lake2 dbo:inflow ?inflow .
  FILTER (STR(?lake1) = ""Lake Uniamsi"")
  FILTER (STR(?lake2) = ""Cahora Bassa"")
}",2.0751256583633507e-155,0.0379746835443038,True,True
4819,Where was Juno I launched from ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juno_I> <http://dbpedia.org/ontology/launchSite> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where was Juno I launched from ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?satellite dbo:launchLocation ?location .
  FILTER ( ?satellite = <http://dbpedia.org/resource/Juno_(spacecraft)> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?satellite dbo:launchLocation ?location .
  FILTER ( ?satellite = <http://dbpedia.org/resource/Juno_(spacecraft)> )
}",2.494821638843469e-155,0.06060606060606061,True,True
4667,What are on the borders of Shimsa Plateau?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Shimōsa_Plateau> <http://dbpedia.org/ontology/border> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are on the borders of Shimsa Plateau?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?border
WHERE {
  ?plateau dbo:wikiPageID ""10000000"" .
  ?plateau dbo:borders ?border .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?border
WHERE {
  ?plateau dbo:wikiPageID ""10000000"" .
  ?plateau dbo:borders ?border .
}",3.0732576399341766e-155,0.07575757575757576,True,True
3625,What is the information appliance whose successor is PlayStation 4 and maker is Foxconn?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/PlayStation_4> . ?uri <http://dbpedia.org/property/manufacturer> <http://dbpedia.org/resource/Foxconn>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the information appliance whose successor is PlayStation 4 and maker is Foxconn?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?appliance
WHERE {
  ?appliance dbo:successor ?ps4 .
  ?ps4 dbo:name ""PlayStation 4""^^xsd:string .
  ?appliance dbo:maker ?maker .
  ?maker dbo:name ""Foxconn""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?appliance
WHERE {
  ?appliance dbo:successor ?ps4 .
  ?ps4 dbo:name ""PlayStation 4""^^xsd:string .
  ?appliance dbo:maker ?maker .
  ?maker dbo:name ""Foxconn""^^xsd:string .
}",8.460552185460498e-232,0.04054054054054054,True,True
3989,Which rivers flow into the lower Manhattan?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthMountain> <http://dbpedia.org/resource/Lower_Manhattan> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which rivers flow into the lower Manhattan?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?river
WHERE {
  ?river rdf:type dbo:River .
  ?river dbp:mouth rdf:value ""Lower Manhattan"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?river
WHERE {
  ?river rdf:type dbo:River .
  ?river dbp:mouth rdf:value ""Lower Manhattan"" .
}",2.427831263680579e-155,0.05970149253731343,False,False
751,How many companies serve the Australian region?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/regionServed> <http://dbpedia.org/resource/Australia>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many companies serve the Australian region?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?company) AS ?count)
WHERE {
  ?company dbo:country ""Australia""^^xsd:string .
  ?company dbo:type dbo:Company .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?company) AS ?count)
WHERE {
  ?company dbo:country ""Australia""^^xsd:string .
  ?company dbo:type dbo:Company .
}",8.202720662090001e-232,0.043478260869565216,True,True
2278,What are the television shows whose network's stockholder is Warner Bros. Television?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Warner_Bros._Television> . ?uri <http://dbpedia.org/ontology/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the television shows whose network's stockholder is Warner Bros. Television?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show ?network
WHERE {
  ?show dbo:network ?network .
  ?network dbo:stockholder WarnerBrosTelevision .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show ?network
WHERE {
  ?show dbo:network ?network .
  ?network dbo:stockholder WarnerBrosTelevision .
}",3.1137823863213763e-155,0.06756756756756757,False,False
1631,What is the largest city of Pulau Ubin?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/largestCity> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the largest city of Pulau Ubin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?island dbo:wikiPageID ""Q1047777"" .
  ?island dbo:largestCity ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?island dbo:wikiPageID ""Q1047777"" .
  ?island dbo:largestCity ?city .
}",2.4606427705034855e-155,0.06153846153846154,True,True
2272,Rostock and Oulu is the shore cities on which sea ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Rostock> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Oulu> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Rostock and Oulu is the shore cities on which sea ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?sea
WHERE {
  ?city dbo:locatedIn ?country .
  ?city rdfs:label ""Rostock"" .
  ?city rdfs:label ""Oulu"" .
  ?country dbo:locatedOnSea ?sea .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?sea
WHERE {
  ?city dbo:locatedIn ?country .
  ?city rdfs:label ""Rostock"" .
  ?city rdfs:label ""Oulu"" .
  ?country dbo:locatedOnSea ?sea .
}",2.426555136425675e-155,0.0547945205479452,True,True
4244,How many awards have been given to the ones who died of lung cancer?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathCause> <http://dbpedia.org/resource/Lung_cancer> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many awards have been given to the ones who died of lung cancer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?award)) AS ?awardCount
WHERE {
  ?person dbo:causeOfDeath ""Lung cancer""^^xsd:string .
  ?person dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?award)) AS ?awardCount
WHERE {
  ?person dbo:causeOfDeath ""Lung cancer""^^xsd:string .
  ?person dbo:award ?award .
}",2.4410426763339902e-155,0.04938271604938271,False,False
1454,Name the company which produces Marionette and has key person as Edwin catmull?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Marionette_(software)> . ?uri <http://dbpedia.org/property/keyPeople> <http://dbpedia.org/resource/Edwin_Catmull>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the company which produces Marionette and has key person as Edwin catmull?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?company
WHERE {
  ?company dbo:company ?product .
  ?product rdfs:label ""Marionette"" .
  ?company dbo:keyPerson ?person .
  ?person rdfs:label ""Edwin Catmull"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?company
WHERE {
  ?company dbo:company ?product .
  ?product rdfs:label ""Marionette"" .
  ?company dbo:keyPerson ?person .
  ?person rdfs:label ""Edwin Catmull"" .
}",8.412065649527267e-232,0.03896103896103896,True,True
4224,Which company developed the language designed by Lars Bak?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designer> <http://dbpedia.org/resource/Lars_Bak_(computer_programmer)> . ?x <http://dbpedia.org/property/developer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Language>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which company developed the language designed by Lars Bak?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?company
WHERE {
  ?language dbo:developer ?company .
  ?language dbp:creator ""Lars Bak""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?company
WHERE {
  ?language dbo:developer ?company .
  ?language dbp:creator ""Lars Bak""^^xsd:string .
}",3.2383880054191053e-155,0.07142857142857142,True,True
2666,Name some books by Spanish speaking authors.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/language> <http://dbpedia.org/resource/Spanish_language> . ?uri <http://dbpedia.org/property/author> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name some books by Spanish speaking authors.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?book ?author
WHERE {
  ?book dbo:author ?author .
  FILTER (lang(?author) = ""es"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?book ?author
WHERE {
  ?book dbo:author ?author .
  FILTER (lang(?author) = ""es"")
}",3.216579438360415e-155,0.08450704225352113,True,True
4764,How many universities are in the National Collegiate Athletic Association?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/athletics> <http://dbpedia.org/resource/National_Collegiate_Athletic_Association>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many universities are in the National Collegiate Athletic Association?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?university) AS ?count)
WHERE {
  ?university dbo:memberOf ?organization .
  ?organization dbo:name ""National Collegiate Athletic Association"" .
  FILTER ( ?university a dbo:University )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?university) AS ?count)
WHERE {
  ?university dbo:memberOf ?organization .
  ?organization dbo:name ""National Collegiate Athletic Association"" .
  FILTER ( ?university a dbo:University )
}",8.510469113101058e-232,0.05405405405405406,False,False
3239,What are the prizes awarded to the main members of DisneyToon Studios?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/DisneyToon_Studios> <http://dbpedia.org/ontology/keyPerson> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the prizes awarded to the main members of DisneyToon Studios?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?prize
WHERE {
  ?person dbo:memberOf <http://dbpedia.org/resource/DisneyToon_Studios> .
  ?person dbo:award ?prize .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?prize
WHERE {
  ?person dbo:memberOf <http://dbpedia.org/resource/DisneyToon_Studios> .
  ?person dbo:award ?prize .
}",3.7029321683834812e-155,0.09722222222222222,True,True
1104,Count the participants of the NBA.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/league> <http://dbpedia.org/resource/National_Basketball_Association>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the participants of the NBA.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?participant
WHERE {
  ?participant dbo:sportsTeam ?team .
  ?team dbo:league ""National Basketball Association"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?participant
WHERE {
  ?participant dbo:sportsTeam ?team .
  ?team dbo:league ""National Basketball Association"" .
}",2.5124539841526692e-155,0.06349206349206349,True,True
4185,List all the writers of the comics which has Robert Bernstein as one of the writer ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/writers> <http://dbpedia.org/resource/Robert_Bernstein_(comics)> . ?x <http://dbpedia.org/property/writers> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Comic>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the writers of the comics which has Robert Bernstein as one of the writer ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?writer
WHERE {
  ?comic dbo:writer ?writer .
  ?comic dbo:writer <http://dbpedia.org/resource/Robert_Bernstein> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?writer
WHERE {
  ?comic dbo:writer ?writer .
  ?comic dbo:writer <http://dbpedia.org/resource/Robert_Bernstein> .
}",3.0382827129023445e-155,0.06756756756756757,True,True
119,What awards have been won by the executive producer of Timmy Time ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Timmy_Time> <http://dbpedia.org/ontology/executiveProducer> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What awards have been won by the executive producer of Timmy Time ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?award
WHERE {
  ?executiveProducer dbo:executiveProducerOf <http://dbpedia.org/resource/Timmy_Time> .
  ?executiveProducer dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?award
WHERE {
  ?executiveProducer dbo:executiveProducerOf <http://dbpedia.org/resource/Timmy_Time> .
  ?executiveProducer dbo:award ?award .
}",3.2566703570358492e-155,0.0821917808219178,True,True
3633,Was the skeleton dance animated by Walt Disney?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/The_Skeleton_Dance> <http://dbpedia.org/ontology/animator> <http://dbpedia.org/resource/Walt_Disney> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was the skeleton dance animated by Walt Disney?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?skeletonDance
WHERE {
  ?skeletonDance rdf:type dbo:Film .
  ?skeletonDance dbo:director ?director .
  ?director dbo:name ""Walt Disney"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?skeletonDance
WHERE {
  ?skeletonDance rdf:type dbo:Film .
  ?skeletonDance dbo:director ?director .
  ?director dbo:name ""Walt Disney"" .
}",2.215756877004116e-155,0.04477611940298507,True,True
2333,Through which counties does the road go which starts at the Port Klang?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/routeStart> <http://dbpedia.org/resource/Port_Klang> . ?x <http://dbpedia.org/ontology/county> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Road>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Through which counties does the road go which starts at the Port Klang?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?county
WHERE {
  ?road dbo:startingPoint <http://dbpedia.org/resource/Port_Klang> .
  ?road dbo:location ?county .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?county
WHERE {
  ?road dbo:startingPoint <http://dbpedia.org/resource/Port_Klang> .
  ?road dbo:location ?county .
}",3.5813582775424794e-155,0.0821917808219178,True,True
1597,Whose leaders are Willem-Alexander and Fredis Refunjol?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Willem-Alexander_of_the_Netherlands> . ?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/Fredis_Refunjol> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose leaders are Willem-Alexander and Fredis Refunjol?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?country
WHERE {
  ?country dbo:leader ?leader .
  ?leader dbo:name ""Willem-Alexander"" .
  ?leader dbo:name ""Fredis Refunjol"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?country
WHERE {
  ?country dbo:leader ?leader .
  ?leader dbo:name ""Willem-Alexander"" .
  ?leader dbo:name ""Fredis Refunjol"" .
}",3.216579438360415e-155,0.07575757575757576,True,True
1023,What's the religion of the winner of china election of 2008?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Republic_of_China_legislative_election,_2008> <http://dbpedia.org/property/leader> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What's the religion of the winner of china election of 2008?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religion
WHERE {
  ?winner dbo:winnerOf ?election .
  ?election dbp:location ""China"" .
  ?election dbp:year ""2008"" .
  ?winner dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religion
WHERE {
  ?winner dbo:winnerOf ?election .
  ?election dbp:location ""China"" .
  ?election dbp:year ""2008"" .
  ?winner dbo:religion ?religion .
}",3.075337680136661e-155,0.07142857142857142,True,True
1535,Who is the owner of Ivanpah Solar Power Facility and the original developer of Dart?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ivanpah_Solar_Power_Facility> <http://dbpedia.org/ontology/owner> ?uri. <http://dbpedia.org/resource/Dart_(programming_language)> <http://dbpedia.org/ontology/developer> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the owner of Ivanpah Solar Power Facility and the original developer of Dart?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?owner ?developer
WHERE {
  ?owner dbo:owns IvanpahSolarPowerFacility .
  ?developer dbp:originalDeveloper Dart .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?owner ?developer
WHERE {
  ?owner dbo:owns IvanpahSolarPowerFacility .
  ?developer dbp:originalDeveloper Dart .
}",2.761987611388054e-155,0.05405405405405406,False,False
1499,Employees of Ottawa Citizen have come from which towns?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/Ottawa_Citizen> . ?x <http://dbpedia.org/property/homeTown> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Employees of Ottawa Citizen have come from which towns?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?town
WHERE {
  ?person dbo:employedBy <http://dbpedia.org/resource/Ottawa_Citizen> .
  ?person dbo: hometown ?town .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?town
WHERE {
  ?person dbo:employedBy <http://dbpedia.org/resource/Ottawa_Citizen> .
  ?person dbo: hometown ?town .
}",4.056333282318539e-155,0.09859154929577464,False,False
3412,List the film starring of the movies whose editor is Harvey Rosenstock ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Harvey_Rosenstock> . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the film starring of the movies whose editor is Harvey Rosenstock ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?film ?actor
WHERE {
  ?film dbo:director ?director .
  ?director dbo:name ""Harvey Rosenstock"" .
  ?film dbo:starring ?actor .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?film ?actor
WHERE {
  ?film dbo:director ?director .
  ?director dbo:name ""Harvey Rosenstock"" .
  ?film dbo:starring ?actor .
}",3.0025357216578434e-155,0.06493506493506493,True,True
1081,"How many home stadium are there, of the soccer club seasons whose chairman is Merritt Paulson?",google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Merritt_Paulson> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many home stadium are there, of the soccer club seasons whose chairman is Merritt Paulson?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?stadium) AS ?count)
WHERE {
  ?season dbo:chairman ?chairman .
  ?chairman dbo:name ""Merritt Paulson"" .
  ?season dbo:team ?team .
  ?team dbo:homeStadium ?stadium .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?stadium) AS ?count)
WHERE {
  ?season dbo:chairman ?chairman .
  ?chairman dbo:name ""Merritt Paulson"" .
  ?season dbo:team ?team .
  ?team dbo:homeStadium ?stadium .
}",2.8712091323971647e-155,0.05813953488372093,True,True
3978,Who wrote the play in which a character called Stella Kowalski exists?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/characters> <http://dbpedia.org/resource/Stella_Kowalski> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Play>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who wrote the play in which a character called Stella Kowalski exists?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?author
WHERE {
  ?play dbo:character ?character .
  ?character rdfs:label ""Stella Kowalski"" .
  ?play dbo:author ?author .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?author
WHERE {
  ?play dbo:character ?character .
  ?character rdfs:label ""Stella Kowalski"" .
  ?play dbo:author ?author .
}",3.0382827129023445e-155,0.06578947368421052,True,True
4642,What is the name of the homeground of football team Panionios G.S.S.?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2013–14_Panionios_G.S.S._season> <http://dbpedia.org/ontology/ground> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the name of the homeground of football team Panionios G.S.S.?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?stadiumName
WHERE {
  ?team dbo:name ""Panionios G.S.S."" .
  ?team dbo:homeGround ?stadium .
  ?stadium rdfs:label ?stadiumName .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?stadiumName
WHERE {
  ?team dbo:name ""Panionios G.S.S."" .
  ?team dbo:homeGround ?stadium .
  ?stadium rdfs:label ?stadiumName .
}",2.322545481391416e-155,0.05714285714285714,True,True
636,Who appointed the governor under whom Richard Winn works?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/lieutenant> <http://dbpedia.org/resource/Richard_Winn> . ?x <http://dbpedia.org/property/appointer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Governor>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who appointed the governor under whom Richard Winn works?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?governorAppointer
WHERE {
  ?governor dbo:appointedBy ?governorAppointer .
  ?governor dbo:worksFor ?organization .
  ?organization dbo:employee ?person .
  ?person dbo:name ""Richard Winn""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?governorAppointer
WHERE {
  ?governor dbo:appointedBy ?governorAppointer .
  ?governor dbo:worksFor ?organization .
  ?organization dbo:employee ?person .
  ?person dbo:name ""Richard Winn""^^xsd:string .
}",2.486113577066771e-155,0.0547945205479452,True,True
1944,What are some orthonychidae birds?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Orthonychidae>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bird>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some orthonychidae birds?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bird
WHERE {
  ?bird dbo:class <http://dbpedia.org/ontology/Orthonychidae> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bird
WHERE {
  ?bird dbo:class <http://dbpedia.org/ontology/Orthonychidae> .
}",2.5676822842398837e-155,0.0625,True,True
3180,"What is the country which lies on the European route E8, and where Ragnhild Jolson was born?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/European_route_E8> <http://dbpedia.org/ontology/county> ?uri. <http://dbpedia.org/resource/Ragnhild_Jølsen> <http://dbpedia.org/property/birthplace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the country which lies on the European route E8, and where Ragnhild Jolson was born?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?road dbo:routeNumber ""E8""^^xsd:string .
  ?road dbo:location ?country .
  ?person dbo:birthPlace ?country .
  FILTER ( ?person = <http://dbpedia.org/resource/Ragnhild_Jolson> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?road dbo:routeNumber ""E8""^^xsd:string .
  ?road dbo:location ?country .
  ?person dbo:birthPlace ?country .
  FILTER ( ?person = <http://dbpedia.org/resource/Ragnhild_Jolson> )
}",2.5944303248170386e-155,0.04819277108433735,True,True
2318,What is the current team of John McGuinness (motorcycle racer) ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_McGuinness_(motorcycle_racer)> <http://dbpedia.org/property/currentTeam> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the current team of John McGuinness (motorcycle racer) ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?team
WHERE {
  ?person dbo:name ""John McGuinness"" .
  ?person dbo:occupation dbo:MotorcycleRacer .
  ?person dbp:currentTeam ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?team
WHERE {
  ?person dbo:name ""John McGuinness"" .
  ?person dbo:occupation dbo:MotorcycleRacer .
  ?person dbp:currentTeam ?team .
}",2.336751314796786e-155,0.056338028169014086,True,True
3315,List the writers of Tales of Suspense ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tales_of_Suspense> <http://dbpedia.org/property/writers> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the writers of Tales of Suspense ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?writer
WHERE {
  ?comic dbo:writer ?writer .
  FILTER (str(?comic) = ""Tales of Suspense"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?writer
WHERE {
  ?comic dbo:writer ?writer .
  FILTER (str(?comic) = ""Tales of Suspense"")
}",3.0940944781388835e-155,0.07575757575757576,True,True
3303,Is Denver the largest city of Colorado?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Colorado> <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Denver> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Denver the largest city of Colorado?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?populationDenver ?populationColorado
WHERE {
  ?city dbo:population ?populationDenver .
  FILTER(?city = <http://dbpedia.org/resource/Denver>)
  ?colorado dbo:capital ?city .
  ?colorado dbo:population ?populationColorado .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?populationDenver ?populationColorado
WHERE {
  ?city dbo:population ?populationDenver .
  FILTER(?city = <http://dbpedia.org/resource/Denver>)
  ?colorado dbo:capital ?city .
  ?colorado dbo:population ?populationColorado .
}",2.2300068516948962e-155,0.046153846153846156,True,True
4596,From where did Ben Wilson (American football) do his highscool?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ben_Wilson_(American_football)> <http://dbpedia.org/ontology/highschool> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: From where did Ben Wilson (American football) do his highscool?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Ben Wilson"" .
  ?person dbo:almaMater ?school .
  FILTER (regex(?person, ""American football"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Ben Wilson"" .
  ?person dbo:almaMater ?school .
  FILTER (regex(?person, ""American football"", ""i""))
}",2.3809857162598948e-155,0.05555555555555555,True,True
2658,Did chris lebenzon edit Batman returns?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Batman_Returns> <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Chris_Lebenzon> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Did chris lebenzon edit Batman returns?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Chris Lebenzon"" .
  ?x dbo:edit ""Batman Returns"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Chris Lebenzon"" .
  ?x dbo:edit ""Batman Returns"" .
}",2.338101885922867e-155,0.047619047619047616,True,True
123,What are some families of mammals in the animal kingdom?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Animal> . ?x <http://dbpedia.org/ontology/family> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mammal>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some families of mammals in the animal kingdom?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?family
WHERE {
  ?mammal dbo:class <http://dbpedia.org/ontology/Mammal> .
  ?mammal dbo:family ?family .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?family
WHERE {
  ?mammal dbo:class <http://dbpedia.org/ontology/Mammal> .
  ?mammal dbo:family ?family .
}",3.2383880054191053e-155,0.07142857142857142,True,True
3478,Which kind of buildings are found in England?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/locationCountry> <http://dbpedia.org/resource/England> . ?x <http://dbpedia.org/ontology/type> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which kind of buildings are found in England?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?buildingType
WHERE {
  ?location dbo:country ?england .
  ?location dbo:type ?buildingType .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?buildingType
WHERE {
  ?location dbo:country ?england .
  ?location dbo:type ?buildingType .
}",3.2833699258334827e-155,0.07246376811594203,True,True
2647,List the fields of Sylvain Lvi ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sylvain_Lévi> <http://dbpedia.org/property/fields> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the fields of Sylvain Lvi ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?field
WHERE {
  ?person dbo:name ""Sylvain Levi"" .
  ?person dbo:field ?field .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?field
WHERE {
  ?person dbo:name ""Sylvain Levi"" .
  ?person dbo:field ?field .
}",3.1370721297783126e-155,0.078125,True,True
879,How many different kinds of games are published by Interplay Entertainment?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Interplay_Entertainment> . ?x <http://dbpedia.org/property/genre> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many different kinds of games are published by Interplay Entertainment?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?game) AS ?count)
WHERE {
  ?game dbo:publisher Interplay Entertainment .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?game) AS ?count)
WHERE {
  ?game dbo:publisher Interplay Entertainment .
}",3.032816514970993e-155,0.06666666666666667,False,False
730,Which races has the horse bred by Jacques Van't Hart participated in?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/breeder> <http://dbpedia.org/resource/Jacques_Van't_Hart> . ?x <http://dbpedia.org/property/race> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which races has the horse bred by Jacques Van't Hart participated in?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?race
WHERE {
  ?horse dbo:bredBy Jacques Van't Hart .
  ?horse dbo:participatedIn ?race .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?race
WHERE {
  ?horse dbo:bredBy Jacques Van't Hart .
  ?horse dbo:participatedIn ?race .
}",3.0943809285865547e-155,0.0684931506849315,False,False
2570,Was Mark Twain a character of Mark Twain Tonight?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/characters> <http://dbpedia.org/resource/Mark_Twain> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Mark Twain a character of Mark Twain Tonight?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?character
WHERE {
  ?character rdf:type dbo:FictionalCharacter .
  ?character dbo:name ""Mark Twain"" .
  ?character dbo:appearsIn ?work .
  ?work dbo:title ""Mark Twain Tonight"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?character
WHERE {
  ?character rdf:type dbo:FictionalCharacter .
  ?character dbo:name ""Mark Twain"" .
  ?character dbo:appearsIn ?work .
  ?work dbo:title ""Mark Twain Tonight"" .
}",2.123113369539043e-155,0.04411764705882353,True,True
2237,Count the water bodies that flow into the North Sea?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/North_Sea> <http://dbpedia.org/property/inflow> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the water bodies that flow into the North Sea?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?waterBody
WHERE {
  ?waterBody rdf:type dbo:WaterBody .
  ?waterBody dbp:emits rdf:resource ?river .
  ?river dbp:flowsInto rdf:resource <http://dbpedia.org/resource/North_Sea> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?waterBody
WHERE {
  ?waterBody rdf:type dbo:WaterBody .
  ?waterBody dbp:emits rdf:resource ?river .
  ?river dbp:flowsInto rdf:resource <http://dbpedia.org/resource/North_Sea> .
}",3.075337680136661e-155,0.08571428571428572,False,False
833,Is Joe Schilling the trainer of Nick Diaz?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Nick_Diaz> <http://dbpedia.org/ontology/trainer> <http://dbpedia.org/resource/Joe_Schilling> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Joe Schilling the trainer of Nick Diaz?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:trainer ?y .
  ?y dbo:name ""Joe Schilling""^^xsd:string .
  ?x dbo:name ""Nick Diaz""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:trainer ?y .
  ?y dbo:name ""Joe Schilling""^^xsd:string .
  ?x dbo:name ""Nick Diaz""^^xsd:string .
}",2.2445353519102238e-155,0.046153846153846156,True,True
3526,Name the home stadium of FC Spartak Moscow season 2011-12,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2011–12_FC_Spartak_Moscow_season> <http://dbpedia.org/ontology/homeStadium> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the home stadium of FC Spartak Moscow season 2011-12
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?stadium
WHERE {
  ?team dbo:name ""FC Spartak Moscow"" .
  ?team dbo:season ?season .
  ?season dbp:homeStadium ?stadium .
  FILTER(?season = ""2011-12"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?stadium
WHERE {
  ?team dbo:name ""FC Spartak Moscow"" .
  ?team dbo:season ?season .
  ?season dbp:homeStadium ?stadium .
  FILTER(?season = ""2011-12"")
}",2.294894159058245e-155,0.0547945205479452,True,True
216,Where did Goran Cengic die?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Goran_Čengić> <http://dbpedia.org/property/deathPlace> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did Goran Cengic die?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:name ""Goran Cengic"" .
  ?person dbo:deathPlace ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:name ""Goran Cengic"" .
  ?person dbo:deathPlace ?location .
}",2.5488701582353735e-155,0.06451612903225806,True,True
502,Where is the king buried whose predecessor was Iyasu II?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Iyasu_II> . ?x <http://dbpedia.org/property/placeOfBurial> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Monarch>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where is the king buried whose predecessor was Iyasu II?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?king ?kingBurialPlace
WHERE {
  ?king dbo:predecessor Iyasu II .
  ?king dbo:burialPlace ?kingBurialPlace .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?king ?kingBurialPlace
WHERE {
  ?king dbo:predecessor Iyasu II .
  ?king dbo:burialPlace ?kingBurialPlace .
}",3.195205633963664e-155,0.07142857142857142,False,False
353,In which city is Corringham railway station located?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Corringham_railway_station> <http://dbpedia.org/property/borough> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which city is Corringham railway station located?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  dbp:location dbo:Corringham_railway_station ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  dbp:location dbo:Corringham_railway_station ?city .
}",2.586917203527967e-155,0.06451612903225806,True,True
3230,How many TV shows has distributor located in Burbank California ?,google/gemma-2-9b-it,"SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/Burbank,_California> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many TV shows has distributor located in Burbank California ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?show) AS ?count)
WHERE {
  ?distributor dbo:location ?location .
  ?location dbo:country ""United States"" .
  ?location dbo:city ""Burbank"" .
  ?distributor dbo:distributorOf ?show .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?show) AS ?count)
WHERE {
  ?distributor dbo:location ?location .
  ?location dbo:country ""United States"" .
  ?location dbo:city ""Burbank"" .
  ?distributor dbo:distributorOf ?show .
}",2.384592839964215e-155,0.04878048780487805,True,True
1053,Was the altazor drawn by Picasso?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Altazor> <http://dbpedia.org/property/illustrator> <http://dbpedia.org/resource/Pablo_Picasso> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was the altazor drawn by Picasso?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:artist ?y .
  ?y dbp:artwork ?z .
  ?z dbo:title ""Altazor"" .
  ?x dbo:name ""Pablo Picasso"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:artist ?y .
  ?y dbp:artwork ?z .
  ?z dbo:title ""Altazor"" .
  ?x dbo:name ""Pablo Picasso"" .
}",2.1880577381778143e-155,0.04477611940298507,True,True
762,What cities are nearer to Fuountain Lake Farm?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fountain_Lake_Farm> <http://dbpedia.org/property/nearestCity> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What cities are nearer to Fuountain Lake Farm?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?farm dbo:location <http://dbpedia.org/resource/Fountain_Lake_Farm> .
  ?city dbo:location ?location .
  ?farm dbo:near ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?farm dbo:location <http://dbpedia.org/resource/Fountain_Lake_Farm> .
  ?city dbo:location ?location .
  ?farm dbo:near ?city .
}",3.1335534263807668e-155,0.08823529411764706,True,True
1003,Did Oliver Sacks study at the Columbia University?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Oliver_Sacks> <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/Columbia_University> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Did Oliver Sacks study at the Columbia University?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x
WHERE {
  ?x dbo:almaMater ""Columbia University"" .
  ?x dbo:name ""Oliver Sacks"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x
WHERE {
  ?x dbo:almaMater ""Columbia University"" .
  ?x dbo:name ""Oliver Sacks"" .
}",2.305625093843957e-155,0.046875,True,True
2638,Who are in the liang chow club?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/club> <http://dbpedia.org/resource/Liang_Chow> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are in the liang chow club?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?member
WHERE {
  ?member dbo:memberOf <http://dbpedia.org/resource/Liang_Chow_Club> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?member
WHERE {
  ?member dbo:memberOf <http://dbpedia.org/resource/Liang_Chow_Club> .
}",2.586917203527967e-155,0.06557377049180328,True,True
3117,Who is the producer of album which has the song Money?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Money_(Pink_Floyd_song)> <http://dbpedia.org/property/album> ?x . ?x <http://dbpedia.org/property/producer> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the producer of album which has the song Money?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?producer
WHERE {
  ?song dbo:title ""Money"" .
  ?song dbo:artist ?artist .
  ?album dbo:hasPart ?song .
  ?album dbo:producer ?producer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?producer
WHERE {
  ?song dbo:title ""Money"" .
  ?song dbo:artist ?artist .
  ?album dbo:hasPart ?song .
  ?album dbo:producer ?producer .
}",3.4534064447194983e-155,0.08,True,True
2900,Which shows theme music is composed by a band which has Larry Lalonde in it?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Larry_LaLonde> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which shows theme music is composed by a band which has Larry Lalonde in it?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show ?band
WHERE {
  ?show dbo:themeMusic ?music.
  ?music dbo:composer ?band .
  ?band dbo:member ?member .
  ?member dbo:name ""Larry Lalonde"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show ?band
WHERE {
  ?show dbo:themeMusic ?music.
  ?music dbo:composer ?band .
  ?band dbo:member ?member .
  ?member dbo:name ""Larry Lalonde"" .
}",2.91841165985534e-155,0.060240963855421686,True,True
357,Which sports are played in schools affiliated with the Harvest Christian Center?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/religiousAffiliation> <http://dbpedia.org/resource/Harvest_Christian_Center> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports are played in schools affiliated with the Harvest Christian Center?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?sport
WHERE {
  ?school dbo:affiliatedOrganization ?organization .
  ?organization dbo:name ""Harvest Christian Center"" .
  ?school dbo:sports ?sport .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?sport
WHERE {
  ?school dbo:affiliatedOrganization ?organization .
  ?organization dbo:name ""Harvest Christian Center"" .
  ?school dbo:sports ?sport .
}",3.0202505652128895e-155,0.06493506493506493,True,True
3630,Which show's theme music composer's label is MapleMusic Recordings?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/MapleMusic_Recordings> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which show's theme music composer's label is MapleMusic Recordings?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show ?composer
WHERE {
  ?show dbo:themeMusic ?music .
  ?music dbo:composer ?composer .
  ?composer dbo:recordLabel dbo:MapleMusicRecordings .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show ?composer
WHERE {
  ?show dbo:themeMusic ?music .
  ?music dbo:composer ?composer .
  ?composer dbo:recordLabel dbo:MapleMusicRecordings .
}",3.0943809285865547e-155,0.06756756756756757,True,True
3042,Give me a list of computers whose CPU is in the US.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/locationCity> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/ontology/cpu> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me a list of computers whose CPU is in the US.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?computer
WHERE {
  ?computer dbo:cpu ?cpu .
  ?cpu dbo:location ?location .
  FILTER (regex(?location, ""United States""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?computer
WHERE {
  ?computer dbo:cpu ?cpu .
  ?cpu dbo:location ?location .
  FILTER (regex(?location, ""United States""))
}",3.1137823863213763e-155,0.06666666666666667,True,True
850,Name the sport league of Hampton Roads Rhinos?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hampton_Roads_Rhinos> <http://dbpedia.org/property/league> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the sport league of Hampton Roads Rhinos?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?sportLeague
WHERE {
  ?team dbo:sportsTeamOf ?sportLeague .
  ?team dbo:name ""Hampton Roads Rhinos"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?sportLeague
WHERE {
  ?team dbo:sportsTeamOf ?sportLeague .
  ?team dbo:name ""Hampton Roads Rhinos"" .
}",2.4775553999024465e-155,0.0625,True,True
1161,Which genre of books does the writer of The Many Hands write?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Many_Hands> <http://dbpedia.org/property/author> ?x . ?x <http://dbpedia.org/ontology/genre> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which genre of books does the writer of The Many Hands write?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?genre
WHERE {
  ?book dbo:author ?author .
  ?book dbo:title ""The Many Hands"" .
  ?author dbo:genre ?genre .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?genre
WHERE {
  ?book dbo:author ?author .
  ?book dbo:title ""The Many Hands"" .
  ?author dbo:genre ?genre .
}",3.53714058675999e-155,0.0821917808219178,True,True
3727,How many other people are in a band with Robert de Niro?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Robert_De_Niro> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many other people are in a band with Robert de Niro?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?otherPerson
WHERE {
  ?person dbo:birthPlace ""New York City, New York, USA""^^xsd:string .
  ?person dbo:name ""Robert de Niro""^^xsd:string .
  ?person dbo:occupation ""Actor""^^xsd:string .
  ?person dbp:bandMember ?otherPerson .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?otherPerson
WHERE {
  ?person dbo:birthPlace ""New York City, New York, USA""^^xsd:string .
  ?person dbo:name ""Robert de Niro""^^xsd:string .
  ?person dbo:occupation ""Actor""^^xsd:string .
  ?person dbp:bandMember ?otherPerson .
}",2.3577979608859863e-155,0.04878048780487805,True,True
4736,"Who is the child of John Tyler, Sr.?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Tyler,_Sr.> <http://dbpedia.org/ontology/child> ?uri }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the child of John Tyler, Sr.?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?child
WHERE {
  ?person dbo:father ?johnTyler
  ?johnTyler dbo:name ""John Tyler, Sr."" .
  ?person dbo:child ?child .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?child
WHERE {
  ?person dbo:father ?johnTyler
  ?johnTyler dbo:name ""John Tyler, Sr."" .
  ?person dbo:child ?child .
}",2.427831263680579e-155,0.06060606060606061,False,False
2072,Is stephanie a female?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Stephanie> <http://dbpedia.org/property/gender> <http://dbpedia.org/resource/Female> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is stephanie a female?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?gender
WHERE {
  ?person dbo:name ""Stephanie""@en .
  ?person dbo:gender ?gender .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?gender
WHERE {
  ?person dbo:name ""Stephanie""@en .
  ?person dbo:gender ?gender .
}",2.4073977196979033e-155,0.05172413793103448,True,True
939,What are the nicknames of the people who are in Ekstraliga?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/Ekstraliga_(speedway)> . ?x <http://dbpedia.org/property/nickname> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the nicknames of the people who are in Ekstraliga?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?nickname
WHERE {
  ?person dbo:playsFor ?team .
  ?team dbo:league ?league .
  ?league rdfs:label ""Ekstraliga""@en .
  ?person dbo:nickname ?nickname .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?nickname
WHERE {
  ?person dbo:playsFor ?team .
  ?team dbo:league ?league .
  ?league rdfs:label ""Ekstraliga""@en .
  ?person dbo:nickname ?nickname .
}",3.433385853714441e-155,0.08108108108108109,True,True
1011,Who is the developer of the software which serves the platform for King's Quest VI?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/King's_Quest_VI> <http://dbpedia.org/ontology/computingPlatform> ?x . ?x <http://dbpedia.org/property/developer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Software>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the developer of the software which serves the platform for King's Quest VI?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?developer
WHERE {
  ?software dbo:developer ?developer .
  ?software dbp:softwarePlatform ?platform .
  ?platform dbr:name ""King's Quest VI"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?developer
WHERE {
  ?software dbo:developer ?developer .
  ?software dbp:softwarePlatform ?platform .
  ?platform dbr:name ""King's Quest VI"" .
}",2.3983374600418706e-155,0.05263157894736842,True,True
1576,Name the show whose jury consist of Jennifer Lopez and Randy Jackson?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Randy_Jackson> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the show whose jury consist of Jennifer Lopez and Randy Jackson?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?showName
WHERE {
  ?show dbo:jury ?person .
  ?person dbo:name ""Jennifer Lopez"" .
  ?show dbo:jury ?person2 .
  ?person2 dbo:name ""Randy Jackson"" .
  ?show dbo:name ?showName .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?showName
WHERE {
  ?show dbo:jury ?person .
  ?person dbo:name ""Jennifer Lopez"" .
  ?show dbo:jury ?person2 .
  ?person2 dbo:name ""Randy Jackson"" .
  ?show dbo:name ?showName .
}",2.9346708496857675e-155,0.06666666666666667,True,True
1130,"What is the successor of the governors whose child is Levi Lincoln, Jr.?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Levi_Lincoln,_Jr.> . ?x <http://dbpedia.org/property/successor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Governor>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the successor of the governors whose child is Levi Lincoln, Jr.?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?successor
WHERE {
  ?governor dbo:child ?child .
  ?child dbo:name ""Levi Lincoln, Jr."" .
  ?governor dbo:successor ?successor .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?successor
WHERE {
  ?governor dbo:child ?child .
  ?child dbo:name ""Levi Lincoln, Jr."" .
  ?governor dbo:successor ?successor .
}",3.0566417519593477e-155,0.06756756756756757,True,True
2847,Foxconn makes how many things?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Foxconn>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Foxconn makes how many things?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?product dbo:manufacturer ?company .
  ?company dbo:name ""Foxconn""^^xsd:string .
  ?product dbp:P31 wd:Q11424 .
  ?product dbp:P580 ?count .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?product dbo:manufacturer ?company .
  ?company dbo:name ""Foxconn""^^xsd:string .
  ?product dbp:P31 wd:Q11424 .
  ?product dbp:P580 ?count .
}",2.427831263680579e-155,0.06060606060606061,False,False
4358,What is the national origin of Dornier Aerodyne and Hirth Acrostar ?;,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dornier_Aerodyne> <http://dbpedia.org/property/nationalOrigin> ?uri. <http://dbpedia.org/resource/Hirth_Acrostar> <http://dbpedia.org/ontology/origin> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the national origin of Dornier Aerodyne and Hirth Acrostar ?;
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?nationalOrigin
WHERE {
  ?aircraft dbo:nationalOrigin ?nationalOrigin .
  FILTER (regex(?aircraft, ""Dornier Aerodyne"", ""i"") || regex(?aircraft, ""Hirth Acrostar"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?nationalOrigin
WHERE {
  ?aircraft dbo:nationalOrigin ?nationalOrigin .
  FILTER (regex(?aircraft, ""Dornier Aerodyne"", ""i"") || regex(?aircraft, ""Hirth Acrostar"", ""i""))
}",2.7788812895482627e-155,0.05128205128205128,True,True
1214,Which bacteria's taxonomic class is Bacilli?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/class> <http://dbpedia.org/resource/Bacilli>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which bacteria's taxonomic class is Bacilli?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:taxonomicClass dbp:Bacilli .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:taxonomicClass dbp:Bacilli .
}",2.5488701582353735e-155,0.06153846153846154,True,True
763,Count the total number of launch site of the rockets which have been launched form Cape Canaveral Air Force Station ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Cape_Canaveral_Air_Force_Station> . ?x <http://dbpedia.org/ontology/launchSite> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the total number of launch site of the rockets which have been launched form Cape Canaveral Air Force Station ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?launchSite) AS ?count)
WHERE {
  ?rocket dbo:launchSite ?launchSite .
  ?launchSite dbo:name ""Cape Canaveral Air Force Station""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?launchSite) AS ?count)
WHERE {
  ?rocket dbo:launchSite ?launchSite .
  ?launchSite dbo:name ""Cape Canaveral Air Force Station""^^xsd:string .
}",2.3192471031465984e-155,0.060240963855421686,True,True
4035,What was created by Larry David and Jerry Seinfeld?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Larry_David> . ?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Jerry_Seinfeld> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What was created by Larry David and Jerry Seinfeld?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?work
WHERE {
  ?work dbo:creator ?creator .
  ?creator dbo:name ""Larry David"" .
  ?creator dbo:name ""Jerry Seinfeld"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?work
WHERE {
  ?work dbo:creator ?creator .
  ?creator dbo:name ""Larry David"" .
  ?creator dbo:name ""Jerry Seinfeld"" .
}",3.6040982025556637e-155,0.08571428571428572,True,True
1498,What is the city nearest to the islands in the Northwestern Hawaiian Islands?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/archipelago> <http://dbpedia.org/resource/Northwestern_Hawaiian_Islands> . ?x <http://dbpedia.org/property/nearestCity> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Island>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the city nearest to the islands in the Northwestern Hawaiian Islands?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?island dbo:locatedIn ?city .
  FILTER (regex(?city, ""Northwestern Hawaiian Islands"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?island dbo:locatedIn ?city .
  FILTER (regex(?city, ""Northwestern Hawaiian Islands"", ""i""))
}",2.3512210545397443e-155,0.05333333333333334,True,True
4252,Count the birthplaces of recepients of the National Museum of Racing and Hall of Fame.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/honours> <http://dbpedia.org/resource/National_Museum_of_Racing_and_Hall_of_Fame> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the birthplaces of recepients of the National Museum of Racing and Hall of Fame.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?birthplace
WHERE {
  ?person dbo:birthPlace ?birthplace .
  ?person dbo:award ?award .
  ?award dbo:recipient ?person .
  FILTER (regex(?award, ""National Museum of Racing and Hall of Fame"", ""i""))
}
GROUP BY ?birthplace
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?birthplace
WHERE {
  ?person dbo:birthPlace ?birthplace .
  ?person dbo:award ?award .
  ?award dbo:recipient ?person .
  FILTER (regex(?award, ""National Museum of Racing and Hall of Fame"", ""i""))
}
GROUP BY ?birthplace",2.2474984413337904e-155,0.05,True,True
3016,How many ideologies do the political party of Boonchu Rojanastien hold?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Boonchu_Rojanastien> <http://dbpedia.org/property/party> ?x . ?x <http://dbpedia.org/ontology/ideology> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PoliticalParty>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many ideologies do the political party of Boonchu Rojanastien hold?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?ideology) AS ?count)
WHERE {
  ?party dbo:chairman ?person .
  ?person dbo:name ""Boonchu Rojanastien"" .
  ?party dbo:ideology ?ideology .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?ideology) AS ?count)
WHERE {
  ?party dbo:chairman ?person .
  ?person dbo:name ""Boonchu Rojanastien"" .
  ?party dbo:ideology ?ideology .
}",2.426555136425675e-155,0.05,True,True
1186,What is the total number of relgions followed by people born in Bangkok?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Bangkok> . ?x <http://dbpedia.org/ontology/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the total number of relgions followed by people born in Bangkok?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?religion) AS ?totalReligions)
WHERE {
  ?person dbo:birthDate ?birthPlace .
  ?birthPlace dbp:population ?population .
  FILTER(?population > 1000000)
  ?person dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?religion) AS ?totalReligions)
WHERE {
  ?person dbo:birthDate ?birthPlace .
  ?birthPlace dbp:population ?population .
  FILTER(?population > 1000000)
  ?person dbo:religion ?religion .
}",2.951204860745888e-155,0.060240963855421686,True,True
4340,To which state George M. Chilcott  belong ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/George_M._Chilcott> <http://dbpedia.org/property/state> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which state George M. Chilcott  belong ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?person dbo:birthPlace ?location .
  ?location dbo:country ?country .
  FILTER ( ?person = <http://dbpedia.org/resource/George_M._Chilcott> )
  FILTER ( ?country = <http://dbpedia.org/resource/United_States> )
  ?location dbo:state ?state .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?person dbo:birthPlace ?location .
  ?location dbo:country ?country .
  FILTER ( ?person = <http://dbpedia.org/resource/George_M._Chilcott> )
  FILTER ( ?country = <http://dbpedia.org/resource/United_States> )
  ?location dbo:state ?state .
}",2.3983374600418706e-155,0.06944444444444445,True,True
2442,What is the workplace of Christopher S. Stewart ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Christopher_S._Stewart> <http://dbpedia.org/property/employer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the workplace of Christopher S. Stewart ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?workplace
WHERE {
  ?person dbo:name ""Christopher S. Stewart"" .
  ?person dbo:workplace ?workplace .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?workplace
WHERE {
  ?person dbo:name ""Christopher S. Stewart"" .
  ?person dbo:workplace ?workplace .
}",2.4606427705034855e-155,0.06153846153846154,True,True
827,What is the television show whose executive producer is Douglas Netter?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Douglas_Netter>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the television show whose executive producer is Douglas Netter?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?showLabel WHERE {
  ?show dbo:executiveProducer ?producer .
  ?producer dbo:name ""Douglas Netter"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?showLabel WHERE {
  ?show dbo:executiveProducer ?producer .
  ?producer dbo:name ""Douglas Netter"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",7.9677403708478e-232,0.04054054054054054,False,False
2502,Name the service region of Jerusalem Institue of Justice which was also the result region in Gaza Israel conflict?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jerusalem_Institute_of_Justice> <http://dbpedia.org/ontology/service> ?uri. <http://dbpedia.org/resource/Gaza–Israel_conflict> <http://dbpedia.org/property/result> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the service region of Jerusalem Institue of Justice which was also the result region in Gaza Israel conflict?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?serviceRegion
WHERE {
  ?institute dbo:serviceRegion ?serviceRegion .
  FILTER (regex(?serviceRegion, ""Jerusalem"", ""i""))
  ?institute dbp:location ?location .
  FILTER (regex(?location, ""Gaza"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?serviceRegion
WHERE {
  ?institute dbo:serviceRegion ?serviceRegion .
  FILTER (regex(?serviceRegion, ""Jerusalem"", ""i""))
  ?institute dbp:location ?location .
  FILTER (regex(?location, ""Gaza"", ""i""))
}",2.0411965960034616e-155,0.036585365853658534,True,True
2392,Which country had the county seats as History of Trier and Mediolanum?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/History_of_Trier> . ?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Mediolanum> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which country had the county seats as History of Trier and Mediolanum?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?country dbo:countryName ?countryName .
  ?country dbo:capital ?capital .
  ?capital dbo:name ""History of Trier"" .
  FILTER (regex(?countryName, ""Germany"", ""i""))
  
  ?country dbo:capital ?capital2 .
  ?capital2 dbo:name ""Mediolanum"" .
  FILTER (regex(?countryName, ""Italy"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?country dbo:countryName ?countryName .
  ?country dbo:capital ?capital .
  ?capital dbo:name ""History of Trier"" .
  FILTER (regex(?countryName, ""Germany"", ""i""))
  
  ?country dbo:capital ?capital2 .
  ?capital2 dbo:name ""Mediolanum"" .
  FILTER (regex(?countryName, ""Italy"", ""i""))
}",2.7694095390658157e-155,0.06097560975609756,True,True
4099,What did other artists associated with the Shirelles make?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/The_Shirelles> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What did other artists associated with the Shirelles make?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?artist ?music
WHERE {
  ?artist dbo:associatedWith dbr:The_Shirelles .
  ?artist dbo:makes ?music .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?artist ?music
WHERE {
  ?artist dbo:associatedWith dbr:The_Shirelles .
  ?artist dbo:makes ?music .
}",3.2383880054191053e-155,0.07246376811594203,True,True
3285,Who composed the lyrics of Holler If Ya Hear Me ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Holler_If_Ya_Hear_Me_(musical)> <http://dbpedia.org/property/lyrics> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who composed the lyrics of Holler If Ya Hear Me ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?composer
WHERE {
  ?song dbo:lyrics ?lyrics .
  ?lyrics dbo:composer ?composer .
  FILTER (regex(?song, ""Holler If Ya Hear Me"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?composer
WHERE {
  ?song dbo:lyrics ?lyrics .
  ?lyrics dbo:composer ?composer .
  FILTER (regex(?song, ""Holler If Ya Hear Me"", ""i""))
}",2.336751314796786e-155,0.056338028169014086,True,True
2484,Foxy Brown was associated with which band?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Foxy_Brown_(rapper)> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Foxy Brown was associated with which band?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?band
WHERE {
  ?person dbo:name ""Foxy Brown"" .
  ?person dbp:memberOf ?band .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?band
WHERE {
  ?person dbo:name ""Foxy Brown"" .
  ?person dbp:memberOf ?band .
}",8.259885936748448e-232,0.046875,True,True
3470,Give me all martial artists trained by Joe Schilling.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/trainer> <http://dbpedia.org/resource/Joe_Schilling>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MartialArtist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all martial artists trained by Joe Schilling.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?martialArtist
WHERE {
  ?martialArtist dbo:trainedBy ?instructor .
  ?instructor dbo:name ""Joe Schilling"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?martialArtist
WHERE {
  ?martialArtist dbo:trainedBy ?instructor .
  ?instructor dbo:name ""Joe Schilling"" .
}",2.4606427705034855e-155,0.057971014492753624,True,True
1932,How many awards have screenwriters won?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Screenwriter> . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many awards have screenwriters won?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?award)) AS ?awardCount
WHERE {
  ?screenwriter dbo:occupation ""Screenwriter"" .
  ?screenwriter dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?award)) AS ?awardCount
WHERE {
  ?screenwriter dbo:occupation ""Screenwriter"" .
  ?screenwriter dbo:award ?award .
}",3.2833699258334827e-155,0.07142857142857142,False,False
766,Was Cliff Burton in Metallica?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Metallica> <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Cliff_Burton> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Cliff Burton in Metallica?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:birthDate ""1962-02-10""^^xsd:date .
  ?x dbo:deathDate ""1986-09-27""^^xsd:date .
  ?x dbo:name ""Cliff Burton"" .
  ?x dbo:bandMemberOf ?band .
  ?band dbo:name ""Metallica"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:birthDate ""1962-02-10""^^xsd:date .
  ?x dbo:deathDate ""1986-09-27""^^xsd:date .
  ?x dbo:name ""Cliff Burton"" .
  ?x dbo:bandMemberOf ?band .
  ?band dbo:name ""Metallica"" .
}",2.1483903094550452e-155,0.04411764705882353,True,True
3122,How many members are there in the European Go Federation?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/European_Go_Federation> <http://dbpedia.org/property/membership> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many members are there in the European Go Federation?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?member) AS ?count)
WHERE {
  ?organization dbo:name ""European Go Federation"" .
  ?organization dbo:member ?member .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?member) AS ?count)
WHERE {
  ?organization dbo:name ""European Go Federation"" .
  ?organization dbo:member ?member .
}",3.032816514970993e-155,0.07042253521126761,True,True
3757,Miguel de Cervantes wrote the musical extended from which book?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/author> <http://dbpedia.org/resource/Miguel_de_Cervantes> . ?x <http://dbpedia.org/ontology/basedOn> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Miguel de Cervantes wrote the musical extended from which book?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?book
WHERE {
  ?author dbo:birthPlace ""Spain"" .
  ?author dbo:name ""Miguel de Cervantes"" .
  ?author dbo:work ?book .
  ?book dbp:subject ""Don Quixote"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?book
WHERE {
  ?author dbo:birthPlace ""Spain"" .
  ?author dbo:name ""Miguel de Cervantes"" .
  ?author dbo:work ?book .
  ?book dbp:subject ""Don Quixote"" .
}",2.3983374600418706e-155,0.05194805194805195,True,True
3144,List the regions served by the company which serves in Pacific Ocean?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/regionServed> <http://dbpedia.org/resource/Pacific_Ocean> . ?x <http://dbpedia.org/ontology/regionServed> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the regions served by the company which serves in Pacific Ocean?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company ?region
WHERE {
  ?company dbo:location ?location .
  ?location dbo:ocean dbo:PacificOcean .
  ?company dbo:serves ?region .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company ?region
WHERE {
  ?company dbo:location ?location .
  ?location dbo:ocean dbo:PacificOcean .
  ?company dbo:serves ?region .
}",3.0382827129023445e-155,0.06756756756756757,True,True
4588,"Of the places where Kurt Vonnegut Memorial Library exists, where did Louis LeCocq die?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kurt_Vonnegut_Memorial_Library> <http://dbpedia.org/ontology/location> ?uri. <http://dbpedia.org/resource/Louis_LeCocq> <http://dbpedia.org/property/placeOfDeath> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Of the places where Kurt Vonnegut Memorial Library exists, where did Louis LeCocq die?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?place
WHERE {
  ?place dbo:location ?location .
  ?location dbp:locatedIn ?city .
  ?city dbo:wikiPageRedirects ?vonnegutLibrary .
  ?vonnegutLibrary dbo:subject ""Kurt Vonnegut Memorial Library""^^xsd:string .
  ?city dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:wikiPageRedirects ?lecocq .
  ?lecocq dbo:subject ""Louis LeCocq""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?place
WHERE {
  ?place dbo:location ?location .
  ?location dbp:locatedIn ?city .
  ?city dbo:wikiPageRedirects ?vonnegutLibrary .
  ?vonnegutLibrary dbo:subject ""Kurt Vonnegut Memorial Library""^^xsd:string .
  ?city dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:wikiPageRedirects ?lecocq .
  ?lecocq dbo:subject ""Louis LeCocq""^^xsd:string .
}",1.929678190362746e-155,0.03614457831325301,True,True
4286,Who is associated to the predecessor of Dan Mica?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Dan_Mica> . ?uri <http://dbpedia.org/ontology/associate> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is associated to the predecessor of Dan Mica?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor ?predecessorLabel ?person ?personLabel
WHERE {
  ?person dbo:predecessor ?predecessor .
  ?predecessor dbo:successor Dan Mica .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor ?predecessorLabel ?person ?personLabel
WHERE {
  ?person dbo:predecessor ?predecessor .
  ?predecessor dbo:successor Dan Mica .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.5703190919374843e-155,0.06756756756756757,False,False
3202,Which TV show whose theme is composed by someone signed up with ATO records?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/ATO_Records> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which TV show whose theme is composed by someone signed up with ATO records?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX schema: <http://schema.org/>

SELECT DISTINCT ?show ?composer
WHERE {
  ?show dbo:themeMusic ?music .
  ?music dbo:composer ?composer .
  ?composer dbo:recordLabel dbo:ATO_Records .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX schema: <http://schema.org/>

SELECT DISTINCT ?show ?composer
WHERE {
  ?show dbo:themeMusic ?music .
  ?music dbo:composer ?composer .
  ?composer dbo:recordLabel dbo:ATO_Records .
}",2.951204860745888e-155,0.06172839506172839,True,True
182,In which teams have league members of the Czech Extraliga played previously?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/Czech_Extraliga> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which teams have league members of the Czech Extraliga played previously?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?team ?player
WHERE {
  ?player dbo:memberOf ?league .
  ?league dbr:name ""Czech Extraliga"" .
  ?player dbo:playedFor ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?team ?player
WHERE {
  ?player dbo:memberOf ?league .
  ?league dbr:name ""Czech Extraliga"" .
  ?player dbo:playedFor ?team .
}",3.473781407941057e-155,0.07894736842105263,True,True
1271,How many sitcoms are there whose theme music is composed by a New Yorker?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/New_York> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many sitcoms are there whose theme music is composed by a New Yorker?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?sitcom) AS ?count)
WHERE {
  ?sitcom dbo:genre ""Sitcom"" .
  ?sitcom dbo:themeMusic ?music .
  ?music dbo:composer ?composer .
  ?composer dbo:birthPlace ""New York City"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?sitcom) AS ?count)
WHERE {
  ?sitcom dbo:genre ""Sitcom"" .
  ?sitcom dbo:themeMusic ?music .
  ?music dbo:composer ?composer .
  ?composer dbo:birthPlace ""New York City"" .
}",2.3318865198845825e-155,0.047058823529411764,True,True
2997,"What is the musical whose music is by Jose Luis Narom,  based upon?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/musicBy> <http://dbpedia.org/resource/José_Luis_Narom> . ?x <http://dbpedia.org/ontology/basedOn> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the musical whose music is by Jose Luis Narom,  based upon?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?work
WHERE {
  ?work dbo:composer JoseLuisNarom .
  ?work dbo:subject ?basedOn .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?work
WHERE {
  ?work dbo:composer JoseLuisNarom .
  ?work dbo:subject ?basedOn .
}",2.5175858750356875e-155,0.0547945205479452,False,False
646,In which countries have models hanged themselves?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide_by_hanging> . ?x <http://dbpedia.org/property/citizenship> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Model>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which countries have models hanged themselves?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?model dbo:deathPlace ?location .
  ?location dbo:country ?country .
  FILTER (regex(?country, ""United States"") || regex(?country, ""United Kingdom"") || regex(?country, ""Canada"") || regex(?country, ""Australia"") || regex(?country, ""Germany"") || regex(?country, ""France"") || regex(?country, ""Japan"") || regex(?country, ""Italy"") || regex(?country, ""Spain"") || regex(?country, ""Brazil"") || regex(?country, ""Russia"") || regex(?country, ""China""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?model dbo:deathPlace ?location .
  ?location dbo:country ?country .
  FILTER (regex(?country, ""United States"") || regex(?country, ""United Kingdom"") || regex(?country, ""Canada"") || regex(?country, ""Australia"") || regex(?country, ""Germany"") || regex(?country, ""France"") || regex(?country, ""Japan"") || regex(?country, ""Italy"") || regex(?country, ""Spain"") || regex(?country, ""Brazil"") || regex(?country, ""Russia"") || regex(?country, ""China""))
}",2.665354403099517e-155,0.058823529411764705,True,True
2985,What is the leading party in Baraily which Chandra Shekhar too is associated with?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Baraily> <http://dbpedia.org/ontology/leaderName> ?uri. <http://dbpedia.org/resource/Chandra_Shekhar> <http://dbpedia.org/ontology/otherParty> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the leading party in Baraily which Chandra Shekhar too is associated with?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?party
WHERE {
  ?party dbo:wikiPageID ?wikiPageId .
  ?party dbo:location ?location .
  FILTER (str(?location) = ""Baraily"")
  ?party dbo:chairman ?chairman .
  ?chairman dbo:name ""Chandra Shekhar""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?party
WHERE {
  ?party dbo:wikiPageID ?wikiPageId .
  ?party dbo:location ?location .
  FILTER (str(?location) = ""Baraily"")
  ?party dbo:chairman ?chairman .
  ?chairman dbo:name ""Chandra Shekhar""^^xsd:string .
}",2.0411965960034616e-155,0.036585365853658534,True,True
2407,How many movies have been cinematographed by Jordan Cronenweth?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/Jordan_Cronenweth>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many movies have been cinematographed by Jordan Cronenweth?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:director Jordan Cronenweth .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:director Jordan Cronenweth .
}",8.259885936748448e-232,0.043478260869565216,False,False
3636,What are Jerry Bock's musicals based upon?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Jerry_Bock> . ?x <http://dbpedia.org/ontology/basedOn> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Musical>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are Jerry Bock's musicals based upon?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?musical ?source
WHERE {
  ?musical dbo:composer ?composer .
  ?composer dbo:name ""Jerry Bock"" .
  ?musical dbo:basedOn ?source .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?musical ?source
WHERE {
  ?musical dbo:composer ?composer .
  ?composer dbo:name ""Jerry Bock"" .
  ?musical dbo:basedOn ?source .
}",3.1137823863213763e-155,0.0684931506849315,True,True
4203,What are some developers which use Emacs Lisp in their projects?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/Emacs_Lisp> . ?x <http://dbpedia.org/ontology/developer> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some developers which use Emacs Lisp in their projects?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?developer ?developerLabel
WHERE {
  ?developer dbo:usesSoftware dbr:Emacs_Lisp .
  OPTIONAL { ?developer rdfs:label ?developerLabel . }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?developer ?developerLabel
WHERE {
  ?developer dbo:usesSoftware dbr:Emacs_Lisp .
  OPTIONAL { ?developer rdfs:label ?developerLabel . }
}",3.53714058675999e-155,0.08108108108108109,True,True
1370,List the awards won by the writer of Face to Face?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Face_to_Face_(1976_film)> <http://dbpedia.org/property/writer> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the awards won by the writer of Face to Face?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?award
WHERE {
  ?writer dbo:wrote dbp:Face_to_Face .
  ?writer dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?award
WHERE {
  ?writer dbo:wrote dbp:Face_to_Face .
  ?writer dbo:award ?award .
}",3.1742523358973992e-155,0.07142857142857142,True,True
334,Which television show's network is BBC HD and is related to Doctor Who Confidential?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/network> <http://dbpedia.org/resource/BBC_HD> . ?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Doctor_Who_Confidential>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which television show's network is BBC HD and is related to Doctor Who Confidential?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:network dbo:BBC_HD .
  ?show rdfs:subClassOf ?confidential .
  ?confidential dbo:relatedTo Doctor Who Confidential .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:network dbo:BBC_HD .
  ?show rdfs:subClassOf ?confidential .
  ?confidential dbo:relatedTo Doctor Who Confidential .
}",2.3983374600418706e-155,0.05194805194805195,False,False
3374,Name the TV show with artist Christopher Franke and cast member Jason Carter ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Christopher_Franke> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the TV show with artist Christopher Franke and cast member Jason Carter ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showName
WHERE {
  ?show dbo:castMember ?actor .
  ?actor dbo:name ""Jason Carter"" .
  ?show dbo:creator ?creator .
  ?creator dbo:name ""Christopher Franke"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showName
WHERE {
  ?show dbo:castMember ?actor .
  ?actor dbo:name ""Jason Carter"" .
  ?show dbo:creator ?creator .
  ?creator dbo:name ""Christopher Franke"" .
}",8.364937377160846e-232,0.0375,True,True
107,Which royal person married the successor of Darius I?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Darius_I> . ?uri <http://dbpedia.org/property/spouse> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which royal person married the successor of Darius I?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:spouse ?successor .
  ?successor dbo:predecessor ?darius .
  ?darius dbo:name ""Darius I"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:spouse ?successor .
  ?successor dbo:predecessor ?darius .
  ?darius dbo:name ""Darius I"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",3.0025357216578434e-155,0.0641025641025641,False,False
3233,List the total number of awards of the musicals who have won Tony Award?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Tony_Award> . ?x <http://dbpedia.org/property/awards> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the total number of awards of the musicals who have won Tony Award?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?musical) AS ?totalAwards)
WHERE {
  ?musical dbo:genre ""Musical"" .
  ?musical dbo:award ?award .
  FILTER (regex(?award, ""Tony Award"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?musical) AS ?totalAwards)
WHERE {
  ?musical dbo:genre ""Musical"" .
  ?musical dbo:award ?award .
  FILTER (regex(?award, ""Tony Award"", ""i""))
}",2.384592839964215e-155,0.06172839506172839,True,True
1050,Which nationality of Newin Chidchob is also the nationality of Ajahn Sao Kantaslo?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Newin_Chidchob> <http://dbpedia.org/property/nationality> ?uri. <http://dbpedia.org/resource/Ajahn_Sao_Kantasīlo> <http://dbpedia.org/ontology/nationality> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which nationality of Newin Chidchob is also the nationality of Ajahn Sao Kantaslo?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?nationality
WHERE {
  ?person dbo:nationality ?nationality .
  FILTER(?person = <http://dbpedia.org/resource/Newin_Chidchob> || ?person = <http://dbpedia.org/resource/Ajahn_Sao_Kantaslo>)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?nationality
WHERE {
  ?person dbo:nationality ?nationality .
  FILTER(?person = <http://dbpedia.org/resource/Newin_Chidchob> || ?person = <http://dbpedia.org/resource/Ajahn_Sao_Kantaslo>)
}",2.9750409375036214e-155,0.0684931506849315,True,True
2712,To which country is Svetlana Navasardyan from?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Svetlana_Navasardyan> <http://dbpedia.org/property/origin> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which country is Svetlana Navasardyan from?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?country
WHERE {
  ?person dbo:birthPlace ?country .
  FILTER ( ?person = <http://dbpedia.org/resource/Svetlana_Navasardyan> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?country
WHERE {
  ?person dbo:birthPlace ?country .
  FILTER ( ?person = <http://dbpedia.org/resource/Svetlana_Navasardyan> )
}",2.6379527083228047e-155,0.07575757575757576,True,True
1306,What is the location of the Peetz Table Wind Energy Center which is also the state of Ben Nighthorse Campbell?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Peetz_Table_Wind_Energy_Center> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Ben_Nighthorse_Campbell> <http://dbpedia.org/property/state> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the location of the Peetz Table Wind Energy Center which is also the state of Ben Nighthorse Campbell?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?location ?state
WHERE {
  ?windEnergyCenter dbo:name ""Peetz Table Wind Energy Center"" .
  ?windEnergyCenter dbo:location ?location .
  ?person dbo:name ""Ben Nighthorse Campbell"" .
  ?person dbo:birthPlace ?state .
  FILTER(?state = ?location)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?location ?state
WHERE {
  ?windEnergyCenter dbo:name ""Peetz Table Wind Energy Center"" .
  ?windEnergyCenter dbo:location ?location .
  ?person dbo:name ""Ben Nighthorse Campbell"" .
  ?person dbo:birthPlace ?state .
  FILTER(?state = ?location)
}",1.929678190362746e-155,0.03529411764705882,True,True
4684,Where did the  designer of Monument to Salavat Yulaev die?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Monument_to_Salavat_Yulaev> <http://dbpedia.org/ontology/designer> ?x . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the  designer of Monument to Salavat Yulaev die?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?deathPlace
WHERE {
  ?designer dbo:designed MonumentToSalavatYulaev .
  ?designer dbo:deathPlace ?deathPlace .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?deathPlace
WHERE {
  ?designer dbo:designed MonumentToSalavatYulaev .
  ?designer dbo:deathPlace ?deathPlace .
}",3.195205633963664e-155,0.07142857142857142,False,False
3759,What is the debut team of the football player whose college is UCLA Bruins football?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/college> <http://dbpedia.org/resource/UCLA_Bruins_football> . ?x <http://dbpedia.org/ontology/debutTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GridironFootballPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the debut team of the football player whose college is UCLA Bruins football?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?debutTeam
WHERE {
  ?player dbo:college ?college .
  ?college rdfs:label ""UCLA Bruins football"" .
  ?player dbo:debutTeam ?debutTeam .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?debutTeam
WHERE {
  ?player dbo:college ?college .
  ?college rdfs:label ""UCLA Bruins football"" .
  ?player dbo:debutTeam ?debutTeam .
}",2.3983374600418706e-155,0.05194805194805195,True,True
954,"In which team was the person drafted who has studied at the Worcester college, Oxford?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/Worcester_College,_Oxford> . ?x <http://dbpedia.org/property/draftTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which team was the person drafted who has studied at the Worcester college, Oxford?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?team
WHERE {
  ?person dbo:almaMater ""Worcester College, Oxford"" .
  ?person dbo:draftedBy ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?team
WHERE {
  ?person dbo:almaMater ""Worcester College, Oxford"" .
  ?person dbo:draftedBy ?team .
}",2.455792850056901e-155,0.05194805194805195,True,True
244,To which series does the character of Londo Mollari belong?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Londo_Mollari> <http://dbpedia.org/ontology/series> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which series does the character of Londo Mollari belong?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?series
WHERE {
  ?character dbo:characterSeries ?series .
  FILTER ( ?character = <http://dbpedia.org/resource/Londo_Mollari> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?series
WHERE {
  ?character dbo:characterSeries ?series .
  FILTER ( ?character = <http://dbpedia.org/resource/Londo_Mollari> )
}",3.195205633963664e-155,0.08695652173913043,True,True
1805,Is Sao Paulo the largest city of Brazil?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Brazil> <http://dbpedia.org/property/largestCity> <http://dbpedia.org/resource/São_Paulo> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Sao Paulo the largest city of Brazil?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?populationSaoPaulo ?populationBrazil
WHERE {
  ?city dbo:population ?populationSaoPaulo .
  FILTER(?city = <http://dbpedia.org/resource/S%C3%A3o_Paulo>)
  ?country dbo:capital ?city .
  FILTER(?country = <http://dbpedia.org/resource/Brazil>)
  ?country dbo:population ?populationBrazil .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?populationSaoPaulo ?populationBrazil
WHERE {
  ?city dbo:population ?populationSaoPaulo .
  FILTER(?city = <http://dbpedia.org/resource/S%C3%A3o_Paulo>)
  ?country dbo:capital ?city .
  FILTER(?country = <http://dbpedia.org/resource/Brazil>)
  ?country dbo:population ?populationBrazil .
}",2.1745921280630745e-155,0.04411764705882353,True,True
4308,List the goverener of Winston Bryant?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/property/governor> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the goverener of Winston Bryant?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?governor
WHERE {
  ?person dbo:name ""Winston Bryant"" .
  ?person dbo:governor ?governor .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?governor
WHERE {
  ?person dbo:name ""Winston Bryant"" .
  ?person dbo:governor ?governor .
}",2.530465559854518e-155,0.06451612903225806,True,True
4317,Which educational institutes have campuses at Iowa and Indiana ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Iowa> . ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Indiana> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which educational institutes have campuses at Iowa and Indiana ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?institute
WHERE {
  ?institute dbo:location ?location .
  ?location dbo:country ""United States""^^xsd:string .
  ?location dbo:locatedIn ?state .
  FILTER(?state IN ( ""Iowa"", ""Indiana"" ))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?institute
WHERE {
  ?institute dbo:location ?location .
  ?location dbo:country ""United States""^^xsd:string .
  ?location dbo:locatedIn ?state .
  FILTER(?state IN ( ""Iowa"", ""Indiana"" ))
}",3.0202505652128895e-155,0.0641025641025641,True,True
2551,What is the relegious affiliations of Katyayana ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Katyayana_(Buddhist)> <http://dbpedia.org/property/religion> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the relegious affiliations of Katyayana ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religiousAffiliation
WHERE {
  ?subject dbo:name ""Katyayana"" .
  ?subject dbo:religiousAffiliation ?religiousAffiliation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religiousAffiliation
WHERE {
  ?subject dbo:name ""Katyayana"" .
  ?subject dbo:religiousAffiliation ?religiousAffiliation .
}",2.5124539841526692e-155,0.06349206349206349,True,True
3387,Through which label has Katy B released her singles?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/writer> <http://dbpedia.org/resource/Katy_B> . ?x <http://dbpedia.org/ontology/recordLabel> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Single>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Through which label has Katy B released her singles?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?label
WHERE {
  ?artist dbo:name ""Katy B"" .
  ?artist dbo:label ?label .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?label
WHERE {
  ?artist dbo:name ""Katy B"" .
  ?artist dbo:label ?label .
}",3.1742523358973992e-155,0.0684931506849315,True,True
3419,Give me the sitcoms where Eliza Schneider and Isaac Hayes gave voice?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Eliza_Schneider> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me the sitcoms where Eliza Schneider and Isaac Hayes gave voice?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?sitcom
WHERE {
  ?sitcom dbo:genre ""Sitcom"" .
  ?sitcom dbp:voiceActor ?actor .
  ?actor dbo:name ""Eliza Schneider"" .
  UNION
  ?sitcom dbo:genre ""Sitcom"" .
  ?sitcom dbp:voiceActor ?actor .
  ?actor dbo:name ""Isaac Hayes"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?sitcom
WHERE {
  ?sitcom dbo:genre ""Sitcom"" .
  ?sitcom dbp:voiceActor ?actor .
  ?actor dbo:name ""Eliza Schneider"" .
  UNION
  ?sitcom dbo:genre ""Sitcom"" .
  ?sitcom dbp:voiceActor ?actor .
  ?actor dbo:name ""Isaac Hayes"" .
}",2.8116941333222616e-155,0.0641025641025641,False,False
1466,Which series are Lennier and Londo Mollari both from?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lennier> <http://dbpedia.org/ontology/series> ?uri. <http://dbpedia.org/resource/Londo_Mollari> <http://dbpedia.org/ontology/series> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which series are Lennier and Londo Mollari both from?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?series
WHERE {
  ?person dbo:name ""Lennier"" .
  ?person dbp:memberOf ?series .
  ?person2 dbo:name ""Londo Mollari"" .
  ?person2 dbp:memberOf ?series .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?series
WHERE {
  ?person dbo:name ""Lennier"" .
  ?person dbp:memberOf ?series .
  ?person2 dbo:name ""Londo Mollari"" .
  ?person2 dbp:memberOf ?series .
}",3.3424566934858732e-155,0.0821917808219178,True,True
2015,How many have been venerated in Islam and Judaism?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Islam> . ?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Judaism>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many have been venerated in Islam and Judaism?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person rdf:type dbo:Person .
  ?person dbo:religion ?religion .
  FILTER (regex(?religion, ""Islam"", ""i"") || regex(?religion, ""Judaism"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person rdf:type dbo:Person .
  ?person dbo:religion ?religion .
  FILTER (regex(?religion, ""Islam"", ""i"") || regex(?religion, ""Judaism"", ""i""))
}",2.2814337887592556e-155,0.05,True,True
533,Count the total number of software whose programming language is C++ and operating system is Microsoft Windows?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/C++> . ?uri <http://dbpedia.org/ontology/operatingSystem> <http://dbpedia.org/resource/Microsoft_Windows> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the total number of software whose programming language is C++ and operating system is Microsoft Windows?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?software) AS ?count)
WHERE {
  ?software dbo:programmingLanguage ""C++""@en .
  ?software dbo:operatingSystem ""Microsoft Windows""@en .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?software) AS ?count)
WHERE {
  ?software dbo:programmingLanguage ""C++""@en .
  ?software dbo:operatingSystem ""Microsoft Windows""@en .
}",8.535988047490202e-232,0.05128205128205128,True,True
4754,List all the children of Barbara Bush?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Barbara_Bush> <http://dbpedia.org/property/children> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the children of Barbara Bush?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?child
WHERE {
  ?child dbo:spouse ?person .
  ?person dbo:name ""George H. W. Bush""^^xsd:string .
  ?person dbo:father ?father .
  ?father dbo:name ""George H. W. Bush""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?child
WHERE {
  ?child dbo:spouse ?person .
  ?person dbo:name ""George H. W. Bush""^^xsd:string .
  ?person dbo:father ?father .
  ?father dbo:name ""George H. W. Bush""^^xsd:string .
}",2.308595628361502e-155,0.05970149253731343,True,True
3149,Give me a count of movies whose music composer is Bernard Herrmann?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Bernard_Herrmann>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me a count of movies whose music composer is Bernard Herrmann?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:musicComposer ?composer .
  ?composer rdfs:label ""Bernard Herrmann"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:musicComposer ?composer .
  ?composer rdfs:label ""Bernard Herrmann"" .
}",8.06798322521923e-232,0.04054054054054054,True,True
4318,What mascot of the Galatasaray Handball Team is also the team name of Cristo Rey Jesuit high School ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cristo_Rey_Jesuit_High_School_(Chicago)> <http://dbpedia.org/property/teamName> ?uri. <http://dbpedia.org/resource/Galatasaray_Handball_Team> <http://dbpedia.org/property/mascot> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What mascot of the Galatasaray Handball Team is also the team name of Cristo Rey Jesuit high School ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?mascot
WHERE {
  ?mascot dbo:mascotOf ?team .
  ?team dbo:name ""Galatasaray Handball Team"" .
  ?mascot rdfs:label ""Cristo Rey"" .
  FILTER (regex(?mascot, ""Cristo Rey"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?mascot
WHERE {
  ?mascot dbo:mascotOf ?team .
  ?team dbo:name ""Galatasaray Handball Team"" .
  ?mascot rdfs:label ""Cristo Rey"" .
  FILTER (regex(?mascot, ""Cristo Rey"", ""i""))
}",1.998443100417405e-155,0.03529411764705882,True,True
1383,How many pole drivers have been there in grand prixes where first driver was Damon Hill?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/firstDriver> <http://dbpedia.org/resource/Damon_Hill> . ?x <http://dbpedia.org/ontology/poleDriver> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FormulaOneRacer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many pole drivers have been there in grand prixes where first driver was Damon Hill?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?poleDriver) AS ?count)
WHERE {
  ?grandPrix dbo:firstDriver DamonHill .
  ?grandPrix dbo:polePosition ?poleDriver .
  FILTER (NOT EXISTS { ?poleDriver rdfs:label ""Damon Hill"" })
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?poleDriver) AS ?count)
WHERE {
  ?grandPrix dbo:firstDriver DamonHill .
  ?grandPrix dbo:polePosition ?poleDriver .
  FILTER (NOT EXISTS { ?poleDriver rdfs:label ""Damon Hill"" })
}",2.3192471031465984e-155,0.0449438202247191,False,False
4462,"Which indian party has won the arunachal pradesh elections of 2014, and has been in the 4th legislative assembly?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Arunachal_Pradesh_Legislative_Assembly_election,_2014> <http://dbpedia.org/property/party> ?uri. <http://dbpedia.org/resource/Fourth_Legislative_Assembly_of_Delhi> <http://dbpedia.org/property/party> ?uri . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which indian party has won the arunachal pradesh elections of 2014, and has been in the 4th legislative assembly?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?party
WHERE {
  ?party dbo:country ""India"" .
  ?party dbo:electionResult ?election .
  ?election dbp:location ""Arunachal Pradesh"" .
  ?election dbp:year ""2014"" .
  ?election dbo:legislativeAssembly ?assembly .
  ?assembly rdfs:label ""4th legislative assembly"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?party
WHERE {
  ?party dbo:country ""India"" .
  ?party dbo:electionResult ?election .
  ?election dbp:location ""Arunachal Pradesh"" .
  ?election dbp:year ""2014"" .
  ?election dbo:legislativeAssembly ?assembly .
  ?assembly rdfs:label ""4th legislative assembly"" .
}",3.005624224682767e-155,0.06896551724137931,True,True
3033,Which country's people have graduated from Ghana School of Law?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/almaMater> <http://dbpedia.org/resource/Ghana_School_of_Law> . ?x <http://dbpedia.org/ontology/nationality> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which country's people have graduated from Ghana School of Law?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?person dbo:nationality ?country .
  ?person dbp:almaMater ?school .
  ?school dbo:name ""Ghana School of Law"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?person dbo:nationality ?country .
  ?person dbp:almaMater ?school .
  ?school dbo:name ""Ghana School of Law"" .
}",3.0943809285865547e-155,0.06756756756756757,True,True
4067,What are the television shows whose company is owned by Viacom?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Viacom_(original)> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the television shows whose company is owned by Viacom?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?showLabel ?show
WHERE {
  ?show dbo:company ?company .
  ?company dbo:parentOrganization dbo:Viacom .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?showLabel ?show
WHERE {
  ?show dbo:company ?company .
  ?company dbo:parentOrganization dbo:Viacom .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",3.0025357216578434e-155,0.06329113924050633,False,False
1586,Which religion's people are member of BJP?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/party> <http://dbpedia.org/resource/Bharatiya_Janata_Party> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which religion's people are member of BJP?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?party dbo:member ?person .
  ?person dbo:religion ?religion .
  FILTER (regex(?party, ""BJP"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?party dbo:member ?person .
  ?person dbo:religion ?religion .
  FILTER (regex(?party, ""BJP"", ""i""))
}",3.216579438360415e-155,0.06944444444444445,True,True
1292,Is Wahoo! the previous work of Honeybuns?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Honeybuns> <http://dbpedia.org/ontology/previousWork> <http://dbpedia.org/resource/Wahoo!> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Wahoo! the previous work of Honeybuns?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:previousWork dbo:Honeybuns .
  FILTER (str(?x) = ""Wahoo!"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:previousWork dbo:Honeybuns .
  FILTER (str(?x) = ""Wahoo!"")
}",2.3548635457910922e-155,0.047619047619047616,True,True
978,Who is the editor of Hearth and Home?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hearth_and_Home> <http://dbpedia.org/ontology/editor> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the editor of Hearth and Home?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?editor
WHERE {
  ?magazine dbo:title ""Hearth and Home"" .
  ?magazine dbo:editor ?editor .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?editor
WHERE {
  ?magazine dbo:title ""Hearth and Home"" .
  ?magazine dbo:editor ?editor .
}",2.4775553999024465e-155,0.06349206349206349,True,True
1238,Name the common musical band of Take Me There and Tonight's the Night?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Take_Me_There_(Blackstreet_&_Mýa_song)> <http://dbpedia.org/ontology/musicalBand> ?uri. <http://dbpedia.org/resource/Tonight's_the_Night_(Blackstreet_song)> <http://dbpedia.org/ontology/musicalBand> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the common musical band of Take Me There and Tonight's the Night?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?bandName
WHERE {
  ?song dbo:artist ?band .
  ?song dbo:title ""Take Me There"" .
  ?song2 dbo:artist ?band2 .
  ?song2 dbo:title ""Tonight's the Night"" .
  FILTER(?band = ?band2)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?bandName
WHERE {
  ?song dbo:artist ?band .
  ?song dbo:title ""Take Me There"" .
  ?song2 dbo:artist ?band2 .
  ?song2 dbo:title ""Tonight's the Night"" .
  FILTER(?band = ?band2)
}",2.9024197612372904e-155,0.0759493670886076,True,True
2949,Who made the engine whose predecessor is the SHO V6?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Ford_SHO_V6_engine> . ?x <http://dbpedia.org/ontology/manufacturer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Engine>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who made the engine whose predecessor is the SHO V6?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?manufacturer
WHERE {
  ?engine dbo:predecessor ?predecessorEngine .
  ?predecessorEngine dbp:name ""SHOV6""^^xsd:string .
  ?engine dbo:manufacturer ?manufacturer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?manufacturer
WHERE {
  ?engine dbo:predecessor ?predecessorEngine .
  ?predecessorEngine dbp:name ""SHOV6""^^xsd:string .
  ?engine dbo:manufacturer ?manufacturer .
}",2.5502845355614067e-155,0.05714285714285714,True,True
2039,List the soccer players whose current team has the ground Stoke-on-Trent.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Stoke-on-Trent> . ?uri <http://dbpedia.org/property/currentclub> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the soccer players whose current team has the ground Stoke-on-Trent.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player ?playerLabel
WHERE {
  ?player dbo:playsFor ?team .
  ?team dbo:ground ?ground .
  ?ground rdfs:label ""Stoke-on-Trent"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player ?playerLabel
WHERE {
  ?player dbo:playsFor ?team .
  ?team dbo:ground ?ground .
  ?ground rdfs:label ""Stoke-on-Trent"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.9346708496857675e-155,0.0625,False,False
2174,What non fiction subjects are covered in books by Doubleday publishers?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Doubleday_(publisher)> . ?x <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What non fiction subjects are covered in books by Doubleday publishers?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?subject
WHERE {
  ?book dbo:publisher dbr:Doubleday .
  ?book dbp:subject ?subject .
  FILTER (regex(?subject, ""Fiction"", ""i"") == false)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?subject
WHERE {
  ?book dbo:publisher dbr:Doubleday .
  ?book dbp:subject ?subject .
  FILTER (regex(?subject, ""Fiction"", ""i"") == false)
}",3.0382827129023445e-155,0.0625,False,False
2312,What country provides a citizenship to Newin Chidchob and Seni Pramoj?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Newin_Chidchob> <http://dbpedia.org/property/nationality> ?uri. <http://dbpedia.org/resource/Seni_Pramoj> <http://dbpedia.org/ontology/nationality> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What country provides a citizenship to Newin Chidchob and Seni Pramoj?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?person dbo:nationality ?country .
  FILTER (regex(?person, ""Newin Chidchob"", ""i"") || regex(?person, ""Seni Pramoj"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?person dbo:nationality ?country .
  FILTER (regex(?person, ""Newin Chidchob"", ""i"") || regex(?person, ""Seni Pramoj"", ""i""))
}",2.7960888070028265e-155,0.05194805194805195,True,True
1193,What are the home stadiums of the things Leonid Fedun has been the chairman of?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/chairman> <http://dbpedia.org/resource/Leonid_Fedun> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the home stadiums of the things Leonid Fedun has been the chairman of?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?stadium
WHERE {
  ?club dbo:chairman ?person .
  ?person dbo:name ""Leonid Fedun""^^xsd:string .
  ?club dbo:homeStadium ?stadium .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?stadium
WHERE {
  ?club dbo:chairman ?person .
  ?person dbo:name ""Leonid Fedun""^^xsd:string .
  ?club dbo:homeStadium ?stadium .
}",3.433385853714441e-155,0.07792207792207792,True,True
4765,What are some cars related to the ones with a V8?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/engine> <http://dbpedia.org/resource/V8_engine> . ?x <http://dbpedia.org/property/related> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some cars related to the ones with a V8?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?car
WHERE {
  ?car dbo:engineDisplacement ?displacement .
  FILTER(?displacement > 8000)
  ?car dbo:relatedTo ?relatedCar .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?car
WHERE {
  ?car dbo:engineDisplacement ?displacement .
  FILTER(?displacement > 8000)
  ?car dbo:relatedTo ?relatedCar .
}",3.1537059338519422e-155,0.0684931506849315,True,True
1165,What is the television show whose opening theme is Te Deum (Charpentier)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Te_Deum_(Charpentier)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the television show whose opening theme is Te Deum (Charpentier)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:openingTheme ?theme .
  ?theme dbo:title ""Te Deum (Charpentier)"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:openingTheme ?theme .
  ?theme dbo:title ""Te Deum (Charpentier)"" .
}",8.017078581883202e-232,0.041666666666666664,True,True
2984,Which organizations have Jimmy Wales on board?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jimmy_Wales> <http://dbpedia.org/ontology/board> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which organizations have Jimmy Wales on board?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?organization
WHERE {
  ?organization dbo:chairman ?person .
  ?person dbo:name ""Jimmy Wales"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?organization
WHERE {
  ?organization dbo:chairman ?person .
  ?person dbo:name ""Jimmy Wales"" .
}",3.1370721297783126e-155,0.07692307692307693,True,True
1267,What currencies have been prevalent in the country whose national anthem is La Marseillaise?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/anthem> <http://dbpedia.org/resource/La_Marseillaise> . ?x <http://dbpedia.org/ontology/currency> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What currencies have been prevalent in the country whose national anthem is La Marseillaise?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?currency
WHERE {
  ?country dbo:nationalAnthem ""La Marseillaise"" .
  ?country dbp:currency ?currency .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?currency
WHERE {
  ?country dbo:nationalAnthem ""La Marseillaise"" .
  ?country dbp:currency ?currency .
}",3.53714058675999e-155,0.07894736842105263,True,True
3433,"What team did the players start their careers with, who right now play for Fleisher Yarn?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Fleisher_Yarn> . ?x <http://dbpedia.org/property/debutteam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What team did the players start their careers with, who right now play for Fleisher Yarn?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player ?team
WHERE {
  ?player dbo:playsFor <http://dbpedia.org/resource/Fleisher_Yarn> .
  ?player dbo:memberOf ?team .
  ?team rdfs:label ?teamLabel .
  FILTER (lang(?teamLabel) = 'en')
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player ?team
WHERE {
  ?player dbo:playsFor <http://dbpedia.org/resource/Fleisher_Yarn> .
  ?player dbo:memberOf ?team .
  ?team rdfs:label ?teamLabel .
  FILTER (lang(?teamLabel) = 'en')
}",3.338256739608007e-155,0.07228915662650602,True,True
3143,Does Cohoes a junction on the NY State Route 470?,google/gemma-2-9b-it,"ASK WHERE { <http://dbpedia.org/resource/New_York_State_Route_470> <http://dbpedia.org/ontology/routeJunction> <http://dbpedia.org/resource/Cohoes,_New_York> }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Cohoes a junction on the NY State Route 470?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Cohoes"" .
  ?x dbp:location dbo:NYStateRoute470 .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Cohoes"" .
  ?x dbp:location dbo:NYStateRoute470 .
}",2.259351571061102e-155,0.046153846153846156,True,True
2204,Name the mountain whose parent peak is located in Mexico.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/State_of_Mexico> . ?uri <http://dbpedia.org/ontology/parentMountainPeak> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Mountain>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the mountain whose parent peak is located in Mexico.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?mountainName
WHERE {
  ?mountain dbo:parentPeak ?peak .
  ?peak dbo:location ?location .
  ?location dbo:country ""Mexico"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?mountainName
WHERE {
  ?mountain dbo:parentPeak ?peak .
  ?peak dbo:location ?location .
  ?location dbo:country ""Mexico"" .
}",2.5502845355614067e-155,0.05555555555555555,True,True
2913,What teams have Avangard Omsk's players played for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/playedFor> <http://dbpedia.org/resource/Avangard_Omsk> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What teams have Avangard Omsk's players played for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:playsFor ?team .
  ?player dbo:team ?avangard .
  FILTER (regex(?avangard, ""Avangard Omsk"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:playsFor ?team .
  ?player dbo:team ?avangard .
  FILTER (regex(?avangard, ""Avangard Omsk"", ""i""))
}",3.2361225152319982e-155,0.08,True,True
1183,Companies headquartered in Geneva own which TV Shows?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Geneva> . ?uri <http://dbpedia.org/property/company> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Companies headquartered in Geneva own which TV Shows?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?showLabel
WHERE {
  ?company dbo: headquarters <http://dbpedia.org/resource/Geneva> .
  ?company dbo:owns ?show .
  ?show rdfs:label ?showLabel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?showLabel
WHERE {
  ?company dbo: headquarters <http://dbpedia.org/resource/Geneva> .
  ?company dbo:owns ?show .
  ?show rdfs:label ?showLabel .
}",3.979059567726874e-155,0.09722222222222222,False,False
708,In how many regions is English American spoken?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/English_Americans> <http://dbpedia.org/property/region> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In how many regions is English American spoken?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?region) AS ?count)
WHERE {
  ?language dbo:nativeLanguageOf ?region .
  FILTER (regex(?language, ""English American"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?region) AS ?count)
WHERE {
  ?language dbo:nativeLanguageOf ?region .
  FILTER (regex(?language, ""English American"", ""i""))
}",2.5842913325717755e-155,0.0684931506849315,True,True
1562,Which company's cars are assembled in Iran?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Iran> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which company's cars are assembled in Iran?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?company ?carModel
WHERE {
  ?company dbo:company .
  ?company dbo:foundedIn ?country .
  ?country rdfs:label ""Iran""@en .
  ?carModel dbo:manufacturer ?company .
  ?carModel dbo:assemblyLocation ?location .
  ?location rdfs:label ""Iran""@en .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?company ?carModel
WHERE {
  ?company dbo:company .
  ?company dbo:foundedIn ?country .
  ?country rdfs:label ""Iran""@en .
  ?carModel dbo:manufacturer ?company .
  ?carModel dbo:assemblyLocation ?location .
  ?location rdfs:label ""Iran""@en .
}",2.9851289841006984e-155,0.0684931506849315,False,False
3987,Count the writers whose work has been played in NY?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/place> <http://dbpedia.org/resource/New_York> . ?x <http://dbpedia.org/property/writer> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the writers whose work has been played in NY?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?writer
WHERE {
  ?writer dbo:birthPlace ?birthPlace .
  ?writer dbo:country ?country .
  ?work dbo:author ?writer .
  ?work dbo:performance ?performance .
  ?performance dbo:location ""New York"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?writer
WHERE {
  ?writer dbo:birthPlace ?birthPlace .
  ?writer dbo:country ?country .
  ?work dbo:author ?writer .
  ?work dbo:performance ?performance .
  ?performance dbo:location ""New York"" .
}",2.951204860745888e-155,0.0641025641025641,True,True
1714,Was Charlemagne canonized by antipope pachal 3?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Charlemagne> <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Antipope_Paschal_III> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Charlemagne canonized by antipope pachal 3?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:canonizedBy ?y .
  ?y dbo:name ""Pachal III""^^xsd:string .
  ?x dbo:name ""Charlemagne""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:canonizedBy ?y .
  ?y dbo:name ""Pachal III""^^xsd:string .
  ?x dbo:name ""Charlemagne""^^xsd:string .
}",2.2300068516948962e-155,0.045454545454545456,True,True
3479,What is the county seat of Moscow Governorate ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moscow_Governorate> <http://dbpedia.org/ontology/capital> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the county seat of Moscow Governorate ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?countySeat
WHERE {
  ?governorate dbo:countySeat ?countySeat .
  FILTER (str(?governorate) = ""Moscow Governorate"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?countySeat
WHERE {
  ?governorate dbo:countySeat ?countySeat .
  FILTER (str(?governorate) = ""Moscow Governorate"")
}",2.4775553999024465e-155,0.05970149253731343,True,True
3844,What is the common official residence of Lezlee Westine and Arnold W. Braswell?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lezlee_Westine> <http://dbpedia.org/property/residence> ?uri. <http://dbpedia.org/resource/Arnold_W._Braswell> <http://dbpedia.org/property/residence> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the common official residence of Lezlee Westine and Arnold W. Braswell?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?residence
WHERE {
  ?person dbo:officialResidence ?residence .
  FILTER (regex(?person, ""Lezlee Westine"", ""i"") || regex(?person, ""Arnold W. Braswell"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?residence
WHERE {
  ?person dbo:officialResidence ?residence .
  FILTER (regex(?person, ""Lezlee Westine"", ""i"") || regex(?person, ""Arnold W. Braswell"", ""i""))
}",2.455792850056901e-155,0.0641025641025641,True,True
327,What is the headquarters of the public transit system which is the section of Red Ahead ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Red_Ahead> <http://dbpedia.org/ontology/isPartOf> ?x . ?x <http://dbpedia.org/property/headquarters> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/PublicTransitSystem>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the headquarters of the public transit system which is the section of Red Ahead ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?headquarters
WHERE {
  ?transit a dbo:PublicTransportationSystem ;
    dbo:partOf ?system .
  ?system dbo:name ""Red Ahead""^^xsd:string .
  ?transit dbo:headquarters ?headquarters .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?headquarters
WHERE {
  ?transit a dbo:PublicTransportationSystem ;
    dbo:partOf ?system .
  ?system dbo:name ""Red Ahead""^^xsd:string .
  ?transit dbo:headquarters ?headquarters .
}",2.344734865707205e-155,0.05063291139240506,True,True
4049,Pointe d'Aveneyre belongs to which mountain range?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pointe_d'Aveneyre> <http://dbpedia.org/ontology/mountainRange> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Pointe d'Aveneyre belongs to which mountain range?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?mountainRange
WHERE {
  <http://dbpedia.org/resource/Pointe_d%27Aveneyre> dbo:locatedIn ?mountainRange .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?mountainRange
WHERE {
  <http://dbpedia.org/resource/Pointe_d%27Aveneyre> dbo:locatedIn ?mountainRange .
}",2.606590994551401e-155,0.06557377049180328,True,True
692,How many people are there who have relationship with Kennedy family?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Kennedy_family>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people are there who have relationship with Kennedy family?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?person) AS ?count)
WHERE {
  ?person dbo:family ?family .
  ?family dbo:name ""Kennedy family"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?person) AS ?count)
WHERE {
  ?person dbo:family ?family .
  ?family dbo:name ""Kennedy family"" .
}",2.4119102000777368e-155,0.05555555555555555,True,True
1166,What is the total number of participants in the conflict of SFOR and other conflicts?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/SFOR> . ?x <http://dbpedia.org/ontology/battle> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the total number of participants in the conflict of SFOR and other conflicts?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?participant) AS ?totalParticipants)
WHERE {
  ?conflict dbo:involvedInConflict ?participant .
  FILTER (regex(?participant, ""SFOR"", ""i""))
  UNION
  ?conflict dbo:involvedInConflict ?participant .
  FILTER (regex(?participant, ""other"", ""i""))
}
GROUP BY ?conflict
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?participant) AS ?totalParticipants)
WHERE {
  ?conflict dbo:involvedInConflict ?participant .
  FILTER (regex(?participant, ""SFOR"", ""i""))
  UNION
  ?conflict dbo:involvedInConflict ?participant .
  FILTER (regex(?participant, ""other"", ""i""))
}
GROUP BY ?conflict",2.401580582872042e-155,0.06097560975609756,False,False
1618,Who is the builder of Atamurat-Kerkichi Bridge?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Atamurat-Kerkichi_Bridge> <http://dbpedia.org/property/builder> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the builder of Atamurat-Kerkichi Bridge?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?builder
WHERE {
  ?bridge dbo:construction_date ?date .
  ?bridge dbo:builder ?builder .
  FILTER (regex(?bridge, ""Atamurat-Kerkichi Bridge"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?builder
WHERE {
  ?bridge dbo:construction_date ?date .
  ?bridge dbo:builder ?builder .
  FILTER (regex(?bridge, ""Atamurat-Kerkichi Bridge"", ""i""))
}",2.4440718429993668e-155,0.05970149253731343,True,True
4593,Which company developed Google Web Toolkit and Google custom search?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri. <http://dbpedia.org/resource/Google_Custom_Search> <http://dbpedia.org/ontology/author> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which company developed Google Web Toolkit and Google custom search?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:wikiPageRedirects/dbpedia:title ""Google Web Toolkit"".
  ?company dbo:wikiPageRedirects/dbpedia:title ""Google Custom Search"".
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:wikiPageRedirects/dbpedia:title ""Google Web Toolkit"".
  ?company dbo:wikiPageRedirects/dbpedia:title ""Google Custom Search"".
}",2.99393103522275e-155,0.07246376811594203,False,False
949,How many states does the Pioneer corporation operate in?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Pioneer_Corporation> <http://dbpedia.org/property/country> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many states does the Pioneer corporation operate in?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?state) AS ?count)
WHERE {
  ?company dbo:company <http://dbpedia.org/resource/Pioneer_Corporation> .
  ?company dbo:location ?state .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?state) AS ?count)
WHERE {
  ?company dbo:company <http://dbpedia.org/resource/Pioneer_Corporation> .
  ?company dbo:location ?state .
}",3.2383880054191053e-155,0.08695652173913043,True,True
2414,Who is the maker of Eristoff?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eristoff> <http://dbpedia.org/property/manufacturer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the maker of Eristoff?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?maker
WHERE {
  ?product dbo:brand ""Eristoff"" .
  ?product dbo:manufacturer ?maker .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?maker
WHERE {
  ?product dbo:brand ""Eristoff"" .
  ?product dbo:manufacturer ?maker .
}",2.5488701582353735e-155,0.06557377049180328,True,True
4374,City of Miami Cemetery is the governing body of which city?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/City_of_Miami_Cemetery> <http://dbpedia.org/property/governingBody> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: City of Miami Cemetery is the governing body of which city?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?cemetery dbo:governingBody ?city .
  FILTER (regex(?cemetery, ""Miami Cemetery"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?cemetery dbo:governingBody ?city .
  FILTER (regex(?cemetery, ""Miami Cemetery"", ""i""))
}",2.4440718429993668e-155,0.058823529411764705,True,True
3087,Which Paramount TV show was produced by Glen and Les Charles ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Glen_and_Les_Charles> . ?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Paramount_Television>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which Paramount TV show was produced by Glen and Les Charles ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:director ?director .
  ?director dbo:name ""Glen Charles"" .
  ?show dbo:producer ?producer .
  ?producer dbo:name ""Les Charles"" .
  ?show dbo:network ""Paramount Television"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:director ?director .
  ?director dbo:name ""Glen Charles"" .
  ?show dbo:producer ?producer .
  ?producer dbo:name ""Les Charles"" .
  ?show dbo:network ""Paramount Television"" .
}",2.306811013701292e-155,0.04938271604938271,True,True
2627,"Danny Felice, the Gibraltarian guitarist is from which city?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Danny_Felice> <http://dbpedia.org/ontology/hometown> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Danny Felice, the Gibraltarian guitarist is from which city?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?person dbo:name ""Danny Felice"" .
  ?person dbo:nationality ""Gibraltar"" .
  ?person dbo:birthPlace ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?person dbo:name ""Danny Felice"" .
  ?person dbo:nationality ""Gibraltar"" .
  ?person dbo:birthPlace ?city .
}",2.3659629744803227e-155,0.057971014492753624,True,True
4464,What is the party of the politicians whose children is Sanjay Gandhi ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Sanjay_Gandhi> . ?x <http://dbpedia.org/ontology/party> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the party of the politicians whose children is Sanjay Gandhi ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?politician ?politicianParty
WHERE {
  ?politician dbo:child ?child .
  ?child dbo:father Sanjay Gandhi .
  ?politician dbo:party ?politicianParty .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?politician ?politicianParty
WHERE {
  ?politician dbo:child ?child .
  ?child dbo:father Sanjay Gandhi .
  ?politician dbo:party ?politicianParty .
}",3.0566417519593477e-155,0.06944444444444445,False,False
1351,What is the field of the Jon Speelman and occupation of the Karen Grigorian?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jon_Speelman> <http://dbpedia.org/ontology/field> ?uri. <http://dbpedia.org/resource/Karen_Grigorian> <http://dbpedia.org/ontology/occupation> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the field of the Jon Speelman and occupation of the Karen Grigorian?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?field ?occupation
WHERE {
  ?person a dbo:Person ;
  dbo:name ?name .
  FILTER(?name = ""Jon Speelman"")
  ?person dbo:profession ?field .
  ?person2 a dbo:Person ;
  dbo:name ?name2 .
  FILTER(?name2 = ""Karen Grigorian"")
  ?person2 dbo:occupation ?occupation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?field ?occupation
WHERE {
  ?person a dbo:Person ;
  dbo:name ?name .
  FILTER(?name = ""Jon Speelman"")
  ?person dbo:profession ?field .
  ?person2 a dbo:Person ;
  dbo:name ?name2 .
  FILTER(?name2 = ""Karen Grigorian"")
  ?person2 dbo:occupation ?occupation .
}",1.968084453516327e-155,0.037037037037037035,True,True
4543,Who owns the airport in Paphos?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Paphos_District> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airport>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who owns the airport in Paphos?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?owner
WHERE {
  ?airport dbo:location dbp:Paphos .
  ?airport dbo:owner ?owner .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?owner
WHERE {
  ?airport dbo:location dbp:Paphos .
  ?airport dbo:owner ?owner .
}",2.6951020595591624e-155,0.06153846153846154,True,True
3270,How many other important things has the painter of Sarah Jane Adventures done?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/The_Sarah_Jane_Adventures> <http://dbpedia.org/property/creator> ?x . ?x <http://dbpedia.org/ontology/notableWork> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many other important things has the painter of Sarah Jane Adventures done?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?otherWorkCount
WHERE {
  ?painter dbo:birthDate ?birthDate .
  ?painter dbo:nationality ""British""^^xsd:string .
  ?painter dbo:work ?work .
  ?work dbo:title ""Sarah Jane Adventures"" .
  ?painter dbo:otherWork ?otherWork .
  COUNT(DISTINCT ?otherWork) AS ?otherWorkCount
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?otherWorkCount
WHERE {
  ?painter dbo:birthDate ?birthDate .
  ?painter dbo:nationality ""British""^^xsd:string .
  ?painter dbo:work ?work .
  ?work dbo:title ""Sarah Jane Adventures"" .
  ?painter dbo:otherWork ?otherWork .
  COUNT(DISTINCT ?otherWork) AS ?otherWorkCount
}",2.376562753944443e-155,0.058823529411764705,False,False
1870,List the saints venerated in Islam having major shrine as Tomb of Joshua ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/majorShrine> <http://dbpedia.org/resource/Tomb_of_Joshua> . ?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Islam>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Saint>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the saints venerated in Islam having major shrine as Tomb of Joshua ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?saint
WHERE {
  ?saint rdf:type dbo:Person .
  ?saint dbo:religion ""Islam""^^xsd:string .
  ?saint dbo:placeOfDeath dbp:Tomb_of_Joshua .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?saint
WHERE {
  ?saint rdf:type dbo:Person .
  ?saint dbo:religion ""Islam""^^xsd:string .
  ?saint dbo:placeOfDeath dbp:Tomb_of_Joshua .
}",2.426555136425675e-155,0.05128205128205128,True,True
1088,In which region was political figure Wayne Allard elected?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wayne_Allard> <http://dbpedia.org/ontology/region> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which region was political figure Wayne Allard elected?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?region
WHERE {
  ?person dbo:name ""Wayne Allard"" .
  ?person dbo:electedPosition ?position .
  ?position dbo:region ?region .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?region
WHERE {
  ?person dbo:name ""Wayne Allard"" .
  ?person dbo:electedPosition ?position .
  ?position dbo:region ?region .
}",3.0131856032309288e-155,0.07246376811594203,True,True
516,What company developed Mac OS 9 and also brought Tiny Tower to the market?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mac_OS_9> <http://dbpedia.org/ontology/developer> ?uri. <http://dbpedia.org/resource/Tiny_Tower> <http://dbpedia.org/property/distributor> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What company developed Mac OS 9 and also brought Tiny Tower to the market?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?company dbo:wikiPageRedirects ?companyPage .
  ?companyPage rdfs:label ""Apple Inc."" .
  ?company dbo:developedSoftware ?software .
  ?software dbo:name ""Mac OS 9"" .
  ?company dbo:foundedSoftware ?software2 .
  ?software2 dbo:name ""Tiny Tower"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?company dbo:wikiPageRedirects ?companyPage .
  ?companyPage rdfs:label ""Apple Inc."" .
  ?company dbo:developedSoftware ?software .
  ?software dbo:name ""Mac OS 9"" .
  ?company dbo:foundedSoftware ?software2 .
  ?software2 dbo:name ""Tiny Tower"" .
}",3.064855465129649e-155,0.07058823529411765,True,True
2804,How many places were ruled by Elizabeth II?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/Elizabeth_II>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many places were ruled by Elizabeth II?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?placeCount
WHERE {
  ?ruler dbo:rulerOf ?place .
  FILTER ( ?ruler = <http://dbpedia.org/resource/Elizabeth_II> )
  GROUP BY ?place
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?placeCount
WHERE {
  ?ruler dbo:rulerOf ?place .
  FILTER ( ?ruler = <http://dbpedia.org/resource/Elizabeth_II> )
  GROUP BY ?place
}",8.726094729337945e-232,0.0547945205479452,False,False
9,Which person designed the cars which has been designed by ASC Creative Services?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designCompany> <http://dbpedia.org/resource/ASC_Creative_Services> . ?x <http://dbpedia.org/property/designer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which person designed the cars which has been designed by ASC Creative Services?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person
WHERE {
  ?car dbo:designedBy ?person .
  ?car dbp:designer ?designer .
  ?designer dbo:designedBy ASC Creative Services .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person
WHERE {
  ?car dbo:designedBy ?person .
  ?car dbp:designer ?designer .
  ?designer dbo:designedBy ASC Creative Services .
}",3.0025357216578434e-155,0.06666666666666667,False,False
4051,Who is the office holder whose resting place is Monticello?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Monticello>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the office holder whose resting place is Monticello?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:restingPlace <http://dbpedia.org/resource/Monticello> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:restingPlace <http://dbpedia.org/resource/Monticello> .
}",2.5488701582353735e-155,0.0625,True,True
3752,What are the beverages whose origin is England?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/England> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the beverages whose origin is England?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?beverage
WHERE {
  ?beverage dbo:origin ?origin .
  ?origin dbo:country ""England"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?beverage
WHERE {
  ?beverage dbo:origin ?origin .
  ?origin dbo:country ""England"" .
}",2.494821638843469e-155,0.0625,True,True
1843,What is the automobile platform of Chiva bus ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the automobile platform of Chiva bus ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?platform
WHERE {
  ?bus dbo:name ""Chiva bus"" .
  ?bus dbo:automobilePlatform ?platform .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?platform
WHERE {
  ?bus dbo:name ""Chiva bus"" .
  ?bus dbo:automobilePlatform ?platform .
}",2.4775553999024465e-155,0.06153846153846154,True,True
1778,What is the nationality of the golf player who won the 2002 Players Championship ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2002_Players_Championship> <http://dbpedia.org/ontology/champion> ?x . ?x <http://dbpedia.org/ontology/nationality> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the nationality of the golf player who won the 2002 Players Championship ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?nationality
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:nationality ?nationality .
  ?player dbo:wins ?tournament .
  ?tournament dbp:name ""2002 Players Championship"" .
  FILTER ( lang(?nationality) = 'en' )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?nationality
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:nationality ?nationality .
  ?player dbo:wins ?tournament .
  ?tournament dbp:name ""2002 Players Championship"" .
  FILTER ( lang(?nationality) = 'en' )
}",2.2706697534775395e-155,0.047058823529411764,True,True
1231,What is the Recorded of the Kaptaan is also the headquarters of the Orient News?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kaptaan> <http://dbpedia.org/property/recorded> ?uri. <http://dbpedia.org/resource/Orient_News> <http://dbpedia.org/property/headquarters> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the Recorded of the Kaptaan is also the headquarters of the Orient News?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?recorded
WHERE {
  ?recorded dbo:recordedIn ?location .
  ?location dbo:name ""Kaptaan"" .
  ?location dbo:officialName ?officialName .
  ?officialName dbo:officialName ""Orient News"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?recorded
WHERE {
  ?recorded dbo:recordedIn ?location .
  ?location dbo:name ""Kaptaan"" .
  ?location dbo:officialName ?officialName .
  ?officialName dbo:officialName ""Orient News"" .
}",2.0751256583633507e-155,0.04054054054054054,True,True
775,Which governer of Winston Bryant is the president of Joseph Stiglitz?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Winston_Bryant> <http://dbpedia.org/property/governor> ?uri. <http://dbpedia.org/resource/Joseph_Stiglitz> <http://dbpedia.org/property/president> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which governer of Winston Bryant is the president of Joseph Stiglitz?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?president
WHERE {
  ?governor dbo:governorOf ?person .
  ?person dbo:name ""Winston Bryant""^^xsd:string .
  ?president dbo:presidentOf ?person .
  ?person dbo:name ""Joseph Stiglitz""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?president
WHERE {
  ?governor dbo:governorOf ?person .
  ?person dbo:name ""Winston Bryant""^^xsd:string .
  ?president dbo:presidentOf ?person .
  ?person dbo:name ""Joseph Stiglitz""^^xsd:string .
}",2.1483903094550452e-155,0.0410958904109589,True,True
2843,Name the debut team of Butch Metzger ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Butch_Metzger> <http://dbpedia.org/ontology/debutTeam> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the debut team of Butch Metzger ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?debutTeam WHERE {
  ?person dbo:name ""Butch Metzger"" .
  ?person dbo:debutTeam ?debutTeam .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?debutTeam WHERE {
  ?person dbo:name ""Butch Metzger"" .
  ?person dbo:debutTeam ?debutTeam .
}",2.494821638843469e-155,0.0625,True,True
3597,For how many movies are there whose musicians home town is in Volos ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Volos> . ?uri <http://dbpedia.org/property/music> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: For how many movies are there whose musicians home town is in Volos ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:director ?director .
  ?director dbp:birthPlace ""Volos"" .
  ?movie dbo:musicBy ?musician .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:director ?director .
  ?director dbp:birthPlace ""Volos"" .
  ?movie dbo:musicBy ?musician .
}",2.4123225276763925e-155,0.04878048780487805,True,True
4010,How many groups speak the English Language?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/languages> <http://dbpedia.org/resource/English_language>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many groups speak the English Language?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?group) AS ?count)
WHERE {
  ?group dbo:language ""English"".
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?group) AS ?count)
WHERE {
  ?group dbo:language ""English"".
}",7.544641259221007e-232,0.030303030303030304,True,True
1812,What is the region served by Toll Global Express and also borders Siberia ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Toll_Global_Express> <http://dbpedia.org/ontology/regionServed> ?uri. <http://dbpedia.org/resource/Siberia> <http://dbpedia.org/ontology/border> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the region served by Toll Global Express and also borders Siberia ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?region
WHERE {
  ?company dbo:serviceArea ?region .
  FILTER ( ?company = <http://dbpedia.org/resource/Toll_Global_Express> )
  ?region dbo:borders ?border .
  FILTER ( ?border = <http://dbpedia.org/resource/Siberia> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?region
WHERE {
  ?company dbo:serviceArea ?region .
  FILTER ( ?company = <http://dbpedia.org/resource/Toll_Global_Express> )
  ?region dbo:borders ?border .
  FILTER ( ?border = <http://dbpedia.org/resource/Siberia> )
}",2.8866879095378115e-155,0.075,True,True
3658,Does Hard Candy Fitness have one of the divisions in Moscow?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Hard_Candy_Fitness> <http://dbpedia.org/property/divisions> <http://dbpedia.org/resource/Moscow> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Hard Candy Fitness have one of the divisions in Moscow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?division
WHERE {
  ?company dbo:name ""Hard Candy Fitness"" .
  ?company dbo:division ?division .
  ?division dbp:location ""Moscow"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?division
WHERE {
  ?company dbo:name ""Hard Candy Fitness"" .
  ?company dbo:division ?division .
  ?division dbp:location ""Moscow"" .
}",2.161372110468443e-155,0.04285714285714286,True,True
4105,Whcih land of Citi Trends is also the constituency of Malik Al-Hassan Yakubu ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Malik_Al-Hassan_Yakubu> <http://dbpedia.org/property/constituency> ?uri. <http://dbpedia.org/resource/CitiTrends_(radio_show)> <http://dbpedia.org/ontology/country> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whcih land of Citi Trends is also the constituency of Malik Al-Hassan Yakubu ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?land
WHERE {
  ?company dbo:country ?land .
  ?company dbo:name ""Citi Trends"" .
  ?politician dbo:constituency ?land .
  ?politician dbo:name ""Malik Al-Hassan Yakubu"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?land
WHERE {
  ?company dbo:country ?land .
  ?company dbo:name ""Citi Trends"" .
  ?politician dbo:constituency ?land .
  ?politician dbo:name ""Malik Al-Hassan Yakubu"" .
}",2.6226323115709007e-155,0.05063291139240506,True,True
934,"What is that something which made Breann McGregor famous, and Frank Thorne received as an award?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frank_Thorne> <http://dbpedia.org/ontology/award> ?uri. <http://dbpedia.org/resource/Breann_McGregor> <http://dbpedia.org/property/knownFor> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is that something which made Breann McGregor famous, and Frank Thorne received as an award?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?something
WHERE {
  ?person dbo:name ""Breann McGregor"" .
  ?person dbo:knownFor ?something .
  ?person dbo:name ""Frank Thorne"" .
  ?person dbo:award ?something .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?something
WHERE {
  ?person dbo:name ""Breann McGregor"" .
  ?person dbo:knownFor ?something .
  ?person dbo:name ""Frank Thorne"" .
  ?person dbo:award ?something .
}",2.6517744597115435e-155,0.05128205128205128,True,True
1092,Who is the author of Karakuri Dji Ultimo?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Karakuri_Dôji_Ultimo> <http://dbpedia.org/property/author> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the author of Karakuri Dji Ultimo?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?book dbo:author ?author .
  ?book rdfs:label ""Karakuri Dji Ultimo"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?book dbo:author ?author .
  ?book rdfs:label ""Karakuri Dji Ultimo"" .
}",2.4775553999024465e-155,0.0625,True,True
1150,Where does John A Danaher III work?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_A._Danaher_III> <http://dbpedia.org/property/office> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where does John A Danaher III work?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?workPlace
WHERE {
  ?person dbo:name ""John A Danaher III"" .
  ?person dbo:worksFor ?workPlace .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?workPlace
WHERE {
  ?person dbo:name ""John A Danaher III"" .
  ?person dbo:worksFor ?workPlace .
}",2.4775553999024465e-155,0.0625,True,True
1752,What magazine is Marritt Cabal known for and is the publisher of Lucifer's Hammer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Merritt_Cabal> <http://dbpedia.org/ontology/knownFor> ?uri. <http://dbpedia.org/resource/Lucifer's_Hammer> <http://dbpedia.org/ontology/publisher> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What magazine is Marritt Cabal known for and is the publisher of Lucifer's Hammer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?magazine ?publisher
WHERE {
  ?person dbr:name ""Marritt Cabal"" .
  ?person dbo:knownFor ?magazine .
  dbr:Lucifer's_Hammer dbo:publisher ?publisher .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?magazine ?publisher
WHERE {
  ?person dbr:name ""Marritt Cabal"" .
  ?person dbo:knownFor ?magazine .
  dbr:Lucifer's_Hammer dbo:publisher ?publisher .
}",2.697368531067291e-155,0.05263157894736842,False,False
1920,How many religion's people have died in Malaysia?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Malaysia> . ?x <http://dbpedia.org/ontology/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many religion's people have died in Malaysia?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?religion) AS ?count)
WHERE {
  ?religion dbo:country ?country .
  ?country dbp:population ?population .
  FILTER(?country = dbo:Malaysia)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?religion) AS ?count)
WHERE {
  ?religion dbo:country ?country .
  ?country dbp:population ?population .
  FILTER(?country = dbo:Malaysia)
}",2.6349938432494677e-155,0.06578947368421052,True,True
3336,Where are the National Academy Museum and School award winners buried?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/National_Academy_Museum_and_School> . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where are the National Academy Museum and School award winners buried?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?location
WHERE {
  ?person dbo:award <http://dbpedia.org/resource/National_Academy_Museum_and_School_Award> .
  ?person dbo:deathPlace ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?location
WHERE {
  ?person dbo:award <http://dbpedia.org/resource/National_Academy_Museum_and_School_Award> .
  ?person dbo:deathPlace ?location .
}",3.627276877392474e-155,0.08450704225352113,True,True
3572,Which uni did Joshua A. Siegel attend ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joshua_A._Siegel> <http://dbpedia.org/property/education> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which uni did Joshua A. Siegel attend ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""Joshua A. Siegel"" .
  ?person dbo:attendedUniversity ?university .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""Joshua A. Siegel"" .
  ?person dbo:attendedUniversity ?university .
}",2.4775553999024465e-155,0.06153846153846154,True,True
1728,What is the base currency of Benelux?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Benelux> <http://dbpedia.org/property/currency> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the base currency of Benelux?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?currency
WHERE {
  ?country dbo:name ""Benelux"" .
  ?country dbp:currency ?currency .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?currency
WHERE {
  ?country dbo:name ""Benelux"" .
  ?country dbp:currency ?currency .
}",2.530465559854518e-155,0.06451612903225806,True,True
1721,List the work institutions of the medicians who has also worked at University of Miami?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/workInstitutions> <http://dbpedia.org/resource/University_of_Miami> . ?x <http://dbpedia.org/property/workInstitutions> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Medician>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the work institutions of the medicians who has also worked at University of Miami?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?medician ?workInstitution
WHERE {
  ?medician dbo:medicalSchool ?university .
  ?university rdf:type dbo:University .
  ?university dbo:name ""University of Miami"" .
  ?medician dbo:workInstitution ?workInstitution .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?medician ?workInstitution
WHERE {
  ?medician dbo:medicalSchool ?university .
  ?university rdf:type dbo:University .
  ?university dbo:name ""University of Miami"" .
  ?medician dbo:workInstitution ?workInstitution .
}",2.8866879095378115e-155,0.06329113924050633,True,True
3986,Count the number of people became famous for when Andrew Jackson was a commander ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Andrew_Jackson> . ?uri <http://dbpedia.org/ontology/knownFor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of people became famous for when Andrew Jackson was a commander ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace ?deathPlace .
  ?person dbo:becameFamousFor ?becameFamousFor .
  FILTER ( ?becameFamousFor = <http://dbpedia.org/resource/Andrew_Jackson> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace ?deathPlace .
  ?person dbo:becameFamousFor ?becameFamousFor .
  FILTER ( ?becameFamousFor = <http://dbpedia.org/resource/Andrew_Jackson> )
}",2.5092505335702585e-155,0.07058823529411765,True,True
2262,Which location city of Denver Broncos is the palce of birth of Steven Clark Cunningham ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?uri. <http://dbpedia.org/resource/Steven_Clark_Cunningham> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which location city of Denver Broncos is the palce of birth of Steven Clark Cunningham ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  ?person dbo:name ""Steven Clark Cunningham"" .
  FILTER (regex(?city, ""Denver""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  ?person dbo:name ""Steven Clark Cunningham"" .
  FILTER (regex(?city, ""Denver""))
}",2.1108049473741715e-155,0.038461538461538464,True,True
855,Which people are known for appearing on the television show Dragon's Den?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Dragons'_Den_(UK_TV_series)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which people are known for appearing on the television show Dragon's Den?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:knownFor ?show .
  ?show rdfs:label ""Dragon's Den"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:knownFor ?show .
  ?show rdfs:label ""Dragon's Den"" .
}",2.4119102000777368e-155,0.05714285714285714,True,True
377,"Which office holder's governor is Charles Willing Byrd and has final resting place in North Bend, Ohio?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/governor> <http://dbpedia.org/resource/Charles_Willing_Byrd> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/North_Bend,_Ohio>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which office holder's governor is Charles Willing Byrd and has final resting place in North Bend, Ohio?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?officeHolder
WHERE {
  ?officeHolder dbo:governor ?governor .
  ?governor dbo:name ""Charles Willing Byrd""^^xsd:string .
  ?officeHolder dbo:finalRestingPlace ?restingPlace .
  ?restingPlace dbo:name ""North Bend, Ohio""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?officeHolder
WHERE {
  ?officeHolder dbo:governor ?governor .
  ?governor dbo:name ""Charles Willing Byrd""^^xsd:string .
  ?officeHolder dbo:finalRestingPlace ?restingPlace .
  ?restingPlace dbo:name ""North Bend, Ohio""^^xsd:string .
}",8.252630869637644e-232,0.03614457831325301,True,True
2308,List all the faiths that British Columbian politicians follow?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/British_Columbia> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the faiths that British Columbian politicians follow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?faith
WHERE {
  ?politician dbo: nationality ""British Columbian"" .
  ?politician dbo:religion ?faith .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?faith
WHERE {
  ?politician dbo: nationality ""British Columbian"" .
  ?politician dbo:religion ?faith .
}",3.1537059338519422e-155,0.07042253521126761,False,False
688,In which cities can the beverage related to Barq's be found?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Barq's> <http://dbpedia.org/ontology/related> ?x . ?x <http://dbpedia.org/property/locationCity> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which cities can the beverage related to Barq's be found?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?product dbo:brand ""Barq's"" .
  ?product dbo:productType ""beverage"" .
  ?product dbp:availableIn ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?product dbo:brand ""Barq's"" .
  ?product dbo:productType ""beverage"" .
  ?product dbp:availableIn ?city .
}",3.53714058675999e-155,0.08108108108108109,True,True
2227,Trainees at the national film school of Lodz have received what awards?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/training> <http://dbpedia.org/resource/National_Film_School_in_Łódź> . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Trainees at the national film school of Lodz have received what awards?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?school dbo:name ""National Film School in Łódź"" .
  ?school dbo:trainee ?trainee .
  ?trainee dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?school dbo:name ""National Film School in Łódź"" .
  ?school dbo:trainee ?trainee .
  ?trainee dbo:award ?award .
}",3.433385853714441e-155,0.0759493670886076,True,True
1018,Give me the count of all people who ascended a peak in California?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/California> . ?x <http://dbpedia.org/ontology/firstAscentPerson> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me the count of all people who ascended a peak in California?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?person) AS ?count)
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country ?country .
  FILTER(?country = dbo:UnitedStates)
  ?person dbo:ascendedPeak ?peak .
  ?peak dbo:location ?location .
  FILTER(?location = dbo:California)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?person) AS ?count)
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country ?country .
  FILTER(?country = dbo:UnitedStates)
  ?person dbo:ascendedPeak ?peak .
  ?peak dbo:location ?location .
  FILTER(?location = dbo:California)
}",2.3318865198845825e-155,0.047619047619047616,True,True
3702,What is the region of Kim Sawchuk ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kim_Sawchuk> <http://dbpedia.org/property/region> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the region of Kim Sawchuk ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?region
WHERE {
  ?person dbo:name ""Kim Sawchuk"" .
  ?person dbo:region ?region .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?region
WHERE {
  ?person dbo:name ""Kim Sawchuk"" .
  ?person dbo:region ?region .
}",2.494821638843469e-155,0.0625,True,True
1173,List the total number of executive producer of TV show which have one of the executiive producer as Steven Moffat ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Steven_Moffat> . ?x <http://dbpedia.org/property/executiveProducer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the total number of executive producer of TV show which have one of the executiive producer as Steven Moffat ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?executiveProducer) AS ?count)
WHERE {
  ?tvShow dbo:executiveProducer ?executiveProducer .
  ?executiveProducer dbo:name ""Steven Moffat"" .
  FILTER (BOUND(?executiveProducer))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?executiveProducer) AS ?count)
WHERE {
  ?tvShow dbo:executiveProducer ?executiveProducer .
  ?executiveProducer dbo:name ""Steven Moffat"" .
  FILTER (BOUND(?executiveProducer))
}",2.3192471031465984e-155,0.058823529411764705,True,True
4084,Who all were venerated in Islam?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Islam>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who all were venerated in Islam?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:religion ""Islam""^^xsd:string .
  ?subject dbo:veneratedBy ?object .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:religion ""Islam""^^xsd:string .
  ?subject dbo:veneratedBy ?object .
}",3.181891987622405e-155,0.078125,True,True
3753,List down the opponents of Frank Stilwell?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frank_Stilwell> <http://dbpedia.org/ontology/opponent> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List down the opponents of Frank Stilwell?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?opponent
WHERE {
  ?opponent dbo:opponentOf ?frankStilwell .
  ?frankStilwell dbo:name ""Frank Stilwell"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?opponent
WHERE {
  ?opponent dbo:opponentOf ?frankStilwell .
  ?frankStilwell dbo:name ""Frank Stilwell"" .
}",3.1370721297783126e-155,0.078125,True,True
3703,Which colored race horses have won the Grand National?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/honours> <http://dbpedia.org/resource/Grand_National> . ?x <http://dbpedia.org/ontology/colour> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RaceHorse>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which colored race horses have won the Grand National?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?horse ?color
WHERE {
  ?horse dbo:wikiPageRedirects* dbo:GrandNationalWinner .
  ?horse dbp:coatColor ?color .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?horse ?color
WHERE {
  ?horse dbo:wikiPageRedirects* dbo:GrandNationalWinner .
  ?horse dbp:coatColor ?color .
}",3.1742523358973992e-155,0.07042253521126761,True,True
3932,List bacterias whose order is Bacillales and division is Firmicutes?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales> . ?uri <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Firmicutes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List bacterias whose order is Bacillales and division is Firmicutes?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:order ""Bacillales""^^xsd:string .
  ?bacteria dbo:division ""Firmicutes""^^xsd:string .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:order ""Bacillales""^^xsd:string .
  ?bacteria dbo:division ""Firmicutes""^^xsd:string .
}",2.5502845355614067e-155,0.056338028169014086,True,True
4784,Brian Moriarty designed video games written by whom?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designer> <http://dbpedia.org/resource/Brian_Moriarty> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Brian Moriarty designed video games written by whom?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?writer
WHERE {
  ?game dbo:designer Brian Moriarty .
  ?game dbo:writer ?writer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?writer
WHERE {
  ?game dbo:designer Brian Moriarty .
  ?game dbo:writer ?writer .
}",3.195205633963664e-155,0.07142857142857142,False,False
1242,List the other members of the band of which Juelz Santana is a part?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Juelz_Santana> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the other members of the band of which Juelz Santana is a part?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?otherMember
WHERE {
  ?band dbo:member ?member .
  ?member dbo:name ""Juelz Santana""^^xsd:string .
  ?band dbo:member ?otherMember .
  FILTER ( ?otherMember != ?member )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?otherMember
WHERE {
  ?band dbo:member ?member .
  ?member dbo:name ""Juelz Santana""^^xsd:string .
  ?band dbo:member ?otherMember .
  FILTER ( ?otherMember != ?member )
}",2.951204860745888e-155,0.06493506493506493,True,True
1570,What is the nationality of Aishath Saffa?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aishath_Saffa> <http://dbpedia.org/property/nationality> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the nationality of Aishath Saffa?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?nationality
WHERE {
  dbp:nationality Aishath_Saffa ?nationality .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?nationality
WHERE {
  dbp:nationality Aishath_Saffa ?nationality .
}",2.606590994551401e-155,0.06666666666666667,False,False
4768,Is Fluidinfo written in PostgreSQL language?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Fluidinfo> <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/PostgreSQL> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Fluidinfo written in PostgreSQL language?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects/dbp:programmingLanguage ""PostgreSQL"" .
  ?x dbo:wikiPageRedirects/dbp:name ""Fluidinfo"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects/dbp:programmingLanguage ""PostgreSQL"" .
  ?x dbo:wikiPageRedirects/dbp:name ""Fluidinfo"" .
}",2.321693139700891e-155,0.047619047619047616,True,True
4676,Estimate the number of sports divisions at the universities under international association of universities.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/International_Association_of_Universities> . ?x <http://dbpedia.org/ontology/sport> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Estimate the number of sports divisions at the universities under international association of universities.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?sportDivision) AS ?count)
WHERE {
  ?university dbo:memberOf ?iau .
  ?iau dbo:name ""International Association of Universities""@en .
  ?university dbo:sportsDivision ?sportDivision .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?sportDivision) AS ?count)
WHERE {
  ?university dbo:memberOf ?iau .
  ?iau dbo:name ""International Association of Universities""@en .
  ?university dbo:sportsDivision ?sportDivision .
}",2.951204860745888e-155,0.0625,True,True
1915,How many universities participate in the NCAA Division I Football Bowl Subdivision?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/athletics> <http://dbpedia.org/resource/NCAA_Division_I_Football_Bowl_Subdivision>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many universities participate in the NCAA Division I Football Bowl Subdivision?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?university)) AS ?count
WHERE {
  ?university dbo:sportsTeam ?footballTeam .
  ?footballTeam dbo:league dbp:NCAA_Division_I_Football_Bowl_Subdivision .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?university)) AS ?count
WHERE {
  ?university dbo:sportsTeam ?footballTeam .
  ?footballTeam dbo:league dbp:NCAA_Division_I_Football_Bowl_Subdivision .
}",8.06798322521923e-232,0.04054054054054054,False,False
2992,Count everyone who was in the military unit which is structured like the Marine Aircraft Group 13 ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/commandStructure> <http://dbpedia.org/resource/Marine_Aircraft_Group_13> . ?uri <http://dbpedia.org/ontology/militaryUnit> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count everyone who was in the military unit which is structured like the Marine Aircraft Group 13 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX schema: <http://schema.org/>

SELECT ?person
WHERE {
  ?person dbo:memberOf ?unit .
  ?unit dbo:isPartOf ?mag .
  ?mag dbo:name ""Marine Aircraft Group 13""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX schema: <http://schema.org/>

SELECT ?person
WHERE {
  ?person dbo:memberOf ?unit .
  ?unit dbo:isPartOf ?mag .
  ?mag dbo:name ""Marine Aircraft Group 13""^^xsd:string .
}",2.8712091323971647e-155,0.060240963855421686,True,True
851,What novels belong to the genre of Utopian and dystopian fiction?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Utopian_and_dystopian_fiction> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What novels belong to the genre of Utopian and dystopian fiction?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?novel
WHERE {
  ?novel dbo:genre ?genre .
  ?genre dbo:wikiPageRedirects ?wikiPage .
  FILTER (regex(?wikiPage, ""Utopian|Dystopian""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?novel
WHERE {
  ?novel dbo:genre ?genre .
  ?genre dbo:wikiPageRedirects ?wikiPage .
  FILTER (regex(?wikiPage, ""Utopian|Dystopian""))
}",2.3962983105918537e-155,0.057971014492753624,True,True
311,Name the constituency of Domenico Modugno?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Domenico_Modugno> <http://dbpedia.org/property/constituency> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the constituency of Domenico Modugno?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?constituency
WHERE {
  ?person dbo:name ""Domenico Modugno"" .
  ?person dbp:constituency ?constituency .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?constituency
WHERE {
  ?person dbo:name ""Domenico Modugno"" .
  ?person dbp:constituency ?constituency .
}",2.530465559854518e-155,0.06451612903225806,True,True
3577,What is the predecessor of PlayStation 4?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/PlayStation_4>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the predecessor of PlayStation 4?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?playstation4 dbo:successor ?predecessor .
  FILTER ( ?playstation4 = <http://dbpedia.org/resource/PlayStation_4> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?playstation4 dbo:successor ?predecessor .
  FILTER ( ?playstation4 = <http://dbpedia.org/resource/PlayStation_4> )
}",9.352284301430419e-232,0.07575757575757576,True,True
84,Which title of Zaman Shah Durrani is also the nationality of Salahuddin?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Zaman_Shah_Durrani> <http://dbpedia.org/property/title> ?uri. <http://dbpedia.org/resource/Salahuddin_Rabbani> <http://dbpedia.org/ontology/nationality> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which title of Zaman Shah Durrani is also the nationality of Salahuddin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?title
WHERE {
  ?zaman dbo:title ?title .
  ?zaman dbo:birthPlace ""Afghanistan"" .
  ?salahuddin dbo:nationality ""Afghan"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?title
WHERE {
  ?zaman dbo:title ?title .
  ?zaman dbo:birthPlace ""Afghanistan"" .
  ?salahuddin dbo:nationality ""Afghan"" .
}",2.1745921280630745e-155,0.04054054054054054,True,True
691,List the ceremonial county of East Tilbury?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/East_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the ceremonial county of East Tilbury?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?ceremonialCounty
WHERE {
  ?town dbo:ceremonialCounty ?ceremonialCounty .
  FILTER (regex(?town, ""East Tilbury"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?ceremonialCounty
WHERE {
  ?town dbo:ceremonialCounty ?ceremonialCounty .
  FILTER (regex(?town, ""East Tilbury"", ""i""))
}",2.5124539841526692e-155,0.06153846153846154,True,True
2377,List bacteria whose order (taxonomy) is Bacillales and domain is Bacteria?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales> . ?uri <http://dbpedia.org/property/domain> <http://dbpedia.org/resource/Bacteria>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List bacteria whose order (taxonomy) is Bacillales and domain is Bacteria?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:wikiPageID ?wikiPageID .
  ?bacteria dbo:dbpediaClass ?class .
  ?class rdfs:subClassOf* dbo:Bacteria .
  ?bacteria dbo:order ?order .
  ?order dbo:name ""Bacillales"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:wikiPageID ?wikiPageID .
  ?bacteria dbo:dbpediaClass ?class .
  ?class rdfs:subClassOf* dbo:Bacteria .
  ?bacteria dbo:order ?order .
  ?order dbo:name ""Bacillales"" .
}",2.3577979608859863e-155,0.05128205128205128,True,True
297,For which other teams do members of tanzanian national football team play?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Tanzania_national_football_team> . ?x <http://dbpedia.org/ontology/team> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: For which other teams do members of tanzanian national football team play?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:memberOf <http://dbpedia.org/resource/Tanzanian_national_football_team> .
  ?player dbo:playsFor ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:memberOf <http://dbpedia.org/resource/Tanzanian_national_football_team> .
  ?player dbo:playsFor ?team .
}",3.6040982025556637e-155,0.08108108108108109,True,True
4574,Which televison shows have location as Massachusetts ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Massachusetts>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which televison shows have location as Massachusetts ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?showLabel ?show
WHERE {
  ?show dbo:location dbp:Massachusetts .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?showLabel ?show
WHERE {
  ?show dbo:location dbp:Massachusetts .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.427831263680579e-155,0.056338028169014086,False,False
3367,Which architect of the Marine Corps Air Station Kaneohe Bay is the branch of the Burnet R. Maybank?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?uri. <http://dbpedia.org/resource/Burnet_R._Maybank> <http://dbpedia.org/property/branch> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which architect of the Marine Corps Air Station Kaneohe Bay is the branch of the Burnet R. Maybank?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?architect
WHERE {
  ?architect dbo:architectOf ?building .
  ?building dbp:location dbo:MarineCorpsAirStationKaneoheBay .
  ?architect dbo:branchOf ?branch .
  ?branch dbo:name ""Burnet R. Maybank"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?architect
WHERE {
  ?architect dbo:architectOf ?building .
  ?building dbp:location dbo:MarineCorpsAirStationKaneoheBay .
  ?architect dbo:branchOf ?branch .
  ?branch dbo:name ""Burnet R. Maybank"" .
}",2.5806662832054458e-155,0.04938271604938271,True,True
4648,How many people play for the Dallas Cowboys?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Dallas_Cowboys>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people play for the Dallas Cowboys?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:name ""Dallas Cowboys"" .
  ?team dbo:officialWebsite ?website .
  ?player dbo:playsFor ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:name ""Dallas Cowboys"" .
  ?team dbo:officialWebsite ?website .
  ?player dbo:playsFor ?team .
}",2.3962983105918537e-155,0.057971014492753624,True,True
4039,Is the Caterpullar 797F assembled in North America?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Caterpillar_797F> <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/North_America> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is the Caterpullar 797F assembled in North America?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?assemblyLocation
WHERE {
  ?caterpillar dbo:assemblyLocation ?assemblyLocation .
  FILTER (regex(?assemblyLocation, ""North America"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?assemblyLocation
WHERE {
  ?caterpillar dbo:assemblyLocation ?assemblyLocation .
  FILTER (regex(?assemblyLocation, ""North America"", ""i""))
}",2.2744651330897987e-155,0.04477611940298507,True,True
4937,Name the origins of the river with Quich Department as one of the origin ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Quiché_Department> . ?x <http://dbpedia.org/ontology/origin> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the origins of the river with Quich Department as one of the origin ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?riverName
WHERE {
  ?river dbo:origin ?origin .
  ?origin dbo:locatedIn ?department .
  ?department rdfs:label ""Quich Department"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?riverName
WHERE {
  ?river dbo:origin ?origin .
  ?origin dbo:locatedIn ?department .
  ?department rdfs:label ""Quich Department"" .
}",3.0025357216578434e-155,0.06666666666666667,True,True
2631,Which university attended by Donn Barber and education institute of Jack McGregor ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Donn_Barber> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Jack_McGregor> <http://dbpedia.org/ontology/education> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which university attended by Donn Barber and education institute of Jack McGregor ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university ?institute
WHERE {
  ?person dbo:almaMater ?university .
  FILTER(?person IN (dbo:Donn_Barber, dbo:Jack_McGregor))
  ?institute dbo:headquarters ?person .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university ?institute
WHERE {
  ?person dbo:almaMater ?university .
  FILTER(?person IN (dbo:Donn_Barber, dbo:Jack_McGregor))
  ?institute dbo:headquarters ?person .
}",2.7788812895482627e-155,0.05263157894736842,True,True
3453,Was Gerald Gibbs the cinematographer of X the unknown?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/X_the_Unknown> <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Gerald_Gibbs_(cinematographer)> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Gerald Gibbs the cinematographer of X the unknown?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:director Gerald Gibbs .
  ?x dbo:title ""X the unknown"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:director Gerald Gibbs .
  ?x dbo:title ""X the unknown"" .
}",2.2300068516948962e-155,0.046875,False,False
2758,"Where did the wrestler die who was billed in Norman, Oklahoma?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/billed> <http://dbpedia.org/resource/Norman,_Oklahoma> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Wrestler>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the wrestler die who was billed in Norman, Oklahoma?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?place WHERE {
  ?person dbo:birthDate ?birth.
  ?person dbo:deathDate ?death.
  ?person dbo:placeOfBirth ?birthplace.
  ?person dbo:billingLocation ""Norman, Oklahoma"".
  FILTER(?death != NULL)
  FILTER(?place != NULL)
  ?person dbo:deathPlace ?place.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?place WHERE {
  ?person dbo:birthDate ?birth.
  ?person dbo:deathDate ?death.
  ?person dbo:placeOfBirth ?birthplace.
  ?person dbo:billingLocation ""Norman, Oklahoma"".
  FILTER(?death != NULL)
  FILTER(?place != NULL)
  ?person dbo:deathPlace ?place.
}",2.09870814592606e-155,0.037037037037037035,False,False
4685,What is the club of Perianne Jones ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Perianne_Jones> <http://dbpedia.org/property/club> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the club of Perianne Jones ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?club
WHERE {
  ?person dbo:name ""Perianne Jones"" .
  ?person dbo:memberOf ?club .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?club
WHERE {
  ?person dbo:name ""Perianne Jones"" .
  ?person dbo:memberOf ?club .
}",2.494821638843469e-155,0.0625,True,True
4773,How many ingedients are required to make the Ragout Fin?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Ragout_fin> <http://dbpedia.org/ontology/ingredient> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many ingedients are required to make the Ragout Fin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?ingredient) AS ?count)
WHERE {
  ?recipe dbo:name ""Ragout Fin""@en .
  ?recipe dbo:ingredient ?ingredient .
}
GROUP BY ?recipe
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?ingredient) AS ?count)
WHERE {
  ?recipe dbo:name ""Ragout Fin""@en .
  ?recipe dbo:ingredient ?ingredient .
}
GROUP BY ?recipe",2.99393103522275e-155,0.0684931506849315,True,True
3738,What are the relatives of the rugby player one of whose relatives is Nick Williams?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Nick_Williams> . ?x <http://dbpedia.org/ontology/relative> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RugbyPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the relatives of the rugby player one of whose relatives is Nick Williams?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?relative
WHERE {
  ?rugbyPlayer dbo:relative ?relative .
  ?relative dbo:relative ""Nick Williams"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?relative
WHERE {
  ?rugbyPlayer dbo:relative ?relative .
  ?relative dbo:relative ""Nick Williams"" .
}",3.1137823863213763e-155,0.06944444444444445,True,True
666,Marika Gombitov makes songs in which languages?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Marika_Gombitová> . ?x <http://dbpedia.org/property/language> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Marika Gombitov makes songs in which languages?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?language
WHERE {
  ?artist dbo:name ""Marika Gombitov"" .
  ?artist dbo:genres ?genre .
  ?genre rdfs:label ?genreLabel .
  FILTER (regex(?genreLabel, ""music"", ""i""))
  ?genre dbp:language ?language .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?language
WHERE {
  ?artist dbo:name ""Marika Gombitov"" .
  ?artist dbo:genres ?genre .
  ?genre rdfs:label ?genreLabel .
  FILTER (regex(?genreLabel, ""music"", ""i""))
  ?genre dbp:language ?language .
}",3.433385853714441e-155,0.07692307692307693,True,True
214,Which parent organization of Get TV also owns the Galleria ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri. <http://dbpedia.org/resource/The_Galleria> <http://dbpedia.org/ontology/owner> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which parent organization of Get TV also owns the Galleria ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?parentOrganization
WHERE {
  ?organization dbo:wikiPageRedirects/dbp:name ""Get TV"" .
  ?organization dbo:parentOrganization ?parentOrganization .
  ?parentOrganization dbo:wikiPageRedirects/dbp:name ""Galleria"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?parentOrganization
WHERE {
  ?organization dbo:wikiPageRedirects/dbp:name ""Get TV"" .
  ?organization dbo:parentOrganization ?parentOrganization .
  ?parentOrganization dbo:wikiPageRedirects/dbp:name ""Galleria"" .
}",2.1745921280630745e-155,0.0410958904109589,True,True
4769,"Who currently operates the railway lines one of whose stockholder is Chicago, St Paul, Minneapolis and Omaha railway?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Chicago,_St._Paul,_Minneapolis_and_Omaha_Railway> . ?x <http://dbpedia.org/ontology/operatedBy> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RailwayLine>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who currently operates the railway lines one of whose stockholder is Chicago, St Paul, Minneapolis and Omaha railway?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?operator
WHERE {
  ?railway dbo:stockholder ?company .
  ?company rdfs:label ""Chicago, St Paul, Minneapolis and Omaha railway"" .
  ?railway dbo:operator ?operator .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?operator
WHERE {
  ?railway dbo:stockholder ?company .
  ?company rdfs:label ""Chicago, St Paul, Minneapolis and Omaha railway"" .
  ?railway dbo:operator ?operator .
}",2.8559767164037747e-155,0.06097560975609756,True,True
1418,Whose music composer is signed up with Sony Music Entertainment?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose music composer is signed up with Sony Music Entertainment?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?composer ?composerLabel
WHERE {
  ?composer dbo:musicComposer ?musicComposer .
  ?musicComposer dbp:recordLabel dbo:SonyMusicEntertainment .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?composer ?composerLabel
WHERE {
  ?composer dbo:musicComposer ?musicComposer .
  ?musicComposer dbp:recordLabel dbo:SonyMusicEntertainment .
}",3.699591675882789e-155,0.08450704225352113,True,True
4597,Which sports are played in the school which runs the Fr. Agnel Stadium?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fr._Agnel_Stadium> <http://dbpedia.org/property/operator> ?x . ?x <http://dbpedia.org/ontology/sport> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports are played in the school which runs the Fr. Agnel Stadium?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?stadium dbo:operator ?school .
  ?school rdfs:label ""Fr. Agnel Stadium""@en .
  ?school dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?stadium dbo:operator ?school .
  ?school rdfs:label ""Fr. Agnel Stadium""@en .
  ?school dbo:sports ?sport .
}",3.4534064447194983e-155,0.07894736842105263,True,True
65,Was Ganymede discovered by Galileo Galilei?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Ganymede_(moon)> <http://dbpedia.org/property/discoverer> <http://dbpedia.org/resource/Galileo_Galilei> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Ganymede discovered by Galileo Galilei?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x rdf:type dbo:Moon .
  ?x dbo:name ""Ganymede""^^xsd:string .
  ?x dbo:discoveredBy ?y .
  ?y rdf:type dbo:Person .
  ?y dbo:name ""Galileo Galilei""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x rdf:type dbo:Moon .
  ?x dbo:name ""Ganymede""^^xsd:string .
  ?x dbo:discoveredBy ?y .
  ?y rdf:type dbo:Person .
  ?y dbo:name ""Galileo Galilei""^^xsd:string .
}",2.135639655544596e-155,0.04411764705882353,True,True
3797,How many politicians are there from the city of Ganges?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Ganges> <http://dbpedia.org/property/city> ?x . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many politicians are there from the city of Ganges?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?politician) AS ?count)
WHERE {
  ?politician dbo:birthPlace dbp:Ganges .
  ?politician dbo:profession/rdfs:label ""Politician"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?politician) AS ?count)
WHERE {
  ?politician dbo:birthPlace dbp:Ganges .
  ?politician dbo:profession/rdfs:label ""Politician"" .
}",3.216579438360415e-155,0.06944444444444445,True,True
4275,Waddy wachtel did the music for what movies?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Waddy_Wachtel>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Waddy wachtel did the music for what movies?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Waddy Wachtel"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Waddy Wachtel"" .
}",2.4775553999024465e-155,0.06060606060606061,True,True
4210,Where common region are soylent and bannock sold?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Soylent_(drink)> <http://dbpedia.org/ontology/region> ?uri. <http://dbpedia.org/resource/Bannock_(food)> <http://dbpedia.org/ontology/region> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where common region are soylent and bannock sold?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?region
WHERE {
  ?product dbo:country ?country .
  ?product dbp:region ?region .
  FILTER (regex(?product, ""soylent"", ""i"") || regex(?product, ""bannock"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?region
WHERE {
  ?product dbo:country ?country .
  ?product dbp:region ?region .
  FILTER (regex(?product, ""soylent"", ""i"") || regex(?product, ""bannock"", ""i""))
}",3.1137823863213763e-155,0.08,True,True
2901,Which rivers start from the Provinces of Zambia?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/settlementType> <http://dbpedia.org/resource/Provinces_of_Zambia> . ?uri <http://dbpedia.org/ontology/sourceRegion> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which rivers start from the Provinces of Zambia?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river ?riverLabel
WHERE {
  ?river dbo:sourceLocation ?location .
  ?location dbo:country ?country .
  ?country dbo:name ""Zambia"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river ?riverLabel
WHERE {
  ?river dbo:sourceLocation ?location .
  ?location dbo:country ?country .
  ?country dbo:name ""Zambia"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.9851289841006984e-155,0.0641025641025641,False,False
582,Who are the people which ITV(TV network) has employed?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/ITV_(TV_network)>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the people which ITV(TV network) has employed?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:employedBy ?network .
  ?network dbo:name ""ITV"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:employedBy ?network .
  ?network dbo:name ""ITV"" .
}",3.1153609837288e-155,0.07575757575757576,True,True
4126,Is Greg Weeks the band member of Beyond the Sixth Seal?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Beyond_the_Sixth_Seal> <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Greg_Weeks> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Greg Weeks the band member of Beyond the Sixth Seal?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Greg Weeks"" .
  ?x dbo:memberOf <http://dbpedia.org/resource/Beyond_the_Sixth_Seal> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Greg Weeks"" .
  ?x dbo:memberOf <http://dbpedia.org/resource/Beyond_the_Sixth_Seal> .
}",2.4440718429993668e-155,0.06153846153846154,True,True
2488,Is Steve Nash the chairman of Vancouver Whitecaps FC?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Vancouver_Whitecaps_FC> <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Steve_Nash> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Steve Nash the chairman of Vancouver Whitecaps FC?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Steve Nash"" .
  ?x dbo:chairmanOf ?y .
  ?y dbo:name ""Vancouver Whitecaps FC"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Steve Nash"" .
  ?x dbo:chairmanOf ?y .
  ?y dbo:name ""Vancouver Whitecaps FC"" .
}",2.215756877004116e-155,0.045454545454545456,True,True
2550,Name the notable commanders of Army Group Oberrhein ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Army_Group_Oberrhein_(Germany)> <http://dbpedia.org/property/notableCommanders> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the notable commanders of Army Group Oberrhein ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?commander
WHERE {
  ?armyGroup dbo:commander ?commander .
  FILTER (regex(?armyGroup, ""Oberrhein"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?commander
WHERE {
  ?armyGroup dbo:commander ?commander .
  FILTER (regex(?armyGroup, ""Oberrhein"", ""i""))
}",3.0528361925813156e-155,0.07246376811594203,True,True
3998,How many movies have their music signed up with Sony Music Entertainment.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many movies have their music signed up with Sony Music Entertainment.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:genre ""Film"" .
  ?movie dbp:musicLabel ?musicLabel .
  ?musicLabel dbo:name ""Sony Music Entertainment"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:genre ""Film"" .
  ?movie dbp:musicLabel ?musicLabel .
  ?musicLabel dbo:name ""Sony Music Entertainment"" .
}",2.4123225276763925e-155,0.04938271604938271,True,True
2776,Count all the books written by an author buried in the Convent of Barefoot Trinitarians?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Convent_of_the_Barefoot_Trinitarians> . ?uri <http://dbpedia.org/ontology/author> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all the books written by an author buried in the Convent of Barefoot Trinitarians?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?author ?book
WHERE {
  ?author dbo:deathPlace ""Convent of Barefoot Trinitarians"" .
  ?author dbo:birthPlace ?birthPlace .
  ?author dbo:author ?book .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?author ?book
WHERE {
  ?author dbo:deathPlace ""Convent of Barefoot Trinitarians"" .
  ?author dbo:birthPlace ?birthPlace .
  ?author dbo:author ?book .
}",2.371081855250832e-155,0.05063291139240506,True,True
951,How many people are there whose children died in Indiana?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Indiana> . ?uri <http://dbpedia.org/ontology/child> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people are there whose children died in Indiana?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?personCount
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:child ?child .
  ?child dbo:deathPlace ""Indiana"" .
  FILTER (BOUND(?person))
}
GROUP BY ?person
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?personCount
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:child ?child .
  ?child dbo:deathPlace ""Indiana"" .
  FILTER (BOUND(?person))
}
GROUP BY ?person",2.4708136900731027e-155,0.05128205128205128,True,True
3232,How many people have been canonized by Pope Benedict XVI?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Pope_Benedict_XVI>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people have been canonized by Pope Benedict XVI?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?person dbo:canonizedBy ?pope .
  ?pope dbo:name ""Benedict XVI""^^xsd:string .
  FILTER (BOUND(?pope))
}
GROUP BY ?pope
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?person dbo:canonizedBy ?pope .
  ?pope dbo:name ""Benedict XVI""^^xsd:string .
  FILTER (BOUND(?pope))
}
GROUP BY ?pope",8.642045500889408e-232,0.0547945205479452,True,True
1430,What is the birth place of the children of Miguel Garca Granados?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Miguel_García_Granados> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the birth place of the children of Miguel Garca Granados?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?childBirthPlace
WHERE {
  ?child dbo:birthDate ?childBirthDate .
  ?child dbo:birthPlace ?childBirthPlace .
  ?person dbo:name ""Miguel García Granados""^^xsd:string .
  ?person dbo:children ?child .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?childBirthPlace
WHERE {
  ?child dbo:birthDate ?childBirthDate .
  ?child dbo:birthPlace ?childBirthPlace .
  ?person dbo:name ""Miguel García Granados""^^xsd:string .
  ?person dbo:children ?child .
}",2.968021523431445e-155,0.06578947368421052,True,True
2802,Players from how many teams have participated in the National Hockey League?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/National_Hockey_League> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Players from how many teams have participated in the National Hockey League?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?teamCount
WHERE {
  ?team dbo:sportsLeague dbp:National_Hockey_League .
  ?team dbo:player ?player .
  GROUP BY ?team
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?teamCount
WHERE {
  ?team dbo:sportsLeague dbp:National_Hockey_League .
  ?team dbo:player ?player .
  GROUP BY ?team
}",2.533776972251024e-155,0.05333333333333334,False,False
2432,What is the television show with presenter as Ryan Seacrest and theme music composer as Julian Gingell?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Julian_Gingell>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the television show with presenter as Ryan Seacrest and theme music composer as Julian Gingell?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:presenter ?presenter .
  ?presenter dbo:name ""Ryan Seacrest"" .
  ?show dbo:themeMusicComposer ?composer .
  ?composer dbo:name ""Julian Gingell"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:presenter ?presenter .
  ?presenter dbo:name ""Ryan Seacrest"" .
  ?show dbo:themeMusicComposer ?composer .
  ?composer dbo:name ""Julian Gingell"" .
}",8.296646461826084e-232,0.037037037037037035,True,True
2470,How many organizations work for Environmentalism?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many organizations work for Environmentalism?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?organization)) AS ?count
WHERE {
  ?organization dbo:wikiPageRedirects* dbo:Environmentalism .
  ?organization dbo:type dbo:Organization .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?organization)) AS ?count
WHERE {
  ?organization dbo:wikiPageRedirects* dbo:Environmentalism .
  ?organization dbo:type dbo:Organization .
}",2.494821638843469e-155,0.06060606060606061,False,False
907,Which county of Tremont Avenue is also the birht place of Ron Galotti?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tremont_Avenue> <http://dbpedia.org/property/counties> ?uri. <http://dbpedia.org/resource/Ron_Galotti> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which county of Tremont Avenue is also the birht place of Ron Galotti?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?county
WHERE {
  ?county dbo:name ""Tremont Avenue"" .
  ?county dbp:birthPlace ?person .
  ?person dbo:name ""Ron Galotti"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?county
WHERE {
  ?county dbo:name ""Tremont Avenue"" .
  ?county dbp:birthPlace ?person .
  ?person dbo:name ""Ron Galotti"" .
}",2.7130972940000843e-155,0.05263157894736842,True,True
1682,List all binomial authorities of the insects whose one of the binomial authority is douard Mntries?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/binomialAuthority> <http://dbpedia.org/resource/Édouard_Ménétries> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all binomial authorities of the insects whose one of the binomial authority is douard Mntries?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?insect ?authority
WHERE {
  ?insect dbo:binomialAuthority ?authority .
  FILTER ( ?authority = <http://dbpedia.org/resource/Douard_Mntries> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?insect ?authority
WHERE {
  ?insect dbo:binomialAuthority ?authority .
  FILTER ( ?authority = <http://dbpedia.org/resource/Douard_Mntries> )
}",3.0025357216578434e-155,0.07894736842105263,True,True
2307,Who produces the tv series which made Scott Haran famous?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Scott_Haran> <http://dbpedia.org/ontology/knownFor> ?x . ?x <http://dbpedia.org/ontology/producer> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who produces the tv series which made Scott Haran famous?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?producer
WHERE {
  ?person dbo:name ""Scott Haran"" .
  ?person dbo:knownFor ?tvSeries .
  ?tvSeries dbo:producer ?producer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?producer
WHERE {
  ?person dbo:name ""Scott Haran"" .
  ?person dbo:knownFor ?tvSeries .
  ?tvSeries dbo:producer ?producer .
}",3.0943809285865547e-155,0.0684931506849315,True,True
3003,Who are the key people of FWD.us?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/FWD.us> <http://dbpedia.org/property/keyPeople> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the key people of FWD.us?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:memberOf ?organization .
  ?organization dbo:name ""FWD.us"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:memberOf ?organization .
  ?organization dbo:name ""FWD.us"" .
}",3.159243630213636e-155,0.07936507936507936,True,True
3083,What is the hometown of John Speraw ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Speraw> <http://dbpedia.org/property/hometown> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the hometown of John Speraw ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hometown
WHERE {
  ?person dbo:name ""John Speraw"" .
  ?person dbo:birthPlace ?hometown .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hometown
WHERE {
  ?person dbo:name ""John Speraw"" .
  ?person dbo:birthPlace ?hometown .
}",2.494821638843469e-155,0.0625,True,True
3955,Was the body of Elsie Paroubek discovered in Chicago?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Elsie_Paroubek> <http://dbpedia.org/ontology/bodyDiscovered> <http://dbpedia.org/resource/Chicago> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was the body of Elsie Paroubek discovered in Chicago?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:deathPlace ""Chicago"" .
  ?x rdf:type dbo:Person .
  FILTER (str(?x) = ""http://dbpedia.org/resource/Elsie_Paroubek"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:deathPlace ""Chicago"" .
  ?x rdf:type dbo:Person .
  FILTER (str(?x) = ""http://dbpedia.org/resource/Elsie_Paroubek"")
}",2.215756877004116e-155,0.043478260869565216,True,True
4573,Which religions are followed by people in England?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/England> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which religions are followed by people in England?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:nationality ""England""@en .
  ?person dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:nationality ""England""@en .
  ?person dbo:religion ?religion .
}",3.2833699258334827e-155,0.07246376811594203,True,True
4820,What company is the one which wrote the google web toolkit and PlayN?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri. <http://dbpedia.org/resource/PlayN> <http://dbpedia.org/ontology/author> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What company is the one which wrote the google web toolkit and PlayN?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?company
WHERE {
  ?company dbo:wikiPageRedirects ?redirect
  ?redirect dbo:wikiPageCaption ""Google Web Toolkit"" .
  ?redirect dbo:creator ?creator
  ?creator dbo:wikiPageRedirects ?redirect2
  ?redirect2 dbo:wikiPageCaption ""PlayN"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?company
WHERE {
  ?company dbo:wikiPageRedirects ?redirect
  ?redirect dbo:wikiPageCaption ""Google Web Toolkit"" .
  ?redirect dbo:creator ?creator
  ?creator dbo:wikiPageRedirects ?redirect2
  ?redirect2 dbo:wikiPageCaption ""PlayN"" .
}",2.8039101108246434e-155,0.06493506493506493,False,False
726,Name the city served by Juhu Aerodrome?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juhu_Aerodrome> <http://dbpedia.org/property/cityServed> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the city served by Juhu Aerodrome?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?aerodrome dbo:location ?city .
  FILTER (regex(?aerodrome, ""Juhu Aerodrome"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?aerodrome dbo:location ?city .
  FILTER (regex(?aerodrome, ""Juhu Aerodrome"", ""i""))
}",2.5124539841526692e-155,0.06153846153846154,True,True
3085,Which awards has been given to both michel hazanavicius and geoffrey rush?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michel_Hazanavicius> <http://dbpedia.org/property/awards> ?uri. <http://dbpedia.org/resource/Geoffrey_Rush> <http://dbpedia.org/property/awards> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which awards has been given to both michel hazanavicius and geoffrey rush?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?person a dbo:Person ;
    dbo:name ?name .
  FILTER (regex(?name, ""Michel Hazanavicius"", ""i"") || regex(?name, ""Geoffrey Rush"", ""i"")) .
  ?person dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?person a dbo:Person ;
    dbo:name ?name .
  FILTER (regex(?name, ""Michel Hazanavicius"", ""i"") || regex(?name, ""Geoffrey Rush"", ""i"")) .
  ?person dbo:award ?award .
}",3.194645317303101e-155,0.07058823529411765,True,True
1412,How many artists' works are in Musee d'Orsay?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/museum> <http://dbpedia.org/resource/Musée_d'Orsay> . ?x <http://dbpedia.org/property/artist> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many artists' works are in Musee d'Orsay?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?artist) AS ?count)
WHERE {
  ?work dbo:artist ?artist .
  ?work dbp:location dbo:Musee_dOrsay .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?artist) AS ?count)
WHERE {
  ?work dbo:artist ?artist .
  ?work dbp:location dbo:Musee_dOrsay .
}",2.5502845355614067e-155,0.05333333333333334,True,True
4128,Name the television show voiced by April Stewart and Eliza Schneider?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/April_Stewart> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Eliza_Schneider> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the television show voiced by April Stewart and Eliza Schneider?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?showLabel
WHERE {
  ?show dbo:voiceActor ?actor .
  ?actor dbo:name ""April Stewart"" .
  UNION
  ?show dbo:voiceActor ?actor .
  ?actor dbo:name ""Eliza Schneider"" .
  ?show rdfs:label ?showLabel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?showLabel
WHERE {
  ?show dbo:voiceActor ?actor .
  ?actor dbo:name ""April Stewart"" .
  UNION
  ?show dbo:voiceActor ?actor .
  ?actor dbo:name ""Eliza Schneider"" .
  ?show rdfs:label ?showLabel .
}",2.8866879095378115e-155,0.06493506493506493,False,False
2823,Which adminstrative region of Lawrence F. Cafero is also the resting place of Samuel Keeler ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lawrence_F._Cafero> <http://dbpedia.org/ontology/region> ?uri. <http://dbpedia.org/resource/Samuel_Keeler> <http://dbpedia.org/ontology/restingPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which adminstrative region of Lawrence F. Cafero is also the resting place of Samuel Keeler ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?region
WHERE {
  ?person dbo:birthPlace ?region .
  FILTER ( ?person = dbo:Lawrence_F_Cafero )
  ?person dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:locatedIn ?region .
  ?person rdf:type dbo:Politician .
  ?person dbo:name ""Samuel Keeler"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?region
WHERE {
  ?person dbo:birthPlace ?region .
  FILTER ( ?person = dbo:Lawrence_F_Cafero )
  ?person dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:locatedIn ?region .
  ?person rdf:type dbo:Politician .
  ?person dbo:name ""Samuel Keeler"" .
}",2.4900858824700132e-155,0.04597701149425287,True,True
3219,"Which ceremonial County of the East Tilbury is also the local authority of the Trinity School, Brentwood?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/East_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?uri. <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which ceremonial County of the East Tilbury is also the local authority of the Trinity School, Brentwood?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?county
WHERE {
  ?county dbo:ceremonialCounty ?eastTilbury .
  ?eastTilbury dbo:localAuthority ?localAuthority .
  ?localAuthority dbo:school ?trinitySchool .
  ?trinitySchool rdfs:label ""Trinity School, Brentwood"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?county
WHERE {
  ?county dbo:ceremonialCounty ?eastTilbury .
  ?eastTilbury dbo:localAuthority ?localAuthority .
  ?localAuthority dbo:school ?trinitySchool .
  ?trinitySchool rdfs:label ""Trinity School, Brentwood"" .
}",2.5944303248170386e-155,0.05,True,True
4970,Name the military conflict whose commander was Colin Powell and took place in israel ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Colin_Powell> . ?uri <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Israel>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the military conflict whose commander was Colin Powell and took place in israel ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?conflict
WHERE {
  ?person dbo:birthPlace ""Colin Powell"" .
  ?person dbo:occupation ""Military officer"" .
  ?person dbo:militaryConflict ?conflict .
  ?conflict dbo:location ""Israel"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?conflict
WHERE {
  ?person dbo:birthPlace ""Colin Powell"" .
  ?person dbo:occupation ""Military officer"" .
  ?person dbo:militaryConflict ?conflict .
  ?conflict dbo:location ""Israel"" .
}",8.412065649527267e-232,0.0379746835443038,True,True
1566,In which fields are both Paul Demiville and Sylvain levi experts?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paul_Demiéville> <http://dbpedia.org/property/fields> ?uri. <http://dbpedia.org/resource/Sylvain_Lévi> <http://dbpedia.org/property/fields> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which fields are both Paul Demiville and Sylvain levi experts?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?field
WHERE {
  ?person dbo:occupation ?field .
  FILTER (?person IN (dbo:Paul_Demiville, dbo:Sylvain_Levi))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?field
WHERE {
  ?person dbo:occupation ?field .
  FILTER (?person IN (dbo:Paul_Demiville, dbo:Sylvain_Levi))
}",3.195205633963664e-155,0.0821917808219178,True,True
603,"Give me all commanders which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_Fort_Stephenson> <http://dbpedia.org/ontology/commander> ?uri. <http://dbpedia.org/resource/Battle_of_the_Thames> <http://dbpedia.org/ontology/commander> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all commanders which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?commander
WHERE {
  ?commander dbo:birthPlace ?birthPlace .
  ?commander dbo:deathPlace ?deathPlace .
  ?commander dbo:involvedIn ?battle1 .
  ?battle1 dbo:name ""Battle of Fort Stephenson""^^xsd:string .
  ?commander dbo:involvedIn ?battle2 .
  ?battle2 dbo:name ""Battle of the Thames""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?commander
WHERE {
  ?commander dbo:birthPlace ?birthPlace .
  ?commander dbo:deathPlace ?deathPlace .
  ?commander dbo:involvedIn ?battle1 .
  ?battle1 dbo:name ""Battle of Fort Stephenson""^^xsd:string .
  ?commander dbo:involvedIn ?battle2 .
  ?battle2 dbo:name ""Battle of the Thames""^^xsd:string .
}",2.9361994042171736e-155,0.07058823529411765,True,True
171,Is Queen Latifah associated with Afrika Baby Bam?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Afrika_Baby_Bam> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Queen_Latifah> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Queen Latifah associated with Afrika Baby Bam?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Queen Latifah""^^xsd:string .
  ?x dbp:associatedWith ?y .
  ?y dbo:name ""Afrika Baby Bam""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Queen Latifah""^^xsd:string .
  ?x dbp:associatedWith ?y .
  ?y dbo:name ""Afrika Baby Bam""^^xsd:string .
}",2.2300068516948962e-155,0.045454545454545456,True,True
3309,Who battled under commander Egushawa in a conflict?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Egushawa> . ?x <http://dbpedia.org/property/combatant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who battled under commander Egushawa in a conflict?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:commander ?commander .
  ?commander dbo:name ""Egushawa"" .
  ?subject dbo:involvedInConflict ?conflict .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:commander ?commander .
  ?commander dbo:name ""Egushawa"" .
  ?subject dbo:involvedInConflict ?conflict .
}",3.195205633963664e-155,0.07142857142857142,True,True
3662,"Which companies make cars with a front engine, rear wheel drive layout?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/Front-engine,_rear-wheel-drive_layout> . ?x <http://dbpedia.org/ontology/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which companies make cars with a front engine, rear wheel drive layout?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?company ?carModel
WHERE {
  ?company dbo:companyType ""Automotive"" .
  ?carModel dbo:manufacturer ?company .
  ?carModel dbo:engineLayout ""Front engine, rear wheel drive"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?company ?carModel
WHERE {
  ?company dbo:companyType ""Automotive"" .
  ?carModel dbo:manufacturer ?company .
  ?carModel dbo:engineLayout ""Front engine, rear wheel drive"" .
}",3.0202505652128895e-155,0.06666666666666667,True,True
356,Where do the sister stations of Al Khaleejiya 100.9 play?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterStations> <http://dbpedia.org/resource/Al_Khaleejiya_100.9> . ?x <http://dbpedia.org/property/location> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where do the sister stations of Al Khaleejiya 100.9 play?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?station ?location
WHERE {
  ?station dbo:name ""Al Khaleejiya 100.9"" .
  ?station dbo:sisterStation ?sisterStation .
  ?sisterStation dbo:location ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?station ?location
WHERE {
  ?station dbo:name ""Al Khaleejiya 100.9"" .
  ?station dbo:sisterStation ?sisterStation .
  ?sisterStation dbo:location ?location .
}",3.4945213227383114e-155,0.08108108108108109,True,True
1225,The software with Mac OS as operating system and C++ as programming language are [answer].,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Apple_Productivity_Experience_Group> <http://dbpedia.org/ontology/product> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: The software with Mac OS as operating system and C++ as programming language are [answer].
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?software
WHERE {
  ?software rdf:type dbo:Software .
  ?software dbo:operatingSystem  <http://dbpedia.org/resource/Mac_OS> .
  ?software dbo:programmingLanguage  <http://dbpedia.org/resource/C%2B%2B> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?software
WHERE {
  ?software rdf:type dbo:Software .
  ?software dbo:operatingSystem  <http://dbpedia.org/resource/Mac_OS> .
  ?software dbo:programmingLanguage  <http://dbpedia.org/resource/C%2B%2B> .
}",2.868751113594075e-155,0.06756756756756757,True,True
1645,Which license provider of MSX basic is also the designer of Language Integrated Query?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which license provider of MSX basic is also the designer of Language Integrated Query?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?licenseProvider ?designer
WHERE {
  ?licenseProvider dbo:licenseProviderOf ?software .
  ?software dbo:name ""MSX Basic""^^xsd:string .
  ?designer dbo:designerOf ?software .
  ?designer dbo:name ""Language Integrated Query""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?licenseProvider ?designer
WHERE {
  ?licenseProvider dbo:licenseProviderOf ?software .
  ?software dbo:name ""MSX Basic""^^xsd:string .
  ?designer dbo:designerOf ?software .
  ?designer dbo:name ""Language Integrated Query""^^xsd:string .
}",2.0523206950207848e-155,0.038461538461538464,True,True
3333,In which city are the schools whose district is Mumbai Suburban?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/district> <http://dbpedia.org/resource/Mumbai_Suburban_district> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which city are the schools whose district is Mumbai Suburban?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?school ?schoolCity
WHERE {
  ?school dbo:district ""Mumbai Suburban"" .
  ?school dbo:location ?schoolCity .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?school ?schoolCity
WHERE {
  ?school dbo:district ""Mumbai Suburban"" .
  ?school dbo:location ?schoolCity .
}",3.1137823863213763e-155,0.06756756756756757,True,True
1204,What is the place of death of the royalties one of whose parents was Adam Ludwik Czartoryski?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Adam_Ludwik_Czartoryski> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the place of death of the royalties one of whose parents was Adam Ludwik Czartoryski?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?royalty ?royaltyPlaceOfDeath
WHERE {
  ?royalty dbo:father ?czartoryski .
  ?czartoryski dbo:name ""Adam Ludwik Czartoryski"" .
  ?royalty dbo:placeOfDeath ?royaltyPlaceOfDeath .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?royalty ?royaltyPlaceOfDeath
WHERE {
  ?royalty dbo:father ?czartoryski .
  ?czartoryski dbo:name ""Adam Ludwik Czartoryski"" .
  ?royalty dbo:placeOfDeath ?royaltyPlaceOfDeath .
}",2.91841165985534e-155,0.06329113924050633,True,True
3638,How many developers make software for Unix like operating systems?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Unix-like> . ?x <http://dbpedia.org/ontology/developer> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many developers make software for Unix like operating systems?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?developer) AS ?count)
WHERE {
  ?developer dbo:occupation ""Software Developer"" .
  ?developer dbo:worksFor ?company .
  ?company dbo:product ?product .
  ?product dbo:operatingSystem ""Unix"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?developer) AS ?count)
WHERE {
  ?developer dbo:occupation ""Software Developer"" .
  ?developer dbo:worksFor ?company .
  ?company dbo:product ?product .
  ?product dbo:operatingSystem ""Unix"" .
}",3.0382827129023445e-155,0.06493506493506493,True,True
3644,"List the employments of people who died in Tampa, Florida.",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the employments of people who died in Tampa, Florida.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?person ?employment
WHERE {
  ?person dbo:deathPlace dbp:Tampa.
  ?person dbo:occupation ?employment.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?person ?employment
WHERE {
  ?person dbo:deathPlace dbp:Tampa.
  ?person dbo:occupation ?employment.
}",3.0528361925813156e-155,0.07042253521126761,True,True
3157,"Who was on the first team in the GPs that were held at Watkins Glen, NY?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Watkins_Glen,_New_York> . ?x <http://dbpedia.org/property/firstTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was on the first team in the GPs that were held at Watkins Glen, NY?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?driver
WHERE {
  ?gp dbo:location <http://dbpedia.org/resource/Watkins_Glen_International> .
  ?gp dbo:firstTeam ?driver .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?driver
WHERE {
  ?gp dbo:location <http://dbpedia.org/resource/Watkins_Glen_International> .
  ?gp dbo:firstTeam ?driver .
}",3.0566417519593477e-155,0.06578947368421052,True,True
1995,Which company produced the car which was a new version of Daewoo's Tico?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Daewoo_Tico> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which company produced the car which was a new version of Daewoo's Tico?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?car dbo:model ""Tico"" .
  ?car dbo:manufacturer ?company .
  FILTER (regex(?car, ""Daewoo"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?car dbo:model ""Tico"" .
  ?car dbo:manufacturer ?company .
  FILTER (regex(?car, ""Daewoo"", ""i""))
}",3.0382827129023445e-155,0.0641025641025641,True,True
3021,List the things for which people of New Orleans are famous for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/New_Orleans> . ?x <http://dbpedia.org/property/knownFor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the things for which people of New Orleans are famous for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:birthPlace dbp:New_Orleans .
  ?person dbo:knownFor ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:birthPlace dbp:New_Orleans .
  ?person dbo:knownFor ?thing .
}",3.1335534263807668e-155,0.0684931506849315,True,True
4088,What is the field of interest of the advisor of Henri Maspero ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henri_Maspero> <http://dbpedia.org/ontology/academicAdvisor> ?x . ?x <http://dbpedia.org/property/fields> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the field of interest of the advisor of Henri Maspero ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?advisorField
WHERE {
  ?advisor dbo:advisorOf ?person .
  ?person dbo:name ""Henri Maspero"" .
  ?advisor dbo:fieldOfInterest ?advisorField .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?advisorField
WHERE {
  ?advisor dbo:advisorOf ?person .
  ?person dbo:name ""Henri Maspero"" .
  ?advisor dbo:fieldOfInterest ?advisorField .
}",3.0382827129023445e-155,0.0684931506849315,True,True
869,What is the political party of the Bengalis?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/ethnicity> <http://dbpedia.org/resource/Bengalis> . ?x <http://dbpedia.org/ontology/party> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the political party of the Bengalis?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?politicalParty
WHERE {
  ?bengali dbo:nationality ""Bengali"" .
  ?bengali dbo:politicalParty ?politicalParty .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?politicalParty
WHERE {
  ?bengali dbo:nationality ""Bengali"" .
  ?bengali dbo:politicalParty ?politicalParty .
}",3.3065753972821387e-155,0.07692307692307693,True,True
4283,Count the number of ingredient of the foods which have one of the ingredient is Pork ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Pork> . ?x <http://dbpedia.org/ontology/ingredient> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of ingredient of the foods which have one of the ingredient is Pork ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?ingredient) AS ?count)
WHERE {
  ?food dbo:ingredient ?ingredient .
  FILTER (regex(?ingredient, ""Pork"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?ingredient) AS ?count)
WHERE {
  ?food dbo:ingredient ?ingredient .
  FILTER (regex(?ingredient, ""Pork"", ""i""))
}",2.4123225276763925e-155,0.0641025641025641,True,True
4054,Who are the associated musical artist of Carolyn Dennis?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carolyn_Dennis> <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the associated musical artist of Carolyn Dennis?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:spouse Carolyn Dennis .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:spouse Carolyn Dennis .
}",3.181891987622405e-155,0.07936507936507936,False,False
664,List the movies whose music composer is often associated with Jon and Vangelis.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Jon_and_Vangelis> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the movies whose music composer is often associated with Jon and Vangelis.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:musicComposer ?composer .
  ?composer dbo:birthPlace ""Greece"" .
  ?composer dbo:name ?name .
  FILTER (regex(?name, ""Jon"", ""i"") || regex(?name, ""Vangelis"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:musicComposer ?composer .
  ?composer dbo:birthPlace ""Greece"" .
  ?composer dbo:name ?name .
  FILTER (regex(?name, ""Jon"", ""i"") || regex(?name, ""Vangelis"", ""i""))
}",2.9024197612372904e-155,0.05952380952380952,True,True
1632,What is the former team of the Athens borned basketball players?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Athens> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the former team of the Athens borned basketball players?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?player ?team
WHERE {
  ?player dbo:birthPlace ""Athens"" .
  ?player dbo:profession ""Basketball player"" .
  ?player dbo:formerTeam ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?player ?team
WHERE {
  ?player dbo:birthPlace ""Athens"" .
  ?player dbo:profession ""Basketball player"" .
  ?player dbo:formerTeam ?team .
}",3.0382827129023445e-155,0.06666666666666667,True,True
3929,In which areas can I find wine made of Vitis vinifera grapes?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Vitis_vinifera> . ?x <http://dbpedia.org/ontology/wineRegion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Grape>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which areas can I find wine made of Vitis vinifera grapes?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?area
WHERE {
  ?wine dbo:grapeVariety ""Vitis vinifera"" .
  ?wine dbo:producedIn ?area .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?area
WHERE {
  ?wine dbo:grapeVariety ""Vitis vinifera"" .
  ?wine dbo:producedIn ?area .
}",3.1137823863213763e-155,0.06578947368421052,True,True
1851,How many had their debut team coached by Chip Kelly?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Chip_Kelly> . ?uri <http://dbpedia.org/ontology/debutTeam> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many had their debut team coached by Chip Kelly?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?player) AS ?count)
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:debutTeam ?debutTeam .
  ?debutTeam dbo:coach ?coach .
  ?coach dbo:name ""Chip Kelly"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?player) AS ?count)
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:debutTeam ?debutTeam .
  ?debutTeam dbo:coach ?coach .
  ?coach dbo:name ""Chip Kelly"" .
}",2.968021523431445e-155,0.06172839506172839,True,True
3871,How many characters are there in The Office?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/The_Office_(U.S._TV_series)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many characters are there in The Office?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?character) AS ?count)
WHERE {
  ?character dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/The_Office_(American_TV_series)> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?character) AS ?count)
WHERE {
  ?character dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/The_Office_(American_TV_series)> .
}",8.319100378795605e-232,0.04411764705882353,True,True
2075,Count the number of religions followed by BJP members.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/party> <http://dbpedia.org/resource/Bharatiya_Janata_Party> . ?x <http://dbpedia.org/ontology/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of religions followed by BJP members.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?person dbo:memberOf <http://en.wikipedia.org/wiki/Bharatiya_Janata_Party> .
  ?person dbo:religion ?religion .
}
GROUP BY ?religion
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?person dbo:memberOf <http://en.wikipedia.org/wiki/Bharatiya_Janata_Party> .
  ?person dbo:religion ?religion .
}
GROUP BY ?religion",3.1537059338519422e-155,0.06944444444444445,True,True
1905,Some movies whose screenplay is done by american born people?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/screenplay> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Some movies whose screenplay is done by american born people?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?movie ?screenwriter
WHERE {
  ?movie dbo:director ?screenwriter .
  ?screenwriter dbo:birthPlace ""United States"" .
  FILTER(?screenwriter != dbo:Unknown)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?movie ?screenwriter
WHERE {
  ?movie dbo:director ?screenwriter .
  ?screenwriter dbo:birthPlace ""United States"" .
  FILTER(?screenwriter != dbo:Unknown)
}",3.1961673212459418e-155,0.07894736842105263,True,True
4399,Count the number of members of the organization which have Austria as one of the member ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/membership> <http://dbpedia.org/resource/Austria> . ?x <http://dbpedia.org/property/membership> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of members of the organization which have Austria as one of the member ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organization ?count
WHERE {
  ?organization dbo:member ?member .
  ?member dbo:country ?country .
  ?country rdfs:label ""Austria"" .
  GROUP BY ?organization
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organization ?count
WHERE {
  ?organization dbo:member ?member .
  ?member dbo:country ?country .
  ?country rdfs:label ""Austria"" .
  GROUP BY ?organization
}",2.384592839964215e-155,0.06578947368421052,False,False
2293,Who is the headcoach of 2008-09 Marquette Golden Eagles men's basketball team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2008–09_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/property/headcoach> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the headcoach of 2008-09 Marquette Golden Eagles men's basketball team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?coach
WHERE {
  ?team dbo:headCoach ?coach .
  ?team rdfs:label ""2008-09 Marquette Golden Eagles men's basketball team"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?coach
WHERE {
  ?team dbo:headCoach ?coach .
  ?team rdfs:label ""2008-09 Marquette Golden Eagles men's basketball team"" .
}",2.294894159058245e-155,0.056338028169014086,True,True
1275,Which venue of Indy PopCon is also the death palce of Louis LeCocq?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indy_PopCon> <http://dbpedia.org/property/venue> ?uri. <http://dbpedia.org/resource/Louis_LeCocq> <http://dbpedia.org/property/placeOfDeath> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which venue of Indy PopCon is also the death palce of Louis LeCocq?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?venue
WHERE {
  ?venue dbo:location dbp:Indianapolis .
  ?venue dbo:name ?name .
  ?venue dbo:deathPlace ?deathPlace .
  FILTER ( ?deathPlace = <http://dbpedia.org/resource/Louis_LeCocq> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?venue
WHERE {
  ?venue dbo:location dbp:Indianapolis .
  ?venue dbo:name ?name .
  ?venue dbo:deathPlace ?deathPlace .
  FILTER ( ?deathPlace = <http://dbpedia.org/resource/Louis_LeCocq> )
}",2.8039101108246434e-155,0.0625,True,True
4480,Name the fictional character whose species is American Pekin duck and has relatives named Ludwig Von Drake?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/American_Pekin_duck> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ludwig_Von_Drake>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the fictional character whose species is American Pekin duck and has relatives named Ludwig Von Drake?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?character
WHERE {
  ?character dbo:species dbp:American_Pekin_duck .
  ?character dbo:relative ?relative .
  ?relative dbo:name ""Ludwig Von Drake"" .
  FILTER (STR(?character) != ""http://dbpedia.org/resource/Ludwig_von_Drake"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?character
WHERE {
  ?character dbo:species dbp:American_Pekin_duck .
  ?character dbo:relative ?relative .
  ?relative dbo:name ""Ludwig Von Drake"" .
  FILTER (STR(?character) != ""http://dbpedia.org/resource/Ludwig_von_Drake"")
}",8.296646461826084e-232,0.03571428571428571,True,True
871,Was Writings and Drawings illustrated by Bob Dylan?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Writings_and_Drawings> <http://dbpedia.org/property/illustrator> <http://dbpedia.org/resource/Bob_Dylan> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Writings and Drawings illustrated by Bob Dylan?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:title ""Writings and Drawings"" .
  ?x dbo:illustrator ?y .
  ?y rdfs:label ""Bob Dylan"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:title ""Writings and Drawings"" .
  ?x dbo:illustrator ?y .
  ?y rdfs:label ""Bob Dylan"" .
}",2.1880577381778143e-155,0.04411764705882353,True,True
711,Which party does Iqbal Singh and B Shiva Rao currently belong to?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Iqbal_Singh_(politician)> <http://dbpedia.org/property/party> ?uri. <http://dbpedia.org/resource/B._Shiva_Rao> <http://dbpedia.org/property/party> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which party does Iqbal Singh and B Shiva Rao currently belong to?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?party
WHERE {
  ?person a dbo:Person ;
    dbp:memberOf ?party .
  FILTER (regex(?person, ""Iqbal Singh"", ""i"") || regex(?person, ""B Shiva Rao"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?party
WHERE {
  ?person a dbo:Person ;
    dbp:memberOf ?party .
  FILTER (regex(?person, ""Iqbal Singh"", ""i"") || regex(?person, ""B Shiva Rao"", ""i""))
}",3.0025357216578434e-155,0.07407407407407407,True,True
3266,Name the scientist whose supervisor also supervised Mary Ainsworth?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Mary_Ainsworth> . ?uri <http://dbpedia.org/property/doctoralAdvisor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the scientist whose supervisor also supervised Mary Ainsworth?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:supervisor ?supervisor .
  ?supervisor dbo:supervisor Mary Ainsworth .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:supervisor ?supervisor .
  ?supervisor dbo:supervisor Mary Ainsworth .
}",3.2383880054191053e-155,0.07352941176470588,False,False
1127,Who is the common prime minster of William Deaner and Mark Latham?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Deane> <http://dbpedia.org/ontology/primeMinister> ?uri. <http://dbpedia.org/resource/Mark_Latham> <http://dbpedia.org/property/primeminister> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the common prime minster of William Deaner and Mark Latham?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?primeMinister
WHERE {
  ?person dbo:primeMinister ?primeMinister .
  FILTER ( ?person IN ( dbo:William_Deaner , dbo:Mark_Latham ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?primeMinister
WHERE {
  ?person dbo:primeMinister ?primeMinister .
  FILTER ( ?person IN ( dbo:William_Deaner , dbo:Mark_Latham ) )
}",2.7788812895482627e-155,0.05333333333333334,True,True
122,"Count all those who've played for the youth club which owns the Rosario, Santa Fe stadium.",google/gemma-2-9b-it,"SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Rosario,_Santa_Fe> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all those who've played for the youth club which owns the Rosario, Santa Fe stadium.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person
WHERE {
  ?person dbo:playsFor ?club .
  ?club dbo:stadium dbr:Rosario_Central_Stadium .
  FILTER (regex(?club, ""Rosario Central Youth"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person
WHERE {
  ?person dbo:playsFor ?club .
  ?club dbo:stadium dbr:Rosario_Central_Stadium .
  FILTER (regex(?club, ""Rosario Central Youth"", ""i""))
}",2.4957986594494052e-155,0.06172839506172839,True,True
1367,Name a person who was educated in Humes High School?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/education> <http://dbpedia.org/resource/Humes_High_School>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name a person who was educated in Humes High School?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:education ?school .
  ?school rdfs:label ""Humes High School"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:education ?school .
  ?school rdfs:label ""Humes High School"" .
}",8.147480343967206e-232,0.04411764705882353,True,True
4273,What is the parent company of PrivateCore?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/PrivateCore> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the parent company of PrivateCore?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parentCompany
WHERE {
  ?company dbo:name ""PrivateCore"" .
  ?company dbo:parentCompany ?parentCompany .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parentCompany
WHERE {
  ?company dbo:name ""PrivateCore"" .
  ?company dbo:parentCompany ?parentCompany .
}",8.289228799996742e-232,0.04838709677419355,True,True
3317,In how many nations can I find people related to the feminist movement?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/movement> <http://dbpedia.org/resource/Feminism> . ?x <http://dbpedia.org/ontology/nationality> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In how many nations can I find people related to the feminist movement?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?nation) AS ?count)
WHERE {
  ?person dbo:birthPlace ?nation .
  ?person dbo:occupation ""Feminist"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?nation) AS ?count)
WHERE {
  ?person dbo:birthPlace ?nation .
  ?person dbo:occupation ""Feminist"" .
}",3.075337680136661e-155,0.0641025641025641,True,True
1783,Who is the former partner of Chris Knierim?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chris_Knierim> <http://dbpedia.org/ontology/formerPartner> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the former partner of Chris Knierim?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?partner
WHERE {
  ?person dbo:name ""Chris Knierim"" .
  ?person dbo:partner ?partner .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?partner
WHERE {
  ?person dbo:name ""Chris Knierim"" .
  ?person dbo:partner ?partner .
}",2.494821638843469e-155,0.0625,True,True
2936,Under which scientist did doctoral students erban ieica and Erich Bagge study?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Șerban_Țițeica> . ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Erich_Bagge> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Under which scientist did doctoral students erban ieica and Erich Bagge study?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?scientist
WHERE {
  ?student dbo:doctoralAdvisor ?scientist .
  FILTER (regex(?student, ""erban ieica"", ""i"") || regex(?student, ""erich bagge"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?scientist
WHERE {
  ?student dbo:doctoralAdvisor ?scientist .
  FILTER (regex(?student, ""erban ieica"", ""i"") || regex(?student, ""erich bagge"", ""i""))
}",2.938309220081021e-155,0.06329113924050633,True,True
3278,Which birthplace of Svetlana Gounkina is also the largest city of Union State?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_State> <http://dbpedia.org/property/largestCity> ?uri. <http://dbpedia.org/resource/Svetlana_Gounkina> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which birthplace of Svetlana Gounkina is also the largest city of Union State?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?birthplace
WHERE {
  ?person dbo:name ""Svetlana Gounkina"" .
  ?person dbo:birthPlace ?birthplace .
  ?birthplace dbo:country ""Belarus"" .
  ?birthplace dbo:population ?population .
  FILTER(?population > 1000000)
  ?birthplace dbo:name ?city .
  ?city dbo:country ""Belarus"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?birthplace
WHERE {
  ?person dbo:name ""Svetlana Gounkina"" .
  ?person dbo:birthPlace ?birthplace .
  ?birthplace dbo:country ""Belarus"" .
  ?birthplace dbo:population ?population .
  FILTER(?population > 1000000)
  ?birthplace dbo:name ?city .
  ?city dbo:country ""Belarus"" .
}",2.5149879802969635e-155,0.04878048780487805,True,True
2514,What is the television show whose developer is J. Michael Straczynski?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/J._Michael_Straczynski>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the television show whose developer is J. Michael Straczynski?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?showLabel WHERE {
  ?show dbo:developer J.MichaelStraczynski .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?showLabel WHERE {
  ?show dbo:developer J.MichaelStraczynski .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",8.094051362019983e-232,0.04225352112676056,False,False
4918,During the reigns of which monarchs was the name to the Israelite kingdom as United Monarch?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Kingdom_of_Israel_(united_monarchy)> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: During the reigns of which monarchs was the name to the Israelite kingdom as United Monarch?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?monarch ?reignStart ?reignEnd
WHERE {
  ?monarch dbo:birthPlace ?birthPlace .
  ?monarch dbo:deathPlace ?deathPlace .
  ?monarch dbo:reignStart ?reignStart .
  ?monarch dbo:reignEnd ?reignEnd .
  ?monarch dbo:name ?name .
  FILTER (regex(?name, ""United Monarch"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?monarch ?reignStart ?reignEnd
WHERE {
  ?monarch dbo:birthPlace ?birthPlace .
  ?monarch dbo:deathPlace ?deathPlace .
  ?monarch dbo:reignStart ?reignStart .
  ?monarch dbo:reignEnd ?reignEnd .
  ?monarch dbo:name ?name .
  FILTER (regex(?name, ""United Monarch"", ""i""))
}",2.0939042922429456e-155,0.04819277108433735,True,True
1319,Which things are Breann McGregor known for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Breann_McGregor> <http://dbpedia.org/property/knownFor> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which things are Breann McGregor known for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?thing
WHERE {
  ?person dbo:name ""Breann McGregor"" .
  ?person dbo:knownFor ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?thing
WHERE {
  ?person dbo:name ""Breann McGregor"" .
  ?person dbo:knownFor ?thing .
}",3.1370721297783126e-155,0.07692307692307693,True,True
2941,What is the common award won by Charles LeMaire and Eric Roth,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/property/awards> ?uri. <http://dbpedia.org/resource/Eric_Roth> <http://dbpedia.org/ontology/award> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the common award won by Charles LeMaire and Eric Roth
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:award ?award .
  FILTER (regex(?person, ""Charles LeMaire"", ""i"") || regex(?person, ""Eric Roth"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:award ?award .
  FILTER (regex(?person, ""Charles LeMaire"", ""i"") || regex(?person, ""Eric Roth"", ""i""))
}",2.7788812895482627e-155,0.05128205128205128,True,True
3552,Name the Chris Marve's school ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chris_Marve> <http://dbpedia.org/ontology/school> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the Chris Marve's school ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Chris Marve"" .
  ?person dbp:almaMater ?school .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Chris Marve"" .
  ?person dbp:almaMater ?school .
}",2.530465559854518e-155,0.06451612903225806,True,True
901,Which are the countires where Pioneer Corporation has flourished?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pioneer_Corporation> <http://dbpedia.org/property/country> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which are the countires where Pioneer Corporation has flourished?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?company dbo: headquarters ?location .
  ?location dbo:country ?country .
  ?company dbo:name ""Pioneer Corporation"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?company dbo: headquarters ?location .
  ?location dbo:country ?country .
  ?company dbo:name ""Pioneer Corporation"" .
}",2.938309220081021e-155,0.07142857142857142,False,False
2394,How many shows belong to the network one of whose sister station is Cartoonite?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/sisterStation> <http://dbpedia.org/resource/Cartoonito> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many shows belong to the network one of whose sister station is Cartoonite?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?show) AS ?count)
WHERE {
  ?network dbo:sisterStation ?sisterStation .
  ?sisterStation rdfs:label ""Cartoonite"" .
  ?network dbo:shows ?show .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?show) AS ?count)
WHERE {
  ?network dbo:sisterStation ?sisterStation .
  ?sisterStation rdfs:label ""Cartoonite"" .
  ?network dbo:shows ?show .
}",2.4123225276763925e-155,0.04938271604938271,True,True
4519,What show had NTSC format and theme music composed byRon Grainer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/format> <http://dbpedia.org/resource/NTSC> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What show had NTSC format and theme music composed byRon Grainer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:format ?format .
  ?format dbo:name ""NTSC"" .
  ?show dbo:themeMusic ?music .
  ?music dbo:composer ?composer .
  ?composer dbo:name ""Ron Grainer"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:format ?format .
  ?format dbo:name ""NTSC"" .
  ?show dbo:themeMusic ?music .
  ?music dbo:composer ?composer .
  ?composer dbo:name ""Ron Grainer"" .
}",2.344734865707205e-155,0.05063291139240506,True,True
449,Who has starred in the amusement park attractions where Jim Dooley was performing?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Jim_Dooley> . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmusementParkAttraction>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who has starred in the amusement park attractions where Jim Dooley was performing?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?star
WHERE {
  ?attraction dbo:attractionType ""Amusement Park"".
  ?attraction dbo:performer ?performer .
  ?performer dbo:name ""Jim Dooley"".
  ?attraction dbo:star ?star .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?star
WHERE {
  ?attraction dbo:attractionType ""Amusement Park"".
  ?attraction dbo:performer ?performer .
  ?performer dbo:name ""Jim Dooley"".
  ?attraction dbo:star ?star .
}",2.968021523431445e-155,0.06172839506172839,True,True
3183,What are the musical performances whose label is Celluloid Records?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the musical performances whose label is Celluloid Records?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?performance
WHERE {
  ?performance dbo:label ""Celluloid Records"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?performance
WHERE {
  ?performance dbo:label ""Celluloid Records"" .
}",3.159243630213636e-155,0.07575757575757576,True,True
3398,"Who is the opponent of United States House of Representatives elections in Ohio, 2010 ?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010> <http://dbpedia.org/property/opponent> ?uri }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the opponent of United States House of Representatives elections in Ohio, 2010 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?opponent
WHERE {
  ?election dbo:opponent ?opponent .
  ?election dbo:location ""Ohio"" .
  ?election dbo:electionType ""United States House of Representatives elections"" .
  ?election dbo:year ""2010"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?opponent
WHERE {
  ?election dbo:opponent ?opponent .
  ?election dbo:location ""Ohio"" .
  ?election dbo:electionType ""United States House of Representatives elections"" .
  ?election dbo:year ""2010"" .
}",2.181647159764084e-155,0.05263157894736842,True,True
2208,In which state is Colemanville Covered Bridge located ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Colemanville_Covered_Bridge> <http://dbpedia.org/ontology/state> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which state is Colemanville Covered Bridge located ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?bridge dbo:location ?location .
  ?location dbo:country ""United States""^^xsd:string .
  ?location dbo:state ?state .
  FILTER (regex(?bridge, ""Colemanville Covered Bridge"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?bridge dbo:location ?location .
  ?location dbo:country ""United States""^^xsd:string .
  ?location dbo:state ?state .
  FILTER (regex(?bridge, ""Colemanville Covered Bridge"", ""i""))
}",2.322545481391416e-155,0.0547945205479452,True,True
1743,Panthera leo fossils and Liger belong to which species?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Panthera_leo_fossilis> <http://dbpedia.org/ontology/species> ?uri. <http://dbpedia.org/resource/Liger> <http://dbpedia.org/ontology/species> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Panthera leo fossils and Liger belong to which species?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?species
WHERE {
  ?fossil dbo:species ?species .
  FILTER (regex(?species, ""Panthera leo""))
  ?liger dbo:species ?species .
  FILTER (regex(?species, ""Panthera leo""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?species
WHERE {
  ?fossil dbo:species ?species .
  FILTER (regex(?species, ""Panthera leo""))
  ?liger dbo:species ?species .
  FILTER (regex(?species, ""Panthera leo""))
}",3.0382827129023445e-155,0.0821917808219178,True,True
1152,Whose commanders are Colin Powell and Jaber Al-Ahmad Al-Sabah?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Colin_Powell> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Jaber_Al-Ahmad_Al-Sabah> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose commanders are Colin Powell and Jaber Al-Ahmad Al-Sabah?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?country dbo:commander ?commander .
  ?commander dbo:name ""Colin Powell""^^xsd:string .
  FILTER (BOUND(?commander))
  ?commander dbo:name ""Jaber Al-Ahmad Al-Sabah""^^xsd:string .
  FILTER (BOUND(?commander))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?country dbo:commander ?commander .
  ?commander dbo:name ""Colin Powell""^^xsd:string .
  FILTER (BOUND(?commander))
  ?commander dbo:name ""Jaber Al-Ahmad Al-Sabah""^^xsd:string .
  FILTER (BOUND(?commander))
}",3.157656468883577e-155,0.08333333333333333,True,True
2049,Did Bob Dylan write the lyrics of the times they are a changin'?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/property/lyrics> <http://dbpedia.org/resource/Bob_Dylan> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Did Bob Dylan write the lyrics of the times they are a changin'?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?song
WHERE {
  ?song rdf:type dbo:Song .
  ?song dbo:title ""The Times They Are a-Changin'"" .
  ?song dbo:lyrics ?lyrics .
  ?lyrics dbo:author ?author .
  ?author dbo:name ""Bob Dylan"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?song
WHERE {
  ?song rdf:type dbo:Song .
  ?song dbo:title ""The Times They Are a-Changin'"" .
  ?song dbo:lyrics ?lyrics .
  ?lyrics dbo:author ?author .
  ?author dbo:name ""Bob Dylan"" .
}",2.0088791894285736e-155,0.038461538461538464,True,True
3908,What is the debut team of people born in Vargas?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vargas_(state)> . ?x <http://dbpedia.org/property/debutteam> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the debut team of people born in Vargas?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?debutTeam
WHERE {
  ?person dbo:birthPlace dbo:Vargas .
  ?person dbo:debutTeam ?debutTeam .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?debutTeam
WHERE {
  ?person dbo:birthPlace dbo:Vargas .
  ?person dbo:debutTeam ?debutTeam .
}",3.627276877392474e-155,0.08450704225352113,True,True
376,Name all those whose spouses have performed with Tony Bennett?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Tony_Bennett> . ?uri <http://dbpedia.org/ontology/spouse> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name all those whose spouses have performed with Tony Bennett?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbp:partnerOf ?tonyBennett .
  ?tonyBennett dbo:name ""Tony Bennett"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbp:partnerOf ?tonyBennett .
  ?tonyBennett dbo:name ""Tony Bennett"" .
}",3.6040982025556637e-155,0.0821917808219178,True,True
4101,Count the band members of Skull Gang?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Skull_Gang> <http://dbpedia.org/ontology/bandMember> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the band members of Skull Gang?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?memberCount
WHERE {
  ?band dbo:name ""Skull Gang"" .
  ?band dbo:member ?member .
  GROUP BY ?band
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?memberCount
WHERE {
  ?band dbo:name ""Skull Gang"" .
  ?band dbo:member ?member .
  GROUP BY ?band
}",2.4119102000777368e-155,0.056338028169014086,False,False
3265,Which territory of Tonkin campaign is also the death place of Theophane Venard ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tonkin_Campaign> <http://dbpedia.org/ontology/territory> ?uri. <http://dbpedia.org/resource/Théophane_Vénard> <http://dbpedia.org/ontology/deathPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which territory of Tonkin campaign is also the death place of Theophane Venard ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?territory
WHERE {
  ?territory dbo:wikiPageRedirects ?redirect
  ?redirect dbo:abstract ""Tonkin campaign"" .
  ?territory dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:wikiPageRedirects <http://dbpedia.org/resource/Theophane_Venard> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?territory
WHERE {
  ?territory dbo:wikiPageRedirects ?redirect
  ?redirect dbo:abstract ""Tonkin campaign"" .
  ?territory dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:wikiPageRedirects <http://dbpedia.org/resource/Theophane_Venard> .
}",2.6667146252330243e-155,0.05128205128205128,False,False
4795,Was John muir one of the first to ascend a mountain on Mt hoffmann?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/John_Muir> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was John muir one of the first to ascend a mountain on Mt hoffmann?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:birthPlace ""John Muir"" .
  ?x dbo:occupation ""Mountain climber"" .
  ?x dbo:mountainClimbed ""Mt. Hoffmann"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:birthPlace ""John Muir"" .
  ?x dbo:occupation ""Mountain climber"" .
  ?x dbo:mountainClimbed ""Mt. Hoffmann"" .
}",2.1108049473741715e-155,0.04054054054054054,True,True
4551,Is Christchurch the largest city of South Island?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/South_Island> <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Christchurch> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Christchurch the largest city of South Island?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?populationChristchurch ?populationSouthIsland
WHERE {
  ?city dbo:population ?populationChristchurch .
  FILTER(?city = <http://dbpedia.org/resource/Christchurch>)
  ?southIsland dbo:largestCity ?city .
  ?city dbo:population ?populationSouthIsland .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?populationChristchurch ?populationSouthIsland
WHERE {
  ?city dbo:population ?populationChristchurch .
  FILTER(?city = <http://dbpedia.org/resource/Christchurch>)
  ?southIsland dbo:largestCity ?city .
  ?city dbo:population ?populationSouthIsland .
}",2.1745921280630745e-155,0.04411764705882353,True,True
3520,Which religion is followed by the PM who was served by Chea Sim?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chea_Sim> <http://dbpedia.org/property/primeminister> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which religion is followed by the PM who was served by Chea Sim?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?pm dbo:servedBy ?cheasim .
  ?cheasim dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?pm dbo:servedBy ?cheasim .
  ?cheasim dbo:religion ?religion .
}",3.1335534263807668e-155,0.06944444444444445,True,True
2782,What is the sovereign state of the Dafydd Benfras where Jasmine Lowson is also citizen of?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dafydd_Benfras> <http://dbpedia.org/ontology/country> ?uri. <http://dbpedia.org/resource/Jasmine_Lowson> <http://dbpedia.org/ontology/citizenship> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the sovereign state of the Dafydd Benfras where Jasmine Lowson is also citizen of?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sovereignState
WHERE {
  ?person dbo:nationality ?sovereignState .
  FILTER ( ?person = <http://dbpedia.org/resource/Jasmine_Lowson> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sovereignState
WHERE {
  ?person dbo:nationality ?sovereignState .
  FILTER ( ?person = <http://dbpedia.org/resource/Jasmine_Lowson> )
}",2.8856766331839354e-155,0.0641025641025641,True,True
4458,What is the resting place of the child of Linda Lee Cadwell?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Lee_Cadwell> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the resting place of the child of Linda Lee Cadwell?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?restingPlace
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Linda Lee Cadwell""^^xsd:string .
  ?person dbo:child ?child .
  ?child dbo:restingPlace ?restingPlace .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?restingPlace
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Linda Lee Cadwell""^^xsd:string .
  ?person dbo:child ?child .
  ?child dbo:restingPlace ?restingPlace .
}",2.968021523431445e-155,0.06666666666666667,True,True
4929,In how many different places are Brown haired models living?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/hairColor> <http://dbpedia.org/resource/Brown_hair> . ?x <http://dbpedia.org/ontology/residence> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In how many different places are Brown haired models living?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?model dbo:hairColor ""Brown"" .
  ?model dbo:livingPlace ?place .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?model dbo:hairColor ""Brown"" .
  ?model dbo:livingPlace ?place .
}",3.1335534263807668e-155,0.06578947368421052,True,True
276,How many people are known for Dragons' Den?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Dragons'_Den_(UK_TV_series)>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people are known for Dragons' Den?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person dbo:knownFor ?show .
  ?show rdfs:label ""Dragons' Den"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person dbo:knownFor ?show .
  ?show rdfs:label ""Dragons' Den"" .
}",2.4440718429993668e-155,0.057971014492753624,True,True
2383,How many sports are played at the university whose president is Emanuel de Guzman?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/president> <http://dbpedia.org/resource/Emanuel_de_Guzman> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sport>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many sports are played at the university whose president is Emanuel de Guzman?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?sport)) AS ?count
WHERE {
  ?university dbo:president ?president .
  ?president dbo:name ""Emanuel de Guzman"" .
  ?university dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?sport)) AS ?count
WHERE {
  ?university dbo:president ?president .
  ?president dbo:name ""Emanuel de Guzman"" .
  ?university dbo:sports ?sport .
}",2.371081855250832e-155,0.04819277108433735,False,False
236,What is the major shrine of Jacques-Dsir Laval ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jacques-Désiré_Laval> <http://dbpedia.org/ontology/majorShrine> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the major shrine of Jacques-Dsir Laval ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?shrine
WHERE {
  ?person dbo:birthPlace <http://dbpedia.org/resource/Haiti> .
  ?person dbo:name ""Jacques-Dsir Laval"" .
  ?person dbo:majorShrine ?shrine .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?shrine
WHERE {
  ?person dbo:birthPlace <http://dbpedia.org/resource/Haiti> .
  ?person dbo:name ""Jacques-Dsir Laval"" .
  ?person dbo:majorShrine ?shrine .
}",2.4119102000777368e-155,0.05970149253731343,True,True
149,Who were all the people in office when bob hawke was the PM?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/primeMinister> <http://dbpedia.org/resource/Bob_Hawke> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who were all the people in office when bob hawke was the PM?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?role
WHERE {
  ?person dbo:primeMinister ?hawke .
  ?hawke dbo:termStart ?start .
  ?person dbo:termStart ?start .
  ?person dbo:termEnd ?end .
  FILTER(?start <= ?end)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?role
WHERE {
  ?person dbo:primeMinister ?hawke .
  ?hawke dbo:termStart ?start .
  ?person dbo:termStart ?start .
  ?person dbo:termEnd ?end .
  FILTER(?start <= ?end)
}",2.205362109328438e-155,0.05263157894736842,True,True
3837,Which sports exist in the universities whose president is Emanuel de Guzman?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Emanuel_de_Guzman> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports exist in the universities whose president is Emanuel de Guzman?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:president ?president .
  ?president dbo:name ""Emanuel de Guzman"" .
  ?university dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:president ?president .
  ?president dbo:name ""Emanuel de Guzman"" .
  ?university dbo:sports ?sport .
}",3.0202505652128895e-155,0.06493506493506493,True,True
64,In which team did Dave Bing and Ron Reed started their basketball career?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dave_Bing> <http://dbpedia.org/property/draftTeam> ?uri. <http://dbpedia.org/resource/Ron_Reed> <http://dbpedia.org/property/draftTeam> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which team did Dave Bing and Ron Reed started their basketball career?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:team ?team .
  FILTER ( ?player IN ( dbo:DaveBing , dbo:RonReed ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:team ?team .
  FILTER ( ?player IN ( dbo:DaveBing , dbo:RonReed ) )
}",2.9346708496857675e-155,0.07407407407407407,True,True
1832,Whose songs are Tickle Me and Viva Las Vegas?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tickle_Me> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/Viva_Las_Vegas> <http://dbpedia.org/property/artist> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose songs are Tickle Me and Viva Las Vegas?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?song dbo:title ""Tickle Me"" .
  ?song dbo:artist ?artist .
  
  ?song2 dbo:title ""Viva Las Vegas"" .
  ?song2 dbo:artist ?artist .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?song dbo:title ""Tickle Me"" .
  ?song dbo:artist ?artist .
  
  ?song2 dbo:title ""Viva Las Vegas"" .
  ?song2 dbo:artist ?artist .
}",3.3624125453069686e-155,0.08333333333333333,True,True
972,"Who is the founder of European School, Karlsruhe?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/European_School,_Karlsruhe> <http://dbpedia.org/property/founder> ?uri }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the founder of European School, Karlsruhe?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?founder
WHERE {
  ?school dbo:founder ?founder .
  FILTER (regex(?school, ""European School, Karlsruhe"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?founder
WHERE {
  ?school dbo:founder ?founder .
  FILTER (regex(?school, ""European School, Karlsruhe"", ""i""))
}",2.4775553999024465e-155,0.06060606060606061,True,True
4201,Does KOMC play Gospel Music?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/KOMC_(AM)> <http://dbpedia.org/ontology/programmeFormat> <http://dbpedia.org/resource/Gospel_music> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does KOMC play Gospel Music?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?genre
WHERE {
  ?artist dbo:genre ?genre .
  FILTER ( ?artist = <http://dbpedia.org/resource/KOMC> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?genre
WHERE {
  ?artist dbo:genre ?genre .
  FILTER ( ?artist = <http://dbpedia.org/resource/KOMC> )
}",2.3548635457910922e-155,0.047619047619047616,True,True
3012,"Where was Henri, Duke of Rohan laid to rest?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henri,_Duke_of_Rohan> <http://dbpedia.org/ontology/placeOfBurial> ?uri }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where was Henri, Duke of Rohan laid to rest?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace ?deathPlace .
  FILTER ( ?person = <http://dbpedia.org/resource/Henri,_Duke_of_Rohan> )
  ?deathPlace dbo:name ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace ?deathPlace .
  FILTER ( ?person = <http://dbpedia.org/resource/Henri,_Duke_of_Rohan> )
  ?deathPlace dbo:name ?location .
}",2.4708136900731027e-155,0.06944444444444445,True,True
702,Where are INKAS located which is also the state of origin for Jojo Chintoh?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jojo_Chintoh> <http://dbpedia.org/ontology/stateOfOrigin> ?uri. <http://dbpedia.org/resource/INKAS> <http://dbpedia.org/property/locations> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where are INKAS located which is also the state of origin for Jojo Chintoh?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?location dbo:country ?country .
  ?country dbo:name ""Nigeria""@en .
  ?person dbo:birthPlace ?location .
  ?person dbo:name ""Jojo Chintoh""@en .
  ?location dbo:name ?locationName .
  FILTER (regex(?locationName, ""INKAS"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?location dbo:country ?country .
  ?country dbo:name ""Nigeria""@en .
  ?person dbo:birthPlace ?location .
  ?person dbo:name ""Jojo Chintoh""@en .
  ?location dbo:name ?locationName .
  FILTER (regex(?locationName, ""INKAS"", ""i""))
}",2.5406524524079725e-155,0.04819277108433735,True,True
4833,Was Michael Schumacher the Pole driver of 1994 Spanish Grand Prix?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/property/poleDriver> <http://dbpedia.org/resource/Michael_Schumacher> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Michael Schumacher the Pole driver of 1994 Spanish Grand Prix?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:birthPlace ""Kerpen, Germany"" .
  ?x dbo:name ""Michael Schumacher"" .
  ?x dbo:startSeason ""1991"" .
  ?x dbo:endSeason ""2006"" .
  ?x dbo:participatedInEvent ?event .
  ?event dbo:name ""1994 Spanish Grand Prix"" .
  ?event dbo:polePosition ?poleDriver .
  ?poleDriver dbo:name ?x .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:birthPlace ""Kerpen, Germany"" .
  ?x dbo:name ""Michael Schumacher"" .
  ?x dbo:startSeason ""1991"" .
  ?x dbo:endSeason ""2006"" .
  ?x dbo:participatedInEvent ?event .
  ?event dbo:name ""1994 Spanish Grand Prix"" .
  ?event dbo:polePosition ?poleDriver .
  ?poleDriver dbo:name ?x .
}",1.9112994652876815e-155,0.0379746835443038,True,True
2920,Why did Letita McTavish Hargrave and Sextus Barbour die?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Letitia_MacTavish_Hargrave> <http://dbpedia.org/ontology/deathCause> ?uri. <http://dbpedia.org/resource/Sextus_Barbour> <http://dbpedia.org/property/deathCause> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Why did Letita McTavish Hargrave and Sextus Barbour die?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?reason
WHERE {
  ?person dbo:deathReason ?reason .
  FILTER (regex(?person, ""Letita McTavish Hargrave"", ""i"") || regex(?person, ""Sextus Barbour"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?reason
WHERE {
  ?person dbo:deathReason ?reason .
  FILTER (regex(?person, ""Letita McTavish Hargrave"", ""i"") || regex(?person, ""Sextus Barbour"", ""i""))
}",2.215756877004116e-155,0.04,True,True
952,Which mountain range is the one with Ponte d'Aveneyre and Le Gibloux?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pointe_d'Aveneyre> <http://dbpedia.org/ontology/mountainRange> ?uri. <http://dbpedia.org/resource/Le_Gibloux> <http://dbpedia.org/ontology/mountainRange> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which mountain range is the one with Ponte d'Aveneyre and Le Gibloux?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?mountainRange
WHERE {
  ?mountainRange dbo:locatedIn ?location .
  ?location dbo:name ""Ponte d'Aveneyre"" .
  ?location dbo:name ""Le Gibloux"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?mountainRange
WHERE {
  ?mountainRange dbo:locatedIn ?location .
  ?location dbo:name ""Ponte d'Aveneyre"" .
  ?location dbo:name ""Le Gibloux"" .
}",2.9029053187216252e-155,0.06756756756756757,True,True
3329,"Give me all office holders who finally retired in Montpelier, Orange, Virgina?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all office holders who finally retired in Montpelier, Orange, Virgina?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:placeOfBirth dbp:Montpelier .
  ?person dbo:placeOfDeath dbp:Montpelier .
  ?person dbo:occupation dbo:Politician .
  FILTER (regex(?personLabel, ""retired"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:placeOfBirth dbp:Montpelier .
  ?person dbo:placeOfDeath dbp:Montpelier .
  ?person dbo:occupation dbo:Politician .
  FILTER (regex(?personLabel, ""retired"", ""i""))
}",2.2552086692851858e-155,0.05063291139240506,True,True
2779,Name the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Georgina_Theodora_Wood> <http://dbpedia.org/ontology/nationality> ?uri. <http://dbpedia.org/resource/Akwasi_Oppong_Fosu> <http://dbpedia.org/ontology/nationality> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?nationality
WHERE {
  ?person dbo:nationality ?nationality .
  FILTER (regex(?person, ""Georgina Theodora Wood"", ""i"") || regex(?person, ""akwasi Oppong Fosu"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?nationality
WHERE {
  ?person dbo:nationality ?nationality .
  FILTER (regex(?person, ""Georgina Theodora Wood"", ""i"") || regex(?person, ""akwasi Oppong Fosu"", ""i""))
}",3.0202505652128895e-155,0.0759493670886076,True,True
4719,Give me some TV stations whose network's main language is American English?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/American_English> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionStation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me some TV stations whose network's main language is American English?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?station ?network
WHERE {
  ?station dbpedia:network ?network .
  ?network rdfs:label ""American English""@en .
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?station ?network
WHERE {
  ?station dbpedia:network ?network .
  ?network rdfs:label ""American English""@en .
}",3.1537059338519422e-155,0.06756756756756757,True,True
685,How many religions are followed by the people in the Royal Thai Army?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Royal_Thai_Army> . ?x <http://dbpedia.org/ontology/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many religions are followed by the people in the Royal Thai Army?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religionCount
WHERE {
  ?army dbo:follows ?religion .
  FILTER ( ?army = <http://dbpedia.org/resource/Royal_Thai_Army> )
  GROUP BY ?religion
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religionCount
WHERE {
  ?army dbo:follows ?religion .
  FILTER ( ?army = <http://dbpedia.org/resource/Royal_Thai_Army> )
  GROUP BY ?religion
}",2.60205383027793e-155,0.07792207792207792,False,False
207,What is the name of the movie whose director of photography was Jordan Cronenweth and music composer was Vangelis?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/Jordan_Cronenweth> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Vangelis>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the name of the movie whose director of photography was Jordan Cronenweth and music composer was Vangelis?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movieLabel WHERE {
  ?movie dbo:directorOfPhotography <http://dbpedia.org/resource/Jordan_Cronenweth> .
  ?movie dbo:musicComposer <http://dbpedia.org/resource/Vangelis> .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movieLabel WHERE {
  ?movie dbo:directorOfPhotography <http://dbpedia.org/resource/Jordan_Cronenweth> .
  ?movie dbo:musicComposer <http://dbpedia.org/resource/Vangelis> .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.951204860745888e-155,0.0625,False,False
36,List the teams for which Bobby Hoppe played ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bobby_Hoppe> <http://dbpedia.org/property/pastteams> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the teams for which Bobby Hoppe played ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:name ""Bobby Hoppe"" .
  ?player dbp:sportsTeam ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:name ""Bobby Hoppe"" .
  ?player dbp:sportsTeam ?team .
}",3.0940944781388835e-155,0.07692307692307693,True,True
750,Semani languages are spoken in which countries?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/languages> <http://dbpedia.org/resource/Semnani_languages>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Semani languages are spoken in which countries?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?language dbo:wikiPageRedirects ?semLanguage .
  ?semLanguage rdfs:label ""Semani""@en .
  ?language dbp:spokenIn ?country .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?language dbo:wikiPageRedirects ?semLanguage .
  ?semLanguage rdfs:label ""Semani""@en .
  ?language dbp:spokenIn ?country .
}",2.3962983105918537e-155,0.05714285714285714,True,True
690,From which state do the White Plum Asangas come?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/White_Plum_Asanga> . ?x <http://dbpedia.org/ontology/stateOfOrigin> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: From which state do the White Plum Asangas come?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?state
WHERE {
  ?fruit dbo:origin ?state .
  FILTER (regex(?fruit, ""White Plum Asangas"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?state
WHERE {
  ?fruit dbo:origin ?state .
  FILTER (regex(?fruit, ""White Plum Asangas"", ""i""))
}",3.216579438360415e-155,0.08450704225352113,True,True
423,"Who founded the city where First Church of Christ, Scientist is located?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/First_Church_of_Christ,_Scientist_(Pittsburgh)> <http://dbpedia.org/property/locationTown> ?x . ?x <http://dbpedia.org/ontology/founder> ?uri  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who founded the city where First Church of Christ, Scientist is located?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?founder
WHERE {
  ?church dbo:location ?city .
  ?city dbo:foundedBy ?founder .
  FILTER ( ?church = <http://dbpedia.org/resource/First_Church_of_Christ,_Scientist> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?founder
WHERE {
  ?church dbo:location ?city .
  ?city dbo:foundedBy ?founder .
  FILTER ( ?church = <http://dbpedia.org/resource/First_Church_of_Christ,_Scientist> )
}",2.5548810418069474e-155,0.06493506493506493,True,True
4650,Where did the people die who were known for Young Life?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Young_Life> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the people die who were known for Young Life?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?place
WHERE {
  ?person dbo:deathPlace ?place .
  ?person dbo:knownFor ""Young Life"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?place
WHERE {
  ?person dbo:deathPlace ?place .
  ?person dbo:knownFor ""Young Life"" .
}",3.1742523358973992e-155,0.07042253521126761,True,True
2048,List the things for which the relatives of Mrunalini Kunte are known?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mrunalini_Kunte> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/property/knownFor> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the things for which the relatives of Mrunalini Kunte are known?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:name ""Mrunalini Kunte"" .
  ?person dbo:spouse ?spouse .
  ?spouse dbo:knownFor ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:name ""Mrunalini Kunte"" .
  ?person dbo:spouse ?spouse .
  ?spouse dbo:knownFor ?thing .
}",3.4945213227383114e-155,0.08108108108108109,True,True
574,How many cities are around the sea into which the aegean sea flows?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Aegean_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many cities are around the sea into which the aegean sea flows?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city (COUNT(?city) AS ?cityCount)
WHERE {
  ?city dbo:locatedIn ?sea .
  ?sea dbo:connectedTo <http://dbpedia.org/resource/Aegean_Sea> .
  FILTER ( ?sea != <http://dbpedia.org/resource/Aegean_Sea> )
}
GROUP BY ?city
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city (COUNT(?city) AS ?cityCount)
WHERE {
  ?city dbo:locatedIn ?sea .
  ?sea dbo:connectedTo <http://dbpedia.org/resource/Aegean_Sea> .
  FILTER ( ?sea != <http://dbpedia.org/resource/Aegean_Sea> )
}
GROUP BY ?city",2.454081903007032e-155,0.06097560975609756,True,True
4382,Who are the people whose phD advisor was Harry Harlow?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Harry_Harlow>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the people whose phD advisor was Harry Harlow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:PhDAdvisor ?advisor .
  ?advisor dbo:name ""Harry Harlow"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:PhDAdvisor ?advisor .
  ?advisor dbo:name ""Harry Harlow"" .
}",2.4440718429993668e-155,0.057971014492753624,True,True
346,Name the office holder with predecessor as Samuel W. McCall and office in Massachusetts House of Representatives?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Samuel_W._McCall> . ?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Massachusetts_House_of_Representatives>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the office holder with predecessor as Samuel W. McCall and office in Massachusetts House of Representatives?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?successor
WHERE {
  ?successor dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Samuel W. McCall""^^xsd:string .
  ?successor dbo:office ?office .
  ?office dbo:location ""Massachusetts"" .
  ?office dbo:name ""House of Representatives"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?successor
WHERE {
  ?successor dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Samuel W. McCall""^^xsd:string .
  ?successor dbo:office ?office .
  ?office dbo:location ""Massachusetts"" .
  ?office dbo:name ""House of Representatives"" .
}",8.167977311814523e-232,0.03614457831325301,True,True
1538,Who manufactures the SHO V8?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_SHO_V8_engine> <http://dbpedia.org/ontology/manufacturer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who manufactures the SHO V8?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?manufacturer
WHERE {
  ?car dbo:manufacturer ?manufacturer .
  ?car dbo:name ""SHO V8"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?manufacturer
WHERE {
  ?car dbo:manufacturer ?manufacturer .
  ?car dbo:name ""SHO V8"" .
}",2.5488701582353735e-155,0.06557377049180328,True,True
1372,Does the Sicklefin lemon shark belong in the animal kingdom?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Sicklefin_lemon_shark> <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Animal> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the Sicklefin lemon shark belong in the animal kingdom?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:abstract ""Sicklefin lemon shark"" .
  ?x dbo:species ""Sicklefin lemon shark"" .
  ?x dbo:classification ?y .
  ?y dbo:higherClassification ?z .
  ?z dbo:name ""Animal"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:abstract ""Sicklefin lemon shark"" .
  ?x dbo:species ""Sicklefin lemon shark"" .
  ?x dbo:classification ?y .
  ?y dbo:higherClassification ?z .
  ?z dbo:name ""Animal"" .
}",2.0868169697040566e-155,0.043478260869565216,True,True
4849,What awards were presented to the person who produced Paradise place?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paradise_Place> <http://dbpedia.org/property/producer> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What awards were presented to the person who produced Paradise place?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?film dbo:director ?person .
  ?film rdfs:label ""Paradise Place"" .
  ?person dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?film dbo:director ?person .
  ?film rdfs:label ""Paradise Place"" .
  ?person dbo:award ?award .
}",3.0566417519593477e-155,0.06578947368421052,True,True
2664,Which country were the associates of Hilda Duhalde from?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hilda_de_Duhalde> <http://dbpedia.org/ontology/associate> ?x . ?x <http://dbpedia.org/ontology/nationality> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which country were the associates of Hilda Duhalde from?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?country
WHERE {
  ?person dbo:birthPlace ?country .
  ?person dbo:name ""Hilda Duhalde"" .
  ?person dbo:associate ?associate .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?country
WHERE {
  ?person dbo:birthPlace ?country .
  ?person dbo:name ""Hilda Duhalde"" .
  ?person dbo:associate ?associate .
}",3.559043432561587e-155,0.0821917808219178,True,True
4236,Who starred in Nothing in Common and produced From the Earth to the Moon?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/From_the_Earth_to_the_Moon_(miniseries)> <http://dbpedia.org/ontology/executiveProducer> ?uri. <http://dbpedia.org/resource/Nothing_in_Common> <http://dbpedia.org/property/starring> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who starred in Nothing in Common and produced From the Earth to the Moon?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?actor ?producer
WHERE {
  ?actor dbo:filmography ?movie .
  ?movie dbo:title ""Nothing in Common"" .
  ?producer dbo:produced ?movie .
  ?movie dbo:title ""From the Earth to the Moon"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?actor ?producer
WHERE {
  ?actor dbo:filmography ?movie .
  ?movie dbo:title ""Nothing in Common"" .
  ?producer dbo:produced ?movie .
  ?movie dbo:title ""From the Earth to the Moon"" .
}",3.127732480617132e-155,0.07692307692307693,True,True
439,Which fields are covered by academic journals in the US?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/country> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/property/discipline> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AcademicJournal>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which fields are covered by academic journals in the US?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?field
WHERE {
  ?journal dbo:country ""United States""^^xsd:string .
  ?journal dbo:field ?field .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?field
WHERE {
  ?journal dbo:country ""United States""^^xsd:string .
  ?journal dbo:field ?field .
}",3.216579438360415e-155,0.07042253521126761,True,True
1478,Where did the plays written by Robert Schenkkan take place?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Robert_Schenkkan> . ?x <http://dbpedia.org/property/place> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Play>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the plays written by Robert Schenkkan take place?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?play dbo:author ?author .
  ?author dbo:name ""Robert Schenkkan"" .
  ?play dbo:setting ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?play dbo:author ?author .
  ?author dbo:name ""Robert Schenkkan"" .
  ?play dbo:setting ?location .
}",3.075337680136661e-155,0.06666666666666667,True,True
1189,What is the product of the BBC Multimedia and series of the The Last Resort (Doctor Who)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/BBC_Multimedia> <http://dbpedia.org/property/products> ?uri. <http://dbpedia.org/resource/The_Last_Resort_(Doctor_Who)> <http://dbpedia.org/ontology/series> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the product of the BBC Multimedia and series of the The Last Resort (Doctor Who)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?product
WHERE {
  ?series dbo:title ""The Last Resort"" .
  ?series dbo:partOf ?product .
  ?product dbo:productionCompany dbo:BBCMultimedia .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?product
WHERE {
  ?series dbo:title ""The Last Resort"" .
  ?series dbo:partOf ?product .
  ?product dbo:productionCompany dbo:BBCMultimedia .
}",2.0868169697040566e-155,0.039473684210526314,True,True
1939,To which political party do the children of Sonia Gandhi belong?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sonia_Gandhi> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/party> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which political party do the children of Sonia Gandhi belong?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?party
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Sonia Gandhi""^^xsd:string .
  ?person dbo:father ?parent .
  ?parent dbo:politicalParty ?party .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?party
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Sonia Gandhi""^^xsd:string .
  ?person dbo:father ?parent .
  ?parent dbo:politicalParty ?party .
}",3.0566417519593477e-155,0.06756756756756757,True,True
4143,What are some famous veterinary physicians known for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/field> <http://dbpedia.org/resource/Veterinary_physician> . ?x <http://dbpedia.org/property/knownFor> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some famous veterinary physicians known for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subject ?knownFor
WHERE {
  ?subject dbo:type dbo:Veterinarian .
  ?subject dbo:knownFor ?knownFor .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subject ?knownFor
WHERE {
  ?subject dbo:type dbo:Veterinarian .
  ?subject dbo:knownFor ?knownFor .
}",3.6750083101231446e-155,0.08571428571428572,True,True
2037,What are the artists that are associated with the Framptons camel album?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Frampton's_Camel>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the artists that are associated with the Framptons camel album?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?artist
WHERE {
  ?album dbo:artist ?artist .
  ?album rdf:type dbo:Album .
  FILTER (regex(?album, ""Framptons camel"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?artist
WHERE {
  ?album dbo:artist ?artist .
  ?album rdf:type dbo:Album .
  FILTER (regex(?album, ""Framptons camel"", ""i""))
}",2.308595628361502e-155,0.05405405405405406,True,True
2108,What is the profession of William Luther Hill ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Luther_Hill> <http://dbpedia.org/ontology/profession> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the profession of William Luther Hill ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession
WHERE {
  <http://dbpedia.org/resource/William_Luther_Hill> dbo:profession ?profession .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession
WHERE {
  <http://dbpedia.org/resource/William_Luther_Hill> dbo:profession ?profession .
}",9.274792349638353e-79,0.08064516129032258,True,True
4171,What is the total number of professions in which someone who has suicided worked?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the total number of professions in which someone who has suicided worked?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?profession) AS ?totalProfessions)
WHERE {
  ?person dbo:deathCause ""Suicide"" .
  ?person dbo:occupation ?profession .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?profession) AS ?totalProfessions)
WHERE {
  ?person dbo:deathCause ""Suicide"" .
  ?person dbo:occupation ?profession .
}",3.1137823863213763e-155,0.06493506493506493,True,True
1727,What is the location of the Walter Evans Edge office which is also the place of birth of henry Miller ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Walter_Evans_Edge> <http://dbpedia.org/property/office> ?uri. <http://dbpedia.org/resource/Henry_Miller_Shreve> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the location of the Walter Evans Edge office which is also the place of birth of henry Miller ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?location
WHERE {
  ?office dbo:location ?location .
  ?office dbp:name ""Walter Evans Edge"" .
  ?miller dbo:birthPlace ?location .
  ?miller dbo:name ""Henry Miller"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?location
WHERE {
  ?office dbo:location ?location .
  ?office dbp:name ""Walter Evans Edge"" .
  ?miller dbo:birthPlace ?location .
  ?miller dbo:name ""Henry Miller"" .
}",1.9881679882945454e-155,0.036585365853658534,True,True
2590,Where did the beverage sold by Refriango originate?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Refriango> . ?x <http://dbpedia.org/property/origin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Beverage>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the beverage sold by Refriango originate?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?origin
WHERE {
  ?product dbo:brand ""Refriango"" .
  ?product dbp:origin ?origin .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?origin
WHERE {
  ?product dbo:brand ""Refriango"" .
  ?product dbp:origin ?origin .
}",3.2833699258334827e-155,0.07352941176470588,True,True
4087,List the websites which the authors of Tornado own ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tornado_(web_server)> <http://dbpedia.org/property/author> ?x . ?x <http://dbpedia.org/ontology/owner> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the websites which the authors of Tornado own ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?website
WHERE {
  ?author dbo:ownsWebsite ?website .
  ?author dbo:name ""Tornado"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?website
WHERE {
  ?author dbo:ownsWebsite ?website .
  ?author dbo:name ""Tornado"" .
}",3.650908595319347e-155,0.08571428571428572,True,True
2430,Where were Justina Machado and John Englehard born?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Justina_Machado> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/John_Englehart> <http://dbpedia.org/ontology/birthPlace> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where were Justina Machado and John Englehard born?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  FILTER (regex(?person, ""Justina Machado"", ""i"") || regex(?person, ""John Englehard"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  FILTER (regex(?person, ""Justina Machado"", ""i"") || regex(?person, ""John Englehard"", ""i""))
}",3.1537059338519422e-155,0.07894736842105263,True,True
1086,Who owns the newspaper which was founded by Nehru?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Jawaharlal_Nehru> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who owns the newspaper which was founded by Nehru?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?newspaper ?owner
WHERE {
  ?newspaper dbo:founder ?nehru .
  ?nehru dbo:name ""Nehru"" .
  ?newspaper dbo:owner ?owner .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?newspaper ?owner
WHERE {
  ?newspaper dbo:founder ?nehru .
  ?nehru dbo:name ""Nehru"" .
  ?newspaper dbo:owner ?owner .
}",2.50170125957988e-155,0.05555555555555555,True,True
1378,What belongs to the families of Buccinidae and Buccinoidea?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinidae> . ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinoidea> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What belongs to the families of Buccinidae and Buccinoidea?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?item
WHERE {
  ?item dbo:family ?family .
  FILTER (regex(?family, ""Buccinidae"", ""i"") || regex(?family, ""Buccinoidea"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?item
WHERE {
  ?item dbo:family ?family .
  FILTER (regex(?family, ""Buccinidae"", ""i"") || regex(?family, ""Buccinoidea"", ""i""))
}",3.1137823863213763e-155,0.08108108108108109,True,True
3938,Was Class Conflict an interest of Karl Marx?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Karl_Marx> <http://dbpedia.org/ontology/mainInterest> <http://dbpedia.org/resource/Class_conflict> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Class Conflict an interest of Karl Marx?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?interest
WHERE {
  ?person rdf:type dbo:Person ;
         dbo:name ""Karl Marx"" ;
         dbo:interest ?interest .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?interest
WHERE {
  ?person rdf:type dbo:Person ;
         dbo:name ""Karl Marx"" ;
         dbo:interest ?interest .
}",2.2445353519102238e-155,0.043478260869565216,True,True
2374,Does the north carolina highway 280 end in Arden?,google/gemma-2-9b-it,"ASK WHERE { <http://dbpedia.org/resource/North_Carolina_Highway_280> <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Arden,_North_Carolina> }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the north carolina highway 280 end in Arden?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?endLocation
WHERE {
  ?highway dbo:officialName ""North Carolina Highway 280"" .
  ?highway dbo:endLocation ?endLocation .
  FILTER (str(?endLocation) = ""Arden"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?endLocation
WHERE {
  ?highway dbo:officialName ""North Carolina Highway 280"" .
  ?highway dbo:endLocation ?endLocation .
  FILTER (str(?endLocation) = ""Arden"")
}",2.1745921280630745e-155,0.041666666666666664,True,True
468,Who gives the license of WXXV-DT2?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WXXV-DT2> <http://dbpedia.org/property/licensee> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who gives the license of WXXV-DT2?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?licensee
WHERE {
  ?station dbo:licensee ?licensee .
  FILTER (regex(?station, ""WXXV-DT2"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?licensee
WHERE {
  ?station dbo:licensee ?licensee .
  FILTER (regex(?station, ""WXXV-DT2"", ""i""))
}",2.5488701582353735e-155,0.06349206349206349,True,True
180,Which holy places did consider Pope Gregory I as a saint?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pope_Gregory_I> <http://dbpedia.org/property/veneratedIn> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which holy places did consider Pope Gregory I as a saint?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?holyPlace
WHERE {
  ?pope dbo:canonizedBy ?holyPlace .
  FILTER ( ?pope = <http://dbpedia.org/resource/Pope_Gregory_I> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?holyPlace
WHERE {
  ?pope dbo:canonizedBy ?holyPlace .
  FILTER ( ?pope = <http://dbpedia.org/resource/Pope_Gregory_I> )
}",3.1137823863213763e-155,0.08333333333333333,True,True
4952,Where did john o conner study?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_O'Connor_(archbishop_of_New_York)> <http://dbpedia.org/ontology/almaMater> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did john o conner study?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""John O'Connor"" .
  ?person dbo:educationPlace ?university .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""John O'Connor"" .
  ?person dbo:educationPlace ?university .
}",2.530465559854518e-155,0.06349206349206349,True,True
3787,Where did Allama Matthews study?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allama_Matthews> <http://dbpedia.org/ontology/college> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did Allama Matthews study?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""Allama Matthews"" .
  ?person dbo:educationPlace ?university .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""Allama Matthews"" .
  ?person dbo:educationPlace ?university .
}",2.5488701582353735e-155,0.06451612903225806,True,True
245,Count all the scientologists.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Scientology>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all the scientologists.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?subject
WHERE {
  ?subject dbo:religion ""Scientology"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?subject
WHERE {
  ?subject dbo:religion ""Scientology"" .
}",2.668419795632472e-155,0.06896551724137931,True,True
2567,How many molluscs are there whose families are Buccinidae and Buccinoidea?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinidae> . ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinoidea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many molluscs are there whose families are Buccinidae and Buccinoidea?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x rdf:type dbo:Mollusca .
  ?x dbo:family ?family .
  FILTER (regex(?family, ""Buccinidae"", ""i"") || regex(?family, ""Buccinoidea"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x rdf:type dbo:Mollusca .
  ?x dbo:family ?family .
  FILTER (regex(?family, ""Buccinidae"", ""i"") || regex(?family, ""Buccinoidea"", ""i""))
}",2.268207528392565e-155,0.05,True,True
3468,Bud Adams owns which american football team?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Bud_Adams>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Bud Adams owns which american football team?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?person dbo:owns ?team .
  ?person dbo:name ""Bud Adams"" .
  ?team dbo:type dbo:SportsTeam .
  FILTER (regex(?team, ""American football"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?person dbo:owns ?team .
  ?person dbo:name ""Bud Adams"" .
  ?team dbo:type dbo:SportsTeam .
  FILTER (regex(?team, ""American football"", ""i""))
}",8.017078581883202e-232,0.0410958904109589,True,True
1616,List everything in which saxophone players have been cast.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Saxophone> . ?uri <http://dbpedia.org/property/starring> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List everything in which saxophone players have been cast.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?work
WHERE {
  ?person dbo:occupation ""Saxophonist"" .
  ?person dbp:castIn ?work .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?work
WHERE {
  ?person dbo:occupation ""Saxophonist"" .
  ?person dbp:castIn ?work .
}",3.6750083101231446e-155,0.08450704225352113,True,True
146,What system is both a platform where Nord runs and also distributed The beauty inside?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nord_(video_game)> <http://dbpedia.org/ontology/computingPlatform> ?uri. <http://dbpedia.org/resource/The_Beauty_Inside> <http://dbpedia.org/ontology/distributor> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What system is both a platform where Nord runs and also distributed The beauty inside?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?system
WHERE {
  ?system dbo:wikiPageRedirects ?nordPlatform .
  ?nordPlatform dbo:wikiPageRedirects ?nord .
  ?nord dbo:description ""Nord"" .
  ?system dbo:wikiPageRedirects ?beautyInside .
  ?beautyInside dbo:description ""The beauty inside"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?system
WHERE {
  ?system dbo:wikiPageRedirects ?nordPlatform .
  ?nordPlatform dbo:wikiPageRedirects ?nord .
  ?nord dbo:description ""Nord"" .
  ?system dbo:wikiPageRedirects ?beautyInside .
  ?beautyInside dbo:description ""The beauty inside"" .
}",3.194645317303101e-155,0.07692307692307693,True,True
3686,Was Castillo discovered by Galileo?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Callisto_(moon)> <http://dbpedia.org/property/discoverer> <http://dbpedia.org/resource/Galileo_Galilei> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Castillo discovered by Galileo?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:discoveredBy <http://dbpedia.org/resource/Galileo_Galilei> .
  FILTER (regex(str(?x), ""Castillo"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:discoveredBy <http://dbpedia.org/resource/Galileo_Galilei> .
  FILTER (regex(str(?x), ""Castillo"", ""i""))
}",2.5676822842398837e-155,0.06451612903225806,True,True
4966,Which office holder's constituency is Haight-Ashbury and has military unit as USS Kittiwake ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Haight-Ashbury> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/USS_Kittiwake_(ASR-13)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which office holder's constituency is Haight-Ashbury and has military unit as USS Kittiwake ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?officeHolder ?officeHolderLabel
WHERE {
  ?officeHolder dbo:constituency ?constituency .
  ?constituency dbo:name ""Haight-Ashbury"" .
  ?officeHolder dbo:militaryUnit ?militaryUnit .
  ?militaryUnit dbo:name ""USS Kittiwake"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?officeHolder ?officeHolderLabel
WHERE {
  ?officeHolder dbo:constituency ?constituency .
  ?constituency dbo:name ""Haight-Ashbury"" .
  ?officeHolder dbo:militaryUnit ?militaryUnit .
  ?militaryUnit dbo:name ""USS Kittiwake"" .
}",2.344734865707205e-155,0.04938271604938271,True,True
1999,What is the mascot of Galatasaray Handball Team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Galatasaray_Handball_Team> <http://dbpedia.org/property/mascot> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the mascot of Galatasaray Handball Team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?mascot
WHERE {
  ?team dbo:name ""Galatasaray Handball Team"" .
  ?team dbo:mascot ?mascot .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?mascot
WHERE {
  ?team dbo:name ""Galatasaray Handball Team"" .
  ?team dbo:mascot ?mascot .
}",2.4606427705034855e-155,0.06153846153846154,True,True
802,Which awards did the narrator of Oscar and Lucinda win?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Oscar_and_Lucinda_(film)> <http://dbpedia.org/ontology/narrator> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which awards did the narrator of Oscar and Lucinda win?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:narratorOf <http://dbpedia.org/resource/Oscar_and_Lucinda> ;
  dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:narratorOf <http://dbpedia.org/resource/Oscar_and_Lucinda> ;
  dbo:award ?award .
}",3.608498281805203e-155,0.08695652173913043,True,True
1174,What is the nation of the Major All Stars Season 1 and Pioneer Corporation ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Major_All_Stars_Season_1> <http://dbpedia.org/property/country> ?uri. <http://dbpedia.org/resource/Pioneer_Corporation> <http://dbpedia.org/property/country> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the nation of the Major All Stars Season 1 and Pioneer Corporation ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?nationMajorStars ?nationPioneer
WHERE {
  ?majorStars dbo:country ?nationMajorStars .
  ?pioneer dbo:country ?nationPioneer .
  FILTER (regex(?nationMajorStars, ""United States"") || regex(?nationPioneer, ""Japan""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?nationMajorStars ?nationPioneer
WHERE {
  ?majorStars dbo:country ?nationMajorStars .
  ?pioneer dbo:country ?nationPioneer .
  FILTER (regex(?nationMajorStars, ""United States"") || regex(?nationPioneer, ""Japan""))
}",2.9346708496857675e-155,0.07407407407407407,True,True
3664,Do the polet airlines fly to moscow?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Polet_Airlines> <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Moscow> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Do the polet airlines fly to moscow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?airline
WHERE {
  ?airline dbo:name ""polet airlines"" .
  ?airline dbo:airlineDestination ?destination .
  ?destination dbo:name ""moscow"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?airline
WHERE {
  ?airline dbo:name ""polet airlines"" .
  ?airline dbo:airlineDestination ?destination .
  ?destination dbo:name ""moscow"" .
}",2.2300068516948962e-155,0.046153846153846156,True,True
1635,Name the television show directed by Simon Fuller and judged by Jennifier Lopez?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the television show directed by Simon Fuller and judged by Jennifier Lopez?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:director ?director .
  ?director dbo:name ""Simon Fuller"" .
  ?show dbo:judge ?judge .
  ?judge dbo:name ""Jennifer Lopez"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:director ?director .
  ?director dbo:name ""Simon Fuller"" .
  ?show dbo:judge ?judge .
  ?judge dbo:name ""Jennifer Lopez"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",8.231055179516831e-232,0.03614457831325301,False,False
4412,Which broad cast area of CFRX is the country of North America Poker Tour ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/CFRX> <http://dbpedia.org/ontology/broadcastArea> ?uri. <http://dbpedia.org/resource/North_American_Poker_Tour> <http://dbpedia.org/ontology/country> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which broad cast area of CFRX is the country of North America Poker Tour ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?broadcastArea
WHERE {
  ?broadcastArea dbo:country ?country .
  ?country rdfs:label ""North America"" .
  ?broadcastArea dbo:broadcasts ?event .
  ?event dbo:name ""North America Poker Tour"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?broadcastArea
WHERE {
  ?broadcastArea dbo:country ?country .
  ?country rdfs:label ""North America"" .
  ?broadcastArea dbo:broadcasts ?event .
  ?event dbo:name ""North America Poker Tour"" .
}",2.5944303248170386e-155,0.05,True,True
3724,Name some sports played in institutions of Maharashtra?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/state> <http://dbpedia.org/resource/Maharashtra> . ?x <http://dbpedia.org/ontology/sport> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name some sports played in institutions of Maharashtra?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?institution dbo:location dbp:Maharashtra .
  ?institution dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?institution dbo:location dbp:Maharashtra .
  ?institution dbo:sports ?sport .
}",3.699591675882789e-155,0.08571428571428572,True,True
4840,South Side elevated railroad and twin cities 400 are operated by which city?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Twin_Cities_400> <http://dbpedia.org/ontology/operatedBy> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: South Side elevated railroad and twin cities 400 are operated by which city?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?railroad dbo:operatedBy ?city .
  FILTER (regex(?railroad, ""South Side elevated railroad"") || regex(?railroad, ""twin cities 400""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?railroad dbo:operatedBy ?city .
  FILTER (regex(?railroad, ""South Side elevated railroad"") || regex(?railroad, ""twin cities 400""))
}",2.4123225276763925e-155,0.06329113924050633,True,True
3667,Name some islands in a pacific archipelago?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Pacific_Ocean> . ?uri <http://dbpedia.org/property/archipelago> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Island>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name some islands in a pacific archipelago?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?islandLabel
WHERE {
  ?island dbo:location ?location .
  ?location dbo:continent ""Pacific Ocean""^^xsd:string .
  ?island rdfs:label ?islandLabel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?islandLabel
WHERE {
  ?island dbo:location ?location .
  ?location dbo:continent ""Pacific Ocean""^^xsd:string .
  ?island rdfs:label ?islandLabel .
}",3.1335534263807668e-155,0.06944444444444445,True,True
1286,Is Lancy a city close to Geneva?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Geneva> <http://dbpedia.org/ontology/neighboringMunicipality> <http://dbpedia.org/resource/Lancy> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Lancy a city close to Geneva?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?distance
WHERE {
  ?city dbo:name ""Lancy"" .
  ?city dbo:locatedIn ?country .
  ?country dbo:name ""Switzerland"" .
  ?city dbp:distanceTo ?otherCity .
  ?otherCity dbo:name ""Geneva"" .
  ?distance a dbo:Distance ;
    dbo:value ?distance .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?distance
WHERE {
  ?city dbo:name ""Lancy"" .
  ?city dbo:locatedIn ?country .
  ?country dbo:name ""Switzerland"" .
  ?city dbp:distanceTo ?otherCity .
  ?otherCity dbo:name ""Geneva"" .
  ?distance a dbo:Distance ;
    dbo:value ?distance .
}",2.0523206950207848e-155,0.04225352112676056,True,True
3065,Which fictional character is portrayed by Roger Barton (film editor)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/portrayer> <http://dbpedia.org/resource/Roger_Barton_(film_editor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which fictional character is portrayed by Roger Barton (film editor)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?character
WHERE {
  ?character dbo:portrayedBy ?editor .
  ?editor dbo:name ""Roger Barton"" .
  FILTER ( ?character rdfs:type dbo:FictionalCharacter )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?character
WHERE {
  ?character dbo:portrayedBy ?editor .
  ?editor dbo:name ""Roger Barton"" .
  FILTER ( ?character rdfs:type dbo:FictionalCharacter )
}",7.943631954232605e-232,0.039473684210526314,False,False
4759,What are the houses of legislature in the political leader's seat of Medininagar?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Medininagar> <http://dbpedia.org/property/leaderTitle> ?x . ?x <http://dbpedia.org/property/houses> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Legislature>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the houses of legislature in the political leader's seat of Medininagar?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?house
WHERE {
  ?leader dbo:seat ?location .
  ?location dbo:name ""Medininagar"" .
  ?location dbo:legislativeBody ?house .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?house
WHERE {
  ?leader dbo:seat ?location .
  ?location dbo:name ""Medininagar"" .
  ?location dbo:legislativeBody ?house .
}",3.0382827129023445e-155,0.06666666666666667,True,True
2759,How many different genres of games can I find which are compatible with the Commodore 64?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Commodore_64> . ?x <http://dbpedia.org/property/genre> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many different genres of games can I find which are compatible with the Commodore 64?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?genre
WHERE {
  ?game dbo:compatibleWith dbr:Commodore_64 .
  ?game dbo:genre ?genre .
}
GROUP BY ?genre
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?genre
WHERE {
  ?game dbo:compatibleWith dbr:Commodore_64 .
  ?game dbo:genre ?genre .
}
GROUP BY ?genre",3.0202505652128895e-155,0.06329113924050633,True,True
2190,Who is the owner of  Chelsea F.C. ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chelsea_F.C.> <http://dbpedia.org/property/owner> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the owner of  Chelsea F.C. ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?owner
WHERE {
  ?club dbo:name ""Chelsea F.C."" .
  ?club dbo:owner ?owner .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?owner
WHERE {
  ?club dbo:name ""Chelsea F.C."" .
  ?club dbo:owner ?owner .
}",2.494821638843469e-155,0.0625,True,True
716,Does Cascade Airways have a hub in Seattle?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Cascade_Airways> <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Seattle> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Cascade Airways have a hub in Seattle?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hub
WHERE {
  ?airline dbo:name ""Cascade Airways"" .
  ?airline dbo:hub ?hub .
  FILTER (str(?hub) = ""Seattle"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hub
WHERE {
  ?airline dbo:name ""Cascade Airways"" .
  ?airline dbo:hub ?hub .
  FILTER (str(?hub) = ""Seattle"")
}",2.259351571061102e-155,0.04477611940298507,True,True
3909,Which companies have Kumho Asiana Group as their parent company?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parentCompany> <http://dbpedia.org/resource/Kumho_Asiana_Group> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which companies have Kumho Asiana Group as their parent company?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:parentOrganization dbp:Kumho_Asiana_Group .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:parentOrganization dbp:Kumho_Asiana_Group .
}",2.4775553999024465e-155,0.05970149253731343,True,True
1850,What is the city of the 2015 MLS All-Star Game and birthplace of the The Okee Dokee Brothers?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_MLS_All-Star_Game> <http://dbpedia.org/property/city> ?uri. <http://dbpedia.org/resource/The_Okee_Dokee_Brothers> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the city of the 2015 MLS All-Star Game and birthplace of the The Okee Dokee Brothers?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city1 ?city2
WHERE {
  ?game dbo:location ?city1 .
  FILTER(?game = <http://dbpedia.org/resource/2015_MLS_All-Star_Game>)
  ?person dbo:birthPlace ?city2 .
  FILTER(?person IN (
    <http://dbpedia.org/resource/Joe_Mailander>,
    <http://dbpedia.org/resource/Justin_""J.D.""_O'Keefe>
  ))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city1 ?city2
WHERE {
  ?game dbo:location ?city1 .
  FILTER(?game = <http://dbpedia.org/resource/2015_MLS_All-Star_Game>)
  ?person dbo:birthPlace ?city2 .
  FILTER(?person IN (
    <http://dbpedia.org/resource/Joe_Mailander>,
    <http://dbpedia.org/resource/Justin_""J.D.""_O'Keefe>
  ))
}",2.0302514477228347e-155,0.03571428571428571,False,False
2305,List TV shows with producer as Erik Bork and company is DreamWorks Television ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/DreamWorks_Television> . ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Erik_Bork>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List TV shows with producer as Erik Bork and company is DreamWorks Television ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:producer dbr:Erik_Bork .
  ?show dbo:company dbr:DreamWorks_Television .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:producer dbr:Erik_Bork .
  ?show dbo:company dbr:DreamWorks_Television .
}",2.486113577066771e-155,0.05263157894736842,True,True
987,Is Peter Piper Pizza in the pizza industry?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Peter_Piper_Pizza> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Pizza> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Peter Piper Pizza in the pizza industry?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?industry
WHERE {
  ?pizza dbo:industry ?industry .
  FILTER (regex(?pizza, ""Peter Piper Pizza"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?industry
WHERE {
  ?pizza dbo:industry ?industry .
  FILTER (regex(?pizza, ""Peter Piper Pizza"", ""i""))
}",2.305625093843957e-155,0.046153846153846156,True,True
3271,Count all the universities who participated in the tournament won by Alabama Crimson Tides in 2015 ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/champion> <http://dbpedia.org/resource/2015_Alabama_Crimson_Tide_football_team> . ?uri <http://dbpedia.org/property/athletics> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all the universities who participated in the tournament won by Alabama Crimson Tides in 2015 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?university
WHERE {
  ?tournament dbo:winner <http://dbpedia.org/resource/Alabama_Crimson_Tides> .
  ?tournament dbo:year ""2015""^^xsd:gYear .
  ?tournament dbo:participant ?university .
  FILTER ( ?university != <http://dbpedia.org/resource/Alabama_Crimson_Tides> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?university
WHERE {
  ?tournament dbo:winner <http://dbpedia.org/resource/Alabama_Crimson_Tides> .
  ?tournament dbo:year ""2015""^^xsd:gYear .
  ?tournament dbo:participant ?university .
  FILTER ( ?university != <http://dbpedia.org/resource/Alabama_Crimson_Tides> )
}",2.3192471031465984e-155,0.04819277108433735,True,True
1276,"What state was Cyrus Mann born in, and has the famous Downriver?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Downriver> <http://dbpedia.org/ontology/state> ?uri. <http://dbpedia.org/resource/Cyrus_Mann> <http://dbpedia.org/property/birthPlace> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What state was Cyrus Mann born in, and has the famous Downriver?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?state
WHERE {
  ?person dbo:birthPlace ?state .
  ?person dbo:name ""Cyrus Mann"" .
  ?location dbo:name ""Downriver"" ;
    dbp:locatedIn ?state .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?state
WHERE {
  ?person dbo:birthPlace ?state .
  ?person dbo:name ""Cyrus Mann"" .
  ?location dbo:name ""Downriver"" ;
    dbp:locatedIn ?state .
}",2.868751113594075e-155,0.06493506493506493,True,True
4349,Which TV show's company is PlayTone and is produced by Stephen E. Ambrose ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Playtone> . ?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which TV show's company is PlayTone and is produced by Stephen E. Ambrose ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:productionCompany ?company .
  ?company dbo:name ""PlayTone"" .
  ?show dbo:director ?director .
  ?director dbo:name ""Stephen E. Ambrose"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:productionCompany ?company .
  ?company dbo:name ""PlayTone"" .
  ?show dbo:director ?director .
  ?director dbo:name ""Stephen E. Ambrose"" .
}",2.344734865707205e-155,0.05063291139240506,True,True
4644,"How many teams was Garry Unger in, previously?",google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Garry_Unger> <http://dbpedia.org/ontology/formerTeam> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many teams was Garry Unger in, previously?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?teamCount
WHERE {
  ?player dbo:name ""Garry Unger"" .
  ?player dbo:previousTeams ?team .
  GROUP BY ?player
  
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?teamCount
WHERE {
  ?player dbo:name ""Garry Unger"" .
  ?player dbo:previousTeams ?team .
  GROUP BY ?player
  
}",2.4440718429993668e-155,0.056338028169014086,False,False
2555,List the name of those who became famous for something garrisoned at Tennessee?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Tennessee> . ?uri <http://dbpedia.org/property/knownFor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the name of those who became famous for something garrisoned at Tennessee?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name
WHERE {
  ?person dbo:birthPlace dbp:Tennessee .
  ?person dbo:knownFor ?thing .
  ?thing dbo:location dbp:Tennessee .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name
WHERE {
  ?person dbo:birthPlace dbp:Tennessee .
  ?person dbo:knownFor ?thing .
  ?thing dbo:location dbp:Tennessee .
}",3.4945213227383114e-155,0.08,True,True
4968,Which TV show's writer is Erik Jendresen and distributor is HBO?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/HBO>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which TV show's writer is Erik Jendresen and distributor is HBO?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:writer ErikJendresen .
  ?show dbo:distributor HBO .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:writer ErikJendresen .
  ?show dbo:distributor HBO .
}",2.533776972251024e-155,0.05555555555555555,False,False
2644,What are some cars similar to the ones assembled at Toluca?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Toluca> . ?x <http://dbpedia.org/property/related> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some cars similar to the ones assembled at Toluca?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?car
WHERE {
  ?car dbo:assemblyLocation <http://dbpedia.org/resource/Toluca> .
  ?car dbo:manufacturer ?manufacturer .
  ?similarCar dbo:manufacturer ?manufacturer .
  FILTER (NOT EXISTS { ?car ?p ?o . })
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?car
WHERE {
  ?car dbo:assemblyLocation <http://dbpedia.org/resource/Toluca> .
  ?car dbo:manufacturer ?manufacturer .
  ?similarCar dbo:manufacturer ?manufacturer .
  FILTER (NOT EXISTS { ?car ?p ?o . })
}",3.3566500347661918e-155,0.075,True,True
4707,What is the allegiance of Albert Kwesi Ocran ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albert_Kwesi_Ocran> <http://dbpedia.org/property/allegiance> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the allegiance of Albert Kwesi Ocran ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?allegiance
WHERE {
  ?person dbo:name ""Albert Kwesi Ocran"" .
  ?person dbo:allegiance ?allegiance .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?allegiance
WHERE {
  ?person dbo:name ""Albert Kwesi Ocran"" .
  ?person dbo:allegiance ?allegiance .
}",2.4606427705034855e-155,0.06153846153846154,True,True
605,Name the scientist who was the winner of Royal Society award and had Georg Meissner as his doctoral advisor ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Royal_Society> . ?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the scientist who was the winner of Royal Society award and had Georg Meissner as his doctoral advisor ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?scientist
WHERE {
  ?scientist dbo:award <http://dbpedia.org/resource/Royal_Society_Award> .
  ?scientist dbo:advisor ?advisor .
  ?advisor dbo:name ""Georg Meissner"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?scientist
WHERE {
  ?scientist dbo:award <http://dbpedia.org/resource/Royal_Society_Award> .
  ?scientist dbo:advisor ?advisor .
  ?advisor dbo:name ""Georg Meissner"" .
}",8.34186146802972e-232,0.036585365853658534,True,True
2321,Does the white river flow into the connecticut river?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Connecticut_River> <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/White_River_(Vermont)> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the white river flow into the connecticut river?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""White River"" .
  ?x dbo:mouth ?y .
  ?y dbo:name ""Connecticut River"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""White River"" .
  ?x dbo:mouth ?y .
  ?y dbo:name ""Connecticut River"" .
}",2.2300068516948962e-155,0.046875,True,True
3617,Where did Louis chevrolet die ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Louis_Chevrolet> <http://dbpedia.org/property/deathPlace> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did Louis chevrolet die ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:name ""Louis Chevrolet"" .
  ?person dbo:deathPlace ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:name ""Louis Chevrolet"" .
  ?person dbo:deathPlace ?location .
}",2.530465559854518e-155,0.06349206349206349,True,True
2945,Which river has its roots in Baikal Mountains?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Baikal_Mountains> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which river has its roots in Baikal Mountains?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?river
WHERE {
  ?river dbo:source ?source .
  ?source dbo:locatedIn <http://dbpedia.org/resource/Baikal_Mountains> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?river
WHERE {
  ?river dbo:source ?source .
  ?source dbo:locatedIn <http://dbpedia.org/resource/Baikal_Mountains> .
}",2.6379527083228047e-155,0.07692307692307693,True,True
2415,List the relative of Tim Nanai-Williams ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tim_Nanai-Williams> <http://dbpedia.org/ontology/relative> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the relative of Tim Nanai-Williams ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?relative
WHERE {
  ?person dbo:name ""Tim Nanai-Williams"" .
  ?person dbo:relative ?relative .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?relative
WHERE {
  ?person dbo:name ""Tim Nanai-Williams"" .
  ?person dbo:relative ?relative .
}",3.1370721297783126e-155,0.078125,True,True
3688,Who are the chancellors of universities which is affiliated with Plymouth University?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Plymouth_University> . ?x <http://dbpedia.org/property/chancellor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the chancellors of universities which is affiliated with Plymouth University?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?chancellor ?university
WHERE {
  ?university dbo:affiliatedWith <http://dbpedia.org/resource/Plymouth_University> .
  ?university rdfs:label ?universityLabel .
  ?university dbo:chancellor ?chancellor .
  ?chancellor rdfs:label ?chancellorLabel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?chancellor ?university
WHERE {
  ?university dbo:affiliatedWith <http://dbpedia.org/resource/Plymouth_University> .
  ?university rdfs:label ?universityLabel .
  ?university dbo:chancellor ?chancellor .
  ?chancellor rdfs:label ?chancellorLabel .
}",3.4137094800074316e-155,0.07792207792207792,True,True
2864,From how many different places have participants of Breeders's Cup Turf come?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/race> <http://dbpedia.org/resource/Breeders'_Cup_Turf> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: From how many different places have participants of Breeders's Cup Turf come?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?participant dbo:birthPlace ?place .
  ?participant dbo:participatedIn ?event .
  ?event rdfs:label ""Breeders' Cup Turf"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?participant dbo:birthPlace ?place .
  ?participant dbo:participatedIn ?event .
  ?event rdfs:label ""Breeders' Cup Turf"" .
}",2.9851289841006984e-155,0.06172839506172839,True,True
4071,Who gave the musical score of 9 to 5 (musical) ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/9_to_5_(musical)> <http://dbpedia.org/ontology/musicBy> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who gave the musical score of 9 to 5 (musical) ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?composer
WHERE {
  ?musical dbo:composer ?composer .
  FILTER (str(?musical) = ""9 to 5 (musical)"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?composer
WHERE {
  ?musical dbo:composer ?composer .
  FILTER (str(?musical) = ""9 to 5 (musical)"")
}",2.4119102000777368e-155,0.057971014492753624,True,True
3342,Who is the leader of Allgemeine SS ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allgemeine_SS> <http://dbpedia.org/ontology/leader> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the leader of Allgemeine SS ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?leader
WHERE {
  ?leader dbo:leaderOf <http://dbpedia.org/resource/Allgemeine_SS> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?leader
WHERE {
  ?leader dbo:leaderOf <http://dbpedia.org/resource/Allgemeine_SS> .
}",2.7353319119103705e-155,0.08196721311475409,True,True
4618,How many movies are distributed by Cinema International Corporation?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many movies are distributed by Cinema International Corporation?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:distributor dbo:Cinema_International_Corporation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:distributor dbo:Cinema_International_Corporation .
}",8.289228799996742e-232,0.043478260869565216,True,True
4199,Does Chicago own the Monroe Station?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Monroe_station_(CTA_Blue_Line)> <http://dbpedia.org/property/owned> <http://dbpedia.org/resource/Chicago> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Chicago own the Monroe Station?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:officialName ""Chicago"" .
  ?x dbo:owns ?y .
  ?y dbo:officialName ""Monroe Station"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:officialName ""Chicago"" .
  ?x dbo:owns ?y .
  ?y dbo:officialName ""Monroe Station"" .
}",2.2898861187450904e-155,0.04838709677419355,True,True
4653,Give me a count of movies whose editor is Mark Stevens?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me a count of movies whose editor is Mark Stevens?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Mark Stevens"" .
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Mark Stevens"" .
}",8.094051362019983e-232,0.0410958904109589,True,True
230,Which Fox show is presented by Ryan Seacrest?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest> . ?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which Fox show is presented by Ryan Seacrest?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:presentedBy ?person .
  ?person dbo:name ""Ryan Seacrest"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:presentedBy ?person .
  ?person dbo:name ""Ryan Seacrest"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",8.561894227089738e-232,0.03896103896103896,False,False
1168,Name the river passing through Reading Berkshire and has mouth place at Essex?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Reading,_Berkshire> . ?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the river passing through Reading Berkshire and has mouth place at Essex?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:locatedIn ?location .
  ?location dbo:name ""Reading, Berkshire""@en .
  ?river dbo:mouthPlace ?mouthPlace .
  ?mouthPlace dbo:name ?mouthName .
  FILTER (regex(?mouthName, ""Essex"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:locatedIn ?location .
  ?location dbo:name ""Reading, Berkshire""@en .
  ?river dbo:mouthPlace ?mouthPlace .
  ?mouthPlace dbo:name ?mouthName .
  FILTER (regex(?mouthName, ""Essex"", ""i""))
}",8.319100378795605e-232,0.037037037037037035,True,True
2007,What is the currency of Republic of Montenegro (1992-2006) ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Republic_of_Montenegro_(1992–2006)> <http://dbpedia.org/property/currency> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the currency of Republic of Montenegro (1992-2006) ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?currency
WHERE {
  ?country dbo:name ""Republic of Montenegro"" .
  ?country dbo:officialCurrency ?currency .
  FILTER (regex(?country rdfs:label ""Republic of Montenegro"", ""1992-2006""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?currency
WHERE {
  ?country dbo:name ""Republic of Montenegro"" .
  ?country dbo:officialCurrency ?currency .
  FILTER (regex(?country rdfs:label ""Republic of Montenegro"", ""1992-2006""))
}",2.294894159058245e-155,0.05555555555555555,False,False
3330,What is the headquarters of Juan Dalmau Ramerez?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juan_Dalmau_Ramírez> <http://dbpedia.org/property/headquarters> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the headquarters of Juan Dalmau Ramerez?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?headquarters
WHERE {
  ?person dbo:name ""Juan Dalmau Ramerez"" .
  ?person dbo:headquarters ?headquarters .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?headquarters
WHERE {
  ?person dbo:name ""Juan Dalmau Ramerez"" .
  ?person dbo:headquarters ?headquarters .
}",2.4775553999024465e-155,0.0625,True,True
3921,Name the television program voiced by Isaac Hayes and aired on Comedy Central?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes> . ?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the television program voiced by Isaac Hayes and aired on Comedy Central?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?program
WHERE {
  ?program dbo:voicedBy ?actor .
  ?actor dbo:name ""Isaac Hayes"" .
  ?program dbo:broadcastNetwork dbo:ComedyCentral .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?program
WHERE {
  ?program dbo:voicedBy ?actor .
  ?actor dbo:name ""Isaac Hayes"" .
  ?program dbo:broadcastNetwork dbo:ComedyCentral .
}",8.510469113101058e-232,0.039473684210526314,True,True
3229,Name the award given in Norway and presented by Swedish Academy ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Swedish_Academy> . ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Norway>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the award given in Norway and presented by Swedish Academy ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?awardName
WHERE {
  ?award dbo:awardName ?awardName .
  ?award dbo:presentedBy ?presentedBy .
  ?presentedBy dbo:country ?country .
  FILTER(?country = ""Sweden"")
  ?award dbo:location ?location .
  FILTER(?location = ""Norway"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?awardName
WHERE {
  ?award dbo:awardName ?awardName .
  ?award dbo:presentedBy ?presentedBy .
  ?presentedBy dbo:country ?country .
  FILTER(?country = ""Sweden"")
  ?award dbo:location ?location .
  FILTER(?location = ""Norway"")
}",8.319100378795605e-232,0.037037037037037035,True,True
984,List all the doctoral student of the scientist who has advised John Bowlby?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/John_Bowlby> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the doctoral student of the scientist who has advised John Bowlby?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?student
WHERE {
  ?scientist dbo:advised ?bowlby .
  ?bowlby rdf:type dbo:Person .
  ?bowlby dbp:birthDate ""1907-01-26""^^xsd:date .
  ?scientist dbo:doctoralStudent ?student .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?student
WHERE {
  ?scientist dbo:advised ?bowlby .
  ?bowlby rdf:type dbo:Person .
  ?bowlby dbp:birthDate ""1907-01-26""^^xsd:date .
  ?scientist dbo:doctoralStudent ?student .
}",2.968021523431445e-155,0.06493506493506493,True,True
2052,How many saints have been venerated in Judaism?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Judaism>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Saint>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many saints have been venerated in Judaism?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?saint dbo:religion ""Judaism""^^xsd:string .
  ?saint dbo:religious_tradition ""Saint""^^xsd:string .
  FILTER (EXISTS { ?saint dbo:venerated_by ?venerator . })
}
GROUP BY ?saint
HAVING (COUNT(?venerator) > 0)
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?saint dbo:religion ""Judaism""^^xsd:string .
  ?saint dbo:religious_tradition ""Saint""^^xsd:string .
  FILTER (EXISTS { ?saint dbo:venerated_by ?venerator . })
}
GROUP BY ?saint
HAVING (COUNT(?venerator) > 0)",7.873430974476304e-232,0.0379746835443038,True,False
2771,Which non fictional subject of Thud is the athletics of PATTS College of Aeronautics ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thud!> <http://dbpedia.org/ontology/nonFictionSubject> ?uri. <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> <http://dbpedia.org/property/athletics> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which non fictional subject of Thud is the athletics of PATTS College of Aeronautics ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:subjectOf <http://dbpedia.org/resource/Thud> .
  ?subject dbo:genre ""Non-fiction""@en .
  ?subject dbp:subjectOf ?athletics .
  ?athletics dbo:wikiPageRedirects <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:subjectOf <http://dbpedia.org/resource/Thud> .
  ?subject dbo:genre ""Non-fiction""@en .
  ?subject dbp:subjectOf ?athletics .
  ?athletics dbo:wikiPageRedirects <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> .
}",2.8039101108246434e-155,0.0641025641025641,True,True
3371,What is the occupation of the band members of The Shirelles?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/The_Shirelles> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the occupation of the band members of The Shirelles?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?member ?occupation
WHERE {
  ?band dbo:members ?member .
  ?band dbo:name ""The Shirelles"" .
  ?member dbo:occupation ?occupation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?member ?occupation
WHERE {
  ?band dbo:members ?member .
  ?band dbo:name ""The Shirelles"" .
  ?member dbo:occupation ?occupation .
}",3.4945213227383114e-155,0.0821917808219178,True,True
2833,What is the religious affiliation of Hong Kong Taoist Association Tang Hin Memorial Secondary School ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hong_Kong_Taoist_Association_Tang_Hin_Memorial_Secondary_School> <http://dbpedia.org/property/religiousAffiliation> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the religious affiliation of Hong Kong Taoist Association Tang Hin Memorial Secondary School ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religiousAffiliation
WHERE {
  ?school dbo:religiousAffiliation ?religiousAffiliation .
  FILTER (regex(?school, ""Hong Kong Taoist Association Tang Hin Memorial Secondary School"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religiousAffiliation
WHERE {
  ?school dbo:religiousAffiliation ?religiousAffiliation .
  FILTER (regex(?school, ""Hong Kong Taoist Association Tang Hin Memorial Secondary School"", ""i""))
}",2.268207528392565e-155,0.05405405405405406,True,True
3974,"For how many PMs did the politician work, whose successor was Kingsley Wood?",google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Kingsley_Wood> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: For how many PMs did the politician work, whose successor was Kingsley Wood?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?politician dbo:successor ?successor .
  ?successor dbo:name ""Kingsley Wood"" .
  ?politician dbp:primeMinister ?pm .
  ?pm dbo:name ?pmName .
  GROUP BY ?politician
  
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?politician dbo:successor ?successor .
  ?successor dbo:name ""Kingsley Wood"" .
  ?politician dbp:primeMinister ?pm .
  ?pm dbo:name ?pmName .
  GROUP BY ?politician
  
}",2.384592839964215e-155,0.05,False,False
3666,In which state is the alma matter of Jan Paulsen located ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jan_Paulsen> <http://dbpedia.org/ontology/almaMater> ?x . ?x <http://dbpedia.org/property/state> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which state is the alma matter of Jan Paulsen located ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?state
WHERE {
  ?person dbo:almaMater ?university .
  ?university dbp:location ?location .
  ?location dbo:country ?country .
  FILTER ( ?person = <http://dbpedia.org/resource/Jan_Paulsen> )
  FILTER ( ?country = <http://dbpedia.org/resource/United_States> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?state
WHERE {
  ?person dbo:almaMater ?university .
  ?university dbp:location ?location .
  ?location dbo:country ?country .
  FILTER ( ?person = <http://dbpedia.org/resource/Jan_Paulsen> )
  FILTER ( ?country = <http://dbpedia.org/resource/United_States> )
}",2.5092505335702585e-155,0.07407407407407407,True,True
1059,What are the track and field events of Jamiatu Muslim Mindanao?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/property/athletics> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the track and field events of Jamiatu Muslim Mindanao?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?event
WHERE {
  ?university dbo:sportsTeam ?team .
  ?team dbo:name ""Jamiatu Muslim Mindanao"" .
  ?team dbo:participatesIn ?event .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?event
WHERE {
  ?university dbo:sportsTeam ?team .
  ?team dbo:name ""Jamiatu Muslim Mindanao"" .
  ?team dbo:participatesIn ?event .
}",2.9029053187216252e-155,0.07042253521126761,True,True
3294,Whose predecessor had Jenny Macklin as a deputy ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Jenny_Macklin> . ?uri <http://dbpedia.org/property/predecessor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose predecessor had Jenny Macklin as a deputy ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?person dbo:predecessor ?predecessor .
  ?predecessor dbo:deputy ?Macklin .
  FILTER (str(?Macklin) = ""Jenny Macklin"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?person dbo:predecessor ?predecessor .
  ?predecessor dbo:deputy ?Macklin .
  FILTER (str(?Macklin) = ""Jenny Macklin"")
}",2.6692174103668895e-155,0.06944444444444445,True,True
979,Mike Shinoda is in which band?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Mike_Shinoda> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Mike Shinoda is in which band?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?band
WHERE {
  ?person dbo:name ""Mike Shinoda"" .
  ?person dbo:memberOf ?band .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?band
WHERE {
  ?person dbo:name ""Mike Shinoda"" .
  ?person dbo:memberOf ?band .
}",8.289228799996742e-232,0.047619047619047616,True,True
2494,What is the home town of Rolando Gomez and is also the place of death of Clyde McNeal?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rolando_Gomez> <http://dbpedia.org/property/homeTown> ?uri. <http://dbpedia.org/resource/Clyde_McNeal> <http://dbpedia.org/property/deathDate> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the home town of Rolando Gomez and is also the place of death of Clyde McNeal?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?hometown ?deathplace
WHERE {
  ?rolandoGomez dbo:birthPlace ?hometown .
  ?clydeMcNeal dbo:deathPlace ?deathplace .
  FILTER(?hometown = ?deathplace)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?hometown ?deathplace
WHERE {
  ?rolandoGomez dbo:birthPlace ?hometown .
  ?clydeMcNeal dbo:deathPlace ?deathplace .
  FILTER(?hometown = ?deathplace)
}",2.6667146252330243e-155,0.05128205128205128,True,True
4214,Which hub of Cascade Airways is also the resting place of Brandon Lee ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cascade_Airways> <http://dbpedia.org/property/hubs> ?uri. <http://dbpedia.org/resource/Brandon_Lee> <http://dbpedia.org/ontology/restingPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which hub of Cascade Airways is also the resting place of Brandon Lee ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?hub
WHERE {
  ?hub dbo:hubOf ?airline .
  ?airline dbo:name ""Cascade Airways"" .
  ?hub dbo:locatedIn ?city .
  ?city dbo:name ""Los Angeles"" .
  ?city dbo:locatedIn ?state .
  ?state dbo:name ""California"" .
  ?city dbo:birthPlace ?person .
  ?person dbo:name ""Brandon Lee"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?hub
WHERE {
  ?hub dbo:hubOf ?airline .
  ?airline dbo:name ""Cascade Airways"" .
  ?hub dbo:locatedIn ?city .
  ?city dbo:name ""Los Angeles"" .
  ?city dbo:locatedIn ?state .
  ?state dbo:name ""California"" .
  ?city dbo:birthPlace ?person .
  ?person dbo:name ""Brandon Lee"" .
}",1.902304865284239e-155,0.03571428571428571,True,True
4288,What is the birthplace of the netball player who is the relative of Rachel Rasmussen ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rachel_Rasmussen> <http://dbpedia.org/property/relatives> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/NetballPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the birthplace of the netball player who is the relative of Rachel Rasmussen ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?birthplace
WHERE {
  ?player dbo:birthDate ?birth.
  ?player dbo:birthPlace ?birthplace.
  ?player dbo:family ?relative.
  ?relative dbo:name ""Rachel Rasmussen"" .
  FILTER (lang(?birth) = ""en"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?birthplace
WHERE {
  ?player dbo:birthDate ?birth.
  ?player dbo:birthPlace ?birthplace.
  ?player dbo:family ?relative.
  ?relative dbo:name ""Rachel Rasmussen"" .
  FILTER (lang(?birth) = ""en"")
}",2.205362109328438e-155,0.047619047619047616,True,True
4875,Which hockey team is head coached by Bill Peters?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Bill_Peters_(ice_hockey)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HockeyTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which hockey team is head coached by Bill Peters?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?team dbo:headCoach ?coach .
  ?coach dbo:name ""Bill Peters"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?team dbo:headCoach ?coach .
  ?coach dbo:name ""Bill Peters"" .
}",8.202720662090001e-232,0.04411764705882353,True,True
4623,Which person works at the American Magazine?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/The_American_Magazine>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which person works at the American Magazine?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:employedBy ?organization .
  ?organization dbo:name ""American Magazine"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:employedBy ?organization .
  ?organization dbo:name ""American Magazine"" .
}",2.494821638843469e-155,0.06060606060606061,True,True
481,What are the cities located on the sea into which the Aegean Sea flows?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aegean_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the cities located on the sea into which the Aegean Sea flows?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city ?cityLabel
WHERE {
  ?city dbo:locatedIn ?sea .
  ?sea dbo:subsumedBy <http://dbpedia.org/resource/Aegean_Sea> .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city ?cityLabel
WHERE {
  ?city dbo:locatedIn ?sea .
  ?sea dbo:subsumedBy <http://dbpedia.org/resource/Aegean_Sea> .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",3.171276006009064e-155,0.08860759493670886,False,False
1184,Who owns the schools which have a penguin as its mascot?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Penguin> . ?x <http://dbpedia.org/ontology/authority> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who owns the schools which have a penguin as its mascot?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?school ?owner
WHERE {
  ?school dbo:mascot ?penguin .
  ?penguin dbo:name ""Penguin"" .
  ?school dbo:owner ?owner .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?school ?owner
WHERE {
  ?school dbo:mascot ?penguin .
  ?penguin dbo:name ""Penguin"" .
  ?school dbo:owner ?owner .
}",3.0566417519593477e-155,0.06756756756756757,True,True
4309,Name the movie whose director is Stanley Kubrick and editor is Anthony Harvey?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Anthony_Harvey> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the movie whose director is Stanley Kubrick and editor is Anthony Harvey?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movie
WHERE {
  ?movie dbo:director <http://dbpedia.org/resource/Stanley_Kubrick> .
  ?movie dbo:editor <http://dbpedia.org/resource/Anthony_Harvey> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movie
WHERE {
  ?movie dbo:director <http://dbpedia.org/resource/Stanley_Kubrick> .
  ?movie dbo:editor <http://dbpedia.org/resource/Anthony_Harvey> .
}",3.195205633963664e-155,0.07142857142857142,True,True
1325,Name the movies writtten by the group Monty Python?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Monty_Python>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the movies writtten by the group Monty Python?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?movieLabel
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Monty Python"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?movieLabel
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Monty Python"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.308595628361502e-155,0.05333333333333334,False,False
4280,What show has writing of Erik Jendresen and Graham Yost?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Graham_Yost> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What show has writing of Erik Jendresen and Graham Yost?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:writer ?writer .
  ?writer dbo:name ""Erik Jendresen"" .
  FILTER (BOUND(?writer))
  ?show dbo:writer ?writer2 .
  ?writer2 dbo:name ""Graham Yost"" .
  FILTER (BOUND(?writer2))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:writer ?writer .
  ?writer dbo:name ""Erik Jendresen"" .
  FILTER (BOUND(?writer))
  ?show dbo:writer ?writer2 .
  ?writer2 dbo:name ""Graham Yost"" .
  FILTER (BOUND(?writer2))
}",2.91841165985534e-155,0.0641025641025641,True,True
204,Who were in the youth clubs that were in season of 2015 Argentine Primera Division?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/season> <http://dbpedia.org/resource/2015_Argentine_Primera_División> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who were in the youth clubs that were in season of 2015 Argentine Primera Division?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player
WHERE {
  ?club dbo:season ?season .
  ?season dbo:year ""2015""^^xsd:gYear .
  ?club dbo:league dbp:Argentine_Primera_Division .
  ?club dbo:youthClub ?youthClub .
  ?youthClub dbo:member ?player .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player
WHERE {
  ?club dbo:season ?season .
  ?season dbo:year ""2015""^^xsd:gYear .
  ?club dbo:league dbp:Argentine_Primera_Division .
  ?club dbo:youthClub ?youthClub .
  ?youthClub dbo:member ?player .
}",3.3023594192188504e-155,0.0759493670886076,True,True
3020,Which city near to Elliott Bay was the death place of George F. Moore?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elliott_Bay> <http://dbpedia.org/ontology/nearestCity> ?uri. <http://dbpedia.org/resource/George_F._Moore_(lieutenant_governor)> <http://dbpedia.org/property/placeOfDeath> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which city near to Elliott Bay was the death place of George F. Moore?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?person dbo:deathPlace ?city .
  ?person dbo:name ""George F. Moore"" .
  ?city dbo:locatedIn ?location .
  ?location dbo:near ?bay .
  ?bay dbo:name ""Elliott Bay"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?person dbo:deathPlace ?city .
  ?person dbo:name ""George F. Moore"" .
  ?city dbo:locatedIn ?location .
  ?location dbo:near ?bay .
  ?bay dbo:name ""Elliott Bay"" .
}",2.0194805030799393e-155,0.037037037037037035,True,True
2972,List all the mebers of Mekong River Commission?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mekong_River_Commission> <http://dbpedia.org/property/membership> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the mebers of Mekong River Commission?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?member
WHERE {
  ?member dbo:memberOf ?commission .
  ?commission dbo:name ""Mekong River Commission"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?member
WHERE {
  ?member dbo:memberOf ?commission .
  ?commission dbo:name ""Mekong River Commission"" .
}",3.032816514970993e-155,0.07462686567164178,True,True
2922,"What are Breann McGregor and Anika Knudsen, both known for?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Breann_McGregor> <http://dbpedia.org/property/knownFor> ?uri. <http://dbpedia.org/resource/Anika_Knudsen> <http://dbpedia.org/property/knownFor> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are Breann McGregor and Anika Knudsen, both known for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?knownFor
WHERE {
  ?person a dbo:Person ;
    dbp:knownFor ?knownFor .
  FILTER (regex(?person, ""Breann McGregor"", ""i"") || regex(?person, ""Anika Knudsen"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?knownFor
WHERE {
  ?person a dbo:Person ;
    dbp:knownFor ?knownFor .
  FILTER (regex(?person, ""Breann McGregor"", ""i"") || regex(?person, ""Anika Knudsen"", ""i""))
}",3.0566417519593477e-155,0.0759493670886076,True,True
3507,Who are the shareholders of the soccer club for whom Steve Holland plays?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Steve_Holland_(footballer)> <http://dbpedia.org/property/currentclub> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the shareholders of the soccer club for whom Steve Holland plays?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?shareholder
WHERE {
  ?player dbo:playsFor ?club .
  ?player rdf:type dbo:SoccerPlayer .
  ?player dbo:name ""Steve Holland""^^xsd:string .
  ?club dbo:shareholder ?shareholder .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?shareholder
WHERE {
  ?player dbo:playsFor ?club .
  ?player rdf:type dbo:SoccerPlayer .
  ?player dbo:name ""Steve Holland""^^xsd:string .
  ?club dbo:shareholder ?shareholder .
}",2.968021523431445e-155,0.06578947368421052,True,True
640,List the broadcast area of the TV stations which also serves in Agalga?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/broadcastArea> <http://dbpedia.org/resource/Agaléga> . ?x <http://dbpedia.org/property/broadcastArea> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the broadcast area of the TV stations which also serves in Agalga?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?station ?broadcastArea
WHERE {
  ?station dbo:location dbo:Agalga .
  ?station dbo:broadcastArea ?broadcastArea .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?station ?broadcastArea
WHERE {
  ?station dbo:location dbo:Agalga .
  ?station dbo:broadcastArea ?broadcastArea .
}",3.559043432561587e-155,0.0821917808219178,True,True
304,What is the place of birth of the stars of Auto Shankar ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Auto_Shankar_(film)> <http://dbpedia.org/property/starring> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the place of birth of the stars of Auto Shankar ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?place
WHERE {
  ?person dbo:birthPlace ?place .
  ?person dbo:name ""Auto Shankar"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?place
WHERE {
  ?person dbo:birthPlace ?place .
  ?person dbo:name ""Auto Shankar"" .
}",3.1742523358973992e-155,0.07246376811594203,True,True
1335,Whose opponents are Ike Clanton and Billy Clanton?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Ike_Clanton> . ?uri <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Billy_Clanton> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose opponents are Ike Clanton and Billy Clanton?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?opponent
WHERE {
  ?person dbo:name ""Ike Clanton"" .
  ?person dbp:opponent ?opponent .
  UNION
  ?person dbo:name ""Billy Clanton"" .
  ?person dbp:opponent ?opponent .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?opponent
WHERE {
  ?person dbo:name ""Ike Clanton"" .
  ?person dbp:opponent ?opponent .
  UNION
  ?person dbo:name ""Billy Clanton"" .
  ?person dbp:opponent ?opponent .
}",3.5156372159951298e-155,0.08695652173913043,False,False
4387,In how many places have people canonized by John Paul II died?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Pope_John_Paul_II> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In how many places have people canonized by John Paul II died?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?person dbo:canonizedBy ?pope .
  ?pope dbo:name ""John Paul II""^^xsd:string .
  ?person dbo:deathPlace ?place .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?person dbo:canonizedBy ?pope .
  ?pope dbo:name ""John Paul II""^^xsd:string .
  ?person dbo:deathPlace ?place .
}",2.3983374600418706e-155,0.04878048780487805,True,True
919,Whose theme music was composed by a band which collaborated with Phish?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Phish> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose theme music was composed by a band which collaborated with Phish?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person ?themeMusic
WHERE {
  ?person dbo:themeMusic ?themeMusic .
  ?themeMusic dbo:composer ?composer .
  ?composer dbo:collaboratedWith ?collaborator .
  ?collaborator dbo:name ""Phish"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person ?themeMusic
WHERE {
  ?person dbo:themeMusic ?themeMusic .
  ?themeMusic dbo:composer ?composer .
  ?composer dbo:collaboratedWith ?collaborator .
  ?collaborator dbo:name ""Phish"" .
}",3.3566500347661918e-155,0.07792207792207792,True,True
4856,How many cars succeed the cars assembled in Canada?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Canada> . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many cars succeed the cars assembled in Canada?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?car dbo:assemblyLocation dbp:Canada .
  ?successor dbo:successorOf ?car .
  FILTER NOT EXISTS { ?successor dbo:assemblyLocation dbp:Canada }
  
}
GROUP BY ?car
COUNT(?successor) AS ?count
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?car dbo:assemblyLocation dbp:Canada .
  ?successor dbo:successorOf ?car .
  FILTER NOT EXISTS { ?successor dbo:assemblyLocation dbp:Canada }
  
}
GROUP BY ?car
COUNT(?successor) AS ?count",2.4123225276763925e-155,0.05263157894736842,False,False
349,List down the schools whose mascot's order is Even-toed ungulate?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Even-toed_ungulate> . ?uri <http://dbpedia.org/property/mascot> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List down the schools whose mascot's order is Even-toed ungulate?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?school
WHERE {
  ?school dbo:mascot ?mascot .
  ?mascot dbo:classification dbo:Even_toed_ungulate .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?school
WHERE {
  ?school dbo:mascot ?mascot .
  ?mascot dbo:classification dbo:Even_toed_ungulate .
}",3.7246750897077527e-155,0.08695652173913043,True,True
4110,What are the important buildings of the architect whose one of the significant building is Krasnye Vorota?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/significantBuilding> <http://dbpedia.org/resource/Krasnye_Vorota_(Moscow_Metro)> . ?x <http://dbpedia.org/ontology/significantBuilding> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the important buildings of the architect whose one of the significant building is Krasnye Vorota?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?architect ?architectLabel ?building ?buildingLabel
WHERE {
  ?building dbo:architect ?architect .
  ?building rdfs:label ""Krasnye Vorota""@en .
  ?architect rdfs:label ?architectLabel .
  ?building rdfs:label ?buildingLabel .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?architect ?architectLabel ?building ?buildingLabel
WHERE {
  ?building dbo:architect ?architect .
  ?building rdfs:label ""Krasnye Vorota""@en .
  ?architect rdfs:label ?architectLabel .
  ?building rdfs:label ?buildingLabel .
}",2.8409841948588806e-155,0.0641025641025641,True,True
431,List the stadium of the teams which uses Nea Smyrni as one of the stadium?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/stadium> <http://dbpedia.org/resource/Nea_Smyrni_Stadium> . ?x <http://dbpedia.org/property/stadium> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the stadium of the teams which uses Nea Smyrni as one of the stadium?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team ?stadium
WHERE {
  ?team dbo:stadium ?stadium .
  ?stadium dbo:location dbp:Nea_Smyrni .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team ?stadium
WHERE {
  ?team dbo:stadium ?stadium .
  ?stadium dbo:location dbp:Nea_Smyrni .
}",3.5156372159951298e-155,0.08450704225352113,True,True
630,Which company is the parent company of Chevrolet Spark?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chevrolet_Spark> <http://dbpedia.org/property/parentCompany> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which company is the parent company of Chevrolet Spark?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parentCompany WHERE {
  ?car dbo:brand ""Chevrolet"" .
  ?car dbo:model ""Spark"" .
  ?car dbo:parentCompany ?parentCompany .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parentCompany WHERE {
  ?car dbo:brand ""Chevrolet"" .
  ?car dbo:model ""Spark"" .
  ?car dbo:parentCompany ?parentCompany .
}",2.427831263680579e-155,0.06153846153846154,True,True
2296,Name the office holder with associate as Marcus Calpurnius Bibulus and has a kid named Augustus?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Augustus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the office holder with associate as Marcus Calpurnius Bibulus and has a kid named Augustus?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?officeHolder
WHERE {
  ?officeHolder dbo:associate ?associate .
  ?associate dbo:name ""Marcus Calpurnius Bibulus""^^xsd:string .
  ?officeHolder dbo:child ?child .
  ?child dbo:name ""Augustus""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?officeHolder
WHERE {
  ?officeHolder dbo:associate ?associate .
  ?associate dbo:name ""Marcus Calpurnius Bibulus""^^xsd:string .
  ?officeHolder dbo:child ?child .
  ?child dbo:name ""Augustus""^^xsd:string .
}",2.3192471031465984e-155,0.05,True,True
3945,How many different organizations own the railway lines which are a part of Norfolk Southern Railway?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/system> <http://dbpedia.org/resource/Norfolk_Southern_Railway> . ?x <http://dbpedia.org/property/owner> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many different organizations own the railway lines which are a part of Norfolk Southern Railway?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?organizationCount
WHERE {
  ?railway dbo:partOf ?nsRailway .
  ?nsRailway dbo:ownedBy ?organization .
  GROUP BY ?organization
  
  
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?organizationCount
WHERE {
  ?railway dbo:partOf ?nsRailway .
  ?nsRailway dbo:ownedBy ?organization .
  GROUP BY ?organization
  
  
}",2.426555136425675e-155,0.05,False,False
3245,Mota Engil built bridges over which rivers?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/builder> <http://dbpedia.org/resource/Mota-Engil> . ?x <http://dbpedia.org/ontology/crosses> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Mota Engil built bridges over which rivers?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river
WHERE {
  ?company dbo:constructionProject ?project .
  ?project dbo:location ?location .
  ?location dbo:locatedIn ?river .
  FILTER ( ?company = <http://dbpedia.org/resource/Mota-Engil> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river
WHERE {
  ?company dbo:constructionProject ?project .
  ?project dbo:location ?location .
  ?location dbo:locatedIn ?river .
  FILTER ( ?company = <http://dbpedia.org/resource/Mota-Engil> )
}",3.157656468883577e-155,0.07792207792207792,True,True
601,Does the Vadodara Railway station lie at the end of the Mathura Vadodara route?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Mathura–Vadodara_Section> <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Vadodara_Junction_railway_station> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the Vadodara Railway station lie at the end of the Mathura Vadodara route?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Vadodara Railway station"" .
  ?x dbo:location dbp:location_of_railway_station ?y .
  ?y dbo:name ""Mathura Vadodara route"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Vadodara Railway station"" .
  ?x dbo:location dbp:location_of_railway_station ?y .
  ?y dbo:name ""Mathura Vadodara route"" .
}",2.0868169697040566e-155,0.04225352112676056,False,False
929,Which television show is the subsequent work of Frasier and the opening theme is Gary Portnoy?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Frasier> . ?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Gary_Portnoy>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which television show is the subsequent work of Frasier and the opening theme is Gary Portnoy?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:previousWork ?frasier .
  ?frasier dbo:title ""Frasier"" .
  ?show dbp:openingTheme ?theme .
  ?theme dbo:composer ""Gary Portnoy"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:previousWork ?frasier .
  ?frasier dbo:title ""Frasier"" .
  ?show dbp:openingTheme ?theme .
  ?theme dbo:composer ""Gary Portnoy"" .
}",8.34186146802972e-232,0.0379746835443038,True,True
677,Who was the bronze medalist of Swimming at the 2008 Summer Olympics Men's 400 metre individual medley?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Swimming_at_the_2008_Summer_Olympics_–_Men's_400_metre_individual_medley> <http://dbpedia.org/ontology/bronzeMedalist> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the bronze medalist of Swimming at the 2008 Summer Olympics Men's 400 metre individual medley?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?athlete
WHERE {
  ?athlete dbo:olympicMedal ""Bronze""^^xsd:string .
  ?athlete dbo:olympicGames <http://dbpedia.org/resource/2008_Summer_Olympics> .
  ?athlete dbo:sport dbp:Swimming .
  ?athlete dbo:olympicEvent <http://dbpedia.org/resource/Men%27s_400_metre_individual_medley> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?athlete
WHERE {
  ?athlete dbo:olympicMedal ""Bronze""^^xsd:string .
  ?athlete dbo:olympicGames <http://dbpedia.org/resource/2008_Summer_Olympics> .
  ?athlete dbo:sport dbp:Swimming .
  ?athlete dbo:olympicEvent <http://dbpedia.org/resource/Men%27s_400_metre_individual_medley> .
}",2.2175133245798802e-155,0.05194805194805195,True,True
112,What is the province of Rouen Business School?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rouen_Business_School> <http://dbpedia.org/property/province> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the province of Rouen Business School?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?province
WHERE {
  ?school dbo:location ?location .
  ?location dbo:country ""France"" .
  ?location dbo:administrativeRegion ?province .
  FILTER (regex(?school, ""Rouen Business School"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?province
WHERE {
  ?school dbo:location ?location .
  ?location dbo:country ""France"" .
  ?location dbo:administrativeRegion ?province .
  FILTER (regex(?school, ""Rouen Business School"", ""i""))
}",2.3512210545397443e-155,0.05714285714285714,True,True
3351,In which part of the world can i find Xynisteri and Mavro?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xynisteri> <http://dbpedia.org/ontology/origin> ?uri. <http://dbpedia.org/resource/Mavro> <http://dbpedia.org/ontology/origin> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which part of the world can i find Xynisteri and Mavro?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?wine a dbo:Wine .
  ?wine dbo:variety ""Xynisteri""^^xsd:string .
  ?wine dbo:variety ""Mavro""^^xsd:string .
  ?wine dbo:origin ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?wine a dbo:Wine .
  ?wine dbo:variety ""Xynisteri""^^xsd:string .
  ?wine dbo:variety ""Mavro""^^xsd:string .
  ?wine dbo:origin ?location .
}",3.3624125453069686e-155,0.08333333333333333,True,True
2793,List the universities with athletics NCAA Division I Football Bowl Subdivision?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/athletics> <http://dbpedia.org/resource/NCAA_Division_I_Football_Bowl_Subdivision>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the universities with athletics NCAA Division I Football Bowl Subdivision?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university
WHERE {
  ?university dbo:wikiPageRedirects* dbo:University .
  ?university dbo:sportsTeam ?team .
  ?team dbo:sportsLeague ?league .
  ?league dbo:name ""NCAA Division I Football Bowl Subdivision"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university
WHERE {
  ?university dbo:wikiPageRedirects* dbo:University .
  ?university dbo:sportsTeam ?team .
  ?team dbo:sportsLeague ?league .
  ?league dbo:name ""NCAA Division I Football Bowl Subdivision"" .
}",2.2552086692851858e-155,0.05405405405405406,True,True
1652,Who produced the Pixar Image Computer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Pixar_Image_Computer>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who produced the Pixar Image Computer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?producer
WHERE {
  ?computer dbo:producedBy ?producer .
  FILTER (regex(?computer, ""Pixar Image Computer"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?producer
WHERE {
  ?computer dbo:producedBy ?producer .
  FILTER (regex(?computer, ""Pixar Image Computer"", ""i""))
}",8.875825067922154e-232,0.06153846153846154,True,True
1758,Which football players currently have their contracts with Stoke City F.C.?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/Stoke_City_F.C.> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which football players currently have their contracts with Stoke City F.C.?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?player ?playerLabel
WHERE {
  ?player dbo:playsFor ?club .
  ?club dbo:name ""Stoke City F.C."" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?player ?playerLabel
WHERE {
  ?player dbo:playsFor ?club .
  ?club dbo:name ""Stoke City F.C."" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.2552086692851858e-155,0.05194805194805195,False,False
3408,Give me an estimate number of races where horses grandsired by the Wild Risk have raced in?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/grandsire> <http://dbpedia.org/resource/Wild_Risk> . ?x <http://dbpedia.org/property/race> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HorseRace>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me an estimate number of races where horses grandsired by the Wild Risk have raced in?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?race) AS ?raceCount)
WHERE {
  ?horse dbo:grandsire ?grandsire .
  ?grandsire dbo:name ""Wild Risk""^^xsd:string .
  ?horse dbo:participatedIn ?race .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?race) AS ?raceCount)
WHERE {
  ?horse dbo:grandsire ?grandsire .
  ?grandsire dbo:name ""Wild Risk""^^xsd:string .
  ?horse dbo:participatedIn ?race .
}",2.344734865707205e-155,0.046511627906976744,True,True
4547,List the destinations of Novair International Airways ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Novair_International_Airways> <http://dbpedia.org/property/destinations> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the destinations of Novair International Airways ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?destination
WHERE {
  ?airline dbo:airlineDestinations ?destination .
  FILTER (str(?airline) = ""Novair International Airways"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?destination
WHERE {
  ?airline dbo:airlineDestinations ?destination .
  FILTER (str(?airline) = ""Novair International Airways"")
}",3.0940944781388835e-155,0.07462686567164178,True,True
3151,What is the common product of the Apple Productivity Experience Group and services of the 21Vianet ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Apple_Productivity_Experience_Group> <http://dbpedia.org/ontology/product> ?uri. <http://dbpedia.org/resource/21Vianet> <http://dbpedia.org/property/services> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the common product of the Apple Productivity Experience Group and services of the 21Vianet ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?product
WHERE {
  ?group dbo:product ?product .
  ?group rdfs:label ""Apple Productivity Experience Group"" .
  ?service dbo:product ?product .
  ?service rdfs:label ""21Vianet"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?product
WHERE {
  ?group dbo:product ?product .
  ?group rdfs:label ""Apple Productivity Experience Group"" .
  ?service dbo:product ?product .
  ?service rdfs:label ""21Vianet"" .
}",2.5806662832054458e-155,0.05194805194805195,True,True
1139,Which president of the United States had vice president as John Adams?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/John_Adams>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which president of the United States had vice president as John Adams?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?president
WHERE {
  ?president dbo:vicePresident ?johnAdams .
  ?johnAdams dbo:name ""John Adams"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?president
WHERE {
  ?president dbo:vicePresident ?johnAdams .
  ?johnAdams dbo:name ""John Adams"" .
}",8.120546156106983e-232,0.043478260869565216,True,True
3452,Is Rajya Sabha a house of parliament in India?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Parliament_of_India> <http://dbpedia.org/property/houses> <http://dbpedia.org/resource/Rajya_Sabha> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Rajya Sabha a house of parliament in India?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Rajya Sabha"" .
  ?x dbo:partOf ?y .
  ?y dbo:name ""Parliament of India"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Rajya Sabha"" .
  ?x dbo:partOf ?y .
  ?y dbo:name ""Parliament of India"" .
}",2.215756877004116e-155,0.045454545454545456,True,True
983,Which associated band of the Teddy Riley is also the performer of the Before I Let You Go?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Teddy_Riley> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Before_I_Let_You_Go> <http://dbpedia.org/ontology/musicalArtist> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which associated band of the Teddy Riley is also the performer of the Before I Let You Go?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?band
WHERE {
  ?artist dbo:associatedBand ?band .
  ?artist dbo:name ""Teddy Riley"" .
  ?band dbo:name ""Before I Let You Go"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?band
WHERE {
  ?artist dbo:associatedBand ?band .
  ?artist dbo:name ""Teddy Riley"" .
  ?band dbo:name ""Before I Let You Go"" .
}",2.0411965960034616e-155,0.038461538461538464,True,True
650,Who are the former partners of the figure skaters whose performance have been choreographed by Catarina Lindgren in the past?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/formerChoreographer> <http://dbpedia.org/resource/Catarina_Lindgren> . ?x <http://dbpedia.org/ontology/formerPartner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FigureSkater>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the former partners of the figure skaters whose performance have been choreographed by Catarina Lindgren in the past?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?formerPartner
WHERE {
  ?skater dbo:partner ?formerPartner .
  ?skater dbo:choreography ?choreography .
  ?choreography dbo:choreographer Catarina Lindgren .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?formerPartner
WHERE {
  ?skater dbo:partner ?formerPartner .
  ?skater dbo:choreography ?choreography .
  ?choreography dbo:choreographer Catarina Lindgren .
}",2.8559767164037747e-155,0.060240963855421686,False,False
3153,Name the sovereign state of Wallington railway station ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wallington_railway_station> <http://dbpedia.org/ontology/country> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the sovereign state of Wallington railway station ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?sovereignState
WHERE {
  ?station dbo:name ""Wallington railway station"" .
  ?station dbp:locatedIn ?location .
  ?location dbo:country ?sovereignState .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?sovereignState
WHERE {
  ?station dbo:name ""Wallington railway station"" .
  ?station dbp:locatedIn ?location .
  ?location dbo:country ?sovereignState .
}",2.3962983105918537e-155,0.05970149253731343,True,True
2316,Which admin center of pulau Ujong is also the largest city of Pulau Ubin ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/largestCity> ?uri. <http://dbpedia.org/resource/Pulau_Ujong> <http://dbpedia.org/ontology/capital> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which admin center of pulau Ujong is also the largest city of Pulau Ubin ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?city dbo:adminCenterOf ?location .
  ?location dbo:name ""Pulau Ujong""^^xsd:string .
  ?city dbo:locatedIn ?location2 .
  ?location2 dbo:name ""Pulau Ubin""^^xsd:string .
  ?city dbo:population ?population .
  FILTER ( ?population > 0 )
  ?city dbo:largestCityOf ?location3 .
  ?location3 dbo:name ""Pulau Ubin""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?city dbo:adminCenterOf ?location .
  ?location dbo:name ""Pulau Ujong""^^xsd:string .
  ?city dbo:locatedIn ?location2 .
  ?location2 dbo:name ""Pulau Ubin""^^xsd:string .
  ?city dbo:population ?population .
  FILTER ( ?population > 0 )
  ?city dbo:largestCityOf ?location3 .
  ?location3 dbo:name ""Pulau Ubin""^^xsd:string .
}",1.876064362016577e-155,0.034482758620689655,True,True
4898,Who was the parent of person whose child is William C P breckinridge?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/William_Campbell_Preston_Breckinridge> . ?x <http://dbpedia.org/ontology/parent> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the parent of person whose child is William C P breckinridge?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parent
WHERE {
  ?child dbo:child ?parent .
  FILTER (regex(?child, ""William C P breckinridge"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parent
WHERE {
  ?child dbo:child ?parent .
  FILTER (regex(?child, ""William C P breckinridge"", ""i""))
}",2.3809857162598948e-155,0.05333333333333334,True,True
4495,Which serving railway line of the Daund Junction railway station is the home port of INS Viraat ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/INS_Viraat_(R22)> <http://dbpedia.org/ontology/homeport> ?uri. <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which serving railway line of the Daund Junction railway station is the home port of INS Viraat ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?railwayLine
WHERE {
  ?station dbo:name ""Daund Junction"" .
  ?station dbo:servingRailwayLine ?railwayLine .
  ?railwayLine rdfs:label ?label .
  FILTER (regex(?label, ""INS Viraat"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?railwayLine
WHERE {
  ?station dbo:name ""Daund Junction"" .
  ?station dbo:servingRailwayLine ?railwayLine .
  ?railwayLine rdfs:label ?label .
  FILTER (regex(?label, ""INS Viraat"", ""i""))
}",2.5806662832054458e-155,0.047619047619047616,True,True
3836,Where does the network cofounded by Seewoosagur Ramgoolam air its shows?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Seewoosagur_Ramgoolam> . ?x <http://dbpedia.org/property/broadcastArea> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where does the network cofounded by Seewoosagur Ramgoolam air its shows?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?channel
WHERE {
  ?person dbo:birthPlace ""Mauritius"" .
  ?person dbo:name ""Seewoosagur Ramgoolam"" .
  ?person dbo:cofounded ?network .
  ?network dbp:broadcastsOn ?channel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?channel
WHERE {
  ?person dbo:birthPlace ""Mauritius"" .
  ?person dbo:name ""Seewoosagur Ramgoolam"" .
  ?person dbo:cofounded ?network .
  ?network dbp:broadcastsOn ?channel .
}",2.4123225276763925e-155,0.05194805194805195,True,True
4129,Is Robin Gibb the singer of Oh! Darling?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Oh!_Darling> <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Robin_Gibb> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Robin Gibb the singer of Oh! Darling?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:name ""Robin Gibb"" .
  ?x dbo:artist ""Oh! Darling"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:name ""Robin Gibb"" .
  ?x dbo:artist ""Oh! Darling"" .
}",2.259351571061102e-155,0.045454545454545456,True,True
4923,Which  person has opponent Ike Clanton?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Ike_Clanton>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which  person has opponent Ike Clanton?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:opponent ?opponent .
  ?opponent dbo:name ""Ike Clanton"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:opponent ?opponent .
  ?opponent dbo:name ""Ike Clanton"" .
}",8.289228799996742e-232,0.046153846153846156,True,True
993,What organisations purpose is Peace?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Peace>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What organisations purpose is Peace?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?organisation ?purpose
WHERE {
  ?organisation dbo:purpose ?purpose .
  FILTER (regex(?purpose, ""Peace"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?organisation ?purpose
WHERE {
  ?organisation dbo:purpose ?purpose .
  FILTER (regex(?purpose, ""Peace"", ""i""))
}",2.530465559854518e-155,0.06060606060606061,True,True
370,What are Monrow Carell Jr Children Hospital and Vanderbilt University Medical Center both affiliated with?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Monroe_Carell_Jr._Children's_Hospital_at_Vanderbilt> <http://dbpedia.org/property/affiliation> ?uri. <http://dbpedia.org/resource/Vanderbilt_University_Medical_Center> <http://dbpedia.org/property/affiliation> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are Monrow Carell Jr Children Hospital and Vanderbilt University Medical Center both affiliated with?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?affiliation
WHERE {
  ?hospital dbo:affiliatedWith ?affiliation .
  FILTER (regex(?hospital, ""Monrow Carell Jr Children Hospital"", ""i"") || regex(?hospital, ""Vanderbilt University Medical Center"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?affiliation
WHERE {
  ?hospital dbo:affiliatedWith ?affiliation .
  FILTER (regex(?hospital, ""Monrow Carell Jr Children Hospital"", ""i"") || regex(?hospital, ""Vanderbilt University Medical Center"", ""i""))
}",2.9346708496857675e-155,0.07317073170731707,True,True
1975,Name the office holder whose constituency is Haight-Ashbury?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Haight-Ashbury>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the office holder whose constituency is Haight-Ashbury?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?name
WHERE {
  ?person dbo:constituency ?constituency .
  ?constituency dbo:name ""Haight-Ashbury"" .
  ?person dbo:name ?name .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?name
WHERE {
  ?person dbo:constituency ?constituency .
  ?constituency dbo:name ""Haight-Ashbury"" .
  ?person dbo:name ?name .
}",8.147480343967206e-232,0.045454545454545456,True,True
4238,Who is the builder of the Stadium of Costa Rica women's national football team?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Costa_Rica_women's_national_football_team> <http://dbpedia.org/ontology/stadium> ?x . ?x <http://dbpedia.org/ontology/builder> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the builder of the Stadium of Costa Rica women's national football team?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?builder
WHERE {
  ?stadium dbo:builder ?builder .
  ?stadium dbp:name ""Stadium of Costa Rica"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?builder
WHERE {
  ?stadium dbo:builder ?builder .
  ?stadium dbp:name ""Stadium of Costa Rica"" .
}",2.50170125957988e-155,0.05555555555555555,True,True
3112,Which musical artists have collaborated with Waylon Jennings?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Waylon_Jennings>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which musical artists have collaborated with Waylon Jennings?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:collaborator ?waylon .
  ?waylon dbo:name ""Waylon Jennings"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:collaborator ?waylon .
  ?waylon dbo:name ""Waylon Jennings"" .
}",2.4775553999024465e-155,0.058823529411764705,True,True
2129,Does Ronaldinho play in the brazil's under 23 team?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Ronaldinho> <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Brazil_national_under-23_football_team> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Ronaldinho play in the brazil's under 23 team?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x rdf:type dbo:SportsTeam .
  ?x dbo:name ""Brazil U23"" .
  ?x dbo:member ?player .
  ?player dbo:name ""Ronaldinho"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x rdf:type dbo:SportsTeam .
  ?x dbo:name ""Brazil U23"" .
  ?x dbo:member ?player .
  ?player dbo:name ""Ronaldinho"" .
}",2.1483903094550452e-155,0.043478260869565216,True,True
1620,"Where did the president study, who's the president of Besiktas JK?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Beşiktaş_JK_(wheelchair_basketball)> <http://dbpedia.org/ontology/president> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the president study, who's the president of Besiktas JK?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?president ?presidentEducation
WHERE {
  ?president dbo:nationality ""Turkish"" .
  ?president dbo:position ""President"" .
  ?president dbo:memberOf <http://dbpedia.org/resource/Beşiktaş_J.K.> .
  ?president dbo:education ?presidentEducation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?president ?presidentEducation
WHERE {
  ?president dbo:nationality ""Turkish"" .
  ?president dbo:position ""President"" .
  ?president dbo:memberOf <http://dbpedia.org/resource/Beşiktaş_J.K.> .
  ?president dbo:education ?presidentEducation .
}",3.0025357216578434e-155,0.0684931506849315,True,True
3964,Who designed the stadiums which have been rented by Oakland athletics?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Oakland_Athletics> . ?x <http://dbpedia.org/property/architect> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who designed the stadiums which have been rented by Oakland athletics?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?designer
WHERE {
  ?stadium dbo:architect ?designer .
  ?stadium dbp:sportsTeam ?team .
  ?team dbo:name ""Oakland Athletics"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?designer
WHERE {
  ?stadium dbo:architect ?designer .
  ?stadium dbp:sportsTeam ?team .
  ?team dbo:name ""Oakland Athletics"" .
}",3.0566417519593477e-155,0.06578947368421052,True,True
4744,What is the launch site of the Juno I which was also the ground of 2016 Fort Lauderdale Strikers season ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juno_I> <http://dbpedia.org/ontology/launchSite> ?uri. <http://dbpedia.org/resource/2016_Fort_Lauderdale_Strikers_season> <http://dbpedia.org/ontology/ground> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the launch site of the Juno I which was also the ground of 2016 Fort Lauderdale Strikers season ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?launchSite
WHERE {
  ?spacecraft dbo:name ""Juno I"" .
  ?spacecraft dbo:launchSite ?launchSite .
  ?ground dbo:name ""2016 Fort Lauderdale Strikers season"" .
  ?ground dbo:location ?launchSite .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?launchSite
WHERE {
  ?spacecraft dbo:name ""Juno I"" .
  ?spacecraft dbo:launchSite ?launchSite .
  ?ground dbo:name ""2016 Fort Lauderdale Strikers season"" .
  ?ground dbo:location ?launchSite .
}",1.968084453516327e-155,0.03614457831325301,True,True
1243,Where did the 2015 MLS All-Star Game take place?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_MLS_All-Star_Game> <http://dbpedia.org/property/city> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the 2015 MLS All-Star Game take place?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?game dbo:location ?location .
  FILTER (regex(?game, ""2015 MLS All-Star Game"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?game dbo:location ?location .
  FILTER (regex(?game, ""2015 MLS All-Star Game"", ""i""))
}",2.4440718429993668e-155,0.05970149253731343,True,True
3883,Name the branch of Carroll E. Lanier ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carroll_E._Lanier> <http://dbpedia.org/property/branch> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the branch of Carroll E. Lanier ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?branch
WHERE {
  ?person dbo:name ""Carroll E. Lanier"" .
  ?person dbo:branch ?branch .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?branch
WHERE {
  ?person dbo:name ""Carroll E. Lanier"" .
  ?person dbo:branch ?branch .
}",2.4775553999024465e-155,0.0625,True,True
3585,List the common official language of the ladonia and Empire of Atlantium ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ladonia_(micronation)> <http://dbpedia.org/ontology/officialLanguage> ?uri. <http://dbpedia.org/resource/Empire_of_Atlantium> <http://dbpedia.org/ontology/officialLanguage> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the common official language of the ladonia and Empire of Atlantium ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?language
WHERE {
  ?country dbo:officialLanguage ?language .
  FILTER (regex(?country, ""Ladonia"", ""i"") || regex(?country, ""Atlantium"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?language
WHERE {
  ?country dbo:officialLanguage ?language .
  FILTER (regex(?country, ""Ladonia"", ""i"") || regex(?country, ""Atlantium"", ""i""))
}",3.0943809285865547e-155,0.08,True,True
1287,Which awards have been given to the horse who sired Triplicate?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Triplicate> <http://dbpedia.org/property/sire> ?x . ?x <http://dbpedia.org/ontology/honours> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which awards have been given to the horse who sired Triplicate?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?award
WHERE {
  ?horse dbo:sired ?offspring .
  ?offspring dbp:name ""Triplicate""^^xsd:string .
  ?horse dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?award
WHERE {
  ?horse dbo:sired ?offspring .
  ?offspring dbp:name ""Triplicate""^^xsd:string .
  ?horse dbo:award ?award .
}",3.53714058675999e-155,0.08108108108108109,True,True
1781,Terminal Station at Chattanooga is made by architects from which University?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Terminal_Station_(Chattanooga)> . ?x <http://dbpedia.org/property/education> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Terminal Station at Chattanooga is made by architects from which University?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?university
WHERE {
  ?station dbo:architect ?architect .
  ?architect dbo:memberOf ?university .
  ?station rdfs:label ""Terminal Station at Chattanooga"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?university
WHERE {
  ?station dbo:architect ?architect .
  ?architect dbo:memberOf ?university .
  ?station rdfs:label ""Terminal Station at Chattanooga"" .
}",2.4410426763339902e-155,0.05263157894736842,True,True
4804,Which constructor's team won the 1967 Mexican Grand Prix ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1967_Mexican_Grand_Prix> <http://dbpedia.org/property/firstTeam> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which constructor's team won the 1967 Mexican Grand Prix ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?constructor ?team
WHERE {
  ?constructor dbo:driver ?driver .
  ?driver dbp:participatedInRace ?race .
  ?race dbo:name ""1967 Mexican Grand Prix"" .
  ?team dbo:teamOf ?driver .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?constructor ?team
WHERE {
  ?constructor dbo:driver ?driver .
  ?driver dbp:participatedInRace ?race .
  ?race dbo:name ""1967 Mexican Grand Prix"" .
  ?team dbo:teamOf ?driver .
}",2.2552086692851858e-155,0.05555555555555555,True,True
4070,What is the origin of Xynisteri?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xynisteri> <http://dbpedia.org/ontology/origin> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the origin of Xynisteri?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?origin
WHERE {
  ?wine dbo:origin ?origin .
  FILTER (regex(?wine, ""Xynisteri"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?origin
WHERE {
  ?wine dbo:origin ?origin .
  FILTER (regex(?wine, ""Xynisteri"", ""i""))
}",2.5488701582353735e-155,0.06349206349206349,True,True
4167,where did Deion Sanders debut?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Deion_Sanders> <http://dbpedia.org/property/debutteam> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: where did Deion Sanders debut?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?debutLocation
WHERE {
  ?person dbo:name ""Deion Sanders"" .
  ?person dbo:debutLocation ?debutLocation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?debutLocation
WHERE {
  ?person dbo:name ""Deion Sanders"" .
  ?person dbo:debutLocation ?debutLocation .
}",2.5488701582353735e-155,0.06451612903225806,True,True
3257,Give me some administrators of bridges over which cars can go?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/carries> <http://dbpedia.org/resource/Motor_vehicle> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me some administrators of bridges over which cars can go?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bridge ?admin
WHERE {
  ?bridge dbo:type dbo:Bridge .
  ?bridge dbp:hasVehicleType ""car"" .
  ?bridge dbo:hasAdministrator ?admin .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bridge ?admin
WHERE {
  ?bridge dbo:type dbo:Bridge .
  ?bridge dbp:hasVehicleType ""car"" .
  ?bridge dbo:hasAdministrator ?admin .
}",3.0566417519593477e-155,0.06578947368421052,True,True
2688,Who were the pole drivers in GP when Damon hill was the first driver?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/firstDriver> <http://dbpedia.org/resource/Damon_Hill> . ?x <http://dbpedia.org/ontology/poleDriver> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who were the pole drivers in GP when Damon hill was the first driver?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?driver
WHERE {
  ?driver dbo:birthDate ?birthDate .
  ?driver dbo:profession ""Formula One driver""^^rdfs:Literal .
  ?driver dbo:participatedInEvent ?event .
  ?event dbo:name ""British Grand Prix"" .
  ?event dbo:startYear ?startYear .
  FILTER(?startYear = 1996)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?driver
WHERE {
  ?driver dbo:birthDate ?birthDate .
  ?driver dbo:profession ""Formula One driver""^^rdfs:Literal .
  ?driver dbo:participatedInEvent ?event .
  ?event dbo:name ""British Grand Prix"" .
  ?event dbo:startYear ?startYear .
  FILTER(?startYear = 1996)
}",2.7832917260583544e-155,0.056818181818181816,True,True
4837,Is San Salvador Island a part of the Bahamas?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/San_Salvador_Island> <http://dbpedia.org/ontology/archipelago> <http://dbpedia.org/resource/The_Bahamas> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is San Salvador Island a part of the Bahamas?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:country ""Bahamas"" .
  ?x dbo:partOf ?y .
  ?y dbo:name ""San Salvador Island"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:country ""Bahamas"" .
  ?x dbo:partOf ?y .
  ?y dbo:name ""San Salvador Island"" .
}",2.2300068516948962e-155,0.046153846153846156,True,True
1411,Who is the developer of Montecito Inn?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Montecito_Inn> <http://dbpedia.org/property/developer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the developer of Montecito Inn?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?developer
WHERE {
  ?hotel dbo:developer ?developer .
  FILTER (str(?hotel) = ""Montecito Inn"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?developer
WHERE {
  ?hotel dbo:developer ?developer .
  FILTER (str(?hotel) = ""Montecito Inn"")
}",2.5124539841526692e-155,0.06153846153846154,True,True
817,Henry McDaniel's trained horses have won which awards?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Henry_McDaniel_(racehorse_trainer)> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Henry McDaniel's trained horses have won which awards?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?horse dbo:trainedBy <http://dbpedia.org/resource/Henry_McDaniel> .
  ?horse dbo:wins ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?horse dbo:trainedBy <http://dbpedia.org/resource/Henry_McDaniel> .
  ?horse dbo:wins ?award .
}",3.2833699258334827e-155,0.07246376811594203,True,True
2119,List all crafts of the people whose one of the profession is Kingdom of Naples ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Kingdom_of_Naples> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all crafts of the people whose one of the profession is Kingdom of Naples ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?craft
WHERE {
  ?person dbo:profession dbp:Kingdom_of_Naples .
  ?person dbo:craft ?craft .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?craft
WHERE {
  ?person dbo:profession dbp:Kingdom_of_Naples .
  ?person dbo:craft ?craft .
}",3.0382827129023445e-155,0.06756756756756757,True,True
3203,Which gadgets are made by companies of New Taipei City?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/locationCity> <http://dbpedia.org/resource/New_Taipei_City> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which gadgets are made by companies of New Taipei City?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?gadget ?company
WHERE {
  ?gadget dbo:manufacturer ?company .
  ?company dbo:location dbo:NewTaipeiCity .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?gadget ?company
WHERE {
  ?gadget dbo:manufacturer ?company .
  ?company dbo:location dbo:NewTaipeiCity .
}",3.627276877392474e-155,0.08333333333333333,True,True
1149,Where does Dennis DeConcini and Scott Berkun both live?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Scott_Berkun> <http://dbpedia.org/property/residence> ?uri. <http://dbpedia.org/resource/Dennis_DeConcini> <http://dbpedia.org/property/residence> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where does Dennis DeConcini and Scott Berkun both live?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?person dbo:birthDate ?birth_date .
  ?person dbo:placeOfBirth ?location .
  FILTER ( ?person IN ( dbo:Dennis_DeConcini , dbo:Scott_Berkun ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?person dbo:birthDate ?birth_date .
  ?person dbo:placeOfBirth ?location .
  FILTER ( ?person IN ( dbo:Dennis_DeConcini , dbo:Scott_Berkun ) )
}",3.0566417519593477e-155,0.08,True,True
1835,Which club of perianne Lones is also the home town of the Kady O'Malley ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kady_O'Malley> <http://dbpedia.org/property/homeTown> ?uri. <http://dbpedia.org/resource/Perianne_Jones> <http://dbpedia.org/property/club> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which club of perianne Lones is also the home town of the Kady O'Malley ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?club
WHERE {
  ?person dbo:birthPlace ?town .
  ?town rdfs:label ""Kady O'Malley"" .
  ?person dbo:memberOf ?club .
  ?club dbo:location ?town .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?club
WHERE {
  ?person dbo:birthPlace ?town .
  ?town rdfs:label ""Kady O'Malley"" .
  ?person dbo:memberOf ?club .
  ?club dbo:location ?town .
}",2.637082623203696e-155,0.05128205128205128,True,True
1154,"Who is the person whose home town is Fairmount, Indiana?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Fairmount,_Indiana>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the person whose home town is Fairmount, Indiana?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:birthPlace dbp:Fairmount_Indiana .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:birthPlace dbp:Fairmount_Indiana .
}",8.319100378795605e-232,0.046875,True,True
3037,Where was the deadbody discovered of one of the alumni of General Educational Development?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/education> <http://dbpedia.org/resource/General_Educational_Development> . ?x <http://dbpedia.org/property/bodyDiscovered> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where was the deadbody discovered of one of the alumni of General Educational Development?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?person dbo:alumniOf <http://dbpedia.org/resource/General_Educational_Development> .
  ?person dbo:deathPlace ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?person dbo:alumniOf <http://dbpedia.org/resource/General_Educational_Development> .
  ?person dbo:deathPlace ?location .
}",3.954266712463121e-155,0.09722222222222222,True,True
2844,Name the common distributing label of the Chinga Chang Records and StandBy Records?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chinga_Chang_Records> <http://dbpedia.org/ontology/distributingLabel> ?uri. <http://dbpedia.org/resource/StandBy_Records> <http://dbpedia.org/ontology/distributingLabel> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the common distributing label of the Chinga Chang Records and StandBy Records?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?label
WHERE {
  ?recordLabel dbo:distributedBy ?recordCompany .
  ?recordCompany dbo:name ""Chinga Chang Records"" .
  ?recordCompany dbo:name ""StandBy Records"" .
  ?recordLabel rdfs:label ?label .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?label
WHERE {
  ?recordLabel dbo:distributedBy ?recordCompany .
  ?recordCompany dbo:name ""Chinga Chang Records"" .
  ?recordCompany dbo:name ""StandBy Records"" .
  ?recordLabel rdfs:label ?label .
}",3.229753418204598e-155,0.07894736842105263,True,True
382,Give the distinct number of other party of the people which have one of the party as Janata Party?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/otherParty> <http://dbpedia.org/resource/Janata_Party> . ?x <http://dbpedia.org/ontology/otherParty> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give the distinct number of other party of the people which have one of the party as Janata Party?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?otherParty
WHERE {
  ?person dbo:party ?party .
  ?party dbo:name ""Janata Party""^^xsd:string .
  ?person dbp:otherParty ?otherParty .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?otherParty
WHERE {
  ?person dbo:party ?party .
  ?party dbo:name ""Janata Party""^^xsd:string .
  ?person dbp:otherParty ?otherParty .
}",2.968021523431445e-155,0.07894736842105263,True,True
1157,List the shows whose company's successor is Amblin Television.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Amblin_Television> . ?uri <http://dbpedia.org/ontology/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the shows whose company's successor is Amblin Television.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?show
WHERE {
  ?show dbo:company ?company .
  ?company dbo:successor ?successor .
  ?successor dbo:name ""Amblin Television"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?show
WHERE {
  ?show dbo:company ?company .
  ?company dbo:successor ?successor .
  ?successor dbo:name ""Amblin Television"" .
}",3.1537059338519422e-155,0.06944444444444445,True,True
2578,Who is the publisher of The Rolling Stone Album Guide ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Rolling_Stone_Album_Guide> <http://dbpedia.org/ontology/publisher> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the publisher of The Rolling Stone Album Guide ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?publisher
WHERE {
  ?book dbo:title ""The Rolling Stone Album Guide"" .
  ?book dbo:publisher ?publisher .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?publisher
WHERE {
  ?book dbo:title ""The Rolling Stone Album Guide"" .
  ?book dbo:publisher ?publisher .
}",2.3962983105918537e-155,0.05970149253731343,True,True
4587,Name the river mouth of Moordener Kill ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moordener_Kill> <http://dbpedia.org/ontology/riverMouth> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the river mouth of Moordener Kill ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?riverMouth
WHERE {
  ?riverMouth dbo:mouthOf ?kill .
  ?kill dbo:name ""Moordener Kill"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?riverMouth
WHERE {
  ?riverMouth dbo:mouthOf ?kill .
  ?kill dbo:name ""Moordener Kill"" .
}",2.494821638843469e-155,0.0625,True,True
4116,What do the banks owned by Norwegian ministry of finance produce?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentCompany> <http://dbpedia.org/resource/Ministry_of_Finance_(Norway)> . ?x <http://dbpedia.org/property/products> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What do the banks owned by Norwegian ministry of finance produce?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?product
WHERE {
  ?bank dbo:country ""Norway""^^xsd:string .
  ?bank dbo:owner ?owner .
  ?owner dbo:name ""Norwegian Ministry of Finance""^^xsd:string .
  ?bank dbo:produces ?product .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?product
WHERE {
  ?bank dbo:country ""Norway""^^xsd:string .
  ?bank dbo:owner ?owner .
  ?owner dbo:name ""Norwegian Ministry of Finance""^^xsd:string .
  ?bank dbo:produces ?product .
}",2.951204860745888e-155,0.06329113924050633,True,True
4601,Katharevousa writers have been given which awards?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/movement> <http://dbpedia.org/resource/Katharevousa> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Katharevousa writers have been given which awards?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?writer dbo:birthPlace ""Greece"" .
  ?writer dbo:language ""Katharevousa"" .
  ?writer dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?writer dbo:birthPlace ""Greece"" .
  ?writer dbo:language ""Katharevousa"" .
  ?writer dbo:award ?award .
}",3.1537059338519422e-155,0.06944444444444445,True,True
1864,List the school of Bobby Skinstad?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bobby_Skinstad> <http://dbpedia.org/property/school> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the school of Bobby Skinstad?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Bobby Skinstad"" .
  ?person dbo:school ?school .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Bobby Skinstad"" .
  ?person dbo:school ?school .
}",2.530465559854518e-155,0.06451612903225806,True,True
3391,What is the municipality of Homestead Grays Bridge ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Homestead_Grays_Bridge> <http://dbpedia.org/ontology/municipality> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the municipality of Homestead Grays Bridge ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?municipality
WHERE {
  ?bridge dbo:location ?location .
  ?location dbp:municipality ?municipality .
  FILTER ( ?bridge = <http://dbpedia.org/resource/Homestead_Grays_Bridge> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?municipality
WHERE {
  ?bridge dbo:location ?location .
  ?location dbp:municipality ?municipality .
  FILTER ( ?bridge = <http://dbpedia.org/resource/Homestead_Grays_Bridge> )
}",2.533776972251024e-155,0.07246376811594203,True,True
3250,What is the area of Tar Heel Sports Network ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tar_Heel_Sports_Network> <http://dbpedia.org/property/area> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the area of Tar Heel Sports Network ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?area
WHERE {
  ?network dbo:area ?area .
  FILTER (regex(?network, ""Tar Heel Sports Network"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?area
WHERE {
  ?network dbo:area ?area .
  FILTER (regex(?network, ""Tar Heel Sports Network"", ""i""))
}",2.427831263680579e-155,0.058823529411764705,True,True
2118,What is the official residence of Sarah Kazemy ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sarah_Kazemy> <http://dbpedia.org/property/residence> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the official residence of Sarah Kazemy ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?residence
WHERE {
  ?person dbo:name ""Sarah Kazemy"" .
  ?person dbo:officialResidence ?residence .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?residence
WHERE {
  ?person dbo:name ""Sarah Kazemy"" .
  ?person dbo:officialResidence ?residence .
}",2.4775553999024465e-155,0.06153846153846154,True,True
254,Who are the politicians whose death place is Ontario?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Ontario>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the politicians whose death place is Ontario?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?politician ?politicianLabel
WHERE {
  ?politician dbo:deathPlace dbp:Ontario .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?politician ?politicianLabel
WHERE {
  ?politician dbo:deathPlace dbp:Ontario .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.4119102000777368e-155,0.056338028169014086,False,False
4065,"Through which important cities the does the river originating from the Duwamish, flow?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Green_River_(Duwamish_River)> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Through which important cities the does the river originating from the Duwamish, flow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?river dbo:source ?source .
  ?source dbo:name ""Duwamish"" .
  ?river dbo:flowsThrough ?city .
  FILTER (lang(?city) = 'en')
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?river dbo:source ?source .
  ?source dbo:name ""Duwamish"" .
  ?river dbo:flowsThrough ?city .
  FILTER (lang(?city) = 'en')
}",2.968021523431445e-155,0.06329113924050633,True,True
2199,What are some bands out to texarkana?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/origin> <http://dbpedia.org/resource/Texarkana,_Texas>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some bands out to texarkana?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?band ?bandLabel
WHERE {
  ?band dbo:genre ""Rock Music"" .
  ?band dbp:location ""Texarkana"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?band ?bandLabel
WHERE {
  ?band dbo:genre ""Rock Music"" .
  ?band dbp:location ""Texarkana"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.3659629744803227e-155,0.0547945205479452,False,False
2955,Whose children are married to Fredric Joliot-Curie?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Frédéric_Joliot-Curie> . ?uri <http://dbpedia.org/property/children> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose children are married to Fredric Joliot-Curie?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:spouse FredricJoliotCurie .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:spouse FredricJoliotCurie .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",3.2566703570358492e-155,0.08333333333333333,False,False
3897,How many information appliance are manufactured by companies located in Taiwan?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/locationCity> <http://dbpedia.org/resource/Taiwan> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many information appliance are manufactured by companies located in Taiwan?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?infoAppliance) AS ?count)
WHERE {
  ?infoAppliance dbo:type dbo:InformationAppliance .
  ?infoAppliance dbo:manufacturer ?manufacturer .
  ?manufacturer dbo:country ""Taiwan"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?infoAppliance) AS ?count)
WHERE {
  ?infoAppliance dbo:type dbo:InformationAppliance .
  ?infoAppliance dbo:manufacturer ?manufacturer .
  ?manufacturer dbo:country ""Taiwan"" .
}",2.455792850056901e-155,0.05063291139240506,True,True
2968,List the battles in which alumni of US Army Command and General Staff College fought?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/United_States_Army_Command_and_General_Staff_College> . ?x <http://dbpedia.org/property/battles> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the battles in which alumni of US Army Command and General Staff College fought?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?battle
WHERE {
  ?person dbo:alumniOf <http://dbpedia.org/resource/United_States_Army_Command_and_General_Staff_College> .
  ?person dbo:involvedIn ?battle .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?battle
WHERE {
  ?person dbo:alumniOf <http://dbpedia.org/resource/United_States_Army_Command_and_General_Staff_College> .
  ?person dbo:involvedIn ?battle .
}",3.929931607904104e-155,0.09333333333333334,True,True
3946,"What is the job of the George Arceneaux, Jr. which is also the office of the Blanche Bruce?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/George_Arceneaux,_Jr.> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/Blanche_Bruce> <http://dbpedia.org/property/office> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the job of the George Arceneaux, Jr. which is also the office of the Blanche Bruce?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?job
WHERE {
  ?person dbo:birthPlace ""Louisiana, USA"" .
  ?person dbo:job ?job .
  FILTER (STR(?person) = ""http://dbpedia.org/resource/George_Arceneaux,_Jr."")
  ?person2 dbo:birthPlace ""Mississippi, USA"" .
  ?person2 dbo:job ?job .
  FILTER (STR(?person2) = ""http://dbpedia.org/resource/Blanche_Bruce"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?job
WHERE {
  ?person dbo:birthPlace ""Louisiana, USA"" .
  ?person dbo:job ?job .
  FILTER (STR(?person) = ""http://dbpedia.org/resource/George_Arceneaux,_Jr."")
  ?person2 dbo:birthPlace ""Mississippi, USA"" .
  ?person2 dbo:job ?job .
  FILTER (STR(?person2) = ""http://dbpedia.org/resource/Blanche_Bruce"")
}",1.978049756642675e-155,0.0375,True,True
720,How many services does the company who made Onedrive provide?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/service> <http://dbpedia.org/resource/OneDrive> . ?x <http://dbpedia.org/property/services> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many services does the company who made Onedrive provide?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?count
WHERE {
  ?company dbo:product ?product .
  ?product rdfs:label ""Onedrive"" .
  ?company dbo:offersService ?service .
  GROUP BY ?company
  
  
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?count
WHERE {
  ?company dbo:product ?product .
  ?product rdfs:label ""Onedrive"" .
  ?company dbo:offersService ?service .
  GROUP BY ?company
  
  
}",2.5703190919374843e-155,0.06578947368421052,False,False
2980,What sports are played at Vishwajyot High School?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vishwajyot_High_School> <http://dbpedia.org/ontology/sport> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What sports are played at Vishwajyot High School?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?sport
WHERE {
  ?school dbo:sports ?sport .
  FILTER (regex(?school, ""Vishwajyot High School"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?sport
WHERE {
  ?school dbo:sports ?sport .
  FILTER (regex(?school, ""Vishwajyot High School"", ""i""))
}",3.0940944781388835e-155,0.07352941176470588,True,True
3586,What is the name of the characters created by Frank Miller?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Frank_Miller_(comics)> . ?x <http://dbpedia.org/property/characterName> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the name of the characters created by Frank Miller?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?characterName
WHERE {
  ?character dbo:creator dbr:Frank_Miller .
  ?character rdfs:label ?characterName .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?characterName
WHERE {
  ?character dbo:creator dbr:Frank_Miller .
  ?character rdfs:label ?characterName .
}",2.5502845355614067e-155,0.056338028169014086,True,True
2799,Which sports are played in schools founded by Fr Almeida?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Fr._Almeida> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports are played in schools founded by Fr Almeida?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?school dbo:founder ?founder .
  ?founder dbo:name ""Fr Almeida"" .
  ?school dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?school dbo:founder ?founder .
  ?founder dbo:name ""Fr Almeida"" .
  ?school dbo:sports ?sport .
}",3.075337680136661e-155,0.06578947368421052,True,True
3139,What is the division of Serbia national American football team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Serbia_national_American_football_team> <http://dbpedia.org/ontology/division> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the division of Serbia national American football team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?division
WHERE {
  ?team dbo:nationalTeamOf ""Serbia"" .
  ?team dbo:sportsTeamDivision ?division .
  FILTER (regex(?team, ""American football"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?division
WHERE {
  ?team dbo:nationalTeamOf ""Serbia"" .
  ?team dbo:sportsTeamDivision ?division .
  FILTER (regex(?team, ""American football"", ""i""))
}",2.3809857162598948e-155,0.056338028169014086,True,True
113,What religions do politicians in the Korean Minjoo Party follow?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Minjoo_Party_of_Korea> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What religions do politicians in the Korean Minjoo Party follow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?religion
WHERE {
  ?politician dbo:memberOf <http://dbpedia.org/resource/Korean_Minjoo_Party> .
  ?politician dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?religion
WHERE {
  ?politician dbo:memberOf <http://dbpedia.org/resource/Korean_Minjoo_Party> .
  ?politician dbo:religion ?religion .
}",3.1742523358973992e-155,0.06944444444444445,True,True
644,Name a scientist whose official residence is Cape Town and also won a gold medal at the Royal Astronomical Society ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Gold_Medal_of_the_Royal_Astronomical_Society> . ?uri <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Cape_Town>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name a scientist whose official residence is Cape Town and also won a gold medal at the Royal Astronomical Society ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:officialResidence dbp:CapeTown .
  ?scientist dbo:award dbp:GoldMedal .
  ?scientist dbo:award rdfs:label ""Gold Medal"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:officialResidence dbp:CapeTown .
  ?scientist dbo:award dbp:GoldMedal .
  ?scientist dbo:award rdfs:label ""Gold Medal"" .
}",2.306811013701292e-155,0.04819277108433735,False,False
2790,What other awards have been given to Golden Globe winners?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Golden_Globe_Award> . ?x <http://dbpedia.org/property/awards> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What other awards have been given to Golden Globe winners?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?winner dbo:award ?award .
  FILTER (regex(?award, ""Golden Globe"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?winner dbo:award ?award .
  FILTER (regex(?award, ""Golden Globe"", ""i""))
}",3.216579438360415e-155,0.0821917808219178,True,True
2201,Which cover artist of the The Adventures of Tom Sawyer is also the source of inspiration of The Appple Tree ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> <http://dbpedia.org/ontology/coverArtist> ?uri. <http://dbpedia.org/resource/The_Apple_Tree> <http://dbpedia.org/ontology/basedOn> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which cover artist of the The Adventures of Tom Sawyer is also the source of inspiration of The Appple Tree ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:coverArtist ?book .
  ?book dbo:title ""The Adventures of Tom Sawyer""^^xsd:string .
  ?artist dbo:inspiration ?inspiration .
  ?inspiration dbo:title ""The Apple Tree""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:coverArtist ?book .
  ?book dbo:title ""The Adventures of Tom Sawyer""^^xsd:string .
  ?artist dbo:inspiration ?inspiration .
  ?inspiration dbo:title ""The Apple Tree""^^xsd:string .
}",2.4900858824700132e-155,0.04878048780487805,True,True
2062,"Where was Live in Detroit, MI recorded and was also palce of birth of the Bodhin Kjolhede?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri. <http://dbpedia.org/resource/Bodhin_Kjolhede> <http://dbpedia.org/property/placeOfBirth> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where was Live in Detroit, MI recorded and was also palce of birth of the Bodhin Kjolhede?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?album ?city
WHERE {
  ?album dbo:recordingLocation ?city .
  ?album dbo:title ""Live in Detroit, MI"" .
  ?person dbo:placeOfBirth ?city .
  ?person dbo:name ""Bodhin Kjolhede"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?album ?city
WHERE {
  ?album dbo:recordingLocation ?city .
  ?album dbo:title ""Live in Detroit, MI"" .
  ?person dbo:placeOfBirth ?city .
  ?person dbo:name ""Bodhin Kjolhede"" .
}",2.553782876480489e-155,0.04938271604938271,True,True
519,What is the label of things produced by the band If?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/If_(band)> . ?x <http://dbpedia.org/property/label> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the label of things produced by the band If?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?label
WHERE {
  ?band dbo:name ""If""@en .
  ?band dbo:produced ?work .
  ?work rdfs:label ?label .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?label
WHERE {
  ?band dbo:name ""If""@en .
  ?band dbo:produced ?work .
  ?work rdfs:label ?label .
}",3.0943809285865547e-155,0.06944444444444445,True,True
2487,How many non fiction topics does Thud! deals with?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Thud!> <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many non fiction topics does Thud! deals with?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?topic) AS ?count)
WHERE {
  ?book dbo:title ""Thud!"" .
  ?book dbo:genre ?genre .
  ?genre dbo:subGenre ?topic .
  FILTER(?genre != ""Fiction"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?topic) AS ?count)
WHERE {
  ?book dbo:title ""Thud!"" .
  ?book dbo:genre ?genre .
  ?genre dbo:subGenre ?topic .
  FILTER(?genre != ""Fiction"")
}",2.426555136425675e-155,0.0641025641025641,True,True
2304,What are the names of the casualties of Eric Harris and Dylan Klebold?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/deathCause> <http://dbpedia.org/resource/Eric_Harris_and_Dylan_Klebold>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the names of the casualties of Eric Harris and Dylan Klebold?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?casualtyName
WHERE {
  ?event dbo:victim ?casualty .
  ?casualty dbo:name ?casualtyName .
  FILTER (regex(?event, ""Eric Harris and Dylan Klebold"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?casualtyName
WHERE {
  ?event dbo:victim ?casualty .
  ?casualty dbo:name ?casualtyName .
  FILTER (regex(?event, ""Eric Harris and Dylan Klebold"", ""i""))
}",2.294894159058245e-155,0.0547945205479452,True,True
3092,Name the common editor of Easy Street (film) and Work (film)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Easy_Street_(film)> <http://dbpedia.org/ontology/editing> ?uri. <http://dbpedia.org/resource/Work_(film)> <http://dbpedia.org/ontology/editing> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the common editor of Easy Street (film) and Work (film)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?editor
WHERE {
  ?film dbo:director ?editor .
  FILTER ( ?film IN (
    <http://dbpedia.org/resource/Easy_Street_(film)>,
    <http://dbpedia.org/resource/Work_(film)>
  ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?editor
WHERE {
  ?film dbo:director ?editor .
  FILTER ( ?film IN (
    <http://dbpedia.org/resource/Easy_Street_(film)>,
    <http://dbpedia.org/resource/Work_(film)>
  ) )
}",3.2361225152319982e-155,0.0958904109589041,True,True
3949,Which royalty's spouse is Ptolemy XIV of Egypt?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ptolemy_XIV_of_Egypt>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which royalty's spouse is Ptolemy XIV of Egypt?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?royalty
WHERE {
  ?royalty dbo:spouse ?person .
  ?person dbo:birthDate ""1st century BC""^^xsd:gYear .
  ?person dbo:name ""Ptolemy XIV"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?royalty
WHERE {
  ?royalty dbo:spouse ?person .
  ?person dbo:birthDate ""1st century BC""^^xsd:gYear .
  ?person dbo:name ""Ptolemy XIV"" .
}",8.06798322521923e-232,0.04225352112676056,True,True
512,Who is the fictional character whose relative is Vestigial Peter?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Vestigial_Peter>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the fictional character whose relative is Vestigial Peter?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?character
WHERE {
  ?character dbo:relative ?relative .
  ?relative dbo:name ""Vestigial Peter"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?character
WHERE {
  ?character dbo:relative ?relative .
  ?relative dbo:name ""Vestigial Peter"" .
}",8.174867218666773e-232,0.04477611940298507,True,True
2090,Who is married to Susan Weber Soros?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Susan_Weber_Soros>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is married to Susan Weber Soros?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouse
WHERE {
  ?person dbo:spouse ?spouse .
  FILTER ( ?spouse = <http://dbpedia.org/resource/Susan_Weber_Soros> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouse
WHERE {
  ?person dbo:spouse ?spouse .
  FILTER ( ?spouse = <http://dbpedia.org/resource/Susan_Weber_Soros> )
}",9.352284301430419e-232,0.07462686567164178,True,True
3154,Which TV show's theme was composed by a band in which Todd Huth used to perform?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Todd_Huth> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which TV show's theme was composed by a band in which Todd Huth used to perform?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?show ?band
WHERE {
  ?show dbo:theme ?theme .
  ?theme dbo:composer ?composer .
  ?composer dbo:memberOf ?band .
  ?band dbo:member ?person .
  ?person dbo:name ""Todd Huth""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?show ?band
WHERE {
  ?show dbo:theme ?theme .
  ?theme dbo:composer ?composer .
  ?composer dbo:memberOf ?band .
  ?band dbo:member ?person .
  ?person dbo:name ""Todd Huth""^^xsd:string .
}",2.8262253362411533e-155,0.058823529411764705,True,True
4260,Which mainter of Pandaruan Bridge is also the land of Malaysia junior Hockey league ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pandaruan_Bridge> <http://dbpedia.org/ontology/maintainedBy> ?uri. <http://dbpedia.org/resource/Malaysia_Junior_Hockey_League> <http://dbpedia.org/ontology/country> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which mainter of Pandaruan Bridge is also the land of Malaysia junior Hockey league ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?maintainer ?land
WHERE {
  ?maintainer dbo:maintainerOf <http://dbpedia.org/resource/Pandaruan_Bridge> .
  ?land dbo:locationOf <http://dbpedia.org/resource/Malaysia_junior_Hockey_league> .
  ?maintainer rdfs:label ?maintainerLabel .
  ?land rdfs:label ?landLabel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?maintainer ?land
WHERE {
  ?maintainer dbo:maintainerOf <http://dbpedia.org/resource/Pandaruan_Bridge> .
  ?land dbo:locationOf <http://dbpedia.org/resource/Malaysia_junior_Hockey_league> .
  ?maintainer rdfs:label ?maintainerLabel .
  ?land rdfs:label ?landLabel .
}",2.788375385094078e-155,0.06329113924050633,True,True
4335,Which scientist is known for writing Philosophi Naturalis Principia Mathematica?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Philosophiæ_Naturalis_Principia_Mathematica> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which scientist is known for writing Philosophi Naturalis Principia Mathematica?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?scientist
WHERE {
  ?scientist dbo:birthPlace ?birthPlace .
  ?scientist dbo:knownFor dbp:Philosophi_Naturalis_Principia_Mathematica .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?scientist
WHERE {
  ?scientist dbo:birthPlace ?birthPlace .
  ?scientist dbo:knownFor dbp:Philosophi_Naturalis_Principia_Mathematica .
}",8.202720662090001e-232,0.046153846153846156,True,True
551,Which boarder country of Korean Peninsula was the state of Sodagreen?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Korean_Peninsula> <http://dbpedia.org/ontology/border> ?uri. <http://dbpedia.org/resource/Sodagreen> <http://dbpedia.org/ontology/country> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which boarder country of Korean Peninsula was the state of Sodagreen?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?band dbo:country ?country .
  ?band dbo:name ""Sodagreen"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?band dbo:country ?country .
  ?band dbo:name ""Sodagreen"" .
}",2.8496950006247937e-155,0.056338028169014086,True,True
3517,Was True Grit a novel of the western genre?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/True_Grit_(novel)> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Western_(genre)> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was True Grit a novel of the western genre?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?genre
WHERE {
  ?movie dbo:genre ?genre .
  FILTER ( ?genre = dbo:Western )
  ?movie dbo:title ""True Grit"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?genre
WHERE {
  ?movie dbo:genre ?genre .
  FILTER ( ?genre = dbo:Western )
  ?movie dbo:title ""True Grit"" .
}",2.215756877004116e-155,0.04411764705882353,True,True
886,What is the draft team of Gene Conley?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gene_Conley> <http://dbpedia.org/property/draftTeam> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the draft team of Gene Conley?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?draftTeam
WHERE {
  ?person dbo:name ""Gene Conley"" .
  ?person dbp:draftTeam ?draftTeam .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?draftTeam
WHERE {
  ?person dbo:name ""Gene Conley"" .
  ?person dbp:draftTeam ?draftTeam .
}",2.494821638843469e-155,0.0625,True,True
4429,Which child of Jack Ferguson became a Prime Minister?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ferguson> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which child of Jack Ferguson became a Prime Minister?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?child
WHERE {
  ?child dbo:father ?jack .
  ?jack dbo:name ""Jack Ferguson"" .
  ?child dbo:occupation ""Prime Minister"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?child
WHERE {
  ?child dbo:father ?jack .
  ?jack dbo:name ""Jack Ferguson"" .
  ?child dbo:occupation ""Prime Minister"" .
}",3.0943809285865547e-155,0.0684931506849315,True,True
613,List the newspapers which has headquarters in Stockholm?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Stockholm>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the newspapers which has headquarters in Stockholm?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?newspaper
WHERE {
  ?newspaper dbo:wikiPageRedirects* dbr:Stockholm
  ?newspaper dbo:headquarters ?location .
  ?location dbo:country ?country .
  FILTER ( ?country = dbr:Sweden )
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?newspaper
WHERE {
  ?newspaper dbo:wikiPageRedirects* dbr:Stockholm
  ?newspaper dbo:headquarters ?location .
  ?location dbo:country ?country .
  FILTER ( ?country = dbr:Sweden )
}",2.308595628361502e-155,0.05333333333333334,False,False
2027,GetTV is owned by which organisation?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: GetTV is owned by which organisation?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organisation
WHERE {
  <http://dbpedia.org/resource/GetTV> dbo:ownedBy ?organisation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organisation
WHERE {
  <http://dbpedia.org/resource/GetTV> dbo:ownedBy ?organisation .
}",9.59903638430083e-79,0.08333333333333333,True,True
1780,Which companies are founded in the city of which Collin County Texas is a part?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/part> <http://dbpedia.org/resource/Collin_County,_Texas> . ?uri <http://dbpedia.org/ontology/foundationPlace> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which companies are founded in the city of which Collin County Texas is a part?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?county dbo:locatedIn ?city .
  ?city dbo:country ?country .
  FILTER(?country = <http://dbpedia.org/resource/United_States>)
  ?county dbp:name ""Collin County, Texas"" .
  ?company dbo:foundedIn ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?county dbo:locatedIn ?city .
  ?city dbo:country ?country .
  FILTER(?country = <http://dbpedia.org/resource/United_States>)
  ?county dbp:name ""Collin County, Texas"" .
  ?company dbo:foundedIn ?city .
}",2.8559767164037747e-155,0.058823529411764705,True,True
2579,In which country was Gumus first aired which is also the mouth country of Upper Neretva?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Upper_Neretva> <http://dbpedia.org/ontology/mouthCountry> ?uri. <http://dbpedia.org/resource/Gümüş_(TV_series)> <http://dbpedia.org/property/firstAired> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which country was Gumus first aired which is also the mouth country of Upper Neretva?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?country
WHERE {
  ?tvShow dbo:country ?country .
  ?tvShow dbo:name ""Gumus"" .
  ?river dbo:mouth ?location .
  ?location dbo:country ?country .
  ?river dbo:name ""Upper Neretva"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?country
WHERE {
  ?tvShow dbo:country ?country .
  ?tvShow dbo:name ""Gumus"" .
  ?river dbo:mouth ?location .
  ?location dbo:country ?country .
  ?river dbo:name ""Upper Neretva"" .
}",2.0194805030799393e-155,0.0379746835443038,True,True
4941,Which band had members who are now in The Bleeding Heart Band?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/The_Bleeding_Heart_Band> . ?uri <http://dbpedia.org/ontology/formerBandMember> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which band had members who are now in The Bleeding Heart Band?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?band
WHERE {
  ?band dbo:member ?musician .
  ?musician dbo:member <http://dbpedia.org/resource/The_Bleeding_Heart_Band> .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?band
WHERE {
  ?band dbo:member ?musician .
  ?musician dbo:member <http://dbpedia.org/resource/The_Bleeding_Heart_Band> .
}",3.6040982025556637e-155,0.08108108108108109,True,True
4990,Who are the tenants of the stadium which is a venue of WCW Mayhem ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WCW_Mayhem> <http://dbpedia.org/property/venue> ?x . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the tenants of the stadium which is a venue of WCW Mayhem ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?tenant
WHERE {
  ?stadium dbo:venueOf ?event .
  ?event dbo:name ""WCW Mayhem"" .
  ?stadium dbo:tenant ?tenant .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?tenant
WHERE {
  ?stadium dbo:venueOf ?event .
  ?event dbo:name ""WCW Mayhem"" .
  ?stadium dbo:tenant ?tenant .
}",2.9851289841006984e-155,0.06493506493506493,True,True
4175,What kind of games are made by Interplay Entertainment?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Interplay_Entertainment> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What kind of games are made by Interplay Entertainment?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?gameType
WHERE {
  ?game dbo:producer Interplay Entertainment .
  ?game dbo:genre ?gameType .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?gameType
WHERE {
  ?game dbo:producer Interplay Entertainment .
  ?game dbo:genre ?gameType .
}",3.2383880054191053e-155,0.07142857142857142,False,False
51,Where did the office holder died who is successor to Elmer Burkett ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Elmer_Burkett> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the office holder died who is successor to Elmer Burkett ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?successor dbo:successorOf ?predecessor .
  ?predecessor dbo:name ""Elmer Burkett"" .
  ?successor dbo:deathPlace ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?successor dbo:successorOf ?predecessor .
  ?predecessor dbo:name ""Elmer Burkett"" .
  ?successor dbo:deathPlace ?location .
}",2.486113577066771e-155,0.05333333333333334,True,True
2109,What religion is Kabir Suman from?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/birthName> <http://dbpedia.org/resource/Kabir_Suman> . ?x <http://dbpedia.org/property/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What religion is Kabir Suman from?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religion
WHERE {
  <http://dbpedia.org/resource/Kabir_Suman> dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religion
WHERE {
  <http://dbpedia.org/resource/Kabir_Suman> dbo:religion ?religion .
}",3.4569587276028865e-155,0.09523809523809523,True,True
1361,Which person's successor is Samsu-iluna?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Samsu-iluna>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which person's successor is Samsu-iluna?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:successor Samsu-iluna .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:successor Samsu-iluna .
}",8.477028509227734e-232,0.04918032786885246,False,False
3562,Who owns the broadcast network founded by CNN?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/CNN> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who owns the broadcast network founded by CNN?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?owner
WHERE {
  ?network dbo:foundedBy <http://dbpedia.org/resource/Ted_Turner> .
  ?network dbo:parentOrganization ?owner .
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?owner
WHERE {
  ?network dbo:foundedBy <http://dbpedia.org/resource/Ted_Turner> .
  ?network dbo:parentOrganization ?owner .
}",2.601812955123188e-155,0.058823529411764705,True,True
2553,Murray Gold has composed music for how many things?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Murray_Gold>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Murray Gold has composed music for how many things?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?composition) AS ?count)
WHERE {
  ?composition dbo:composer Murray Gold .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?composition) AS ?count)
WHERE {
  ?composition dbo:composer Murray Gold .
}",2.4606427705034855e-155,0.05970149253731343,False,False
1349,List the organisation with motive for peace and environmentalism?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Peace> . ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the organisation with motive for peace and environmentalism?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?organisation
WHERE {
  ?organisation dbo:wikiPageRedirects* dbo:Organisation .
  ?organisation dbo:description ?description .
  FILTER (regex(?description, ""peace"", ""i"") && regex(?description, ""environment"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?organisation
WHERE {
  ?organisation dbo:wikiPageRedirects* dbo:Organisation .
  ?organisation dbo:description ?description .
  FILTER (regex(?description, ""peace"", ""i"") && regex(?description, ""environment"", ""i""))
}",3.0943809285865547e-155,0.06756756756756757,True,True
1196,Of what all has David Ian Salter been an editor of?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/David_Ian_Salter> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Of what all has David Ian Salter been an editor of?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?item
WHERE {
  ?item dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/David_Ian_Salter> .
  ?item dbo:editorship ?editor .
  FILTER ( ?editor = <http://dbpedia.org/resource/David_Ian_Salter> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?item
WHERE {
  ?item dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/David_Ian_Salter> .
  ?item dbo:editorship ?editor .
  FILTER ( ?editor = <http://dbpedia.org/resource/David_Ian_Salter> )
}",2.486113577066771e-155,0.0684931506849315,True,True
1360,Which engine's successor's predecessor is BMW M10?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/BMW_M10> . ?uri <http://dbpedia.org/ontology/successor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Engine>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which engine's successor's predecessor is BMW M10?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?engine ?successor
WHERE {
  ?engine dbo:successor ?successor .
  ?successor dbo:predecessor <http://dbpedia.org/resource/BMW_M10> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?engine ?successor
WHERE {
  ?engine dbo:successor ?successor .
  ?successor dbo:predecessor <http://dbpedia.org/resource/BMW_M10> .
}",3.776411644491886e-155,0.08823529411764706,True,True
4364,Who is considered to be the deciding person when it comes to crustaceans from the Balanidae family?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Balanidae> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Crustacean>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is considered to be the deciding person when it comes to crustaceans from the Balanidae family?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:description ""deciding person for crustaceans from the Balanidae family"".
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:description ""deciding person for crustaceans from the Balanidae family"".
}",2.135639655544596e-155,0.04054054054054054,True,True
3774,What are some cartoons distributed by a subsidiary of Time Warner?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentCompany> <http://dbpedia.org/resource/Time_Warner> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cartoon>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some cartoons distributed by a subsidiary of Time Warner?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?cartoon WHERE {
  ?cartoon dbo:distributor ?distributor .
  ?distributor dbo:parentOrganization ?parent .
  ?parent dbo:name ""Time Warner"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?cartoon WHERE {
  ?cartoon dbo:distributor ?distributor .
  ?distributor dbo:parentOrganization ?parent .
  ?parent dbo:name ""Time Warner"" .
}",3.0566417519593477e-155,0.06578947368421052,True,True
3455,List the trainers of Shinya Aoki ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Shinya_Aoki> <http://dbpedia.org/ontology/trainer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the trainers of Shinya Aoki ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?trainer
WHERE {
  ?person dbo:name ""Shinya Aoki"" .
  ?person dbp:trainer ?trainer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?trainer
WHERE {
  ?person dbo:name ""Shinya Aoki"" .
  ?person dbp:trainer ?trainer .
}",3.1370721297783126e-155,0.078125,True,True
284,Greater Napanee is the home town of what people?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Greater_Napanee>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Greater Napanee is the home town of what people?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo: hometown ?location .
  ?location dbo:name ""Greater Napanee"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo: hometown ?location .
  ?location dbo:name ""Greater Napanee"" .
}",2.4440718429993668e-155,0.058823529411764705,False,False
4976,How many have family as Ape and order (taxonomy) is Primate ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Ape> . ?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Primate> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many have family as Ape and order (taxonomy) is Primate ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x rdf:type dbo:Animal .
  ?x dbo:family ""Ape"" .
  ?x dbo:order ?order .
  FILTER (regex(?order, ""Primate"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x rdf:type dbo:Animal .
  ?x dbo:family ""Ape"" .
  ?x dbo:order ?order .
  FILTER (regex(?order, ""Primate"", ""i""))
}",8.412065649527267e-232,0.04878048780487805,True,True
1825,"How many awards have been received by graduates of University of Melbourne, Faculty of VCA & MCM?",google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/training> <http://dbpedia.org/resource/University_of_Melbourne_Faculty_of_VCA_and_MCM> . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many awards have been received by graduates of University of Melbourne, Faculty of VCA & MCM?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ex: <http://example.org/>

SELECT (COUNT(?award) AS ?awardCount)
WHERE {
  ?graduate dbo:almaMater ?university .
  ?university rdfs:label ""University of Melbourne"" .
  ?graduate dbo:memberOf ?faculty .
  ?faculty rdfs:label ""Faculty of VCA & MCM"" .
  ?graduate dbo:award ?award .
}
GROUP BY ?university
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ex: <http://example.org/>

SELECT (COUNT(?award) AS ?awardCount)
WHERE {
  ?graduate dbo:almaMater ?university .
  ?university rdfs:label ""University of Melbourne"" .
  ?graduate dbo:memberOf ?faculty .
  ?faculty rdfs:label ""Faculty of VCA & MCM"" .
  ?graduate dbo:award ?award .
}
GROUP BY ?university",2.665354403099517e-155,0.054945054945054944,True,True
1938,In which state is Dorchester Bay (Boston Harbor)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dorchester_Bay_(Boston_Harbor)> <http://dbpedia.org/property/state> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which state is Dorchester Bay (Boston Harbor)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?bay dbo:location ?location .
  ?location dbo:country ""United States"" .
  ?location dbo:state ?state .
  FILTER (regex(?bay, ""Dorchester Bay""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?bay dbo:location ?location .
  ?location dbo:country ""United States"" .
  ?location dbo:state ?state .
  FILTER (regex(?bay, ""Dorchester Bay""))
}",2.3659629744803227e-155,0.056338028169014086,True,True
933,Count all the games whose distributors are located in America.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/country> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/distributor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all the games whose distributors are located in America.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?gameCount
WHERE {
  ?game dbo:distributor ?distributor .
  ?distributor dbo:country ""America""^^xsd:string .
  
}
GROUP BY ?game
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?gameCount
WHERE {
  ?game dbo:distributor ?distributor .
  ?distributor dbo:country ""America""^^xsd:string .
  
}
GROUP BY ?game",3.195205633963664e-155,0.06944444444444445,True,True
2927,Count the number of sports played by the universities whose one of the sports is baketball ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/athletics> <http://dbpedia.org/resource/Basketball> . ?x <http://dbpedia.org/property/athletics> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of sports played by the universities whose one of the sports is baketball ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?university ?sports
WHERE {
  ?university dbo:sports ?sports .
  ?sports dbo:name ""Basketball"" .
  
}
GROUP BY ?university
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?university ?sports
WHERE {
  ?university dbo:sports ?sports .
  ?sports dbo:name ""Basketball"" .
  
}
GROUP BY ?university",2.3983374600418706e-155,0.06578947368421052,True,True
679,Which country's people work in the Birdman enterprises?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/Birdman_Enterprises> . ?x <http://dbpedia.org/property/nationality> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Engineer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which country's people work in the Birdman enterprises?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?company dbo:country ?country .
  ?company dbo:name ""Birdman enterprises"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?company dbo:country ?country .
  ?company dbo:name ""Birdman enterprises"" .
}",3.2606462774617748e-155,0.07246376811594203,True,True
2275,What are the baseball teams who belongs to Guggenheim Partners?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Guggenheim_Partners>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the baseball teams who belongs to Guggenheim Partners?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?team dbo:owner ?owner .
  ?owner dbo:name ""Guggenheim Partners"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?team dbo:owner ?owner .
  ?owner dbo:name ""Guggenheim Partners"" .
}",2.4440718429993668e-155,0.057971014492753624,True,True
875,Who are the characters of Batman Live?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Batman_Live> <http://dbpedia.org/property/characters> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the characters of Batman Live?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?character
WHERE {
  ?character dbo:wikiPageRedirects ?batmanLive .
  ?batmanLive dbo:character ?character .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?character
WHERE {
  ?character dbo:wikiPageRedirects ?batmanLive .
  ?batmanLive dbo:character ?character .
}",3.159243630213636e-155,0.08064516129032258,True,True
1167,From how many different places have people gone to the Harward Medical School?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/Harvard_Medical_School> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: From how many different places have people gone to the Harward Medical School?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?placeCount
WHERE {
  ?school dbo:almaMater ?person .
  ?person dbp:birthPlace ?place .
  GROUP BY ?place
  
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?placeCount
WHERE {
  ?school dbo:almaMater ?person .
  ?person dbp:birthPlace ?place .
  GROUP BY ?place
  
}",2.6349938432494677e-155,0.06666666666666667,False,False
2552,In which mountain range does the Rochers De Naye lie?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentMountainPeak> <http://dbpedia.org/resource/Rochers_de_Naye> . ?x <http://dbpedia.org/ontology/mountainRange> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which mountain range does the Rochers De Naye lie?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?mountainRange
WHERE {
  ?mountainRange dbo:locatedIn ?location .
  ?location dbo:name ""Rochers De Naye"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?mountainRange
WHERE {
  ?mountainRange dbo:locatedIn ?location .
  ?location dbo:name ""Rochers De Naye"" .
}",3.6750083101231446e-155,0.08571428571428572,True,True
2575,List the destinations to which the airlines headquartered at the Gatwick Airport fly to?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Gatwick_Airport> . ?x <http://dbpedia.org/ontology/destination> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the destinations to which the airlines headquartered at the Gatwick Airport fly to?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?destination
WHERE {
  ?airline dbo:headquarters <http://dbpedia.org/resource/Gatwick_Airport> .
  ?airline dbo:fliesTo ?destination .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?destination
WHERE {
  ?airline dbo:headquarters <http://dbpedia.org/resource/Gatwick_Airport> .
  ?airline dbo:fliesTo ?destination .
}",3.559043432561587e-155,0.08108108108108109,True,True
4703,Who is the  distributor of Rev (drink) ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rev_(drink)> <http://dbpedia.org/ontology/distributor> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the  distributor of Rev (drink) ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?distributor
WHERE {
  ?drink dbo:distributor ?distributor .
  FILTER (str(?drink) = ""Rev (drink)"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?distributor
WHERE {
  ?drink dbo:distributor ?distributor .
  FILTER (str(?drink) = ""Rev (drink)"")
}",2.494821638843469e-155,0.06060606060606061,True,True
4064,Who wrote A house not meant to stand and Akale?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A_House_Not_Meant_to_Stand> <http://dbpedia.org/property/writer> ?uri. <http://dbpedia.org/resource/Akale> <http://dbpedia.org/ontology/writer> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who wrote A house not meant to stand and Akale?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?author
WHERE {
  ?book dbo:author ?author .
  FILTER (regex(?book, ""A house not meant to stand"", ""i""))
  UNION
  FILTER (regex(?book, ""Akale"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?author
WHERE {
  ?book dbo:author ?author .
  FILTER (regex(?book, ""A house not meant to stand"", ""i""))
  UNION
  FILTER (regex(?book, ""Akale"", ""i""))
}",2.7453983469116385e-155,0.05405405405405406,False,False
2519,From what american football teams did Carlos Emmons play?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carlos_Emmons_(American_football)> <http://dbpedia.org/ontology/formerTeam> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: From what american football teams did Carlos Emmons play?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthPlace ""United States"" .
  ?player dbo:name ""Carlos Emmons"" .
  ?player dbp:playedFor ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthPlace ""United States"" .
  ?player dbo:name ""Carlos Emmons"" .
  ?player dbp:playedFor ?team .
}",2.99393103522275e-155,0.07142857142857142,True,True
4607,List the subjects of the books whose one of the topics is Pau Broca ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/subject> <http://dbpedia.org/resource/Paul_Broca> . ?x <http://dbpedia.org/property/subject> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the subjects of the books whose one of the topics is Pau Broca ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?book
WHERE {
  ?book rdf:type dbo:Book .
  ?book dbo:topic ?topic .
  ?topic dbo:subject ?subject .
  FILTER (regex(?subject, ""Pau Broca"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?book
WHERE {
  ?book rdf:type dbo:Book .
  ?book dbo:topic ?topic .
  ?topic dbo:subject ?subject .
  FILTER (regex(?subject, ""Pau Broca"", ""i""))
}",2.91841165985534e-155,0.0625,True,True
753,Name the river whose source mountain is Baikal Mountains and mouth location is Arctic Ocean?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Baikal_Mountains> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Arctic_Ocean>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the river whose source mountain is Baikal Mountains and mouth location is Arctic Ocean?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:sourceMountain <http://dbpedia.org/resource/Baikal_Mountains> .
  ?river dbo:mouth <http://dbpedia.org/resource/Arctic_Ocean> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:sourceMountain <http://dbpedia.org/resource/Baikal_Mountains> .
  ?river dbo:mouth <http://dbpedia.org/resource/Arctic_Ocean> .
}",3.0943809285865547e-155,0.06756756756756757,True,True
2196,In which cities are there stations of SCOLA?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/broadcastNetwork> <http://dbpedia.org/resource/SCOLA_(TV_service)> . ?x <http://dbpedia.org/property/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionStation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which cities are there stations of SCOLA?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city ?station
WHERE {
  ?station dbo:operator ?operator .
  ?operator dbo:name ""SCOLA""^^xsd:string .
  ?station dbp:location ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city ?station
WHERE {
  ?station dbo:operator ?operator .
  ?operator dbo:name ""SCOLA""^^xsd:string .
  ?station dbp:location ?city .
}",3.1137823863213763e-155,0.0684931506849315,True,True
1293,List the awards given to the race horses bred by Willis Sharpe Kilmer.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/breeder> <http://dbpedia.org/resource/Willis_Sharpe_Kilmer> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RaceHorse>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the awards given to the race horses bred by Willis Sharpe Kilmer.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?award
WHERE {
  ?horse dbo:bredBy ?breeder .
  ?breeder dbo:name ""Willis Sharpe Kilmer"" .
  ?horse dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?award
WHERE {
  ?horse dbo:bredBy ?breeder .
  ?breeder dbo:name ""Willis Sharpe Kilmer"" .
  ?horse dbo:award ?award .
}",3.0025357216578434e-155,0.06493506493506493,True,True
3542,What are the movies with Daniel Waters as screenwriter?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Daniel_Waters_(screenwriter)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the movies with Daniel Waters as screenwriter?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movieLabel ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Daniel Waters"" .
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movieLabel ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Daniel Waters"" .
}",2.4440718429993668e-155,0.057971014492753624,True,True
2665,In what tv shows did Jason Carter act?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In what tv shows did Jason Carter act?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?show
WHERE {
  ?actor dbo:name ""Jason Carter"" .
  ?actor dbp:filmography ?show .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?show
WHERE {
  ?actor dbo:name ""Jason Carter"" .
  ?actor dbp:filmography ?show .
}",2.4775553999024465e-155,0.058823529411764705,True,True
183,Count the wars in which people awarded with the Croix de guerre fought.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Croix_de_guerre_1939–1945_(France)> . ?x <http://dbpedia.org/property/battles> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the wars in which people awarded with the Croix de guerre fought.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?war
WHERE {
  ?person dbo:award dbo:CroixDeGuerre .
  ?person dbo:participatedIn ?war .
}
GROUP BY ?war
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?war
WHERE {
  ?person dbo:award dbo:CroixDeGuerre .
  ?person dbo:participatedIn ?war .
}
GROUP BY ?war",2.4708136900731027e-155,0.05263157894736842,True,True
4988,Who is the father of Edith Vonnegut and is also a writer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edith_Vonnegut>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the father of Edith Vonnegut and is also a writer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?father ?fatherLabel
WHERE {
  ?father dbo:child ?edith .
  ?edith dbo:name ""Edith Vonnegut"" .
  ?father dbo:occupation ""Writer"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?father ?fatherLabel
WHERE {
  ?father dbo:child ?edith .
  ?edith dbo:name ""Edith Vonnegut"" .
  ?father dbo:occupation ""Writer"" .
}",7.992219124248642e-232,0.04285714285714286,True,True
2595,Is morrissey in the smiths?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Morrissey> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/The_Smiths> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is morrissey in the smiths?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Morrissey"" .
  ?x dbo:memberOf ?y .
  ?y dbo:name ""The Smiths"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Morrissey"" .
  ?x dbo:memberOf ?y .
  ?y dbo:name ""The Smiths"" .
}",2.305625093843957e-155,0.04918032786885246,True,True
299,How many maintainers are there of the bridges that can carry motor vehicles over them?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/carries> <http://dbpedia.org/resource/Motor_vehicle> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many maintainers are there of the bridges that can carry motor vehicles over them?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?maintainer) AS ?count)
WHERE {
  ?bridge dbo:bridgeType ""Bridge"" .
  ?bridge dbo:hasPart ?part .
  ?part dbo:isPartOf ?bridge .
  ?bridge dbo:maintainer ?maintainer .
  ?bridge dbo:hasPart ?vehicle_carrying_part .
  ?vehicle_carrying_part dbo:vehicleType ""Motor vehicle"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?maintainer) AS ?count)
WHERE {
  ?bridge dbo:bridgeType ""Bridge"" .
  ?bridge dbo:hasPart ?part .
  ?part dbo:isPartOf ?bridge .
  ?bridge dbo:maintainer ?maintainer .
  ?bridge dbo:hasPart ?vehicle_carrying_part .
  ?vehicle_carrying_part dbo:vehicleType ""Motor vehicle"" .
}",2.7832917260583544e-155,0.058823529411764705,True,True
395,How many golf players are there in Arizona State Sun Devils?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/college> <http://dbpedia.org/resource/Arizona_State_Sun_Devils>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many golf players are there in Arizona State Sun Devils?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:sportsTeam ?sport .
  ?sport rdfs:label ""American football""@en .
  ?team dbo:location dbo:Arizona .
  ?team dbo:name ""Arizona State Sun Devils""@en .
  ?player dbo:memberOf ?team .
  ?player dbo:occupation dbo:Golfer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:sportsTeam ?sport .
  ?sport rdfs:label ""American football""@en .
  ?team dbo:location dbo:Arizona .
  ?team dbo:name ""Arizona State Sun Devils""@en .
  ?player dbo:memberOf ?team .
  ?player dbo:occupation dbo:Golfer .
}",7.601159375410181e-232,0.03529411764705882,True,True
4919,Tell me the total number of organizations who maintain the bridges made by the malaysian PWD?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Malaysian_Public_Works_Department> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Tell me the total number of organizations who maintain the bridges made by the malaysian PWD?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?org) AS ?count)
WHERE {
  ?bridge dbo:maintainer ?org .
  ?bridge dbo:constructionCompany ""Malaysian Public Works Department""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?org) AS ?count)
WHERE {
  ?bridge dbo:maintainer ?org .
  ?bridge dbo:constructionCompany ""Malaysian Public Works Department""^^xsd:string .
}",2.384592839964215e-155,0.04819277108433735,True,True
1890,Which movies' music is composed by people associated with the band Yes?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Yes_(band)> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which movies' music is composed by people associated with the band Yes?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?movie ?composer
WHERE {
  ?movie dbo:musicBy ?composer .
  ?composer dbo:memberOf ?band .
  ?band dbo:name ""Yes"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?movie ?composer
WHERE {
  ?movie dbo:musicBy ?composer .
  ?composer dbo:memberOf ?band .
  ?band dbo:name ""Yes"" .
}",3.0382827129023445e-155,0.06578947368421052,True,True
607,What religion's politicians are in the Malaysian Chinese association?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Malaysian_Chinese_Association> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What religion's politicians are in the Malaysian Chinese association?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion ?politician
WHERE {
  ?politician dbo:religion ?religion .
  ?politician dbp:memberOf ?association .
  ?association dbo:name ""Malaysian Chinese Association"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion ?politician
WHERE {
  ?politician dbo:religion ?religion .
  ?politician dbp:memberOf ?association .
  ?association dbo:name ""Malaysian Chinese Association"" .
}",3.1137823863213763e-155,0.06944444444444445,True,True
2846,Which line of the Vadodara Junction railway station is the route end of Mumbai Vadodara Expressway?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mumbai_Vadodara_Expressway> <http://dbpedia.org/ontology/routeEnd> ?uri. <http://dbpedia.org/resource/Vadodara_Junction_railway_station> <http://dbpedia.org/property/line> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which line of the Vadodara Junction railway station is the route end of Mumbai Vadodara Expressway?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?line
WHERE {
  ?station dbo:location/dbp:location ?location .
  ?location dbo:name ""Vadodara Junction"" .
  ?station dbo:railwayLine ?line .
  ?line rdfs:label ""Mumbai Vadodara Expressway"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?line
WHERE {
  ?station dbo:location/dbp:location ?location .
  ?location dbo:name ""Vadodara Junction"" .
  ?station dbo:railwayLine ?line .
  ?line rdfs:label ""Mumbai Vadodara Expressway"" .
}",2.5944303248170386e-155,0.05,True,True
251,Under which archipelago does Canary Islands fall?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/archipelago> <http://dbpedia.org/resource/Canary_Islands> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Under which archipelago does Canary Islands fall?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?archipelago WHERE {
  ?island dbo:location ?location .
  ?location dbp:partOf ?archipelago .
  FILTER ( ?island = <http://dbpedia.org/resource/Canary_Islands> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?archipelago WHERE {
  ?island dbo:location ?location .
  ?location dbp:partOf ?archipelago .
  FILTER ( ?island = <http://dbpedia.org/resource/Canary_Islands> )
}",8.726094729337945e-232,0.058823529411764705,True,True
4625,Who are the tenants of the stadium where the UFC 140 is located?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/UFC_140> <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the tenants of the stadium where the UFC 140 is located?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?tenant
WHERE {
  ?stadium dbo:location <http://dbpedia.org/resource/Toronto> .
  ?stadium dbo:name ""Air Canada Centre""@en .
  ?stadium dbp:tenant ?tenant .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?tenant
WHERE {
  ?stadium dbo:location <http://dbpedia.org/resource/Toronto> .
  ?stadium dbo:name ""Air Canada Centre""@en .
  ?stadium dbp:tenant ?tenant .
}",3.0025357216578434e-155,0.06493506493506493,True,True
4296,List the awards given to the key people in Pixar ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pixar> <http://dbpedia.org/property/keyPeople> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the awards given to the key people in Pixar ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?person ?award
WHERE {
  ?person dbo:type dbo:Person .
  ?person dbo:occupation dbp:film_director .
  ?person dbo:award ?award .
  FILTER (regex(str(?person), ""Pixar"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?person ?award
WHERE {
  ?person dbo:type dbo:Person .
  ?person dbo:occupation dbp:film_director .
  ?person dbo:award ?award .
  FILTER (regex(str(?person), ""Pixar"", ""i""))
}",3.102414336582158e-155,0.07792207792207792,True,True
396,Which rivers start in Wyoming?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/Wyoming> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which rivers start in Wyoming?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?river
WHERE {
  ?river dbo:wikiPageRedirects* dbo:River .
  ?river dbp:sourceLocation dbo:Wyoming .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?river
WHERE {
  ?river dbo:wikiPageRedirects* dbo:River .
  ?river dbp:sourceLocation dbo:Wyoming .
}",2.5488701582353735e-155,0.06451612903225806,True,True
2447,Name the city of Duwamish River ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Duwamish_River> <http://dbpedia.org/ontology/city> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the city of Duwamish River ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?river dbo:location ?city .
  FILTER (regex(?river, ""Duwamish River"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?river dbo:location ?city .
  FILTER (regex(?river, ""Duwamish River"", ""i""))
}",2.5124539841526692e-155,0.06153846153846154,True,True
2875,Count the number of tenants whose one of the tenant is Toronto Phantoms ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Toronto_Phantoms> . ?x <http://dbpedia.org/ontology/tenant> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of tenants whose one of the tenant is Toronto Phantoms ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?tenant
WHERE {
  ?tenant dbo:tenant dbp:Toronto_Phantoms .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?tenant
WHERE {
  ?tenant dbo:tenant dbp:Toronto_Phantoms .
}",2.567119010698462e-155,0.07142857142857142,True,True
3189,"Which maintainer of Cheasty Boulevard South is also the county seat of King County, Washington?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cheasty_Boulevard_South> <http://dbpedia.org/ontology/maintainedBy> ?uri. <http://dbpedia.org/resource/King_County,_Washington> <http://dbpedia.org/ontology/countySeat> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which maintainer of Cheasty Boulevard South is also the county seat of King County, Washington?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?maintainer
WHERE {
  ?maintainer dbo:maintainerOf dbo:Cheasty_Boulevard_South .
  ?maintainer dbo:countySeatOf ?county .
  ?county dbo:name ""King County, Washington"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?maintainer
WHERE {
  ?maintainer dbo:maintainerOf dbo:Cheasty_Boulevard_South .
  ?maintainer dbo:countySeatOf ?county .
  ?county dbo:name ""King County, Washington"" .
}",2.1108049473741715e-155,0.03896103896103896,True,True
2386,Philadelphia City Council is the governing body of which city?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Philadelphia_City_Council> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Philadelphia City Council is the governing body of which city?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  <http://dbpedia.org/resource/Philadelphia_City_Council> dbo:governs ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  <http://dbpedia.org/resource/Philadelphia_City_Council> dbo:governs ?city .
}",8.93945512687472e-232,0.06349206349206349,True,True
1964,"Which educational institution has Kaplan, Inc as it's affiliation?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which educational institution has Kaplan, Inc as it's affiliation?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?institution
WHERE {
  ?institution dbo:affiliation ?affiliation .
  ?affiliation dbo:name ""Kaplan, Inc"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?institution
WHERE {
  ?institution dbo:affiliation ?affiliation .
  ?affiliation dbo:name ""Kaplan, Inc"" .
}",8.202720662090001e-232,0.04411764705882353,True,True
196,"Where did they debut their careers, those who have played for US men's national soccer team?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/United_States_men's_national_soccer_team> . ?x <http://dbpedia.org/property/debutteam> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did they debut their careers, those who have played for US men's national soccer team?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?player ?debutLocation
WHERE {
  ?player dbo:birthDate ?birthDate .
  ?player dbo:country ?country .
  FILTER(?country = ""United States"")
  ?player dbo:playsFor ?team .
  ?team dbo:name ""US men's national soccer team"" .
  ?player dbo:debutLocation ?debutLocation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?player ?debutLocation
WHERE {
  ?player dbo:birthDate ?birthDate .
  ?player dbo:country ?country .
  FILTER(?country = ""United States"")
  ?player dbo:playsFor ?team .
  ?team dbo:name ""US men's national soccer team"" .
  ?player dbo:debutLocation ?debutLocation .
}",3.1387693160635146e-155,0.06818181818181818,True,True
1445,Which team has had both Martin prochzka and garry unger as its players ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martin_Procházka> <http://dbpedia.org/ontology/formerTeam> ?uri. <http://dbpedia.org/resource/Garry_Unger> <http://dbpedia.org/ontology/formerTeam> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which team has had both Martin prochzka and garry unger as its players ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?team dbo:player ?player1 .
  ?player1 dbo:name ""Martin Procházka"" .
  ?team dbo:player ?player2 .
  ?player2 dbo:name ""Garry Unger"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?team dbo:player ?player1 .
  ?player1 dbo:name ""Martin Procházka"" .
  ?team dbo:player ?player2 .
  ?player2 dbo:name ""Garry Unger"" .
}",3.229753418204598e-155,0.0759493670886076,True,True
2179,List the honorary title given to the spouse of Lillian Disney ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lillian_Disney> <http://dbpedia.org/property/spouse> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the honorary title given to the spouse of Lillian Disney ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouseTitle
WHERE {
  ?lillian dbo:spouse ?spouse .
  ?spouse dbo:honorificPrefix ?spouseTitle .
  FILTER ( ?lillian = <http://dbpedia.org/resource/Lillian_Disney> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouseTitle
WHERE {
  ?lillian dbo:spouse ?spouse .
  ?spouse dbo:honorificPrefix ?spouseTitle .
  FILTER ( ?lillian = <http://dbpedia.org/resource/Lillian_Disney> )
}",2.7042882068441944e-155,0.08108108108108109,True,True
369,Name someone known for a project involved in the Occupation of Japan?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Occupation_of_Japan> . ?uri <http://dbpedia.org/property/knownFor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name someone known for a project involved in the Occupation of Japan?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:occupation ?occupation .
  ?occupation dbo:wikiPageRedirects ?occupationPage .
  ?occupationPage rdfs:label ""Occupation of Japan"" .
  FILTER (lang(?occupationPage) = 'en')
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:occupation ?occupation .
  ?occupation dbo:wikiPageRedirects ?occupationPage .
  ?occupationPage rdfs:label ""Occupation of Japan"" .
  FILTER (lang(?occupationPage) = 'en')
}",3.1205049827277816e-155,0.07894736842105263,True,True
2063,Which animal is the mascot of the 1502nd Infantry Brigade (Ready Reserve) and Galatasaray Handball Team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1502nd_Infantry_Brigade_(Ready_Reserve)> <http://dbpedia.org/property/mascot> ?uri. <http://dbpedia.org/resource/Galatasaray_Handball_Team> <http://dbpedia.org/property/mascot> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Animal>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which animal is the mascot of the 1502nd Infantry Brigade (Ready Reserve) and Galatasaray Handball Team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?animal
WHERE {
  ?animal dbo:mascotOf ?team .
  ?team dbo:name ""1502nd Infantry Brigade (Ready Reserve)"" .
  UNION
  ?team dbo:name ""Galatasaray Handball Team"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?animal
WHERE {
  ?animal dbo:mascotOf ?team .
  ?team dbo:name ""1502nd Infantry Brigade (Ready Reserve)"" .
  UNION
  ?team dbo:name ""Galatasaray Handball Team"" .
}",2.7287223683914353e-155,0.06172839506172839,False,False
3123,Momoko Kochi has acted in which movie ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Momoko_Kōchi>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Momoko Kochi has acted in which movie ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?movie
WHERE {
  dbr:Momoko_Kochi dbo:filmography ?movie .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?movie
WHERE {
  dbr:Momoko_Kochi dbo:filmography ?movie .
}",8.289228799996742e-232,0.045454545454545456,True,True
1565,What place is the birthplace of Vijay Chavan where Eka Lagnachi Teesri Goshta is located as well?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eka_Lagnachi_Teesri_Goshta> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Vijay_Chavan> <http://dbpedia.org/property/placeOfBirth> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What place is the birthplace of Vijay Chavan where Eka Lagnachi Teesri Goshta is located as well?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?place
WHERE {
  ?person dbo:birthPlace ?place .
  FILTER ( ?person = <http://dbpedia.org/resource/Vijay_Chavan> )
  ?place dbo:country ?country .
  ?country dbo:name ""India"" .
  ?movie dbo:country ?country .
  FILTER ( ?movie = <http://dbpedia.org/resource/Eka_Lagnachi_Teesri_Goshta> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?place
WHERE {
  ?person dbo:birthPlace ?place .
  FILTER ( ?person = <http://dbpedia.org/resource/Vijay_Chavan> )
  ?place dbo:country ?country .
  ?country dbo:name ""India"" .
  ?movie dbo:country ?country .
  FILTER ( ?movie = <http://dbpedia.org/resource/Eka_Lagnachi_Teesri_Goshta> )
}",2.9324767017223683e-155,0.09195402298850575,True,True
3008,Which river's source place is Gloucestershire and has mouth in North Sea?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Gloucestershire> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/North_Sea>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which river's source place is Gloucestershire and has mouth in North Sea?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river
WHERE {
  ?river dbo:sourcePlace dbo:Gloucestershire .
  ?river dbo:mouth dbp:North_Sea .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river
WHERE {
  ?river dbo:sourcePlace dbo:Gloucestershire .
  ?river dbo:mouth dbp:North_Sea .
}",2.5175858750356875e-155,0.05405405405405406,True,True
455,List the battles fought by Ali Habib Mahmud?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ali_Habib_Mahmud> <http://dbpedia.org/property/battles> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the battles fought by Ali Habib Mahmud?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?battle
WHERE {
  ?person dbo:name ""Ali Habib Mahmud"" .
  ?person dbo:involvedIn ?battle .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?battle
WHERE {
  ?person dbo:name ""Ali Habib Mahmud"" .
  ?person dbo:involvedIn ?battle .
}",3.0940944781388835e-155,0.07692307692307693,True,True
3993,What are the ideologies of the Union of Cambodian Democrats?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_of_Cambodian_Democrats> <http://dbpedia.org/ontology/ideology> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the ideologies of the Union of Cambodian Democrats?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?ideology
WHERE {
  ?party dbo:name ""Union of Cambodian Democrats"" .
  ?party dbo:ideology ?ideology .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?ideology
WHERE {
  ?party dbo:name ""Union of Cambodian Democrats"" .
  ?party dbo:ideology ?ideology .
}",3.032816514970993e-155,0.07692307692307693,True,True
3900,Who is the writer of mark twain Tonight?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/writer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the writer of mark twain Tonight?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?book dbo:author ?author .
  ?book rdfs:label ""Mark Twain Tonight""@en .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?book dbo:author ?author .
  ?book rdfs:label ""Mark Twain Tonight""@en .
}",2.4775553999024465e-155,0.06153846153846154,True,True
1788,Who was the australian flag bearer of 2008 Summer Olympics?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Australia_at_the_2008_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the australian flag bearer of 2008 Summer Olympics?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:birthPlace ""Australia"" .
  ?person dbo:olympicFlagBearer ""2008 Summer Olympics"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:birthPlace ""Australia"" .
  ?person dbo:olympicFlagBearer ""2008 Summer Olympics"" .
}",2.3962983105918537e-155,0.058823529411764705,True,True
586,List the opponents of the relatives of Thomas Helwys?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Thomas_Helwys> . ?x <http://dbpedia.org/ontology/opponent> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the opponents of the relatives of Thomas Helwys?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?relative ?opponent
WHERE {
  ?relative rdf:type dbo:Person .
  ?relative dbo:spouse ?helwys .
  ?helwys dbo:name ""Thomas Helwys""^^xsd:string .
  ?opponent dbo:opponentOf ?relative .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?relative ?opponent
WHERE {
  ?relative rdf:type dbo:Person .
  ?relative dbo:spouse ?helwys .
  ?helwys dbo:name ""Thomas Helwys""^^xsd:string .
  ?opponent dbo:opponentOf ?relative .
}",3.0025357216578434e-155,0.06756756756756757,True,True
394,Name the office holder whose child is Lori Black and predecessor is Henry E Catto Jr?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Lori_Black> . ?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Henry_E._Catto,_Jr.>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the office holder whose child is Lori Black and predecessor is Henry E Catto Jr?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:child ?child .
  ?child dbo:name ""Lori Black""^^xsd:string .
  ?person dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Henry E Catto Jr""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:child ?child .
  ?child dbo:name ""Lori Black""^^xsd:string .
  ?person dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Henry E Catto Jr""^^xsd:string .
}",8.34186146802972e-232,0.038461538461538464,True,True
989,What is the religion of the person who founded the Emel magazine?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Emel_(magazine)> <http://dbpedia.org/property/founder> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the religion of the person who founded the Emel magazine?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?religion
WHERE {
  ?founder dbo:founded <http://dbpedia.org/resource/Emel_(magazine)> .
  ?founder dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?religion
WHERE {
  ?founder dbo:founded <http://dbpedia.org/resource/Emel_(magazine)> .
  ?founder dbo:religion ?religion .
}",2.6519400145405025e-155,0.07042253521126761,True,True
4310,Name the musician who was given label by Celluloid Records and has been associated with Africa'70 ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records> . ?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Africa_'70_(band)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the musician who was given label by Celluloid Records and has been associated with Africa'70 ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?musician
WHERE {
  ?musician dbo:label ?label .
  ?musician dbp:recordLabel ?recordLabel .
  ?recordLabel dbo:name ""Celluloid Records"" .
  ?musician dbo:genre ?genre .
  ?genre dbo:name ""Afrobeat"" .
  FILTER (regex(?genre, ""Africa'70"", ""i""))
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?musician
WHERE {
  ?musician dbo:label ?label .
  ?musician dbp:recordLabel ?recordLabel .
  ?recordLabel dbo:name ""Celluloid Records"" .
  ?musician dbo:genre ?genre .
  ?genre dbo:name ""Afrobeat"" .
  FILTER (regex(?genre, ""Africa'70"", ""i""))
}",2.225022327381878e-155,0.045454545454545456,True,True
176,What is the largest city in the country where the San Marcos River originates?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/San_Marcos_River> <http://dbpedia.org/ontology/sourceMountain> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the largest city in the country where the San Marcos River originates?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city ?country
WHERE {
  ?river dbo:source ?location .
  ?location dbo:country ?country .
  ?country dbo:largestCity ?city .
  FILTER ( ?river = <http://dbpedia.org/resource/San_Marcos_River> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city ?country
WHERE {
  ?river dbo:source ?location .
  ?location dbo:country ?country .
  ?country dbo:largestCity ?city .
  FILTER ( ?river = <http://dbpedia.org/resource/San_Marcos_River> )
}",2.454081903007032e-155,0.0625,True,True
273,How many TV shows have been created by Simon Fuller ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many TV shows have been created by Simon Fuller ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?show) AS ?count)
WHERE {
  ?show dbo:creator Simon Fuller .
  FILTER (regex(?show, ""TV show"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?show) AS ?count)
WHERE {
  ?show dbo:creator Simon Fuller .
  FILTER (regex(?show, ""TV show"", ""i""))
}",7.992219124248642e-232,0.03896103896103896,False,False
1407,Name the founders of the record labels whose one of the founders is Frank Rogers?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Frank_Rogers_(record_producer)> . ?x <http://dbpedia.org/property/founder> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RecordLabel>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the founders of the record labels whose one of the founders is Frank Rogers?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?label ?founder
WHERE {
  ?label dbo:founder ?founder .
  ?founder dbo:name ""Frank Rogers""^^xsd:string .
  
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?label ?founder
WHERE {
  ?label dbo:founder ?founder .
  ?founder dbo:name ""Frank Rogers""^^xsd:string .
  
}",3.0382827129023445e-155,0.0684931506849315,True,True
3983,How many things belong to phylum of Chordate?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many things belong to phylum of Chordate?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x dbo:classification dbo:Chordata .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x dbo:classification dbo:Chordata .
}",2.5488701582353735e-155,0.06060606060606061,True,True
2733,"Which religion do the people follow, whose constituency is Jadavpur?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Jadavpur_(Lok_Sabha_constituency)> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which religion do the people follow, whose constituency is Jadavpur?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:constituency ""Jadavpur"" .
  ?person dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:constituency ""Jadavpur"" .
  ?person dbo:religion ?religion .
}",3.2383880054191053e-155,0.07142857142857142,True,True
3431,Who has produced movies that have a James Horner score?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/James_Horner> . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who has produced movies that have a James Horner score?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?director
WHERE {
  ?movie dbo:director ?director .
  ?movie dbp:musicComposer ?composer .
  ?composer dbo:name ""James Horner"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?director
WHERE {
  ?movie dbo:director ?director .
  ?movie dbp:musicComposer ?composer .
  ?composer dbo:name ""James Horner"" .
}",3.075337680136661e-155,0.06756756756756757,True,True
3699,Who is the prime minister of the successor of Kingsley Wood?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kingsley_Wood> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the prime minister of the successor of Kingsley Wood?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?successor ?successorPrimeMinister
WHERE {
  ?person dbo:birthName ""Kingsley Wood"" .
  ?person dbo:successor ?successor .
  ?successor dbo:primeMinister ?successorPrimeMinister .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?successor ?successorPrimeMinister
WHERE {
  ?person dbo:birthName ""Kingsley Wood"" .
  ?person dbo:successor ?successor .
  ?successor dbo:primeMinister ?successorPrimeMinister .
}",3.0566417519593477e-155,0.06944444444444445,True,True
3950,Which race is the Best Mate is also the race of the Martin Molony?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Best_Mate> <http://dbpedia.org/property/race> ?uri. <http://dbpedia.org/resource/Martin_Molony> <http://dbpedia.org/ontology/race> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which race is the Best Mate is also the race of the Martin Molony?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?race
WHERE {
  ?bestMate dbo:race ?race .
  ?martinMolony dbo:race ?race .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?race
WHERE {
  ?bestMate dbo:race ?race .
  ?martinMolony dbo:race ?race .
}",2.7960888070028265e-155,0.05714285714285714,True,True
2465,Which sports are played at both the Polytech uni of Bataan and Taguig?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_–_Bataan> <http://dbpedia.org/ontology/sport> ?uri. <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> <http://dbpedia.org/ontology/sport> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports are played at both the Polytech uni of Bataan and Taguig?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:sports ?sport .
  FILTER(?university IN (dbp:Polytech_University_of_Bataan , dbp:Taguig_City))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:sports ?sport .
  FILTER(?university IN (dbp:Polytech_University_of_Bataan , dbp:Taguig_City))
}",3.0943809285865547e-155,0.07894736842105263,True,True
2310,List the television shows whose network's owning company is Turner Broadcasting System?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Turner_Broadcasting_System> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the television shows whose network's owning company is Turner Broadcasting System?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?showLabel ?networkLabel
WHERE {
  ?show dbo:network ?network .
  ?network dbo:parentOrganization ?parentOrg .
  ?parentOrg dbo:name ""Turner Broadcasting System"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?showLabel ?networkLabel
WHERE {
  ?show dbo:network ?network .
  ?network dbo:parentOrganization ?parentOrg .
  ?parentOrg dbo:name ""Turner Broadcasting System"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.8866879095378115e-155,0.060240963855421686,False,False
4497,Name the route start of Saint Petersburg  Moscow Railway ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saint_Petersburg_–_Moscow_Railway> <http://dbpedia.org/ontology/routeStart> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the route start of Saint Petersburg  Moscow Railway ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?routeStart
WHERE {
  ?railway dbo:routeStart ?routeStart .
  FILTER (STR(?railway) = ""http://dbpedia.org/resource/Saint_Petersburg-Moscow_Railway"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?routeStart
WHERE {
  ?railway dbo:routeStart ?routeStart .
  FILTER (STR(?railway) = ""http://dbpedia.org/resource/Saint_Petersburg-Moscow_Railway"")
}",2.4775553999024465e-155,0.05970149253731343,True,True
270,What is the affiliation of tani University?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ōtani_University> <http://dbpedia.org/property/affiliation> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the affiliation of tani University?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?affiliation
WHERE {
  ?university dbo:name ""Tani University"" .
  ?university dbo:affiliation ?affiliation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?affiliation
WHERE {
  ?university dbo:name ""Tani University"" .
  ?university dbo:affiliation ?affiliation .
}",2.5124539841526692e-155,0.06349206349206349,True,True
4663,How many people have trained the wrestlers who were billed in Wisconsin?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/billed> <http://dbpedia.org/resource/Wisconsin> . ?x <http://dbpedia.org/ontology/trainer> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people have trained the wrestlers who were billed in Wisconsin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?trainer) AS ?count)
WHERE {
  ?wrestler dbo:birthDate ?birth.
  ?wrestler dbo:billedIn ?location.
  FILTER(?location = ""Wisconsin"")
  ?wrestler dbo:trainedBy ?trainer.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?trainer) AS ?count)
WHERE {
  ?wrestler dbo:birthDate ?birth.
  ?wrestler dbo:billedIn ?location.
  FILTER(?location = ""Wisconsin"")
  ?wrestler dbo:trainedBy ?trainer.
}",2.135639655544596e-155,0.036585365853658534,True,True
331,With whom is Heinz Kokott a relative to who also served Nazi Army?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Heinz_Kokott> <http://dbpedia.org/ontology/relation> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: With whom is Heinz Kokott a relative to who also served Nazi Army?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?relative ?relativeName
WHERE {
  ?person dbo:birthPlace ""Germany"" .
  ?person dbo:name ""Heinz Kokott"" .
  ?person dbo:spouse ?relative .
  ?relative dbo:name ?relativeName .
  ?relative dbo:occupation ?occupation .
  FILTER (regex(?occupation, ""Nazi Army"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?relative ?relativeName
WHERE {
  ?person dbo:birthPlace ""Germany"" .
  ?person dbo:name ""Heinz Kokott"" .
  ?person dbo:spouse ?relative .
  ?relative dbo:name ?relativeName .
  ?relative dbo:occupation ?occupation .
  FILTER (regex(?occupation, ""Nazi Army"", ""i""))
}",2.6727411373916324e-155,0.06097560975609756,True,True
3406,Were the 1995 south pacific games hosted in tahiti?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/1995_South_Pacific_Games> <http://dbpedia.org/property/hostCity> <http://dbpedia.org/resource/Tahiti> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Were the 1995 south pacific games hosted in tahiti?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/1995_South_Pacific_Games> .
  ?x dbo:location ?y .
  ?y dbo:name ""Tahiti"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/1995_South_Pacific_Games> .
  ?x dbo:location ?y .
  ?y dbo:name ""Tahiti"" .
}",2.215756877004116e-155,0.04477611940298507,True,True
819,List down the important people of The Elders?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Elders_(organization)> <http://dbpedia.org/property/keyPeople> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List down the important people of The Elders?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?name
WHERE {
  ?person dbo:memberOf <http://dbpedia.org/resource/The_Elders> .
  ?person dbo:name ?name .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?name
WHERE {
  ?person dbo:memberOf <http://dbpedia.org/resource/The_Elders> .
  ?person dbo:name ?name .
}",3.1153609837288e-155,0.078125,True,True
1063,Which administrative headquarters of the Pulau Ubin is also the resting place of the Nicole Lai?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/capital> ?uri. <http://dbpedia.org/resource/Nicole_Lai> <http://dbpedia.org/ontology/restingPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which administrative headquarters of the Pulau Ubin is also the resting place of the Nicole Lai?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?administrativeHeadquarters ?restingPlace
WHERE {
  ?administrativeHeadquarters dbo:administrativeHeadquarters ?place .
  ?place dbp:location ?location .
  ?location dbo:name ""Pulau Ubin"" .
  ?restingPlace dbo:restingPlace ?person .
  ?person dbo:name ""Nicole Lai"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?administrativeHeadquarters ?restingPlace
WHERE {
  ?administrativeHeadquarters dbo:administrativeHeadquarters ?place .
  ?place dbp:location ?location .
  ?location dbo:name ""Pulau Ubin"" .
  ?restingPlace dbo:restingPlace ?person .
  ?person dbo:name ""Nicole Lai"" .
}",1.998443100417405e-155,0.037037037037037035,True,True
4322,How many different writers have written for Jump Square?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/magazine> <http://dbpedia.org/resource/Jump_Square> . ?x <http://dbpedia.org/property/author> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many different writers have written for Jump Square?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT (COUNT(DISTINCT ?writer) AS ?count)
WHERE {
  ?magazine dbo:genre ""Manga"" .
  ?magazine dbp:title ""Jump Square"" .
  ?writer dbo:work ?magazine .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT (COUNT(DISTINCT ?writer) AS ?count)
WHERE {
  ?magazine dbo:genre ""Manga"" .
  ?magazine dbp:title ""Jump Square"" .
  ?writer dbo:work ?magazine .
}",3.0566417519593477e-155,0.06493506493506493,True,True
3318,Name the home ground of  2015 Fort Lauderdale Strikers season ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_Fort_Lauderdale_Strikers_season> <http://dbpedia.org/ontology/ground> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the home ground of  2015 Fort Lauderdale Strikers season ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?homeGround
WHERE {
  ?team dbo:name ""2015 Fort Lauderdale Strikers"" .
  ?team dbo:homeGround ?homeGround .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?homeGround
WHERE {
  ?team dbo:name ""2015 Fort Lauderdale Strikers"" .
  ?team dbo:homeGround ?homeGround .
}",2.3659629744803227e-155,0.057971014492753624,True,True
4045,Music of how many things has been given by Akira Ifukube?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Akira_Ifukube>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Music of how many things has been given by Akira Ifukube?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?count
WHERE {
  ?thing dbo:composer Akira Ifukube .
  ?thing rdfs:label ?label .
  
  FILTER (lang(?label) = 'en')
  
  
}
GROUP BY ?label
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?count
WHERE {
  ?thing dbo:composer Akira Ifukube .
  ?thing rdfs:label ?label .
  
  FILTER (lang(?label) = 'en')
  
  
}
GROUP BY ?label",8.485327127592046e-232,0.05194805194805195,False,False
2839,Who has fought in wars under commander Arthur St Clair?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Arthur_St._Clair> . ?x <http://dbpedia.org/property/combatant> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who has fought in wars under commander Arthur St Clair?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?soldier
WHERE {
  ?soldier dbo:commander ?commander .
  ?commander dbo:name ""Arthur St Clair"" .
  ?soldier dbo:involvedInWar ?war .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?soldier
WHERE {
  ?soldier dbo:commander ?commander .
  ?commander dbo:name ""Arthur St Clair"" .
  ?soldier dbo:involvedInWar ?war .
}",3.5156372159951298e-155,0.08,True,True
4448,Where can one find the Dzogchen Ponolop Rinpoche?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dzogchen_Ponlop_Rinpoche> <http://dbpedia.org/property/location> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where can one find the Dzogchen Ponolop Rinpoche?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?location
WHERE {
  ?person dbo:name ""Dzogchen Ponolop Rinpoche"" .
  ?person dbo:birthPlace ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?location
WHERE {
  ?person dbo:name ""Dzogchen Ponolop Rinpoche"" .
  ?person dbo:birthPlace ?location .
}",2.427831263680579e-155,0.06060606060606061,True,True
4515,Who succeeded Lucius Crus as an office holder?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Lucius_Cornelius_Lentulus_Crus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who succeeded Lucius Crus as an office holder?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?successor
WHERE {
  ?person dbo:successor ?successor .
  FILTER (regex(?person, ""Lucius Crus"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?successor
WHERE {
  ?person dbo:successor ?successor .
  FILTER (regex(?person, ""Lucius Crus"", ""i""))
}",8.231055179516831e-232,0.043478260869565216,True,True
3796,Who is the writer with notable works like Adventures of Huckleberry Finn and The Adventures of Tom Sawyer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Adventures_of_Huckleberry_Finn> . ?uri <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the writer with notable works like Adventures of Huckleberry Finn and The Adventures of Tom Sawyer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?author
WHERE {
  ?author dbo:birthPlace ""Missouri"" .
  ?author dbo:work ?work .
  ?work dbo:title ""Adventures of Huckleberry Finn"" .
  FILTER (regex(?author, ""Mark Twain""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?author
WHERE {
  ?author dbo:birthPlace ""Missouri"" .
  ?author dbo:work ?work .
  ?work dbo:title ""Adventures of Huckleberry Finn"" .
  FILTER (regex(?author, ""Mark Twain""))
}",2.8409841948588806e-155,0.060240963855421686,True,True
4960,"Whose relatives are Clan McDuck and Huey, Dewey, and Louie?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clan_McDuck> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Huey,_Dewey,_and_Louie> . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose relatives are Clan McDuck and Huey, Dewey, and Louie?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?relative
WHERE {
  ?person dbo:family ?relative .
  FILTER ( ?person IN ( dbo:Clan_McDuck , dbo:Huey , dbo:Dewey , dbo:Louie ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?relative
WHERE {
  ?person dbo:family ?relative .
  FILTER ( ?person IN ( dbo:Clan_McDuck , dbo:Huey , dbo:Dewey , dbo:Louie ) )
}",2.9851289841006984e-155,0.07894736842105263,True,True
4743,To which county of New York city does the Tremount Avenue street belong?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tremont_Avenue> <http://dbpedia.org/property/counties> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which county of New York city does the Tremount Avenue street belong?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?county
WHERE {
  ?street dbo:streetAddress ""Tremount Avenue"" .
  ?street dbo:locatedIn ?county .
  ?county dbo:country ""United States"" .
  ?county dbo:name ?countyName .
  FILTER (regex(?countyName, ""New York""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?county
WHERE {
  ?street dbo:streetAddress ""Tremount Avenue"" .
  ?street dbo:locatedIn ?county .
  ?county dbo:country ""United States"" .
  ?county dbo:name ?countyName .
  FILTER (regex(?countyName, ""New York""))
}",2.1934084870059202e-155,0.05,True,True
1038,Which wars were fought by the commander whose deputy was Robert T. Herres?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deputy> <http://dbpedia.org/resource/Robert_T._Herres> . ?uri <http://dbpedia.org/ontology/commander> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which wars were fought by the commander whose deputy was Robert T. Herres?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?war
WHERE {
  ?commander dbo:deputy ?deputy .
  ?deputy dbo:name ""Robert T. Herres"" .
  ?commander dbo:involvedInWar ?war .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?war
WHERE {
  ?commander dbo:deputy ?deputy .
  ?deputy dbo:name ""Robert T. Herres"" .
  ?commander dbo:involvedInWar ?war .
}",3.0566417519593477e-155,0.06578947368421052,True,True
3741,Where is the venue of the History of Penny Arcade Expo located?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/History_of_Penny_Arcade_Expo> <http://dbpedia.org/property/venue> ?x . ?x <http://dbpedia.org/property/address> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where is the venue of the History of Penny Arcade Expo located?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?expo dbo:venue ?location .
  FILTER (regex(?expo, ""History of Penny Arcade Expo"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?expo dbo:venue ?location .
  FILTER (regex(?expo, ""History of Penny Arcade Expo"", ""i""))
}",2.5175858750356875e-155,0.07042253521126761,True,True
1607,Which city was founded by George Washington and John Forbes (British Army officer)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/George_Washington> . ?uri <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/John_Forbes_(British_Army_officer)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which city was founded by George Washington and John Forbes (British Army officer)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?city
WHERE {
  ?city dbo:founder ?founder .
  ?founder dbo:name ""George Washington"" .
  ?founder dbo:name ""John Forbes"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?city
WHERE {
  ?city dbo:founder ?founder .
  ?founder dbo:name ""George Washington"" .
  ?founder dbo:name ""John Forbes"" .
}",2.4123225276763925e-155,0.05128205128205128,True,True
3237,Does Sonny Bill Williams belong in the Canterbury Bankstown Bulldogs club?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Sonny_Bill_Williams> <http://dbpedia.org/property/club> <http://dbpedia.org/resource/Canterbury-Bankstown_Bulldogs> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Sonny Bill Williams belong in the Canterbury Bankstown Bulldogs club?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Sonny Bill Williams"" .
  ?x dbo:memberOf ?y .
  ?y dbo:name ""Canterbury Bankstown Bulldogs"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Sonny Bill Williams"" .
  ?x dbo:memberOf ?y .
  ?y dbo:name ""Canterbury Bankstown Bulldogs"" .
}",2.135639655544596e-155,0.04285714285714286,True,True
599,Name the profession of Oamr D Conger for which Jack Ryan was also nominated?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ryan_(politician)> <http://dbpedia.org/ontology/nominee> ?uri. <http://dbpedia.org/resource/Omar_D._Conger> <http://dbpedia.org/property/order> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the profession of Oamr D Conger for which Jack Ryan was also nominated?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession
WHERE {
  ?person dbo:profession ?profession .
  ?person dbo:name ""Oamr D Conger""^^xsd:string .
  ?person dbo:award ?award .
  ?award dbo:recipient ?jackryan .
  ?jackryan dbo:name ""Jack Ryan""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession
WHERE {
  ?person dbo:profession ?profession .
  ?person dbo:name ""Oamr D Conger""^^xsd:string .
  ?person dbo:award ?award .
  ?award dbo:recipient ?jackryan .
  ?jackryan dbo:name ""Jack Ryan""^^xsd:string .
}",2.0523206950207848e-155,0.038461538461538464,True,True
4219,Who was the head coach of Middlesbrough F.C. season 2006-7 also the coach of England national under 21 footbal team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2006–07_Middlesbrough_F.C._season> <http://dbpedia.org/ontology/manager> ?uri. <http://dbpedia.org/resource/England_national_under-21_football_team> <http://dbpedia.org/property/coach> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the head coach of Middlesbrough F.C. season 2006-7 also the coach of England national under 21 footbal team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?coach
WHERE {
  ?coach rdf:type dbo:FootballManager .
  ?coach dbo:headCoachOf ?team .
  ?team dbo:name ""Middlesbrough F.C."" .
  FILTER(?team dbo:season ""2006-7"")
  ?coach dbo:coachOf ?team2 .
  ?team2 dbo:name ""England national under 21 football team"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?coach
WHERE {
  ?coach rdf:type dbo:FootballManager .
  ?coach dbo:headCoachOf ?team .
  ?team dbo:name ""Middlesbrough F.C."" .
  FILTER(?team dbo:season ""2006-7"")
  ?coach dbo:coachOf ?team2 .
  ?team2 dbo:name ""England national under 21 football team"" .
}",1.893436069619061e-155,0.033707865168539325,False,False
2473,Who is the manager of the club whose homeground is the riverside stadium?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Riverside_Stadium> . ?uri <http://dbpedia.org/ontology/managerClub> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the manager of the club whose homeground is the riverside stadium?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?manager
WHERE {
  ?club dbo:homeGround ""Riverside Stadium"" .
  ?club dbo:manager ?manager .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?manager
WHERE {
  ?club dbo:homeGround ""Riverside Stadium"" .
  ?club dbo:manager ?manager .
}",2.50170125957988e-155,0.05555555555555555,True,True
2125,What religion do the Wickramabahu Centeral College and Neungin High School both follow?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)> <http://dbpedia.org/property/religiousAffiliation> ?uri. <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What religion do the Wickramabahu Centeral College and Neungin High School both follow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?school dbo:religion ?religion .
  FILTER (regex(?school, ""Wickramabahu Centeral College"") || regex(?school, ""Neungin High School""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?school dbo:religion ?religion .
  FILTER (regex(?school, ""Wickramabahu Centeral College"") || regex(?school, ""Neungin High School""))
}",2.426555136425675e-155,0.0641025641025641,True,True
2004,Which key person of maryland jockey club is the appointer of Joseph Clay ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joseph_Clay_(Georgia)> <http://dbpedia.org/ontology/appointer> ?uri. <http://dbpedia.org/resource/Maryland_Jockey_Club> <http://dbpedia.org/property/keyPeople> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which key person of maryland jockey club is the appointer of Joseph Clay ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:appointer ?clay .
  ?clay dbo:name ""Joseph Clay""^^xsd:string .
  ?person dbo:memberOf ?club .
  ?club dbo:name ""Maryland Jockey Club""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:appointer ?clay .
  ?clay dbo:name ""Joseph Clay""^^xsd:string .
  ?person dbo:memberOf ?club .
  ?club dbo:name ""Maryland Jockey Club""^^xsd:string .
}",2.0636286749776556e-155,0.0379746835443038,True,True
2996,Who is the writer of Neverwhere (radio play) ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neverwhere_(radio_play)> <http://dbpedia.org/ontology/writer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the writer of Neverwhere (radio play) ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?writer
WHERE {
  ?radioPlay dbo:workTitle ""Neverwhere (radio play)"" .
  ?radioPlay dbo:writer ?writer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?writer
WHERE {
  ?radioPlay dbo:workTitle ""Neverwhere (radio play)"" .
  ?radioPlay dbo:writer ?writer .
}",2.4606427705034855e-155,0.06153846153846154,True,True
2558,Who was the cover artist of The Adventure of Tom Sawyer and also wrote mark Twain Tonight?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> <http://dbpedia.org/ontology/coverArtist> ?uri. <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/writer> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the cover artist of The Adventure of Tom Sawyer and also wrote mark Twain Tonight?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:coverArtist ?book .
  ?book dbo:title ""The Adventure of Tom Sawyer""^^xsd:string .
  ?artist dbo:wrote ?performance .
  ?performance dbo:title ""Mark Twain Tonight""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:coverArtist ?book .
  ?book dbo:title ""The Adventure of Tom Sawyer""^^xsd:string .
  ?artist dbo:wrote ?performance .
  ?performance dbo:title ""Mark Twain Tonight""^^xsd:string .
}",2.5406524524079725e-155,0.04938271604938271,True,True
4747,What are the mascots of the teams participating in the Turkish Handball Super League?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/Turkish_Handball_Super_League> . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the mascots of the teams participating in the Turkish Handball Super League?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team ?mascot
WHERE {
  ?team dbo:sportsLeague dbp:TurkishHandballSuperLeague .
  ?team dbo:mascot ?mascot .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team ?mascot
WHERE {
  ?team dbo:sportsLeague dbp:TurkishHandballSuperLeague .
  ?team dbo:mascot ?mascot .
}",3.075337680136661e-155,0.06756756756756757,True,True
4525,Name the ones who debuted in the San Francisco 49ers.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/debutTeam> <http://dbpedia.org/resource/San_Francisco_49ers>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the ones who debuted in the San Francisco 49ers.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?player
WHERE {
  ?player dbo:birthPlace ""San Francisco, California, USA""^^xsd:string .
  ?player dbo:sportsTeam dbp:San_Francisco_49ers .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?player
WHERE {
  ?player dbo:birthPlace ""San Francisco, California, USA""^^xsd:string .
  ?player dbo:sportsTeam dbp:San_Francisco_49ers .
}",3.032816514970993e-155,0.07246376811594203,True,True
2115,What is the genre of the things developed by Interplay Entertainment?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/Interplay_Entertainment> . ?x <http://dbpedia.org/ontology/genre> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the genre of the things developed by Interplay Entertainment?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?genre
WHERE {
  ?game dbo:developer Interplay Entertainment .
  ?game dbo:genre ?genre .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?genre
WHERE {
  ?game dbo:developer Interplay Entertainment .
  ?game dbo:genre ?genre .
}",3.6750083101231446e-155,0.08695652173913043,False,False
4741,Name the part of Liverpool city region >,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liverpool_City_Region> <http://dbpedia.org/ontology/part> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the part of Liverpool city region >
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?part
WHERE {
  ?part dbo:partOf <http://dbpedia.org/resource/Liverpool_city_region> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?part
WHERE {
  ?part dbo:partOf <http://dbpedia.org/resource/Liverpool_city_region> .
}",3.2286895410078598e-155,0.08064516129032258,True,True
1249,Who was the president at the time when the opponent of Benjamin Spock held office?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Benjamin_Spock> . ?x <http://dbpedia.org/property/incumbent> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the president at the time when the opponent of Benjamin Spock held office?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?president
WHERE {
  ?spock dbo:birthDate ?spockBirthdate .
  ?spock dbo:opponent ?opponent .
  ?opponent dbo:birthDate ?opponentBirthdate .
  ?president dbo:office ?office .
  FILTER(?opponentBirthdate < ?spockBirthdate)
  FILTER(?spockBirthdate < ?office)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?president
WHERE {
  ?spock dbo:birthDate ?spockBirthdate .
  ?spock dbo:opponent ?opponent .
  ?opponent dbo:birthDate ?opponentBirthdate .
  ?president dbo:office ?office .
  FILTER(?opponentBirthdate < ?spockBirthdate)
  FILTER(?spockBirthdate < ?office)
}",2.401580582872042e-155,0.06097560975609756,True,True
1876,Which fictional character's relatives were made by Ted Osborne?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Ted_Osborne> . ?uri <http://dbpedia.org/property/relatives> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which fictional character's relatives were made by Ted Osborne?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?character ?relative
WHERE {
  ?character dbo:characterType ""Fictional character"" .
  ?character dbo:creator ?creator .
  ?creator dbo:name ""Ted Osborne"" .
  ?character dbp:relative ?relative .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?character ?relative
WHERE {
  ?character dbo:characterType ""Fictional character"" .
  ?character dbo:creator ?creator .
  ?creator dbo:name ""Ted Osborne"" .
  ?character dbp:relative ?relative .
}",2.9851289841006984e-155,0.0641025641025641,True,True
698,How many fictional characters were humans?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Human>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many fictional characters were humans?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?character) AS ?count)
WHERE {
  ?character dbo:type dbo:FictionalCharacter .
  ?character dbo:abstract ?abstract .
  FILTER (regex(?abstract, ""human"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?character) AS ?count)
WHERE {
  ?character dbo:type dbo:FictionalCharacter .
  ?character dbo:abstract ?abstract .
  FILTER (regex(?abstract, ""human"", ""i""))
}",8.120546156106983e-232,0.0410958904109589,True,True
3236,What are the binomial authority of Menetries's warbler?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Menetries's_warbler> <http://dbpedia.org/ontology/binomialAuthority> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the binomial authority of Menetries's warbler?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?binomialAuthority
WHERE {
  ?menetriesWarbler dbo:wikiPageRedirects ?page .
  ?page rdfs:label ""Menetries's warbler"" .
  ?page dbo:binomialAuthority ?binomialAuthority .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?binomialAuthority
WHERE {
  ?menetriesWarbler dbo:wikiPageRedirects ?page .
  ?page rdfs:label ""Menetries's warbler"" .
  ?page dbo:binomialAuthority ?binomialAuthority .
}",2.3809857162598948e-155,0.058823529411764705,True,True
4174,How many leagues have used the O.co Coliseum?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/O.co_Coliseum> <http://dbpedia.org/ontology/tenant> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many leagues have used the O.co Coliseum?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?league)) AS ?count
WHERE {
  ?stadium dbo:location ""Oakland, California, USA"".
  ?stadium dbo:name ""O.co Coliseum"".
  ?stadium dbp:usedBy ?league.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?league)) AS ?count
WHERE {
  ?stadium dbo:location ""Oakland, California, USA"".
  ?stadium dbo:name ""O.co Coliseum"".
  ?stadium dbp:usedBy ?league.
}",2.3962983105918537e-155,0.0547945205479452,False,False
3222,Name the television show where Mona Marshall has given voice and is distributed by Comedy Central?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the television show where Mona Marshall has given voice and is distributed by Comedy Central?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showName
WHERE {
  ?actor dbo:name ""Mona Marshall"" .
  ?actor dbo:voiceOf ?show .
  ?show dbo:distributor ""Comedy Central"" .
  ?show ?showName rdfs:label .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showName
WHERE {
  ?actor dbo:name ""Mona Marshall"" .
  ?actor dbo:voiceOf ?show .
  ?show dbo:distributor ""Comedy Central"" .
  ?show ?showName rdfs:label .
}",8.319100378795605e-232,0.036585365853658534,True,True
905,Which city do both Arthur Ross and Edward Niesen come from?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Arthur_A._Ross> <http://dbpedia.org/property/placeOfBirth> ?uri. <http://dbpedia.org/resource/Edward_Niesen> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which city do both Arthur Ross and Edward Niesen come from?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  FILTER (?person IN (dbo:Arthur_Ross, dbo:Edward_Niesen))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  FILTER (?person IN (dbo:Arthur_Ross, dbo:Edward_Niesen))
}",2.8871942127949523e-155,0.0547945205479452,True,True
1560,Who hold stocks in the bank which is located at 731 Lexington Avenue?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/731_Lexington_Avenue> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who hold stocks in the bank which is located at 731 Lexington Avenue?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?stockholder
WHERE {
  ?bank dbo:address ""731 Lexington Avenue"" .
  ?bank dbo:stockholder ?stockholder .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?stockholder
WHERE {
  ?bank dbo:address ""731 Lexington Avenue"" .
  ?bank dbo:stockholder ?stockholder .
}",3.075337680136661e-155,0.06578947368421052,True,True
291,Is Bacillus belong to the domain Bacteria?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Bacillus> <http://dbpedia.org/property/domain> <http://dbpedia.org/resource/Bacteria> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Bacillus belong to the domain Bacteria?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:domain ""Bacteria"" .
  ?x dbo:subclassOf <http://dbpedia.org/resource/Bacillus> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:domain ""Bacteria"" .
  ?x dbo:subclassOf <http://dbpedia.org/resource/Bacillus> .
}",2.530465559854518e-155,0.06557377049180328,True,True
3427,"Mazhar Ul Haq High School, Beerwah is affiliated to Islamic Religion",google/gemma-2-9b-it,"ASK WHERE { <http://dbpedia.org/resource/Mazhar_Ul_Haq_High_School,_Beerwah> <http://dbpedia.org/property/religiousAffiliation> <http://dbpedia.org/resource/Islam> }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Mazhar Ul Haq High School, Beerwah is affiliated to Islamic Religion
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school WHERE {
  ?school dbo:name ""Mazhar Ul Haq High School, Beerwah"" .
  ?school dbo:affiliation ?affiliation .
  ?affiliation dbo:religion ""Islamic Religion"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school WHERE {
  ?school dbo:name ""Mazhar Ul Haq High School, Beerwah"" .
  ?school dbo:affiliation ?affiliation .
  ?affiliation dbo:religion ""Islamic Religion"" .
}",2.1483903094550452e-155,0.04285714285714286,True,True
1359,How many sitcoms were produced by the company whose predecessor was the Desilu Productions?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Desilu_Productions> . ?uri <http://dbpedia.org/property/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many sitcoms were produced by the company whose predecessor was the Desilu Productions?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?sitcom) AS ?count)
WHERE {
  ?company dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Desilu Productions"" .
  ?company dbo:production ?sitcom .
  FILTER (
    ?sitcom a dbo:Sitcom
  )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?sitcom) AS ?count)
WHERE {
  ?company dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Desilu Productions"" .
  ?company dbo:production ?sitcom .
  FILTER (
    ?sitcom a dbo:Sitcom
  )
}",2.3192471031465984e-155,0.047058823529411764,False,False
1336,Which moto of american Classical League is also the academic discipline of Probus?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/American_Classical_League> <http://dbpedia.org/property/motto> ?uri. <http://dbpedia.org/resource/Probus_(journal)> <http://dbpedia.org/ontology/academicDiscipline> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which moto of american Classical League is also the academic discipline of Probus?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?moto ?probus
WHERE {
  ?moto dbo:wikiPageRedirects ?americanClassicalLeague .
  ?americanClassicalLeague dbo: motto ?moto .
  ?probus dbo:occupation ?occupation .
  ?occupation rdfs:label ""Classical philology""@en .
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?moto ?probus
WHERE {
  ?moto dbo:wikiPageRedirects ?americanClassicalLeague .
  ?americanClassicalLeague dbo: motto ?moto .
  ?probus dbo:occupation ?occupation .
  ?occupation rdfs:label ""Classical philology""@en .
}",2.0751256583633507e-155,0.03896103896103896,False,False
1158,Count the total number of battles fought by the military people which fought in Levant?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/battles> <http://dbpedia.org/resource/Levant> . ?x <http://dbpedia.org/property/battles> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the total number of battles fought by the military people which fought in Levant?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?battle) AS ?battleCount)
WHERE {
  ?person dbo:militaryService ?militaryService .
  ?militaryService dbo:location ?location .
  FILTER(?location = <http://dbpedia.org/resource/Levant>)
  ?person dbo:involvedInWar ?war .
  ?war dbo:battle ?battle .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?battle) AS ?battleCount)
WHERE {
  ?person dbo:militaryService ?militaryService .
  ?militaryService dbo:location ?location .
  FILTER(?location = <http://dbpedia.org/resource/Levant>)
  ?person dbo:involvedInWar ?war .
  ?war dbo:battle ?battle .
}",2.294572857803015e-155,0.05952380952380952,True,True
1837,What is the television show whose opening theme's album is Cheers?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/album> <http://dbpedia.org/resource/Cheers> . ?uri <http://dbpedia.org/ontology/openingTheme> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the television show whose opening theme's album is Cheers?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:openingTheme ?theme .
  ?theme dbp:album ""Cheers"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:openingTheme ?theme .
  ?theme dbp:album ""Cheers"" .
}",2.5502845355614067e-155,0.056338028169014086,True,True
546,Name the species of Liger?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liger> <http://dbpedia.org/ontology/species> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the species of Liger?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?species
WHERE {
  ?ligera dbo:species ?species .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?species
WHERE {
  ?ligera dbo:species ?species .
}",2.6473239134663774e-155,0.06896551724137931,True,True
4437,Give me some nominees of politicians in the US?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/residence> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/nominee> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me some nominees of politicians in the US?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?politician ?politicianLabel
WHERE {
  ?politician dbo:country ""United States""^^xsd:string .
  ?politician dbo:profession ""Politician"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?politician ?politicianLabel
WHERE {
  ?politician dbo:country ""United States""^^xsd:string .
  ?politician dbo:profession ""Politician"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",3.075337680136661e-155,0.06578947368421052,False,False
4621,Which American football player is a former team player of Indianapolis Colts and current team is Michigan Wolverines?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/formerTeam> <http://dbpedia.org/resource/Indianapolis_Colts> . ?uri <http://dbpedia.org/property/currentteam> <http://dbpedia.org/resource/Michigan_Wolverines>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which American football player is a former team player of Indianapolis Colts and current team is Michigan Wolverines?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?player
WHERE {
  ?player dbo:team ?team .
  ?team dbo:name ""Indianapolis Colts"" .
  ?player dbo:currentTeam ?currentTeam .
  ?currentTeam dbo:name ""Michigan Wolverines"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?player
WHERE {
  ?player dbo:team ?team .
  ?team dbo:name ""Indianapolis Colts"" .
  ?player dbo:currentTeam ?currentTeam .
  ?currentTeam dbo:name ""Michigan Wolverines"" .
}",8.27449233497142e-232,0.0375,True,True
3091,"List all the locations of the companies whose are also located in Rancho Cucamonga, California ?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/locationCountry> <http://dbpedia.org/resource/Rancho_Cucamonga,_California> . ?x <http://dbpedia.org/ontology/locationCountry> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the locations of the companies whose are also located in Rancho Cucamonga, California ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company ?companyLocation
WHERE {
  ?company dbo:location dbp:Rancho_Cucamonga.
  ?company dbo:location ?companyLocation.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company ?companyLocation
WHERE {
  ?company dbo:location dbp:Rancho_Cucamonga.
  ?company dbo:location ?companyLocation.
}",2.7788812895482627e-155,0.05263157894736842,True,True
1757,What cities are near to Nihoa which is also known as Bird Island?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nihoa> <http://dbpedia.org/property/nearestCity> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What cities are near to Nihoa which is also known as Bird Island?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?island dbo:name ""Nihoa"" .
  ?island dbo:altLabel ""Bird Island"" .
  ?island dbo:locatedIn ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?island dbo:name ""Nihoa"" .
  ?island dbo:altLabel ""Bird Island"" .
  ?island dbo:locatedIn ?city .
}",2.8856766331839354e-155,0.06666666666666667,True,True
4808,Which company created BASIC and Language Integrated Query ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Microsoft_BASIC> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which company created BASIC and Language Integrated Query ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:foundedSoftware ?software .
  ?software dbo:name ""BASIC"" .
  FILTER (BOUND(?software))
  ?company dbo:foundedSoftware ?software2 .
  ?software2 dbo:name ""Language Integrated Query"" .
  FILTER (BOUND(?software2))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:foundedSoftware ?software .
  ?software dbo:name ""BASIC"" .
  FILTER (BOUND(?software))
  ?company dbo:foundedSoftware ?software2 .
  ?software2 dbo:name ""Language Integrated Query"" .
  FILTER (BOUND(?software2))
}",2.9851289841006984e-155,0.08108108108108109,True,True
3578,How many people are in the band with Juelz Santana?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Juelz_Santana> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people are in the band with Juelz Santana?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?bandCount
WHERE {
  ?person dbo:name ""Juelz Santana""^^xsd:string .
  ?person dbo:memberOf ?band .
  ?band dbo:members ?member .
  FILTER ( ?member != ?person )
  GROUP BY ?band
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?bandCount
WHERE {
  ?person dbo:name ""Juelz Santana""^^xsd:string .
  ?person dbo:memberOf ?band .
  ?band dbo:members ?member .
  FILTER ( ?member != ?person )
  GROUP BY ?band
}",2.3983374600418706e-155,0.05,False,False
91,How many party leaders are there whose parties are headquartered in Berlin?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/headquarter> <http://dbpedia.org/resource/Berlin> . ?x <http://dbpedia.org/ontology/leader> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many party leaders are there whose parties are headquartered in Berlin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?leader) AS ?count)
WHERE {
  ?leader dbo:party ?party .
  ?party dbp:headquarters ?location .
  ?location dbo:country ?country .
  FILTER ( ?country = dbo:Germany )
  FILTER ( ?location = dbo:Berlin )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?leader) AS ?count)
WHERE {
  ?leader dbo:party ?party .
  ?party dbp:headquarters ?location .
  ?location dbo:country ?country .
  FILTER ( ?country = dbo:Germany )
  FILTER ( ?location = dbo:Berlin )
}",2.306811013701292e-155,0.047619047619047616,True,True
642,Which company owns the manufacturer of the Edsel Ranger?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/products> <http://dbpedia.org/resource/Edsel_Ranger> . ?x <http://dbpedia.org/property/parent> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which company owns the manufacturer of the Edsel Ranger?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?company ?manufacturer
WHERE {
  ?manufacturer dbo:product ?edsel .
  ?edsel rdfs:label ""Edsel Ranger"" .
  ?manufacturer dbo:company ?company .
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?company ?manufacturer
WHERE {
  ?manufacturer dbo:product ?edsel .
  ?edsel rdfs:label ""Edsel Ranger"" .
  ?manufacturer dbo:company ?company .
}",3.0943809285865547e-155,0.07142857142857142,True,True
1317,Where is the assembly of Caterpillar 797?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Caterpillar_797> <http://dbpedia.org/ontology/assembly> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where is the assembly of Caterpillar 797?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?company dbo:assemblyLocation ?location .
  FILTER (regex(?company, ""Caterpillar"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?company dbo:assemblyLocation ?location .
  FILTER (regex(?company, ""Caterpillar"", ""i""))
}",2.530465559854518e-155,0.0625,True,True
2070,What is a common nickname given to both Lyons Township high school and the wheaton college in massachusetts?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lyons_Township_High_School> <http://dbpedia.org/property/nickname> ?uri. <http://dbpedia.org/resource/Wheaton_College_(Massachusetts)> <http://dbpedia.org/property/nickname> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is a common nickname given to both Lyons Township high school and the wheaton college in massachusetts?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?nickname
WHERE {
  ?school dbo:commonNickname ?nickname .
  FILTER (regex(?nickname, ""Lyons Township"") || regex(?nickname, ""Wheaton College""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?nickname
WHERE {
  ?school dbo:commonNickname ?nickname .
  FILTER (regex(?nickname, ""Lyons Township"") || regex(?nickname, ""Wheaton College""))
}",2.384592839964215e-155,0.06097560975609756,True,True
3500,List the ideologies of the party of Boonchu Rojanastien?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Boonchu_Rojanastien> <http://dbpedia.org/property/party> ?x . ?x <http://dbpedia.org/ontology/ideology> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the ideologies of the party of Boonchu Rojanastien?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?ideology
WHERE {
  ?person dbo:name ""Boonchu Rojanastien"" .
  ?person dbo:party ?party .
  ?party dbo:ideology ?ideology .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?ideology
WHERE {
  ?person dbo:name ""Boonchu Rojanastien"" .
  ?person dbo:party ?party .
  ?party dbo:ideology ?ideology .
}",3.559043432561587e-155,0.08450704225352113,True,True
4839,Which  NASA astronaut was on mission Gemini 8?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/type> <http://dbpedia.org/resource/NASA> . ?uri <http://dbpedia.org/property/mission> <http://dbpedia.org/resource/Gemini_8>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Astronaut>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which  NASA astronaut was on mission Gemini 8?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?astronaut
WHERE {
  ?astronaut dbo:birthPlace ""United States"" .
  ?astronaut dbo:occupation ""Astronaut"" .
  ?astronaut dbo:mission ?mission .
  ?mission dbo:name ""Gemini 8"" .
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?astronaut
WHERE {
  ?astronaut dbo:birthPlace ""United States"" .
  ?astronaut dbo:occupation ""Astronaut"" .
  ?astronaut dbo:mission ?mission .
  ?mission dbo:name ""Gemini 8"" .
}",8.510469113101058e-232,0.04,True,True
108,What is the region of the Kim Sawchuk which is also served by the Airtours International Airways ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kim_Sawchuk> <http://dbpedia.org/property/region> ?uri. <http://dbpedia.org/resource/Airtours_International_Airways> <http://dbpedia.org/property/destinations> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the region of the Kim Sawchuk which is also served by the Airtours International Airways ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?region
WHERE {
  ?person dbo:name ""Kim Sawchuk"" .
  ?person dbo:region ?region .
  ?airline dbo:name ""Airtours International Airways"" .
  ?airline dbo:serves ?region .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?region
WHERE {
  ?person dbo:name ""Kim Sawchuk"" .
  ?person dbo:region ?region .
  ?airline dbo:name ""Airtours International Airways"" .
  ?airline dbo:serves ?region .
}",2.0194805030799393e-155,0.0375,True,True
3717,Whay common comic is written by Karakuri Dji Ultimo and narrated by The Incredible Hulk ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Karakuri_Dôji_Ultimo> <http://dbpedia.org/property/author> ?uri. <http://dbpedia.org/resource/The_Incredible_Hulk_(1982_TV_series)> <http://dbpedia.org/property/narrated> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whay common comic is written by Karakuri Dji Ultimo and narrated by The Incredible Hulk ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?comic
WHERE {
  ?comic rdf:type dbo:Comic.
  ?comic dbo:author ?author .
  ?author dbo:name ""Karakuri Dji Ultimo"" .
  ?comic dbo:narrator ?narrator .
  ?narrator dbo:name ""The Incredible Hulk"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?comic
WHERE {
  ?comic rdf:type dbo:Comic.
  ?comic dbo:author ?author .
  ?author dbo:name ""Karakuri Dji Ultimo"" .
  ?comic dbo:narrator ?narrator .
  ?narrator dbo:name ""The Incredible Hulk"" .
}",2.5406524524079725e-155,0.04819277108433735,True,True
963,Who is the President of United World College of Costa Rica?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_World_College_of_Costa_Rica> <http://dbpedia.org/property/president> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the President of United World College of Costa Rica?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?president
WHERE {
  ?school dbo:country ""Costa Rica"" .
  ?school dbo:name ""United World College of Costa Rica"" .
  ?school dbo:president ?president .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?president
WHERE {
  ?school dbo:country ""Costa Rica"" .
  ?school dbo:name ""United World College of Costa Rica"" .
  ?school dbo:president ?president .
}",2.308595628361502e-155,0.058823529411764705,True,True
1813,Where is the tombstone of the congressman who died in the McLean hospital?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/McLean_Hospital> . ?x <http://dbpedia.org/property/restingplace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Congressman>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where is the tombstone of the congressman who died in the McLean hospital?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?location
WHERE {
  ?congressman dbo:deathPlace McLean Hospital .
  ?congressman dbo:tombstone ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?location
WHERE {
  ?congressman dbo:deathPlace McLean Hospital .
  ?congressman dbo:tombstone ?location .
}",2.50170125957988e-155,0.05555555555555555,False,False
2925,What are the TV shows whose network is also known as the CW?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterNames> <http://dbpedia.org/resource/The_CW> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the TV shows whose network is also known as the CW?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?showLabel ?show
WHERE {
  ?show dbo:network ?network .
  ?network dbo:name ""The CW"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?showLabel ?show
WHERE {
  ?show dbo:network ?network .
  ?network dbo:name ""The CW"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.951204860745888e-155,0.06172839506172839,False,False
783,Who has written the mary poppins musical?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mary_Poppins_(musical)> <http://dbpedia.org/ontology/author> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who has written the mary poppins musical?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?musical dbo:composer ?author .
  FILTER (str(?musical) = ""Mary Poppins (musical)"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?musical dbo:composer ?author .
  FILTER (str(?musical) = ""Mary Poppins (musical)"")
}",2.494821638843469e-155,0.06060606060606061,True,True
3886,Which magazines were founded by ann Wenner ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/Jann_Wenner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Magazine>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which magazines were founded by ann Wenner ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?magazine
WHERE {
  ?magazine dbo:founder dbr:Ann_Wenner .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?magazine
WHERE {
  ?magazine dbo:founder dbr:Ann_Wenner .
}",2.5124539841526692e-155,0.05970149253731343,True,True
2324,What is the total number of other destinations of the airlines whose one of the destinations is Mediterranean Sea?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/destinations> <http://dbpedia.org/resource/Mediterranean_Sea> . ?x <http://dbpedia.org/property/destinations> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the total number of other destinations of the airlines whose one of the destinations is Mediterranean Sea?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?otherDestination) AS ?totalDestinations)
WHERE {
  ?airline dbo:destination ?destination .
  ?destination dbo:name ""Mediterranean Sea""^^xsd:string .
  ?airline dbo:destination ?otherDestination .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?otherDestination) AS ?totalDestinations)
WHERE {
  ?airline dbo:destination ?destination .
  ?destination dbo:name ""Mediterranean Sea""^^xsd:string .
  ?airline dbo:destination ?otherDestination .
}",2.3192471031465984e-155,0.06329113924050633,True,True
576,Which railway line goes through the stations which are a part of the North Caucasus railway?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/type> <http://dbpedia.org/resource/North_Caucasus_Railway> . ?x <http://dbpedia.org/ontology/servingRailwayLine> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Station>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which railway line goes through the stations which are a part of the North Caucasus railway?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?railwayLine
WHERE {
  ?station dbo:partOf ?northCaucasusRailway .
  ?northCaucasusRailway dbo:hasRailwayLine ?railwayLine .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?railwayLine
WHERE {
  ?station dbo:partOf ?northCaucasusRailway .
  ?northCaucasusRailway dbo:hasRailwayLine ?railwayLine .
}",3.0566417519593477e-155,0.06578947368421052,True,True
3136,To which country does Peter Blay owe his allegiance?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Peter_Blay> <http://dbpedia.org/property/allegiance> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which country does Peter Blay owe his allegiance?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?country
WHERE {
  ?person dbo:birthPlace ?place .
  ?place dbo:country ?country .
  ?person dbo:name ""Peter Blay"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?country
WHERE {
  ?person dbo:birthPlace ?place .
  ?place dbo:country ?country .
  ?person dbo:name ""Peter Blay"" .
}",2.4119102000777368e-155,0.058823529411764705,True,True
4254,Which military conflict took place in Israel and had commander as Jaber Al-Ahmad Al-Sabah?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Israel> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Jaber_Al-Ahmad_Al-Sabah>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which military conflict took place in Israel and had commander as Jaber Al-Ahmad Al-Sabah?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?conflict
WHERE {
  ?conflict dbo:involvedIn ?militaryConflict .
  ?militaryConflict dbp:location ?location .
  ?location dbo:country ?country .
  ?country rdfs:label ""Israel"" .
  ?militaryConflict dbo:commander ?commander .
  ?commander rdfs:label ""Jaber Al-Ahmad Al-Sabah"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?conflict
WHERE {
  ?conflict dbo:involvedIn ?militaryConflict .
  ?militaryConflict dbp:location ?location .
  ?location dbo:country ?country .
  ?country rdfs:label ""Israel"" .
  ?militaryConflict dbo:commander ?commander .
  ?commander rdfs:label ""Jaber Al-Ahmad Al-Sabah"" .
}",2.2474984413337904e-155,0.047619047619047616,True,True
1084,Name the resting place of Charles Edward Magoon?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_Edward_Magoon> <http://dbpedia.org/property/restingplace> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the resting place of Charles Edward Magoon?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?restingPlace
WHERE {
  ?person dbo:name ""Charles Edward Magoon"" .
  ?person dbo:restingPlace ?restingPlace .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?restingPlace
WHERE {
  ?person dbo:name ""Charles Edward Magoon"" .
  ?person dbo:restingPlace ?restingPlace .
}",2.4775553999024465e-155,0.0625,True,True
23,Which band's former member are Kevin Jonas and Joe Jonas?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Kevin_Jonas> . ?uri <http://dbpedia.org/property/pastMembers> <http://dbpedia.org/resource/Joe_Jonas>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which band's former member are Kevin Jonas and Joe Jonas?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?band
WHERE {
  ?band dbo:member ?person .
  ?person dbo:memberOf ?band .
  ?person dbo:name ""Kevin Jonas"" .
  FILTER (BOUND(?band))
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?band
WHERE {
  ?band dbo:member ?person .
  ?person dbo:memberOf ?band .
  ?person dbo:name ""Kevin Jonas"" .
  FILTER (BOUND(?band))
}",2.4410426763339902e-155,0.05263157894736842,True,True
3845,Louis Dunbar is the coach of which basketball team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Louis_Dunbar>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Louis Dunbar is the coach of which basketball team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?person dbo:name ""Louis Dunbar"" .
  ?person dbo:coachOf ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?person dbo:name ""Louis Dunbar"" .
  ?person dbo:coachOf ?team .
}",8.174867218666773e-232,0.04411764705882353,True,True
2016,What is the resting place of the politician who succeeded Samuel Hayes?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Samuel_Hayes_(settler)> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the resting place of the politician who succeeded Samuel Hayes?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?politician ?restingPlace
WHERE {
  ?politician dbo:successorOf dbo:Samuel_Hayes .
  ?politician dbo:restingPlace ?restingPlace .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?politician ?restingPlace
WHERE {
  ?politician dbo:successorOf dbo:Samuel_Hayes .
  ?politician dbo:restingPlace ?restingPlace .
}",2.5175858750356875e-155,0.05555555555555555,True,True
4375,What are some things people born in Louisiana are famous for?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/Louisiana> . ?x <http://dbpedia.org/property/knownFor> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some things people born in Louisiana are famous for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:birthPlace dbp:Louisiana .
  ?person dbo:occupation ?occupation .
  ?occupation rdfs:label ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:birthPlace dbp:Louisiana .
  ?person dbo:occupation ?occupation .
  ?occupation rdfs:label ?thing .
}",3.53714058675999e-155,0.08,True,True
571,What is the basketball team whose President's college is Brockport Golden Eagles?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/college> <http://dbpedia.org/resource/Brockport_Golden_Eagles> . ?uri <http://dbpedia.org/property/president> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the basketball team whose President's college is Brockport Golden Eagles?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?team
WHERE {
  ?team dbo:president ?president .
  ?president dbp:almaMater ?college .
  ?college rdfs:label ""Brockport Golden Eagles"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?team
WHERE {
  ?team dbo:president ?president .
  ?president dbp:almaMater ?college .
  ?college rdfs:label ""Brockport Golden Eagles"" .
}",2.4410426763339902e-155,0.05333333333333334,True,True
424,Who is the owner of the bank where Thomas Secunda works?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thomas_Secunda> <http://dbpedia.org/ontology/occupation> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the owner of the bank where Thomas Secunda works?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?owner
WHERE {
  ?person dbo:occupation ""banker"" .
  ?person dbp:employedBy ?bank .
  ?bank dbo:owner ?owner .
  FILTER ( ?person = <http://dbpedia.org/resource/Thomas_Secunda> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?owner
WHERE {
  ?person dbo:occupation ""banker"" .
  ?person dbp:employedBy ?bank .
  ?bank dbo:owner ?owner .
  FILTER ( ?person = <http://dbpedia.org/resource/Thomas_Secunda> )
}",2.5548810418069474e-155,0.06578947368421052,True,True
2613,Where can one find some quick bread in the world?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/type> <http://dbpedia.org/resource/Quick_bread> . ?x <http://dbpedia.org/ontology/region> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where can one find some quick bread in the world?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?location dbo:cuisine ?cuisine .
  ?cuisine rdfs:subClassOf* dbo:QuickBread .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?location dbo:cuisine ?cuisine .
  ?cuisine rdfs:subClassOf* dbo:QuickBread .
}",3.650908595319347e-155,0.08450704225352113,True,True
2796,Which ancient country had capital as Nicomedia and History of Trier?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Nicomedia> . ?uri <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/History_of_Trier> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which ancient country had capital as Nicomedia and History of Trier?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?country dbo:capital ?capital .
  ?capital dbo:name ""Nicomedia"" .
  ?country dbo:history ?history .
  ?history dbo:name ""History of Trier"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?country dbo:capital ?capital .
  ?capital dbo:name ""Nicomedia"" .
  ?country dbo:history ?history .
  ?history dbo:name ""History of Trier"" .
}",2.968021523431445e-155,0.06578947368421052,True,True
2695,Which airlines fly to Gimhae International Airport?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Gimhae_International_Airport> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which airlines fly to Gimhae International Airport?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?airline
WHERE {
  ?airline dbo:wikiPageRedirects* dbp:Gimhae_International_Airport .
  ?airline dbo:airlineType ?type .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?airline
WHERE {
  ?airline dbo:wikiPageRedirects* dbp:Gimhae_International_Airport .
  ?airline dbo:airlineType ?type .
}",2.4606427705034855e-155,0.06060606060606061,True,True
2220,Name the broadcast area of Radio Philippines Network ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Radio_Philippines_Network> <http://dbpedia.org/property/area> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the broadcast area of Radio Philippines Network ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?broadcastArea
WHERE {
  ?radio a dbo:RadioStation ;
  dbp:broadcastArea ?broadcastArea .
  FILTER (STR(?radio) = ""http://dbpedia.org/resource/Radio_Philippines_Network"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?broadcastArea
WHERE {
  ?radio a dbo:RadioStation ;
  dbp:broadcastArea ?broadcastArea .
  FILTER (STR(?radio) = ""http://dbpedia.org/resource/Radio_Philippines_Network"")
}",2.4440718429993668e-155,0.058823529411764705,True,True
3623,What have been made in the state whose capital is Boston?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/capital> <http://dbpedia.org/resource/Boston> . ?uri <http://dbpedia.org/ontology/location> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What have been made in the state whose capital is Boston?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?item
WHERE {
  ?state dbo:capital ?city .
  ?city dbo:name ""Boston""^^xsd:string .
  ?item dbo:location ?state .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?item
WHERE {
  ?state dbo:capital ?city .
  ?city dbo:name ""Boston""^^xsd:string .
  ?item dbo:location ?state .
}",3.53714058675999e-155,0.08108108108108109,True,True
733,Does Gibby Haynes play the saxophone?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Gibby_Haynes> <http://dbpedia.org/property/instrument> <http://dbpedia.org/resource/Saxophone> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Gibby Haynes play the saxophone?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?instrument
WHERE {
  ?person dbo:name ""Gibby Haynes"" .
  ?person dbo:playsInstrument ?instrument .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?instrument
WHERE {
  ?person dbo:name ""Gibby Haynes"" .
  ?person dbo:playsInstrument ?instrument .
}",2.3548635457910922e-155,0.04918032786885246,True,True
76,Which country has given citizenship to both saima chowdhury and edmund john?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saima_Chowdhury> <http://dbpedia.org/ontology/citizenship> ?uri. <http://dbpedia.org/resource/Edmund_John> <http://dbpedia.org/ontology/citizenship> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which country has given citizenship to both saima chowdhury and edmund john?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?person dbo:nationality ?country .
  FILTER (regex(?person, ""saima chowdhury"", ""i"") || regex(?person, ""edmund john"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?person dbo:nationality ?country .
  FILTER (regex(?person, ""saima chowdhury"", ""i"") || regex(?person, ""edmund john"", ""i""))
}",3.075337680136661e-155,0.0759493670886076,True,True
4055,Who is the parent organization of Get TV is also the label provider of I Pray on CHristmas ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/I_Pray_on_Christmas> <http://dbpedia.org/property/label> ?uri. <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the parent organization of Get TV is also the label provider of I Pray on CHristmas ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?parentOrganization ?labelProvider
WHERE {
  ?parentOrganization dbo:wikiPageRedirects ?tvShow .
  ?tvShow dbo:parentOrganization ?parentOrganization2 .
  ?tvShow dbo:label ?tvShowLabel .
  ?labelProvider dbo:wikiPageRedirects ?christmasPrayer .
  ?christmasPrayer dbo:label ?christmasPrayerLabel .
  FILTER (str(?tvShowLabel) = ""Get TV"")
  FILTER (str(?christmasPrayerLabel) = ""I Pray on CHristmas"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?parentOrganization ?labelProvider
WHERE {
  ?parentOrganization dbo:wikiPageRedirects ?tvShow .
  ?tvShow dbo:parentOrganization ?parentOrganization2 .
  ?tvShow dbo:label ?tvShowLabel .
  ?labelProvider dbo:wikiPageRedirects ?christmasPrayer .
  ?christmasPrayer dbo:label ?christmasPrayerLabel .
  FILTER (str(?tvShowLabel) = ""Get TV"")
  FILTER (str(?christmasPrayerLabel) = ""I Pray on CHristmas"")
}",1.876064362016577e-155,0.033707865168539325,True,True
448,Which shows are voiced by US citizens?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/stateOfOrigin> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/voices> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which shows are voiced by US citizens?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?show ?actor
WHERE {
  ?show dbo:genre ""TV Show"" .
  ?show dbp:voicedBy ?actor .
  ?actor dbo:nationality ""United States"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?show ?actor
WHERE {
  ?show dbo:genre ""TV Show"" .
  ?show dbp:voicedBy ?actor .
  ?actor dbo:nationality ""United States"" .
}",3.1537059338519422e-155,0.06944444444444445,True,True
3010,Which award has been won by Claudia Moro?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Claudia_Moro> <http://dbpedia.org/property/title> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which award has been won by Claudia Moro?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?award
WHERE {
  ?person dbo:name ""Claudia Moro"" .
  ?person dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?award
WHERE {
  ?person dbo:name ""Claudia Moro"" .
  ?person dbo:award ?award .
}",2.494821638843469e-155,0.06153846153846154,True,True
4727,How many television shows have  Fox Broadcasting Company as their channel?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many television shows have  Fox Broadcasting Company as their channel?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?show) AS ?count)
WHERE {
  ?show dbo:channel dbp:Fox Broadcasting Company .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?show) AS ?count)
WHERE {
  ?show dbo:channel dbp:Fox Broadcasting Company .
}",8.174867218666773e-232,0.04225352112676056,False,False
2640,Who holds shares in something famous for the Seven Spring Mountain Resort?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Seven_Springs_Mountain_Resort> . ?uri <http://dbpedia.org/property/owner> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who holds shares in something famous for the Seven Spring Mountain Resort?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?shareholder
WHERE {
  ?resort dbo:name ""Seven Spring Mountain Resort"" .
  ?resort dbo:partOf ?company .
  ?company dbo:shareholder ?shareholder .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?shareholder
WHERE {
  ?resort dbo:name ""Seven Spring Mountain Resort"" .
  ?resort dbo:partOf ?company .
  ?company dbo:shareholder ?shareholder .
}",3.0202505652128895e-155,0.06756756756756757,True,True
2166,What is the national origin of Focke-Wulf Fw 260 ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Focke-Wulf_Fw_260> <http://dbpedia.org/property/nationalOrigin> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the national origin of Focke-Wulf Fw 260 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?nationalOrigin
WHERE {
  ?aircraft dbo:nationalOrigin ?nationalOrigin .
  FILTER (regex(?aircraft, ""Focke-Wulf Fw 260"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?nationalOrigin
WHERE {
  ?aircraft dbo:nationalOrigin ?nationalOrigin .
  FILTER (regex(?aircraft, ""Focke-Wulf Fw 260"", ""i""))
}",2.4440718429993668e-155,0.058823529411764705,True,True
995,Where are the headquarters of Metro Transit (Minnesota)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Metro_Transit_(Minnesota)> <http://dbpedia.org/property/headquarters> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where are the headquarters of Metro Transit (Minnesota)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?location
WHERE {
  ?transit dbo:headquarters ?location .
  FILTER (regex(?transit, ""Metro Transit"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?location
WHERE {
  ?transit dbo:headquarters ?location .
  FILTER (regex(?transit, ""Metro Transit"", ""i""))
}",2.4440718429993668e-155,0.058823529411764705,True,True
2904,Georg Meissner was doctoral supervisor of which scientist ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Georg Meissner was doctoral supervisor of which scientist ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?student
WHERE {
  ?student dbo:doctoralAdvisor ?supervisor .
  ?supervisor dbo:name ""Georg Meissner"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?student
WHERE {
  ?student dbo:doctoralAdvisor ?supervisor .
  ?supervisor dbo:name ""Georg Meissner"" .
}",8.202720662090001e-232,0.04411764705882353,True,True
966,What is the major shrine of the monarchs whose successor is Dragimir of Travunia and Zachlumia?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Dragimir_of_Travunia_and_Zachlumia> . ?x <http://dbpedia.org/property/majorShrine> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Monarch>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the major shrine of the monarchs whose successor is Dragimir of Travunia and Zachlumia?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?majorShrine
WHERE {
  ?monarch dbo:successor ?successor .
  ?successor rdf:type dbo:Monarch .
  ?successor dbo:name ""Dragimir of Travunia and Zachlumia""^^xsd:string .
  ?monarch dbo:majorShrine ?majorShrine .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?majorShrine
WHERE {
  ?monarch dbo:successor ?successor .
  ?successor rdf:type dbo:Monarch .
  ?successor dbo:name ""Dragimir of Travunia and Zachlumia""^^xsd:string .
  ?monarch dbo:majorShrine ?majorShrine .
}",2.8559767164037747e-155,0.06329113924050633,True,True
3779,Which borough of the Corringham railway station is also the local authority of Buckhurst Hill County High School ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Corringham_railway_station> <http://dbpedia.org/property/borough> ?uri. <http://dbpedia.org/resource/Buckhurst_Hill_County_High_School> <http://dbpedia.org/ontology/localAuthority> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which borough of the Corringham railway station is also the local authority of Buckhurst Hill County High School ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?borough
WHERE {
  ?station dbo:borough ?borough .
  ?station rdfs:label ""Corringham railway station""@en .
  ?school dbo:location ?borough .
  ?school rdfs:label ""Buckhurst Hill County High School""@en .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?borough
WHERE {
  ?station dbo:borough ?borough .
  ?station rdfs:label ""Corringham railway station""@en .
  ?school dbo:location ?borough .
  ?school rdfs:label ""Buckhurst Hill County High School""@en .
}",1.978049756642675e-155,0.036585365853658534,True,True
629,Under whom did Charles Drummond Ellis do his PhD?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/doctoralStudent> <http://dbpedia.org/resource/Charles_Drummond_Ellis> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Under whom did Charles Drummond Ellis do his PhD?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?advisor
WHERE {
  ?advisor dbo:student ?charles
  ?charles dbo:birthDate ""1877-01-01""^^xsd:date .
  FILTER (regex(?charles, ""Charles Drummond Ellis""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?advisor
WHERE {
  ?advisor dbo:student ?charles
  ?charles dbo:birthDate ""1877-01-01""^^xsd:date .
  FILTER (regex(?charles, ""Charles Drummond Ellis""))
}",8.120546156106983e-232,0.043478260869565216,False,False
1513,What is the title of the successor of Kaulahea I?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kaulahea_I> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/property/title> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the title of the successor of Kaulahea I?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?successorTitle
WHERE {
  ?king dbo:successor ?successor .
  ?king dbo:name ""Kaulahea I"" .
  ?successor dbo:name ?successorTitle .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?successorTitle
WHERE {
  ?king dbo:successor ?successor .
  ?king dbo:name ""Kaulahea I"" .
  ?successor dbo:name ?successorTitle .
}",3.1537059338519422e-155,0.07352941176470588,True,True
918,"What is the number of occupation of the people who died in Tampa, Florida?",google/gemma-2-9b-it,"SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the number of occupation of the people who died in Tampa, Florida?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?occupation
WHERE {
  ?person dbo:deathPlace ""Tampa, Florida""^^geo:Place .
  ?person dbo:occupation ?occupation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?occupation
WHERE {
  ?person dbo:deathPlace ""Tampa, Florida""^^geo:Place .
  ?person dbo:occupation ?occupation .
}",3.0943809285865547e-155,0.06756756756756757,True,True
489,Name the species of Southwest African lion?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Southwest_African_lion> <http://dbpedia.org/ontology/species> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the species of Southwest African lion?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?species
WHERE {
  ?lion dbo:species ?species .
  FILTER (regex(?lion, ""Southwest African lion"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?species
WHERE {
  ?lion dbo:species ?species .
  FILTER (regex(?lion, ""Southwest African lion"", ""i""))
}",2.494821638843469e-155,0.06153846153846154,True,True
3872,What is the place of death of the lieutenant of Frank Steunenberg?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frank_Steunenberg> <http://dbpedia.org/property/lieutenant> ?x . ?x <http://dbpedia.org/property/placeOfDeath> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the place of death of the lieutenant of Frank Steunenberg?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?placeOfDeath
WHERE {
  ?person dbo:placeOfDeath ?placeOfDeath .
  ?person dbo:name ""Frank Steunenberg"" .
  ?person dbo:occupation ""Lieutenant"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?placeOfDeath
WHERE {
  ?person dbo:placeOfDeath ?placeOfDeath .
  ?person dbo:name ""Frank Steunenberg"" .
  ?person dbo:occupation ""Lieutenant"" .
}",3.0566417519593477e-155,0.06944444444444445,True,True
4718,What is the state whose largest city is Denver?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Denver>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the state whose largest city is Denver?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?city dbo:population ?population .
  ?city dbo:name ""Denver"" .
  ?city dbp:locatedIn ?state .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?city dbo:population ?population .
  ?city dbo:name ""Denver"" .
  ?city dbp:locatedIn ?state .
}",2.427831263680579e-155,0.06060606060606061,True,True
813,What are some movies written by British writers?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/nationality> <http://dbpedia.org/resource/British_people> . ?uri <http://dbpedia.org/ontology/writer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some movies written by British writers?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?movie ?writer
WHERE {
  ?movie dbo:writer ?writer .
  ?writer dbo:nationality ""British"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?movie ?writer
WHERE {
  ?movie dbo:writer ?writer .
  ?writer dbo:nationality ""British"" .
}",3.195205633963664e-155,0.07042253521126761,True,True
2069,Which are the comics characters painted by Bruce Timm and created by Paul Dini?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Bruce_Timm> . ?uri <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Paul_Dini>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ComicsCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which are the comics characters painted by Bruce Timm and created by Paul Dini?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?character
WHERE {
  ?character dbo:creator ?creator .
  ?creator dbo:name ""Paul Dini"" .
  ?character dbo:artist ?artist .
  ?artist dbo:name ""Bruce Timm"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?character
WHERE {
  ?character dbo:creator ?creator .
  ?creator dbo:name ""Paul Dini"" .
  ?character dbo:artist ?artist .
  ?artist dbo:name ""Bruce Timm"" .
}",2.344734865707205e-155,0.05063291139240506,True,True
935,Which builder of Ford Straight-6 engine is also the automobile platform provider of Chiva bus?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> ?uri. <http://dbpedia.org/resource/Ford_Straight-6_engine> <http://dbpedia.org/ontology/manufacturer> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which builder of Ford Straight-6 engine is also the automobile platform provider of Chiva bus?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?builder
WHERE {
  ?builder dbo:manufacturerOf ?engine .
  ?engine dbo:name ""Ford Straight-6 engine""^^xsd:string .
  ?builder dbo:produces ?vehicle .
  ?vehicle rdfs:subClassOf dbo:Bus .
  ?vehicle dbo:platformProvider dbo:Chiva .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?builder
WHERE {
  ?builder dbo:manufacturerOf ?engine .
  ?engine dbo:name ""Ford Straight-6 engine""^^xsd:string .
  ?builder dbo:produces ?vehicle .
  ?vehicle rdfs:subClassOf dbo:Bus .
  ?vehicle dbo:platformProvider dbo:Chiva .
}",2.567119010698462e-155,0.04878048780487805,True,True
4406,Who is the builder of Presidio Santa Cruz de Terrenate ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Presidio_Santa_Cruz_de_Terrenate> <http://dbpedia.org/ontology/builder> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the builder of Presidio Santa Cruz de Terrenate ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?builder
WHERE {
  ?building dbo:builder ?builder .
  FILTER (str(?building) = ""Presidio Santa Cruz de Terrenate"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?builder
WHERE {
  ?building dbo:builder ?builder .
  FILTER (str(?building) = ""Presidio Santa Cruz de Terrenate"")
}",2.3962983105918537e-155,0.057971014492753624,True,True
4490,How many people work in the Massachusetts house of Representatives?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Massachusetts_House_of_Representatives>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people work in the Massachusetts house of Representatives?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?house dbo:member ?person .
  FILTER (regex(?person, ""Massachusetts House of Representatives"", ""i""))
  GROUP BY ?house
  
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?house dbo:member ?person .
  FILTER (regex(?person, ""Massachusetts House of Representatives"", ""i""))
  GROUP BY ?house
  
}",8.642045500889408e-232,0.0547945205479452,False,False
4977,Count the total awards won by the writer who has won Goethe Prize ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Goethe_Prize> . ?x <http://dbpedia.org/property/awards> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the total awards won by the writer who has won Goethe Prize ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?award) AS ?awardCount)
WHERE {
  ?writer dbo:birthDate ?birth.
  ?writer dbo:award ?award.
  ?award dbo:name ""Goethe Prize"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?award) AS ?awardCount)
WHERE {
  ?writer dbo:birthDate ?birth.
  ?writer dbo:award ?award.
  ?award dbo:name ""Goethe Prize"" .
}",2.426555136425675e-155,0.06329113924050633,True,True
3846,Do the White Plains Road lie in the Bronx county?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/White_Plains_Road> <http://dbpedia.org/property/counties> <http://dbpedia.org/resource/The_Bronx> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Do the White Plains Road lie in the Bronx county?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?road ?county
WHERE {
  ?road dbo:name ""White Plains Road"" .
  ?road dbo:location ?county .
  ?county dbo:name ""Bronx County"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?road ?county
WHERE {
  ?road dbo:name ""White Plains Road"" .
  ?road dbo:location ?county .
  ?county dbo:name ""Bronx County"" .
}",2.1483903094550452e-155,0.04411764705882353,True,True
1750,Does the Amazon River start in Arequipa Region?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Amazon_River> <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/Arequipa_Region> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the Amazon River start in Arequipa Region?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:location dbo:ArequipaRegion .
  ?x dbo:source dbp:AmazonRiver .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:location dbo:ArequipaRegion .
  ?x dbo:source dbp:AmazonRiver .
}",2.2898861187450904e-155,0.046875,True,True
1409,What are the television shows whose starting music is composed by Ron Grainer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the television shows whose starting music is composed by Ron Grainer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:composer ?composer .
  ?composer dbo:name ""Ron Grainer"" .
  ?show dbo:genre ""Television show"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:composer ?composer .
  ?composer dbo:name ""Ron Grainer"" .
  ?show dbo:genre ""Television show"" .
}",2.2814337887592556e-155,0.05194805194805195,True,True
4942,In which cities do some railways operated by Russian railways start?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/operatedBy> <http://dbpedia.org/resource/Russian_Railways> . ?x <http://dbpedia.org/ontology/routeStart> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which cities do some railways operated by Russian railways start?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?railway dbo:operator ?operator .
  ?operator dbo:name ""Russian Railways"" .
  ?railway dbp:startsIn ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?railway dbo:operator ?operator .
  ?operator dbo:name ""Russian Railways"" .
  ?railway dbp:startsIn ?city .
}",3.5156372159951298e-155,0.08,True,True
102,Which country's leader is David Johnston?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/leader> <http://dbpedia.org/resource/David_Johnston>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which country's leader is David Johnston?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?country
WHERE {
  ?leader dbo:birthDate ""1939-01-01""^^xsd:date .
  ?leader dbo:name ""David Johnston"" .
  ?leader dbo:country ?country .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?country
WHERE {
  ?leader dbo:birthDate ""1939-01-01""^^xsd:date .
  ?leader dbo:name ""David Johnston"" .
  ?leader dbo:country ?country .
}",8.174867218666773e-232,0.04477611940298507,True,True
413,What are the movies whose cinematographer is Gregg Toland?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Gregg_Toland>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the movies whose cinematographer is Gregg Toland?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Gregg Toland"" .
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Gregg Toland"" .
}",2.4606427705034855e-155,0.058823529411764705,True,True
20,Which source country of SamurAbsheron channel is the birth place of Anar Salmanov?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Samur–Absheron_channel> <http://dbpedia.org/ontology/sourceCountry> ?uri. <http://dbpedia.org/resource/Anar_Salmanov> <http://dbpedia.org/property/placeOfBirth> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which source country of SamurAbsheron channel is the birth place of Anar Salmanov?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?birthPlace
WHERE {
  ?channel dbo:sourceCountry ?country .
  ?country rdfs:label ""Azerbaijan"" .
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:name ""Anar Salmanov"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?birthPlace
WHERE {
  ?channel dbo:sourceCountry ?country .
  ?country rdfs:label ""Azerbaijan"" .
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:name ""Anar Salmanov"" .
}",2.09870814592606e-155,0.038461538461538464,True,True
2527,"What sport amongst the one Lagos Preparatory School practices, did Willian Garne play for?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lagos_Preparatory_School> <http://dbpedia.org/ontology/sport> ?uri. <http://dbpedia.org/resource/William_Garne> <http://dbpedia.org/ontology/occupation> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What sport amongst the one Lagos Preparatory School practices, did Willian Garne play for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?sport
WHERE {
  ?school dbo:location ""Lagos, Nigeria""@en .
  ?school dbo:name ""Lagos Preparatory School""@en .
  ?school dbo:practicesSport ?sport .
  ?player dbo:name ""Willian Garne""@en .
  ?player dbo:playsFor ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?sport
WHERE {
  ?school dbo:location ""Lagos, Nigeria""@en .
  ?school dbo:name ""Lagos Preparatory School""@en .
  ?school dbo:practicesSport ?sport .
  ?player dbo:name ""Willian Garne""@en .
  ?player dbo:playsFor ?sport .
}",2.0088791894285736e-155,0.036585365853658534,True,True
2730,What is the nickname of the home stadium of Angels Toru?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Angels_Toruń> <http://dbpedia.org/ontology/homeStadium> ?x . ?x <http://dbpedia.org/property/nickname> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the nickname of the home stadium of Angels Toru?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?nickname
WHERE {
  ?stadium dbo:officialName ""Angels Toru"" .
  ?stadium dbo:nickname ?nickname .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?nickname
WHERE {
  ?stadium dbo:officialName ""Angels Toru"" .
  ?stadium dbo:nickname ?nickname .
}",3.1537059338519422e-155,0.07142857142857142,True,True
3389,What is the route end of Birmingham and Oxford Junction Railway ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Birmingham_and_Oxford_Junction_Railway> <http://dbpedia.org/ontology/routeEnd> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the route end of Birmingham and Oxford Junction Railway ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?routeEnd
WHERE {
  ?railway dbo:routeEnd ?routeEnd .
  FILTER (STR(?railway) = ""Birmingham_and_Oxford_Junction_Railway"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?routeEnd
WHERE {
  ?railway dbo:routeEnd ?routeEnd .
  FILTER (STR(?railway) = ""Birmingham_and_Oxford_Junction_Railway"")
}",2.4440718429993668e-155,0.058823529411764705,True,True
3511,Where did the conflict take place where Liu Mingchuan fought?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liu_Mingchuan> <http://dbpedia.org/property/battles> ?x . ?x <http://dbpedia.org/ontology/territory> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the conflict take place where Liu Mingchuan fought?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?conflict dbo:participant ?person .
  ?person dbo:name ""Liu Mingchuan"" .
  ?conflict dbo:location ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?conflict dbo:participant ?person .
  ?person dbo:name ""Liu Mingchuan"" .
  ?conflict dbo:location ?location .
}",3.6040982025556637e-155,0.08333333333333333,True,True
3332,In which company is Raymond Conner at an important position?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/keyPerson> <http://dbpedia.org/resource/Raymond_Conner> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which company is Raymond Conner at an important position?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?company
WHERE {
  ?person dbo:name ""Raymond Conner"" .
  ?person dbo:position ?position .
  ?person dbo:company ?company .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?company
WHERE {
  ?person dbo:name ""Raymond Conner"" .
  ?person dbo:position ?position .
  ?person dbo:company ?company .
}",2.3809857162598948e-155,0.05714285714285714,True,True
2535,Where did Andy Wyant die and Robert Rodi was born in?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Robert_Rodi> <http://dbpedia.org/ontology/birthPlace> ?uri. <http://dbpedia.org/resource/Andy_Wyant> <http://dbpedia.org/property/placeOfDeath> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did Andy Wyant die and Robert Rodi was born in?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?deathPlace ?birthPlace
WHERE {
  ?person a dbo:Person ;
    dbo:name ?name .
  FILTER(?name = ""Andy Wyant"")
  ?person dbo:deathPlace ?deathPlace .
  
  ?person2 a dbo:Person ;
    dbo:name ?name2 .
  FILTER(?name2 = ""Robert Rodi"")
  ?person2 dbo:birthPlace ?birthPlace .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?deathPlace ?birthPlace
WHERE {
  ?person a dbo:Person ;
    dbo:name ?name .
  FILTER(?name = ""Andy Wyant"")
  ?person dbo:deathPlace ?deathPlace .
  
  ?person2 a dbo:Person ;
    dbo:name ?name2 .
  FILTER(?name2 = ""Robert Rodi"")
  ?person2 dbo:birthPlace ?birthPlace .
}",2.5024440083160195e-155,0.047058823529411764,True,True
3099,Which team did Wilfred McDonalds and Cam Plante play for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wilfred_McDonald> <http://dbpedia.org/property/playedFor> ?uri. <http://dbpedia.org/resource/Cam_Plante> <http://dbpedia.org/property/playedFor> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which team did Wilfred McDonalds and Cam Plante play for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthDate ?birth.
  ?player dbo:name ?name.
  FILTER (regex(?name, ""Wilfred McDonalds"", ""i"") || regex(?name, ""Cam Plante"", ""i""))
  ?player dbo:memberOf ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthDate ?birth.
  ?player dbo:name ?name.
  FILTER (regex(?name, ""Wilfred McDonalds"", ""i"") || regex(?name, ""Cam Plante"", ""i""))
  ?player dbo:memberOf ?team .
}",3.322851996412995e-155,0.07407407407407407,True,True
3553,Which set of researchers won the Gold Medal of the Royal Astronomical Society award?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Gold_Medal_of_the_Royal_Astronomical_Society>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which set of researchers won the Gold Medal of the Royal Astronomical Society award?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?researcher
WHERE {
  ?researcher dbo:award <http://dbpedia.org/resource/Gold_Medal_of_the_Royal_Astronomical_Society> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?researcher
WHERE {
  ?researcher dbo:award <http://dbpedia.org/resource/Gold_Medal_of_the_Royal_Astronomical_Society> .
}",3.032816514970993e-155,0.07142857142857142,True,True
14,What tv series can be said to be related to the sarah jane adventure and dr who confidential?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/The_Sarah_Jane_Adventures> . ?uri <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Doctor_Who_Confidential> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What tv series can be said to be related to the sarah jane adventure and dr who confidential?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?tvSeries
WHERE {
  ?tvSeries dbo:genre ?genre .
  ?genre rdfs:subClassOf* dbo:ScienceFictionTelevisionSeries .
  ?tvSeries dbo:relatedTo ?relatedTo .
  ?relatedTo dbo:wikiPageRedirects* dbo:SarahJaneAdventures .
  FILTER(?relatedTo != dbo:SarahJaneAdventures)
  UNION
  ?tvSeries dbo:genre ?genre .
  ?genre rdfs:subClassOf* dbo:ScienceFictionTelevisionSeries .
  ?tvSeries dbo:relatedTo ?relatedTo .
  ?relatedTo dbo:wikiPageRedirects* dbo:DoctorWhoConfidential .
  FILTER(?relatedTo != dbo:DoctorWhoConfidential)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?tvSeries
WHERE {
  ?tvSeries dbo:genre ?genre .
  ?genre rdfs:subClassOf* dbo:ScienceFictionTelevisionSeries .
  ?tvSeries dbo:relatedTo ?relatedTo .
  ?relatedTo dbo:wikiPageRedirects* dbo:SarahJaneAdventures .
  FILTER(?relatedTo != dbo:SarahJaneAdventures)
  UNION
  ?tvSeries dbo:genre ?genre .
  ?genre rdfs:subClassOf* dbo:ScienceFictionTelevisionSeries .
  ?tvSeries dbo:relatedTo ?relatedTo .
  ?relatedTo dbo:wikiPageRedirects* dbo:DoctorWhoConfidential .
  FILTER(?relatedTo != dbo:DoctorWhoConfidential)
}",2.684820574213228e-155,0.07058823529411765,False,False
2704,"Name the river whose source is located in Itasca State Park and mouth is located in Pilottown, Louisiana?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceLocation> <http://dbpedia.org/resource/Itasca_State_Park> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Pilottown,_Louisiana>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the river whose source is located in Itasca State Park and mouth is located in Pilottown, Louisiana?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:source ?source .
  ?source dbo:locatedIn <http://dbpedia.org/resource/Itasca_State_Park> .
  ?river dbo:mouth ?mouth .
  ?mouth dbo:locatedIn <http://dbpedia.org/resource/Pilottown,_Louisiana> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:source ?source .
  ?source dbo:locatedIn <http://dbpedia.org/resource/Itasca_State_Park> .
  ?river dbo:mouth ?mouth .
  ?mouth dbo:locatedIn <http://dbpedia.org/resource/Pilottown,_Louisiana> .
}",2.9024197612372904e-155,0.0641025641025641,True,True
1657,Name some TV shows whose theme is made by a band associated with Buckethead?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Buckethead> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name some TV shows whose theme is made by a band associated with Buckethead?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?showTitle
WHERE {
  ?show dbo:theme ?theme .
  ?theme dbo:composer ?composer .
  ?composer dbo:memberOf ?band .
  ?band dbo:member ?buckethead .
  ?show dbo:title ?showTitle .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?showTitle
WHERE {
  ?show dbo:theme ?theme .
  ?theme dbo:composer ?composer .
  ?composer dbo:memberOf ?band .
  ?band dbo:member ?buckethead .
  ?show dbo:title ?showTitle .
}",2.8409841948588806e-155,0.06097560975609756,True,True
118,Name the sea with Helsinki as one of the shore city and is also an outflow for Danish straits?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Helsinki> . ?uri <http://dbpedia.org/property/outflow> <http://dbpedia.org/resource/Danish_straits>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the sea with Helsinki as one of the shore city and is also an outflow for Danish straits?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?sea
WHERE {
  ?sea dbo:capital ?city .
  ?city dbo:locatedIn ?country .
  ?country dbo:name ""Finland""@en .
  ?sea dbo:waterBodyType ""Sea""@en .
  ?sea dbo:connectedTo ?connectedTo .
  ?connectedTo dbo:connectedTo ?danishStraits .
  FILTER (regex(?danishStraits, ""Danish Straits"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?sea
WHERE {
  ?sea dbo:capital ?city .
  ?city dbo:locatedIn ?country .
  ?country dbo:name ""Finland""@en .
  ?sea dbo:waterBodyType ""Sea""@en .
  ?sea dbo:connectedTo ?connectedTo .
  ?connectedTo dbo:connectedTo ?danishStraits .
  FILTER (regex(?danishStraits, ""Danish Straits"", ""i""))
}",8.029654430073048e-232,0.033707865168539325,True,True
1692,Who was the architect of the stadium currently run by Brandenton?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/operator> <http://dbpedia.org/resource/Bradenton,_Florida> . ?x <http://dbpedia.org/property/architect> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the architect of the stadium currently run by Brandenton?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?architect
WHERE {
  ?stadium dbo:operator ?operator .
  ?operator dbo:name ""Brandenton""@en .
  ?stadium dbo:architect ?architect .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?architect
WHERE {
  ?stadium dbo:operator ?operator .
  ?operator dbo:name ""Brandenton""@en .
  ?stadium dbo:architect ?architect .
}",2.486113577066771e-155,0.0547945205479452,True,True
1481,Which sports are played typically in private schools?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/schooltype> <http://dbpedia.org/resource/Private_school> . ?x <http://dbpedia.org/ontology/sport> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports are played typically in private schools?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?sport
WHERE {
  ?school dbo:type dbo:PrivateSchool .
  ?school dbp:sportsPlayed ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?sport
WHERE {
  ?school dbo:type dbo:PrivateSchool .
  ?school dbp:sportsPlayed ?sport .
}",3.776411644491886e-155,0.08823529411764706,True,True
3756,How many subjects are covered in the publications of Doubleday?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Doubleday_(publisher)> . ?x <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many subjects are covered in the publications of Doubleday?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT (COUNT(DISTINCT ?subject) AS ?count)
WHERE {
  ?publisher dbr:name ""Doubleday"" .
  ?publisher dbo:publications ?publication .
  ?publication dbo:subject ?subject .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT (COUNT(DISTINCT ?subject) AS ?count)
WHERE {
  ?publisher dbr:name ""Doubleday"" .
  ?publisher dbo:publications ?publication .
  ?publication dbo:subject ?subject .
}",3.0566417519593477e-155,0.06493506493506493,True,True
661,Who was in military unit which played the role of Air interdiction?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/role> <http://dbpedia.org/resource/Air_interdiction> . ?uri <http://dbpedia.org/ontology/militaryUnit> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was in military unit which played the role of Air interdiction?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:militaryUnit ?unit .
  ?unit dbo:role ?role .
  ?role rdfs:label ""Air interdiction""@en .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:militaryUnit ?unit .
  ?unit dbo:role ?role .
  ?role rdfs:label ""Air interdiction""@en .
}",3.473781407941057e-155,0.07792207792207792,True,True
2625,"What is the river whose source region is North-Western Province, Zambia and river mouth is Indian Ocean?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/sourceRegion> <http://dbpedia.org/resource/North-Western_Province,_Zambia> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/Indian_Ocean>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the river whose source region is North-Western Province, Zambia and river mouth is Indian Ocean?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:sourceRegion <http://dbpedia.org/resource/North-Western_Province,_Zambia> .
  ?river dbo:mouth <http://dbpedia.org/resource/Indian_Ocean> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:sourceRegion <http://dbpedia.org/resource/North-Western_Province,_Zambia> .
  ?river dbo:mouth <http://dbpedia.org/resource/Indian_Ocean> .
}",3.0566417519593477e-155,0.06756756756756757,True,True
2078,What games are played at universities in Lanao Del Sur?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/state> <http://dbpedia.org/resource/Lanao_del_Sur> . ?x <http://dbpedia.org/ontology/athletics> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What games are played at universities in Lanao Del Sur?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?game
WHERE {
  ?university dbo:location <http://dbpedia.org/resource/Lanao_del_Sur> .
  ?university dbo:sportsEvent ?game .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?game
WHERE {
  ?university dbo:location <http://dbpedia.org/resource/Lanao_del_Sur> .
  ?university dbo:sportsEvent ?game .
}",3.650908595319347e-155,0.0821917808219178,True,True
3671,What is the alma mater of the senator who is the successor of Warren Magnuson ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Warren_Magnuson> <http://dbpedia.org/property/successor> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Senator>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the alma mater of the senator who is the successor of Warren Magnuson ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?successor ?successorAlmaMater
WHERE {
  ?successor dbo:successorOf <http://dbpedia.org/resource/Warren_Magnuson> .
  ?successor dbo:almaMater ?successorAlmaMater .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?successor ?successorAlmaMater
WHERE {
  ?successor dbo:successorOf <http://dbpedia.org/resource/Warren_Magnuson> .
  ?successor dbo:almaMater ?successorAlmaMater .
}",2.5703190919374843e-155,0.0684931506849315,True,True
4336,What is the profession of the William Luther Hill and also the office of the Richard Coke ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Luther_Hill> <http://dbpedia.org/ontology/profession> ?uri. <http://dbpedia.org/resource/Richard_Coke> <http://dbpedia.org/property/office> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the profession of the William Luther Hill and also the office of the Richard Coke ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession ?office
WHERE {
  ?person dbo:name ""William Luther Hill"" .
  ?person dbo:profession ?profession .
  ?person2 dbo:name ""Richard Coke"" .
  ?person2 dbo:office ?office .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession ?office
WHERE {
  ?person dbo:name ""William Luther Hill"" .
  ?person dbo:profession ?profession .
  ?person2 dbo:name ""Richard Coke"" .
  ?person2 dbo:office ?office .
}",2.0411965960034616e-155,0.03896103896103896,True,True
3328,Does the Jordan River start in the Golan Heights?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Jordan_River> <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/Golan_Heights> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the Jordan River start in the Golan Heights?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?start
WHERE {
  ?river dbo:name ""Jordan River"" .
  ?river dbo:source ?start .
  ?start dbo:name ""Golan Heights"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?start
WHERE {
  ?river dbo:name ""Jordan River"" .
  ?river dbo:source ?start .
  ?start dbo:name ""Golan Heights"" .
}",2.1880577381778143e-155,0.04477611940298507,True,True
2573,What is the county of Saint Lucia national cricket team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saint_Lucia_national_cricket_team> <http://dbpedia.org/ontology/county> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the county of Saint Lucia national cricket team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?county
WHERE {
  ?team dbo:nationalTeamOf ?country .
  ?country dbo:county ?county .
  FILTER (regex(?team, ""Saint Lucia national cricket team"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?county
WHERE {
  ?team dbo:nationalTeamOf ?country .
  ?country dbo:county ?county .
  FILTER (regex(?team, ""Saint Lucia national cricket team"", ""i""))
}",2.336751314796786e-155,0.056338028169014086,True,True
3358,What are all the countires where food related to tuna salad is consumed?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/related> <http://dbpedia.org/resource/Tuna_salad> . ?x <http://dbpedia.org/property/country> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are all the countires where food related to tuna salad is consumed?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?country dbo:cuisine ?cuisine .
  ?cuisine rdfs:label ?cuisineLabel .
  FILTER (regex(?cuisineLabel, ""tuna"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?country dbo:cuisine ?cuisine .
  ?cuisine rdfs:label ?cuisineLabel .
  FILTER (regex(?cuisineLabel, ""tuna"", ""i""))
}",3.157656468883577e-155,0.07692307692307693,True,True
426,What country had the title of 2001 Speedway Ekstraliga?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2001_Speedway_Ekstraliga> <http://dbpedia.org/property/title> ?x . ?x <http://dbpedia.org/ontology/country> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What country had the title of 2001 Speedway Ekstraliga?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?country
WHERE {
  ?league dbo:title ""2001 Speedway Ekstraliga"" .
  ?league dbo:champion ?team .
  ?team dbo:country ?country .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?country
WHERE {
  ?league dbo:title ""2001 Speedway Ekstraliga"" .
  ?league dbo:champion ?team .
  ?team dbo:country ?country .
}",3.0943809285865547e-155,0.06944444444444445,True,True
4066,The fugitive Kind and the Notebook of Trigorin is written by what author?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Fugitive_Kind> <http://dbpedia.org/property/writer> ?uri. <http://dbpedia.org/resource/The_Notebook_of_Trigorin> <http://dbpedia.org/ontology/author> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: The fugitive Kind and the Notebook of Trigorin is written by what author?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?work dbo:author ?author .
  ?work rdfs:label ""The fugitive Kind and the Notebook of Trigorin"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?work dbo:author ?author .
  ?work rdfs:label ""The fugitive Kind and the Notebook of Trigorin"" .
}",2.9204463302606032e-155,0.06944444444444445,True,True
4341,Ricky Gervais is the executive producer of the series having how many fictional characters?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Ricky_Gervais> . ?uri <http://dbpedia.org/ontology/series> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Ricky Gervais is the executive producer of the series having how many fictional characters?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?numberOfCharacters
WHERE {
  ?series dbo:executiveProducer <http://dbpedia.org/resource/Ricky_Gervais> .
  ?series dbo:numberOfCharacters ?numberOfCharacters .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?numberOfCharacters
WHERE {
  ?series dbo:executiveProducer <http://dbpedia.org/resource/Ricky_Gervais> .
  ?series dbo:numberOfCharacters ?numberOfCharacters .
}",3.1137823863213763e-155,0.06666666666666667,True,True
4225,When did Aghasalim Childagh die?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aghasalim_Childagh> <http://dbpedia.org/property/deathDate> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: When did Aghasalim Childagh die?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?deathDate
WHERE {
  <http://dbpedia.org/resource/Aghasalim_Childagh> dbo:deathDate ?deathDate .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?deathDate
WHERE {
  <http://dbpedia.org/resource/Aghasalim_Childagh> dbo:deathDate ?deathDate .
}",9.713104353077714e-79,0.0847457627118644,True,True
1444,What sports are played at universities affiliated by States Colleges and Universities athletic association?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/State_Colleges_and_Universities_Athletic_Association> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What sports are played at universities affiliated by States Colleges and Universities athletic association?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX schema: <http://schema.org/>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:affiliatedWith ?association .
  ?association rdfs:label ""States Colleges and Universities athletic association"" .
  ?university dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX schema: <http://schema.org/>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:affiliatedWith ?association .
  ?association rdfs:label ""States Colleges and Universities athletic association"" .
  ?university dbo:sports ?sport .
}",2.9346708496857675e-155,0.06329113924050633,True,True
1846,List the producers who produced movies starring Michael Jackson.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/starring> <http://dbpedia.org/resource/Michael_Jackson> . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the producers who produced movies starring Michael Jackson.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?producer
WHERE {
  ?movie dbo:starring dbr:Michael_Jackson .
  ?movie dbo:producer ?producer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?producer
WHERE {
  ?movie dbo:starring dbr:Michael_Jackson .
  ?movie dbo:producer ?producer .
}",3.195205633963664e-155,0.07042253521126761,True,True
755,Which organisation has superintendent as Lieutenant general (United States)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/superintendent> <http://dbpedia.org/resource/Lieutenant_general_(United_States)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which organisation has superintendent as Lieutenant general (United States)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organisation
WHERE {
  ?organisation dbo:chairman ?person .
  ?person dbo:militaryRank ""Lieutenant general""^^xsd:string .
  ?person dbo:country ""United States""^^xsd:string .
  FILTER (regex(?organisation, ""organisation""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organisation
WHERE {
  ?organisation dbo:chairman ?person .
  ?person dbo:militaryRank ""Lieutenant general""^^xsd:string .
  ?person dbo:country ""United States""^^xsd:string .
  FILTER (regex(?organisation, ""organisation""))
}",7.992219124248642e-232,0.04054054054054054,True,True
4282,Where in the us military did pierre r graham and edwin f hunter work?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pierre_R._Graham> <http://dbpedia.org/property/branch> ?uri. <http://dbpedia.org/resource/Edwin_F._Hunter> <http://dbpedia.org/property/branch> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where in the us military did pierre r graham and edwin f hunter work?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?branch
WHERE {
  ?person dbo:birthPlace ""United States"" .
  ?person dbo:name ""Pierre R. Graham"" .
  ?person dbo:occupation ""Military officer"" .
  ?person dbo:memberOf ?branch .
  
  ?person2 dbo:birthPlace ""United States"" .
  ?person2 dbo:name ""Edwin F. Hunter"" .
  ?person2 dbo:occupation ""Military officer"" .
  ?person2 dbo:memberOf ?branch .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?branch
WHERE {
  ?person dbo:birthPlace ""United States"" .
  ?person dbo:name ""Pierre R. Graham"" .
  ?person dbo:occupation ""Military officer"" .
  ?person dbo:memberOf ?branch .
  
  ?person2 dbo:birthPlace ""United States"" .
  ?person2 dbo:name ""Edwin F. Hunter"" .
  ?person2 dbo:occupation ""Military officer"" .
  ?person2 dbo:memberOf ?branch .
}",2.9361994042171736e-155,0.07142857142857142,True,True
506,List the awards received of the person whose child is Daine Disney Miller?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Diane_Disney_Miller> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the awards received of the person whose child is Daine Disney Miller?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:child ?child .
  ?child dbo:name ""Daine Disney Miller""^^xsd:string .
  ?person dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:child ?child .
  ?child dbo:name ""Daine Disney Miller""^^xsd:string .
  ?person dbo:award ?award .
}",3.0566417519593477e-155,0.06666666666666667,True,True
4810,Among which basket ball team having arena as The Palace of Auburn hills has president as Stan Van Gundy ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/arena> <http://dbpedia.org/resource/The_Palace_of_Auburn_Hills> . ?uri <http://dbpedia.org/property/president> <http://dbpedia.org/resource/Stan_Van_Gundy>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Among which basket ball team having arena as The Palace of Auburn hills has president as Stan Van Gundy ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team
WHERE {
  ?team dbo:name ?teamName .
  ?team dbo:arena ?arena .
  ?arena dbo:name ""The Palace of Auburn Hills""^^xsd:string .
  ?team dbo:president ?president .
  ?president dbo:name ""Stan Van Gundy""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team
WHERE {
  ?team dbo:name ?teamName .
  ?team dbo:arena ?arena .
  ?arena dbo:name ""The Palace of Auburn Hills""^^xsd:string .
  ?team dbo:president ?president .
  ?president dbo:name ""Stan Van Gundy""^^xsd:string .
}",2.182021659333324e-155,0.045454545454545456,True,True
1489,Name all the venues of the convention which has also been hosted in San Diego Convention ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/venue> <http://dbpedia.org/resource/San_Diego_Convention_Center> . ?x <http://dbpedia.org/property/venue> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name all the venues of the convention which has also been hosted in San Diego Convention ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?venue
WHERE {
  ?convention dbo:location ?location .
  ?location dbo:name ""San Diego Convention"" .
  ?convention dbo:venue ?venue .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?venue
WHERE {
  ?convention dbo:location ?location .
  ?location dbo:name ""San Diego Convention"" .
  ?convention dbo:venue ?venue .
}",3.3753507584714003e-155,0.0759493670886076,True,True
2142,Who operates the bridges designed by Malaysian PWD?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Malaysian_Public_Works_Department> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who operates the bridges designed by Malaysian PWD?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?operator
WHERE {
  ?bridge dbo:designedBy ?designer .
  ?designer dbo:country ?country .
  FILTER(?country = ""Malaysia"")
  ?bridge dbo:operatedBy ?operator .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?operator
WHERE {
  ?bridge dbo:designedBy ?designer .
  ?designer dbo:country ?country .
  FILTER(?country = ""Malaysia"")
  ?bridge dbo:operatedBy ?operator .
}",3.075337680136661e-155,0.06666666666666667,True,True
1764,Where are renaissance centers located?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Renaissance_Center> <http://dbpedia.org/property/address> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where are renaissance centers located?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?location dbo:wikiPageRedirects ?page .
  ?page dbo:description ""Renaissance"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?location dbo:wikiPageRedirects ?page .
  ?page dbo:description ""Renaissance"" .
}",3.2050345448863812e-155,0.08064516129032258,True,True
1340,Give me a count of everything owned by the network whose sister name is The CW?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/sisterNames> <http://dbpedia.org/resource/The_CW> . ?uri <http://dbpedia.org/property/network> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me a count of everything owned by the network whose sister name is The CW?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?ownedItem) AS ?count)
WHERE {
  ?network dbo:sisterNetwork ?sisterNetwork .
  ?sisterNetwork rdfs:label ""The CW"" .
  ?network dbo:owns ?ownedItem .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?ownedItem) AS ?count)
WHERE {
  ?network dbo:sisterNetwork ?sisterNetwork .
  ?sisterNetwork rdfs:label ""The CW"" .
  ?network dbo:owns ?ownedItem .
}",2.951204860745888e-155,0.06097560975609756,True,True
4034,Which animator of Tommy Tucker's Tooth is also the film director of Alice's Wonderland ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Alice's_Wonderland> <http://dbpedia.org/ontology/director> ?uri. <http://dbpedia.org/resource/Tommy_Tucker's_Tooth> <http://dbpedia.org/property/animator> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which animator of Tommy Tucker's Tooth is also the film director of Alice's Wonderland ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?animator ?filmDirector
WHERE {
  ?animator dbo:animatorOf ?film .
  ?film dbo:title ""Tommy Tucker's Tooth""^^xsd:string .
  ?filmDirector dbo:directorOf ?film2 .
  ?film2 dbo:title ""Alice's Wonderland""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?animator ?filmDirector
WHERE {
  ?animator dbo:animatorOf ?film .
  ?film dbo:title ""Tommy Tucker's Tooth""^^xsd:string .
  ?filmDirector dbo:directorOf ?film2 .
  ?film2 dbo:title ""Alice's Wonderland""^^xsd:string .
}",2.5944303248170386e-155,0.04938271604938271,True,True
4778,Which developer of  the Spider-Man: Edge of Time is the  successor of PlayStation 2 ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spider-Man:_Edge_of_Time> <http://dbpedia.org/ontology/developer> ?uri. <http://dbpedia.org/resource/PlayStation_2> <http://dbpedia.org/ontology/successor> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which developer of  the Spider-Man: Edge of Time is the  successor of PlayStation 2 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?developer
WHERE {
  ?developer dbo:developerOf ?game .
  ?game dbo:title ""Spider-Man: Edge of Time"" .
  ?game dbo:successor ?successor .
  ?successor dbo:title ""PlayStation 2"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?developer
WHERE {
  ?developer dbo:developerOf ?game .
  ?game dbo:title ""Spider-Man: Edge of Time"" .
  ?game dbo:successor ?successor .
  ?successor dbo:title ""PlayStation 2"" .
}",2.0411965960034616e-155,0.03896103896103896,True,True
4370,Who is related to Kelly Osbourne & Ozzy Osbourne?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Kelly_Osbourne> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ozzy_Osbourne> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is related to Kelly Osbourne & Ozzy Osbourne?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Kelly Osbourne""^^xsd:string .
  FILTER (regex(?person, ""Ozzy""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Kelly Osbourne""^^xsd:string .
  FILTER (regex(?person, ""Ozzy""))
}",3.2989683217270633e-155,0.08333333333333333,True,True
3403,Count the number of sports played by the school which also plays Association football ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/sport> <http://dbpedia.org/resource/Association_football> . ?x <http://dbpedia.org/ontology/sport> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of sports played by the school which also plays Association football ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?school ?sports
WHERE {
  ?school dbo:sports ?sports .
  ?school dbo:sports dbp:Association football .
  
}
GROUP BY ?school ?sports
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?school ?sports
WHERE {
  ?school dbo:sports ?sports .
  ?school dbo:sports dbp:Association football .
  
}
GROUP BY ?school ?sports",2.3983374600418706e-155,0.06666666666666667,False,False
1700,Who are the baseball players who played for San Francisco Giants?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/San_Francisco_Giants>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the baseball players who played for San Francisco Giants?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player
WHERE {
  ?player dbo:playsFor ?team .
  ?team dbo:name ""San Francisco Giants"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player
WHERE {
  ?player dbo:playsFor ?team .
  ?team dbo:name ""San Francisco Giants"" .
}",2.3659629744803227e-155,0.056338028169014086,True,True
1241,To which political party does the writer of In the Bazaars of Hyderabad belong?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/In_the_Bazaars_of_Hyderabad> <http://dbpedia.org/property/writer> ?x . ?x <http://dbpedia.org/ontology/party> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which political party does the writer of In the Bazaars of Hyderabad belong?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?party
WHERE {
  ?book dbo:author ?author .
  ?author dbo:politicalParty ?party .
  FILTER ( ?book = <http://dbpedia.org/resource/In_the_Bazaars_of_Hyderabad> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?party
WHERE {
  ?book dbo:author ?author .
  ?author dbo:politicalParty ?party .
  FILTER ( ?book = <http://dbpedia.org/resource/In_the_Bazaars_of_Hyderabad> )
}",2.6240214537570328e-155,0.07792207792207792,True,True
3589,What is the service of the Laemmle Theatres and is also the award of the Jos Rivera (playwright)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Laemmle_Theatres> <http://dbpedia.org/ontology/service> ?uri. <http://dbpedia.org/resource/José_Rivera_(playwright)> <http://dbpedia.org/property/awards> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the service of the Laemmle Theatres and is also the award of the Jos Rivera (playwright)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?service ?award
WHERE {
  ?theatre dbo:service ?service .
  FILTER(?theatre = <http://dbpedia.org/resource/Laemmle_Theatres>)
  ?playwright dbo:award ?award .
  FILTER(?playwright = <http://dbpedia.org/resource/Jos_Rivera_(playwright)>)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?service ?award
WHERE {
  ?theatre dbo:service ?service .
  FILTER(?theatre = <http://dbpedia.org/resource/Laemmle_Theatres>)
  ?playwright dbo:award ?award .
  FILTER(?playwright = <http://dbpedia.org/resource/Jos_Rivera_(playwright)>)
}",2.6226323115709007e-155,0.05063291139240506,True,True
3046,"Where is the tombstone of the parliament members who served with James Roberts as the Vice President, US?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/James_Roberts_(trade_unionist)> . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MemberOfParliament>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where is the tombstone of the parliament members who served with James Roberts as the Vice President, US?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?tombstoneLocation
WHERE {
  ?parliamentMember dbo:vicePresident ?vicePresident .
  ?vicePresident dbo:name ""James Roberts""^^xsd:string .
  ?parliamentMember dbo:tombstone ?tombstone .
  ?tombstone dbo:location ?tombstoneLocation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?tombstoneLocation
WHERE {
  ?parliamentMember dbo:vicePresident ?vicePresident .
  ?vicePresident dbo:name ""James Roberts""^^xsd:string .
  ?parliamentMember dbo:tombstone ?tombstone .
  ?tombstone dbo:location ?tombstoneLocation .
}",2.8712091323971647e-155,0.060240963855421686,True,True
133,In which time zone is Pong Pha?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pong_Pha> <http://dbpedia.org/ontology/timeZone> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which time zone is Pong Pha?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?timeZone
WHERE {
  dbp:locationOf <http://dbpedia.org/resource/Pong_Pha> dbo:timeZone ?timeZone .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?timeZone
WHERE {
  dbp:locationOf <http://dbpedia.org/resource/Pong_Pha> dbo:timeZone ?timeZone .
}",2.7353319119103705e-155,0.08064516129032258,False,False
4235,Name all the hubs of the airlines whose one of the hubs is Selangir ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/hubs> <http://dbpedia.org/resource/Selangor> . ?x <http://dbpedia.org/property/hubs> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name all the hubs of the airlines whose one of the hubs is Selangir ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?airline ?hub
WHERE {
  ?airline dbo:hub ?hub .
  ?hub dbo:name ""Selangir""^^xsd:string .
  ?airline dbo:hub ?hub2 .
  FILTER (NOT EXISTS { ?airline dbo:hub ?hub2 . })
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?airline ?hub
WHERE {
  ?airline dbo:hub ?hub .
  ?hub dbo:name ""Selangir""^^xsd:string .
  ?airline dbo:hub ?hub2 .
  FILTER (NOT EXISTS { ?airline dbo:hub ?hub2 . })
}",2.8409841948588806e-155,0.06493506493506493,True,True
3311,List the launch site of the rockets whose one of the launch site has been Cape Canaveral Air Force Station Launch Complex 26 ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/launchSite> <http://dbpedia.org/resource/Cape_Canaveral_Air_Force_Station_Launch_Complex_26> . ?x <http://dbpedia.org/ontology/launchSite> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Rocket>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the launch site of the rockets whose one of the launch site has been Cape Canaveral Air Force Station Launch Complex 26 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?rocket ?launchSite
WHERE {
  ?rocket dbo:launchSite ?launchSite .
  ?launchSite dbo:name ""Cape Canaveral Air Force Station Launch Complex 26"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?rocket ?launchSite
WHERE {
  ?rocket dbo:launchSite ?launchSite .
  ?launchSite dbo:name ""Cape Canaveral Air Force Station Launch Complex 26"" .
}",2.7973847928929533e-155,0.06172839506172839,True,True
2611,What are the books written by authors who died in Madrid?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Madrid> . ?uri <http://dbpedia.org/property/author> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the books written by authors who died in Madrid?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?book ?author
WHERE {
  ?author dbo:birthPlace ?birthPlace .
  ?author dbo:deathPlace ""Madrid"" .
  ?author dbo:authorOf ?book .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?book ?author
WHERE {
  ?author dbo:birthPlace ?birthPlace .
  ?author dbo:deathPlace ""Madrid"" .
  ?author dbo:authorOf ?book .
}",3.0566417519593477e-155,0.06666666666666667,True,True
478,How many other Guests are there of the television episodes whose Guests is Brian d'Arcy James?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/guests> <http://dbpedia.org/resource/Brian_d'Arcy_James> . ?x <http://dbpedia.org/property/guests> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many other Guests are there of the television episodes whose Guests is Brian d'Arcy James?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?otherGuest) AS ?count)
WHERE {
  ?episode dbo:guest ?guest .
  ?guest dbo:name ""Brian d'Arcy James""^^xsd:string .
  ?episode dbo:guest ?otherGuest .
  FILTER (NOT EXISTS { ?guest = ?otherGuest })
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?otherGuest) AS ?count)
WHERE {
  ?episode dbo:guest ?guest .
  ?guest dbo:name ""Brian d'Arcy James""^^xsd:string .
  ?episode dbo:guest ?otherGuest .
  FILTER (NOT EXISTS { ?guest = ?otherGuest })
}",2.2589949720910505e-155,0.058823529411764705,False,False
794,Name the origin of Henry Cluney?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henry_Cluney> <http://dbpedia.org/property/origin> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the origin of Henry Cluney?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?origin
WHERE {
  ?person dbo:name ""Henry Cluney"" .
  ?person dbo:birthPlace ?origin .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?origin
WHERE {
  ?person dbo:name ""Henry Cluney"" .
  ?person dbo:birthPlace ?origin .
}",2.530465559854518e-155,0.06451612903225806,True,True
2964,"Over which things, does a cable stayed bridge exists?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/design> <http://dbpedia.org/resource/Cable-stayed_bridge> . ?x <http://dbpedia.org/property/crosses> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Over which things, does a cable stayed bridge exists?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?thing
WHERE {
  ?bridge dbo:bridgeType ""cable-stayed bridge""^^xsd:string .
  ?bridge dbo:existsOver ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?thing
WHERE {
  ?bridge dbo:bridgeType ""cable-stayed bridge""^^xsd:string .
  ?bridge dbo:existsOver ?thing .
}",3.7246750897077527e-155,0.08695652173913043,True,True
3831,How many games are played at universities affiliated with the Association of Southeast Asian Institutions of Higher Learning?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/Association_of_Southeast_Asian_Institutions_of_Higher_Learning> . ?x <http://dbpedia.org/ontology/sport> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many games are played at universities affiliated with the Association of Southeast Asian Institutions of Higher Learning?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?game) AS ?count)
WHERE {
  ?university dbo:country ?country .
  ?university dbo:memberOf ?asean .
  ?asean dbo:name ""Association of Southeast Asian Institutions of Higher Learning""^^xsd:string .
  ?university dbo:location ?location .
  ?game dbo:location ?location .
  FILTER (lang(?game) = 'en')
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?game) AS ?count)
WHERE {
  ?university dbo:country ?country .
  ?university dbo:memberOf ?asean .
  ?asean dbo:name ""Association of Southeast Asian Institutions of Higher Learning""^^xsd:string .
  ?university dbo:location ?location .
  ?game dbo:location ?location .
  FILTER (lang(?game) = 'en')
}",2.241286962947119e-155,0.054945054945054944,True,True
3640,What religion does roshan ranasinghe and nhiek tioulong follow?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Roshan_Ranasinghe> <http://dbpedia.org/property/religion> ?uri. <http://dbpedia.org/resource/Nhiek_Tioulong> <http://dbpedia.org/ontology/religion> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What religion does roshan ranasinghe and nhiek tioulong follow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:religion ?religion .
  FILTER (regex(?person, ""roshan ranasinghe"", ""i"") || regex(?person, ""nhiek tioulong"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:religion ?religion .
  FILTER (regex(?person, ""roshan ranasinghe"", ""i"") || regex(?person, ""nhiek tioulong"", ""i""))
}",2.8314851544960777e-155,0.05263157894736842,True,True
1122,What are the regions served by Toll Global Express which is also the country of LPGA?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Toll_Global_Express> <http://dbpedia.org/ontology/regionServed> ?uri. <http://dbpedia.org/resource/LPGA> <http://dbpedia.org/ontology/country> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the regions served by Toll Global Express which is also the country of LPGA?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?region ?country
WHERE {
  ?company dbo:name ""Toll Global Express"" .
  ?company dbo:serves ?region .
  ?country dbo:name ""United States"" .
  ?country dbo:officialName ""United States of America"" .
  ?country dbo:countryOfOrigin ?region .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?region ?country
WHERE {
  ?company dbo:name ""Toll Global Express"" .
  ?company dbo:serves ?region .
  ?country dbo:name ""United States"" .
  ?country dbo:officialName ""United States of America"" .
  ?country dbo:countryOfOrigin ?region .
}",2.4900858824700132e-155,0.047619047619047616,True,True
594,"Which relative of George Madison was the leader of United States House of Representatives elections, 1788 and 1789 ?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/George_Madison> <http://dbpedia.org/ontology/relation> ?uri. <http://dbpedia.org/resource/United_States_House_of_Representatives_elections,_1788_and_1789> <http://dbpedia.org/property/leader> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which relative of George Madison was the leader of United States House of Representatives elections, 1788 and 1789 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?relative
WHERE {
  ?relative dbo:spouse ?georgeMadison .
  ?georgeMadison dbo:birthDate ""1751-01-01""^^xsd:date .
  ?georgeMadison dbo:name ""George Madison"" .
  ?relative dbo:role ""Leader of United States House of Representatives elections"" .
  FILTER (YEAR(?relative dbo:birthDate) < 1788)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?relative
WHERE {
  ?relative dbo:spouse ?georgeMadison .
  ?georgeMadison dbo:birthDate ""1751-01-01""^^xsd:date .
  ?georgeMadison dbo:name ""George Madison"" .
  ?relative dbo:role ""Leader of United States House of Representatives elections"" .
  FILTER (YEAR(?relative dbo:birthDate) < 1788)
}",1.9112994652876815e-155,0.034482758620689655,False,False
3675,List the names of the soccer club seasons whose division is 2012 Campeonato Brasileiro Serie A.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/2012_Campeonato_Brasileiro_Série_A> . ?x <http://dbpedia.org/property/name> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SoccerClubSeason>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the names of the soccer club seasons whose division is 2012 Campeonato Brasileiro Serie A.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?seasonName
WHERE {
  ?season dbo:division ?division .
  ?division dbo:name ""2012 Campeonato Brasileiro Serie A"" .
  ?season rdfs:label ?seasonName .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?seasonName
WHERE {
  ?season dbo:division ?division .
  ?division dbo:name ""2012 Campeonato Brasileiro Serie A"" .
  ?season rdfs:label ?seasonName .
}",2.91841165985534e-155,0.0625,True,True
241,Which predecessor of Alexander Downer was deputy to Neil Brown ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Alexander_Downer> . ?uri <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Neil_Brown_(Australian_politician)>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which predecessor of Alexander Downer was deputy to Neil Brown ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?predecessor dbo:predecessorOf  <http://dbpedia.org/resource/Alexander_Downer> .
  ?predecessor dbo:deputyTo ?deputy .
  ?deputy dbo:predecessorOf <http://dbpedia.org/resource/Neil_Brown> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?predecessor dbo:predecessorOf  <http://dbpedia.org/resource/Alexander_Downer> .
  ?predecessor dbo:deputyTo ?deputy .
  ?deputy dbo:predecessorOf <http://dbpedia.org/resource/Neil_Brown> .
}",3.1537059338519422e-155,0.07042253521126761,True,True
419,List the ingredient of Blodpalt?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Blodpalt> <http://dbpedia.org/ontology/ingredient> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the ingredient of Blodpalt?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?ingredient
WHERE {
  ?food dbo:name ""Blodpalt"" .
  ?food dbp:ingredient ?ingredient .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?ingredient
WHERE {
  ?food dbo:name ""Blodpalt"" .
  ?food dbp:ingredient ?ingredient .
}",3.2050345448863812e-155,0.08196721311475409,True,True
1314,How many other home stadium are there of the soccer club whose home stadium is Luzhniki Stadium?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/homeStadium> <http://dbpedia.org/resource/Luzhniki_Stadium> . ?x <http://dbpedia.org/ontology/homeStadium> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many other home stadium are there of the soccer club whose home stadium is Luzhniki Stadium?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?otherStadium
WHERE {
  ?club dbo:homeStadium <http://dbpedia.org/resource/Luzhniki_Stadium> .
  ?club dbo:homeStadium ?otherStadium .
  FILTER ( ?otherStadium != <http://dbpedia.org/resource/Luzhniki_Stadium> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?otherStadium
WHERE {
  ?club dbo:homeStadium <http://dbpedia.org/resource/Luzhniki_Stadium> .
  ?club dbo:homeStadium ?otherStadium .
  FILTER ( ?otherStadium != <http://dbpedia.org/resource/Luzhniki_Stadium> )
}",2.951204860745888e-155,0.07692307692307693,True,True
686,What company made facebook messenger and is the platform where Words of Gold can be played?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Words_of_Gold> <http://dbpedia.org/ontology/computingPlatform> ?uri. <http://dbpedia.org/resource/Facebook_Messenger> <http://dbpedia.org/property/developer> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What company made facebook messenger and is the platform where Words of Gold can be played?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company ?platform
WHERE {
  ?company dbo:product ?messenger .
  ?messenger dbo:name ""Facebook Messenger""^^xsd:string .
  ?platform dbo:name ""Words of Gold""^^xsd:string .
  ?company dbo:product ?platform .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company ?platform
WHERE {
  ?company dbo:product ?messenger .
  ?messenger dbo:name ""Facebook Messenger""^^xsd:string .
  ?platform dbo:name ""Words of Gold""^^xsd:string .
  ?company dbo:product ?platform .
}",2.7287223683914353e-155,0.06097560975609756,True,True
2370,Which appointer of William Clark is the successor of Levi Lincoln Sr ?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Levi_Lincoln,_Sr.> <http://dbpedia.org/property/successor> ?uri. <http://dbpedia.org/resource/William_Clark> <http://dbpedia.org/property/appointer> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which appointer of William Clark is the successor of Levi Lincoln Sr ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?appointer
WHERE {
  ?appointer dbo:appointerOf ?person .
  ?person dbo:name ""William Clark"" .
  ?appointer dbo:successorOf ?successor .
  ?successor dbo:name ""Levi Lincoln Sr"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?appointer
WHERE {
  ?appointer dbo:appointerOf ?person .
  ?person dbo:name ""William Clark"" .
  ?appointer dbo:successorOf ?successor .
  ?successor dbo:name ""Levi Lincoln Sr"" .
}",2.0751256583633507e-155,0.03896103896103896,True,True
1525,Who is the scientist whose academic advisor was Karl Ewald Hasse?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/academicAdvisor> <http://dbpedia.org/resource/Karl_Ewald_Hasse>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the scientist whose academic advisor was Karl Ewald Hasse?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?scientist
WHERE {
  ?scientist dbo:academicAdvisor ?advisor .
  ?advisor dbo:name ""Karl Ewald Hasse"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?scientist
WHERE {
  ?scientist dbo:academicAdvisor ?advisor .
  ?advisor dbo:name ""Karl Ewald Hasse"" .
}",8.120546156106983e-232,0.043478260869565216,True,True
977,Erik Jendresen is the writer of which television show?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Erik Jendresen is the writer of which television show?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?show
WHERE {
  <http://dbpedia.org/resource/Erik_Jendresen> dbo:creator ?show .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?show
WHERE {
  <http://dbpedia.org/resource/Erik_Jendresen> dbo:creator ?show .
}",8.972141065609098e-232,0.0625,True,True
3472,List few musical artist whose notable instruments are Ludwig Drums and Remo?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/notableInstruments> <http://dbpedia.org/resource/Ludwig_Drums> . ?uri <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Remo>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List few musical artist whose notable instruments are Ludwig Drums and Remo?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:instruments ?instrument .
  ?instrument dbo:brand ?brand .
  FILTER (regex(?brand, ""Ludwig Drums"", ""i"") || regex(?brand, ""Remo"", ""i""))
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:instruments ?instrument .
  ?instrument dbo:brand ?brand .
  FILTER (regex(?brand, ""Ludwig Drums"", ""i"") || regex(?brand, ""Remo"", ""i""))
}",2.384592839964215e-155,0.04819277108433735,True,True
674,Is Truth prevails the national motto of Czechoslovakia?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Czechoslovakia> <http://dbpedia.org/property/nationalMotto> <http://dbpedia.org/resource/Truth_prevails> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Truth prevails the national motto of Czechoslovakia?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:nationalMotto ""Truth prevails"" .
  FILTER (regex(?x, ""Czechoslovakia"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:nationalMotto ""Truth prevails"" .
  FILTER (regex(?x, ""Czechoslovakia"", ""i""))
}",2.321693139700891e-155,0.046153846153846156,True,True
4690,Spanish harlem incident and girl from the north country were originally composed by whom?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Spanish_Harlem_Incident> <http://dbpedia.org/ontology/composer> ?uri. <http://dbpedia.org/resource/Girl_from_the_North_Country> <http://dbpedia.org/ontology/composer> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Spanish harlem incident and girl from the north country were originally composed by whom?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?composer
WHERE {
  ?song dbo:composer ?composer .
  FILTER (regex(?song, ""Spanish Harlem Incident"", ""i"") || regex(?song, ""Girl from the North Country"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?composer
WHERE {
  ?song dbo:composer ?composer .
  FILTER (regex(?song, ""Spanish Harlem Incident"", ""i"") || regex(?song, ""Girl from the North Country"", ""i""))
}",2.91841165985534e-155,0.07142857142857142,True,True
326,Name the movies distributed by RKO Pictures and has music composer as Bernard Herrmann?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/RKO_Pictures> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Bernard_Herrmann>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the movies distributed by RKO Pictures and has music composer as Bernard Herrmann?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?movieLabel
WHERE {
  ?movie dbo:distributor RKO_Pictures .
  ?movie dbo:musicComposer Bernard_Herrmann .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?movieLabel
WHERE {
  ?movie dbo:distributor RKO_Pictures .
  ?movie dbo:musicComposer Bernard_Herrmann .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.384592839964215e-155,0.04938271604938271,False,False
4250,What is the home stadium of Kenya's women national football team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kenya_women's_national_football_team> <http://dbpedia.org/property/homeStadium> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the home stadium of Kenya's women national football team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?stadium
WHERE {
  ?team dbo:country ""Kenya"" .
  ?team dbo:name ""Kenya women's national football team"" .
  ?team dbo:homeStadium ?stadium .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?stadium
WHERE {
  ?team dbo:country ""Kenya"" .
  ?team dbo:name ""Kenya women's national football team"" .
  ?team dbo:homeStadium ?stadium .
}",2.2814337887592556e-155,0.0547945205479452,True,True
1833,Among the scientist known for Manhattan Project who had a doctoral student named Charles Ellis ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Charles_Drummond_Ellis> . ?uri <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Manhattan_Project>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Among the scientist known for Manhattan Project who had a doctoral student named Charles Ellis ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:doctoralStudents ?student .
  ?student rdfs:label ""Charles Ellis"" .
  FILTER ( ?scientist dbo:occupation ""Scientist"" )
  FILTER ( ?scientist dbo:involvedInProject ""Manhattan Project"" )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:doctoralStudents ?student .
  ?student rdfs:label ""Charles Ellis"" .
  FILTER ( ?scientist dbo:occupation ""Scientist"" )
  FILTER ( ?scientist dbo:involvedInProject ""Manhattan Project"" )
}",2.2706697534775395e-155,0.047058823529411764,False,False
3251,What is the alma mater of the scientists known for String theory?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/String_theory> . ?x <http://dbpedia.org/property/almaMater> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the alma mater of the scientists known for String theory?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?scientist ?almaMater
WHERE {
  ?scientist rdf:type dbo:Scientist .
  ?scientist dbo:knownFor ""String theory"" .
  ?scientist dbo:almaMater ?almaMater .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?scientist ?almaMater
WHERE {
  ?scientist rdf:type dbo:Scientist .
  ?scientist dbo:knownFor ""String theory"" .
  ?scientist dbo:almaMater ?almaMater .
}",3.0202505652128895e-155,0.06666666666666667,True,True
4531,Which sea is surrounded by Rostock and Kaliningrad?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Rostock> . ?uri <http://dbpedia.org/property/cities> <http://dbpedia.org/resource/Kaliningrad> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sea is surrounded by Rostock and Kaliningrad?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sea
WHERE {
  ?city dbo:locatedIn ?sea .
  ?city rdfs:label ""Rostock"" .
  ?city2 rdfs:label ""Kaliningrad"" .
  ?city2 dbo:locatedIn ?sea .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sea
WHERE {
  ?city dbo:locatedIn ?sea .
  ?city rdfs:label ""Rostock"" .
  ?city2 rdfs:label ""Kaliningrad"" .
  ?city2 dbo:locatedIn ?sea .
}",3.0566417519593477e-155,0.07042253521126761,True,True
2506,What is the governing body of Fort Monroe ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fort_Monroe> <http://dbpedia.org/property/governingBody> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the governing body of Fort Monroe ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?governingBody
WHERE {
  ?fort dbo:officialWebsite ""http://www.fortmonroe.com/"" .
  ?fort dbo:governingBody ?governingBody .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?governingBody
WHERE {
  ?fort dbo:officialWebsite ""http://www.fortmonroe.com/"" .
  ?fort dbo:governingBody ?governingBody .
}",2.494821638843469e-155,0.0625,True,True
3618,Who married crystal harris?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Crystal_Harris>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who married crystal harris?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouse
WHERE {
  ?person dbo:spouse ?spouse .
  FILTER ( ?person = <http://dbpedia.org/resource/Hugh_Grant> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouse
WHERE {
  ?person dbo:spouse ?spouse .
  FILTER ( ?person = <http://dbpedia.org/resource/Hugh_Grant> )
}",8.93945512687472e-232,0.0625,True,True
4115,How many movies have been directed by Orson Welles ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/director> <http://dbpedia.org/resource/Orson_Welles>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many movies have been directed by Orson Welles ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?director dbo:name ""Orson Welles"" .
  ?director dbo:directed ?movie .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?director dbo:name ""Orson Welles"" .
  ?director dbo:directed ?movie .
}",8.120546156106983e-232,0.0410958904109589,True,True
2599,What fictional characters are American Pekin duck species?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/American_Pekin_duck> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What fictional characters are American Pekin duck species?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?character ?characterLabel
WHERE {
  ?character dbo:species ?duck .
  ?duck rdfs:label ""American Pekin duck"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?character ?characterLabel
WHERE {
  ?character dbo:species ?duck .
  ?duck rdfs:label ""American Pekin duck"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.336751314796786e-155,0.05555555555555555,False,False
2835,Which work are both Neil Cross and Lars Pearson known for ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neil_Cross> <http://dbpedia.org/ontology/notableWork> ?uri. <http://dbpedia.org/resource/Lars_Pearson> <http://dbpedia.org/ontology/notableWork> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which work are both Neil Cross and Lars Pearson known for ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?work
WHERE {
  ?person dbo:knownFor ?work .
  FILTER (?person IN (dbo:Neil_Cross, dbo:Lars_Pearson))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?work
WHERE {
  ?person dbo:knownFor ?work .
  FILTER (?person IN (dbo:Neil_Cross, dbo:Lars_Pearson))
}",3.1137823863213763e-155,0.08,True,True
2716,What is the religion of the ethnic group to which Clara Ng belongs?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Clara_Ng> <http://dbpedia.org/ontology/ethnicity> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EthnicGroup>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the religion of the ethnic group to which Clara Ng belongs?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religion
WHERE {
  ?person dbo:name ""Clara Ng"" .
  ?person dbo:ethnicity ?ethnicity .
  ?ethnicity dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religion
WHERE {
  ?person dbo:name ""Clara Ng"" .
  ?person dbo:ethnicity ?ethnicity .
  ?ethnicity dbo:religion ?religion .
}",2.486113577066771e-155,0.05405405405405406,True,True
3995,What is the draft team of the Antoine Bibeau and also had player named Nathan Dempsey?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Antoine_Bibeau> <http://dbpedia.org/property/draftTeam> ?uri. <http://dbpedia.org/resource/Nathan_Dempsey> <http://dbpedia.org/property/playedFor> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the draft team of the Antoine Bibeau and also had player named Nathan Dempsey?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:team ?team .
  FILTER(?player IN (dbo:Antoine_Bibeau, dbo:Nathan_Dempsey))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:team ?team .
  FILTER(?player IN (dbo:Antoine_Bibeau, dbo:Nathan_Dempsey))
}",2.8136200030849624e-155,0.05333333333333334,True,True
1232,Is Gaza Strip the result of Operation Autumn Clouds?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Operation_Autumn_Clouds> <http://dbpedia.org/property/result> <http://dbpedia.org/resource/Gaza_Strip> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Gaza Strip the result of Operation Autumn Clouds?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Gaza Strip"" .
  ?x dbp:involvedInOperation ?y .
  ?y dbo:name ""Operation Autumn Clouds"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Gaza Strip"" .
  ?x dbp:involvedInOperation ?y .
  ?y dbo:name ""Operation Autumn Clouds"" .
}",2.1745921280630745e-155,0.04411764705882353,True,True
3683,Name the river with mouth place Essex and source place as Gloucestershire ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex> . ?uri <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Gloucestershire>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the river with mouth place Essex and source place as Gloucestershire ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?river WHERE {
  ?river dbo:mouthPlace ?mouthPlace .
  ?mouthPlace dbo:name ""Essex"" .
  ?river dbo:sourcePlace ?sourcePlace .
  ?sourcePlace dbo:name ""Gloucestershire"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?river WHERE {
  ?river dbo:mouthPlace ?mouthPlace .
  ?mouthPlace dbo:name ""Essex"" .
  ?river dbo:sourcePlace ?sourcePlace .
  ?sourcePlace dbo:name ""Gloucestershire"" .
}",8.510469113101058e-232,0.0410958904109589,True,True
3056,How many developers were involved in creating games whose score is composed by Gerard Marino?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Gerard_Marino> . ?x <http://dbpedia.org/ontology/developer> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many developers were involved in creating games whose score is composed by Gerard Marino?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?developer) AS ?count)
WHERE {
  ?game dbo:composer Gerard Marino .
  ?game dbo:developer ?developer .
  FILTER (NOT EXISTS { ?game dbo:developer ?duplicateDeveloper . })
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?developer) AS ?count)
WHERE {
  ?game dbo:composer Gerard Marino .
  ?game dbo:developer ?developer .
  FILTER (NOT EXISTS { ?game dbo:developer ?duplicateDeveloper . })
}",2.4274055150866183e-155,0.058823529411764705,False,False
1585,"Which office holder owes its allegiance to a state whose capital town is Jamestown, Virginia?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/capital> <http://dbpedia.org/resource/Jamestown,_Virginia> . ?uri <http://dbpedia.org/property/allegiance> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which office holder owes its allegiance to a state whose capital town is Jamestown, Virginia?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?officeHolder
WHERE {
  ?officeHolder dbo:office rdf:type dbo:PoliticalOffice .
  ?officeHolder dbo:allegiance ?allegiance .
  ?allegiance dbo:capital ?capital .
  ?capital dbo:name ""Jamestown, Virginia""@en .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?officeHolder
WHERE {
  ?officeHolder dbo:office rdf:type dbo:PoliticalOffice .
  ?officeHolder dbo:allegiance ?allegiance .
  ?allegiance dbo:capital ?capital .
  ?capital dbo:name ""Jamestown, Virginia""@en .
}",2.9024197612372904e-155,0.060240963855421686,False,False
2563,Which battles were fought under the president when Chung Won Shik was the prime minister?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/primeminister> <http://dbpedia.org/resource/Chung_Won-shik> . ?x <http://dbpedia.org/property/battles> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/President>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which battles were fought under the president when Chung Won Shik was the prime minister?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?battle
WHERE {
  ?president dbo:primeMinister ?primeMinister .
  ?primeMinister rdfs:label ""Chung Won Shik"" .
  ?president dbo:involvedIn ?battle .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?battle
WHERE {
  ?president dbo:primeMinister ?primeMinister .
  ?primeMinister rdfs:label ""Chung Won Shik"" .
  ?president dbo:involvedIn ?battle .
}",2.968021523431445e-155,0.06329113924050633,True,True
1056,In how many languages did Marika Gombitova sing?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Marika_Gombitová> . ?x <http://dbpedia.org/property/language> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In how many languages did Marika Gombitova sing?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?language) AS ?count)
WHERE {
  ?person dbo:name ""Marika Gombitova"" .
  ?person dbp:languages ?language .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?language) AS ?count)
WHERE {
  ?person dbo:name ""Marika Gombitova"" .
  ?person dbp:languages ?language .
}",3.216579438360415e-155,0.0684931506849315,True,True
4894,Name the people living in a place governed by William W Brien?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/leaderName> <http://dbpedia.org/resource/William_W._Brien> . ?uri <http://dbpedia.org/ontology/residence> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the people living in a place governed by William W Brien?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?place dbo:governor ?governor .
  ?governor dbo:name ""William W Brien"" .
  ?person dbo:livesIn ?place .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?place dbo:governor ?governor .
  ?governor dbo:name ""William W Brien"" .
  ?person dbo:livesIn ?place .
}",3.53714058675999e-155,0.0821917808219178,True,True
1695,Does Jean Louis Arcand work for Geneva?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Jean-Louis_Arcand> <http://dbpedia.org/property/institution> <http://dbpedia.org/resource/Geneva> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Jean Louis Arcand work for Geneva?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:birthPlace ""Geneva"" .
  ?x dbo:occupation ""Film director"" .
  FILTER (str(?x) = ""Jean Louis Arcand"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:birthPlace ""Geneva"" .
  ?x dbo:occupation ""Film director"" .
  FILTER (str(?x) = ""Jean Louis Arcand"")
}",2.2445353519102238e-155,0.04477611940298507,True,True
1395,Charles Willing Byrd was the governor under which politician?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/governor> <http://dbpedia.org/resource/Charles_Willing_Byrd> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Charles Willing Byrd was the governor under which politician?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?politician
WHERE {
  ?governor dbo:governorOf ?state .
  ?governor dbo:birthDate ""1910-01-01""^^xsd:date .
  ?governor dbo:name ""Charles Willing Byrd"" .
  ?politician dbo:presidentOf ?state .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?politician
WHERE {
  ?governor dbo:governorOf ?state .
  ?governor dbo:birthDate ""1910-01-01""^^xsd:date .
  ?governor dbo:name ""Charles Willing Byrd"" .
  ?politician dbo:presidentOf ?state .
}",7.9677403708478e-232,0.043478260869565216,True,True
925,Which animator of the The Skeleton Dance is also the cinematographer of the Mickey's Mellerdrammer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Skeleton_Dance> <http://dbpedia.org/ontology/animator> ?uri. <http://dbpedia.org/resource/Mickey's_Mellerdrammer> <http://dbpedia.org/property/cinematography> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which animator of the The Skeleton Dance is also the cinematographer of the Mickey's Mellerdrammer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?animator
WHERE {
  ?animator dbo:occupation ""Animator"" .
  ?animator dbo:work ?work .
  ?work dbo:title ""The Skeleton Dance"" .
  ?animator dbo:work ?work2 .
  ?work2 dbo:title ""Mickey's Mellerdrammer"" .
  ?work2 dbp:cinematographer ?animator .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?animator
WHERE {
  ?animator dbo:occupation ""Animator"" .
  ?animator dbo:work ?work .
  ?work dbo:title ""The Skeleton Dance"" .
  ?animator dbo:work ?work2 .
  ?work2 dbo:title ""Mickey's Mellerdrammer"" .
  ?work2 dbp:cinematographer ?animator .
}",2.5024440083160195e-155,0.05,True,True
1928,To which families does the Koolakamba belong?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Koolakamba> <http://dbpedia.org/ontology/family> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which families does the Koolakamba belong?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?family
WHERE {
  ?koolakamba dbo:family ?family .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?family
WHERE {
  ?koolakamba dbo:family ?family .
}",3.252876171537949e-155,0.08196721311475409,True,True
4654,Who are the  judges of the television show whose anchor is Josh Groban?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/presenter> <http://dbpedia.org/resource/Josh_Groban> . ?x <http://dbpedia.org/property/judges> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the  judges of the television show whose anchor is Josh Groban?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?judge
WHERE {
  ?show dbo:anchor ?anchor .
  ?anchor dbo:name ""Josh Groban""^^xsd:string .
  ?show dbo:judge ?judge .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?judge
WHERE {
  ?show dbo:anchor ?anchor .
  ?anchor dbo:name ""Josh Groban""^^xsd:string .
  ?show dbo:judge ?judge .
}",3.075337680136661e-155,0.06666666666666667,True,True
2056,What is the military unit whose command structures are United States Department of the Navy and United States Department of Defense?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_the_Navy> . ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the military unit whose command structures are United States Department of the Navy and United States Department of Defense?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?militaryUnit
WHERE {
  ?militaryUnit dbo:militaryUnitType ""Navy"" .
  ?militaryUnit dbo:commandStructure ?commandStructure1 .
  ?commandStructure1 dbo:partOf ?commandStructure2 .
  ?commandStructure2 dbo:name ""United States Department of the Navy"" .
  ?commandStructure2 dbo:partOf ?commandStructure3 .
  ?commandStructure3 dbo:name ""United States Department of Defense"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?militaryUnit
WHERE {
  ?militaryUnit dbo:militaryUnitType ""Navy"" .
  ?militaryUnit dbo:commandStructure ?commandStructure1 .
  ?commandStructure1 dbo:partOf ?commandStructure2 .
  ?commandStructure2 dbo:name ""United States Department of the Navy"" .
  ?commandStructure2 dbo:partOf ?commandStructure3 .
  ?commandStructure3 dbo:name ""United States Department of Defense"" .
}",2.112416088207527e-155,0.04878048780487805,True,True
2886,What is the protected area whose nearest city is Kenya?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/nearestCity> <http://dbpedia.org/resource/Kenya>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/ProtectedArea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the protected area whose nearest city is Kenya?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?protectedArea ?protectedAreaLabel
WHERE {
  ?protectedArea dbo:nearestCity ?city .
  ?city dbo:country ?country .
  ?country rdfs:label ""Kenya"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?protectedArea ?protectedAreaLabel
WHERE {
  ?protectedArea dbo:nearestCity ?city .
  ?city dbo:country ?country .
  ?country rdfs:label ""Kenya"" .
}",8.06798322521923e-232,0.043478260869565216,True,True
1547,Which company builds Microsoft Azure and Microsoft Surface?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Microsoft_Azure> . ?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Microsoft_Surface> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which company builds Microsoft Azure and Microsoft Surface?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:product ?product .
  ?product dbo:brand ""Microsoft""^^xsd:string .
  ?product dbo:name ""Azure""^^xsd:string .
  FILTER (regex(?product, ""Surface"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:product ?product .
  ?product dbo:brand ""Microsoft""^^xsd:string .
  ?product dbo:name ""Azure""^^xsd:string .
  FILTER (regex(?product, ""Surface"", ""i""))
}",3.1137823863213763e-155,0.06944444444444445,True,True
4274,"Over how many cities did the Bellaton MMA, Season 11 take place?",google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Bellator_MMA:_Season_Eleven> <http://dbpedia.org/property/city> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Over how many cities did the Bellaton MMA, Season 11 take place?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?city) AS ?cityCount)
WHERE {
  ?event dbo:name ""Bellaton MMA, Season 11"" .
  ?event dbo:location ?location .
  ?location dbo:country ?country .
  ?location dbo:city ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?city) AS ?cityCount)
WHERE {
  ?event dbo:name ""Bellaton MMA, Season 11"" .
  ?event dbo:location ?location .
  ?location dbo:country ?country .
  ?location dbo:city ?city .
}",2.7730960408256417e-155,0.0625,True,True
2224,"What place did Edwin Adams die at, which gave birth to William A Purtell?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edwin_Adams_(politician)> <http://dbpedia.org/property/placeOfDeath> ?uri. <http://dbpedia.org/resource/William_A._Purtell> <http://dbpedia.org/ontology/birthPlace> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What place did Edwin Adams die at, which gave birth to William A Purtell?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?place
WHERE {
  ?person dbo:deathPlace ?place .
  FILTER ( ?person = dbo:EdwinAdams )
  ?place dbp:birthPlace ?birthPlace .
  FILTER ( ?birthPlace = dbo:WilliamAPurtell )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?place
WHERE {
  ?person dbo:deathPlace ?place .
  FILTER ( ?person = dbo:EdwinAdams )
  ?place dbp:birthPlace ?birthPlace .
  FILTER ( ?birthPlace = dbo:WilliamAPurtell )
}",2.3318865198845825e-155,0.06097560975609756,True,True
2138,Who are some people whose religion is headquartered in Gold Base?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Gold_Base> . ?uri <http://dbpedia.org/ontology/religion> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are some people whose religion is headquartered in Gold Base?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:religion ?religion .
  ?religion dbo:headquarters ?headquarters .
  ?headquarters dbo:name ""Gold Base"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:religion ?religion .
  ?religion dbo:headquarters ?headquarters .
  ?headquarters dbo:name ""Gold Base"" .
}",3.559043432561587e-155,0.08,True,True
4008,Was james watt a mechanical engineer?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/James_Watt> <http://dbpedia.org/ontology/field> <http://dbpedia.org/resource/Mechanical_engineering> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was james watt a mechanical engineer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?occupation
WHERE {
  <http://dbpedia.org/resource/James_Watt> dbo:occupation ?occupation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?occupation
WHERE {
  <http://dbpedia.org/resource/James_Watt> dbo:occupation ?occupation .
}",9.0782081149686e-79,0.06896551724137931,True,True
4221,How many players are in the San Francisco Giants?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/San_Francisco_Giants>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Athlete>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many players are in the San Francisco Giants?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:name ""San Francisco Giants"" .
  ?team dbo:sportsTeam .
  ?team dbo:player ?player .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:name ""San Francisco Giants"" .
  ?team dbo:sportsTeam .
  ?team dbo:player ?player .
}",8.042329535708995e-232,0.041666666666666664,False,False
4752,Which automobile platform provider of Chiva bus is also the parent company of the Ford Falcon Cobra ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> ?uri. <http://dbpedia.org/resource/Ford_Falcon_Cobra> <http://dbpedia.org/ontology/parentCompany> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which automobile platform provider of Chiva bus is also the parent company of the Ford Falcon Cobra ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?platformProvider ?platformProviderLabel
WHERE {
  ?platformProvider dbo:vehiclePlatform ?platform .
  ?platform dbo:manufacturer ?manufacturer .
  ?manufacturer dbo:parentCompany ?parentCompany .
  ?parentCompany dbo:name ""Ford Falcon Cobra"" .
  FILTER (regex(?platformProvider, ""Chiva""))
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?platformProvider ?platformProviderLabel
WHERE {
  ?platformProvider dbo:vehiclePlatform ?platform .
  ?platform dbo:manufacturer ?manufacturer .
  ?manufacturer dbo:parentCompany ?parentCompany .
  ?parentCompany dbo:name ""Ford Falcon Cobra"" .
  FILTER (regex(?platformProvider, ""Chiva""))
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",1.9204228723166036e-155,0.03333333333333333,False,False
192,What are some famous people out of the Filipinos?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/stateOfOrigin> <http://dbpedia.org/resource/Filipinos> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some famous people out of the Filipinos?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?name
WHERE {
  ?person dbo: nationality ""Filipino"" .
  ?person dbo: name ?name .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?name
WHERE {
  ?person dbo: nationality ""Filipino"" .
  ?person dbo: name ?name .
}",2.427831263680579e-155,0.06153846153846154,False,False
2140,Which New Mexico company provides One Drive as a service ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/foundation> <http://dbpedia.org/resource/New_Mexico> . ?uri <http://dbpedia.org/property/services> <http://dbpedia.org/resource/OneDrive>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which New Mexico company provides One Drive as a service ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?company dbo:country ""New Mexico"" .
  ?company dbo:industry ?industry .
  ?industry rdfs:label ""Software"" .
  ?company dbo:offersService ?service .
  ?service rdfs:label ""OneDrive"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?company dbo:country ""New Mexico"" .
  ?company dbo:industry ?industry .
  ?industry rdfs:label ""Software"" .
  ?company dbo:offersService ?service .
  ?service rdfs:label ""OneDrive"" .
}",2.344734865707205e-155,0.05063291139240506,True,True
4130,Where do networks affiliated with ETC broadcast?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/affiliation> <http://dbpedia.org/resource/ETC_(TV_channel)> . ?x <http://dbpedia.org/property/area> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where do networks affiliated with ETC broadcast?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?broadcastLocation
WHERE {
  ?network dbo:affiliatedWith ?organization .
  ?organization dbo:name ""ETC"" .
  ?network dbp:broadcastLocation ?broadcastLocation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?broadcastLocation
WHERE {
  ?network dbo:affiliatedWith ?organization .
  ?organization dbo:name ""ETC"" .
  ?network dbp:broadcastLocation ?broadcastLocation .
}",3.216579438360415e-155,0.07142857142857142,True,True
1633,Which key perosn of the Elders is also the president of united World College?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Elders_(organization)> <http://dbpedia.org/property/keyPeople> ?uri. <http://dbpedia.org/resource/United_World_Colleges> <http://dbpedia.org/ontology/president> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which key perosn of the Elders is also the president of united World College?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person
WHERE {
  ?person dbo:birthPlace ""United World College"" .
  ?person dbo:occupation ""Elders"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person
WHERE {
  ?person dbo:birthPlace ""United World College"" .
  ?person dbo:occupation ""Elders"" .
}",2.761987611388054e-155,0.05405405405405406,True,True
4786,For how many different presidents have people in the Continental Army served?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/branch> <http://dbpedia.org/resource/Continental_Army> . ?x <http://dbpedia.org/property/president> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: For how many different presidents have people in the Continental Army served?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?presidentCount
WHERE {
  ?president dbo:presidentOf ?country .
  ?country dbo:army ?army .
  ?army rdf:type dbo:ContinentalArmy .
  GROUP BY ?president
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?presidentCount
WHERE {
  ?president dbo:presidentOf ?country .
  ?country dbo:army ?army .
  ?army rdf:type dbo:ContinentalArmy .
  GROUP BY ?president
}",2.539717873455559e-155,0.0641025641025641,False,False
2680,Which military unit's garrison is Pentagon and command structure is United States Department of Defense?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/garrison> <http://dbpedia.org/resource/The_Pentagon> . ?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which military unit's garrison is Pentagon and command structure is United States Department of Defense?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?unit
WHERE {
  ?unit dbo:garrison ?pentagon .
  ?pentagon dbo:name ""Pentagon"" .
  ?unit dbo:commandStructure ?defense .
  ?defense dbo:name ""United States Department of Defense"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?unit
WHERE {
  ?unit dbo:garrison ?pentagon .
  ?pentagon dbo:name ""Pentagon"" .
  ?unit dbo:commandStructure ?defense .
  ?defense dbo:name ""United States Department of Defense"" .
}",2.344734865707205e-155,0.05194805194805195,True,True
2755,Name the licensee of the TV station whose one of the licensee is Incorporation ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/licensee> <http://dbpedia.org/resource/Incorporation_(business)> . ?x <http://dbpedia.org/property/licensee> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionStation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the licensee of the TV station whose one of the licensee is Incorporation ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?licensee
WHERE {
  ?station dbo:licensee ?licensee .
  ?station dbo:licensee dbo:Incorporation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?licensee
WHERE {
  ?station dbo:licensee ?licensee .
  ?station dbo:licensee dbo:Incorporation .
}",2.486113577066771e-155,0.05714285714285714,True,True
2197,Was His New Job edited by Charlie Chaplin?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/His_New_Job> <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Charlie_Chaplin> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was His New Job edited by Charlie Chaplin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movie
WHERE {
  ?movie dbo:director Charlie Chaplin .
  ?movie dbo:title ""His New Job"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movie
WHERE {
  ?movie dbo:director Charlie Chaplin .
  ?movie dbo:title ""His New Job"" .
}",2.2898861187450904e-155,0.046875,False,False
1449,What is the total number of builder of the military structures whose builder is also United States?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/builder> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/ontology/builder> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the total number of builder of the military structures whose builder is also United States?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?militaryStructure) AS ?count)
WHERE {
  ?militaryStructure dbo:builder ?builder .
  ?builder dbo:country ?country .
  ?country rdfs:label ""United States"" .
  ?militaryStructure dbo:builder ?builder2 .
  FILTER (NOT EXISTS { ?militaryStructure dbo:builder ?builder3 . ?builder3 != ?builder2 })
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?militaryStructure) AS ?count)
WHERE {
  ?militaryStructure dbo:builder ?builder .
  ?builder dbo:country ?country .
  ?country rdfs:label ""United States"" .
  ?militaryStructure dbo:builder ?builder2 .
  FILTER (NOT EXISTS { ?militaryStructure dbo:builder ?builder3 . ?builder3 != ?builder2 })
}",2.1614356288612335e-155,0.05747126436781609,False,False
3454,List the architect of the buildings whose one of the architect is Philip Webb?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/architect> <http://dbpedia.org/resource/Philip_Webb> . ?x <http://dbpedia.org/property/architect> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Building>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the architect of the buildings whose one of the architect is Philip Webb?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?building ?architect
WHERE {
  ?building dbo:architect ?architect .
  ?architect dbo:architect ?PhilipWebb .
  FILTER ( ?architect != ?PhilipWebb )
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?building ?architect
WHERE {
  ?building dbo:architect ?architect .
  ?architect dbo:architect ?PhilipWebb .
  FILTER ( ?architect != ?PhilipWebb )
}",2.968021523431445e-155,0.06756756756756757,True,True
4114,Which band produced the album Aida?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/album> <http://dbpedia.org/resource/Aida_(musical)> . ?x <http://dbpedia.org/ontology/musicalArtist> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalWork>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which band produced the album Aida?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?band
WHERE {
  ?band dbo:musicAlbum ?album .
  ?album dbo:title ""Aida"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?band
WHERE {
  ?band dbo:musicAlbum ?album .
  ?album dbo:title ""Aida"" .
}",3.330279963995667e-155,0.07575757575757576,True,True
1347,Was Yabanc Damat first aired in UAE?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Yabancı_Damat> <http://dbpedia.org/property/firstAired> <http://dbpedia.org/resource/United_Arab_Emirates> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Yabanc Damat first aired in UAE?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?country
WHERE {
  ?tvShow dbo:country ?country .
  ?tvShow dbo:title ""Yabanc Damat"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?country
WHERE {
  ?tvShow dbo:country ?country .
  ?tvShow dbo:title ""Yabanc Damat"" .
}",2.2898861187450904e-155,0.046153846153846156,True,True
3176,To which family does korean fox belongs to ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Korean_fox> <http://dbpedia.org/ontology/family> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which family does korean fox belongs to ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?family
WHERE {
  ?koreanFox dbo:family ?family .
  FILTER (regex(?koreanFox, ""Korean fox"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?family
WHERE {
  ?koreanFox dbo:family ?family .
  FILTER (regex(?koreanFox, ""Korean fox"", ""i""))
}",2.4775553999024465e-155,0.058823529411764705,True,True
2863,Is the Chiva Bus by the Ford Motor Company?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Chiva_bus> <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/Ford_Motor_Company> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is the Chiva Bus by the Ford Motor Company?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:manufacturer dbo:FordMotorCompany .
  ?x dbo:name ""Chiva Bus"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:manufacturer dbo:FordMotorCompany .
  ?x dbo:name ""Chiva Bus"" .
}",2.259351571061102e-155,0.046153846153846156,True,True
4439,In which races have Tillingdale's horses participated?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Tillingdale> . ?x <http://dbpedia.org/property/race> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which races have Tillingdale's horses participated?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?race
WHERE {
  ?horse dbo:trainer ?trainer .
  ?trainer dbo:name ""Tillingdale"" .
  ?horse dbp:participatedIn ?race .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?race
WHERE {
  ?horse dbo:trainer ?trainer .
  ?trainer dbo:name ""Tillingdale"" .
  ?horse dbp:participatedIn ?race .
}",3.216579438360415e-155,0.07142857142857142,True,True
3510,Where does the river flow into which begins in Lebrsnik?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Lebršnik> . ?x <http://dbpedia.org/ontology/riverMouth> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where does the river flow into which begins in Lebrsnik?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river ?destination
WHERE {
  ?river dbo:location dbo:Lebrsnik .
  ?river dbo:endsAt ?destination .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river ?destination
WHERE {
  ?river dbo:location dbo:Lebrsnik .
  ?river dbo:endsAt ?destination .
}",3.1742523358973992e-155,0.07142857142857142,True,True
4350,Count the different genres of games published by Titus Software,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/publisher> <http://dbpedia.org/resource/Titus_Software> . ?x <http://dbpedia.org/ontology/genre> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the different genres of games published by Titus Software
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?genre
WHERE {
  ?game dbo:publisher dbo:TitusSoftware .
  ?game dbo:genre ?genre .
}
GROUP BY ?genre
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?genre
WHERE {
  ?game dbo:publisher dbo:TitusSoftware .
  ?game dbo:genre ?genre .
}
GROUP BY ?genre",3.1335534263807668e-155,0.0684931506849315,True,True
3035,Where is Dofinivka Estuary located ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dofinivka_Estuary> <http://dbpedia.org/property/location> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where is Dofinivka Estuary located ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  dbp:location dbo:Dofinivka_Estuary ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  dbp:location dbo:Dofinivka_Estuary ?location .
}",2.62672060505751e-155,0.06666666666666667,True,True
3128,Which college of the Luke List (golfer) is the alma mater of the Park Trammell ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Luke_List_(golfer)> <http://dbpedia.org/property/college> ?uri. <http://dbpedia.org/resource/Park_Trammell> <http://dbpedia.org/ontology/almaMater> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which college of the Luke List (golfer) is the alma mater of the Park Trammell ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?college
WHERE {
  ?golfer dbo:almaMater ?college .
  ?golfer rdf:type dbo:Person ;
           dbp:name ""Luke List""^^xsd:string .
  ?college rdf:type dbo:EducationalInstitution ;
           dbp:name ?collegeName .
  FILTER (regex(?collegeName, ""Park Trammell"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?college
WHERE {
  ?golfer dbo:almaMater ?college .
  ?golfer rdf:type dbo:Person ;
           dbp:name ""Luke List""^^xsd:string .
  ?college rdf:type dbo:EducationalInstitution ;
           dbp:name ?collegeName .
  FILTER (regex(?collegeName, ""Park Trammell"", ""i""))
}",2.527722503725714e-155,0.047058823529411764,True,True
2263,How many venues are located in the US?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/address> <http://dbpedia.org/resource/United_States>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Venue>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many venues are located in the US?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?venue) AS ?count)
WHERE {
  ?venue dbo:country ""United States""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?venue) AS ?count)
WHERE {
  ?venue dbo:country ""United States""^^xsd:string .
}",8.289228799996742e-232,0.04411764705882353,True,True
4871,Count the number of sports played by university which also plays Taekwondo ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/athletics> <http://dbpedia.org/resource/Taekwondo> . ?x <http://dbpedia.org/property/athletics> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of sports played by university which also plays Taekwondo ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?university ?sports
WHERE {
  ?university dbo:sports ?sports .
  ?university dbo:sports ""Taekwondo""^^xsd:string .
  FILTER (regex(?sports, ""Taekwondo"", ""i""))
}
GROUP BY ?university ?sports
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?university ?sports
WHERE {
  ?university dbo:sports ?sports .
  ?university dbo:sports ""Taekwondo""^^xsd:string .
  FILTER (regex(?sports, ""Taekwondo"", ""i""))
}
GROUP BY ?university ?sports",2.384592839964215e-155,0.0641025641025641,True,True
2620,What is the river on which the Kariba Dam and Batoka Gorge Hydroelectirc power station exist?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kariba_Dam> <http://dbpedia.org/ontology/river> ?uri. <http://dbpedia.org/resource/Batoka_Gorge_Hydroelectric_Power_Station> <http://dbpedia.org/ontology/river> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the river on which the Kariba Dam and Batoka Gorge Hydroelectirc power station exist?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?dam dbo:location ?location .
  ?location dbo:locatedIn ?river .
  FILTER (regex(?dam, ""Kariba Dam"") || regex(?dam, ""Batoka Gorge Hydroelectric Power Station""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?dam dbo:location ?location .
  ?location dbo:locatedIn ?river .
  FILTER (regex(?dam, ""Kariba Dam"") || regex(?dam, ""Batoka Gorge Hydroelectric Power Station""))
}",2.3192471031465984e-155,0.05952380952380952,True,True
1284,Which are the previous broadcast networks of sister channels of WGBC?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WGBC_(DT2)> <http://dbpedia.org/property/sisterStations> ?x . ?x <http://dbpedia.org/ontology/formerBroadcastNetwork> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which are the previous broadcast networks of sister channels of WGBC?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?sisterChannel ?previousBroadcastNetwork
WHERE {
  ?sisterChannel dbo:parentOrganization dbr:WGBC .
  ?sisterChannel dbo:previousBroadcastNetwork ?previousBroadcastNetwork .
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?sisterChannel ?previousBroadcastNetwork
WHERE {
  ?sisterChannel dbo:parentOrganization dbr:WGBC .
  ?sisterChannel dbo:previousBroadcastNetwork ?previousBroadcastNetwork .
}",3.53714058675999e-155,0.08333333333333333,True,True
1641,How many units follow the US Navy Department's command structure?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_the_Navy>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryUnit>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many units follow the US Navy Department's command structure?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?unitCount
WHERE {
  ?department dbo:partOf ?organization .
  ?organization dbo:name ""US Navy Department"" .
  ?department dbo:subOrganization ?unit .
  
  FILTER ( ?unit != ?department )
}
GROUP BY ?department
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?unitCount
WHERE {
  ?department dbo:partOf ?organization .
  ?organization dbo:name ""US Navy Department"" .
  ?department dbo:subOrganization ?unit .
  
  FILTER ( ?unit != ?department )
}
GROUP BY ?department",7.82830916853581e-232,0.038461538461538464,True,True
388,Who designed the bridge in Oddamavadi?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/Oddamavadi> . ?x <http://dbpedia.org/property/designer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who designed the bridge in Oddamavadi?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?designer
WHERE {
  ?bridge dbo:designedBy ?designer .
  ?bridge dbp:location ""Oddamavadi"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?designer
WHERE {
  ?bridge dbo:designedBy ?designer .
  ?bridge dbp:location ""Oddamavadi"" .
}",2.6951020595591624e-155,0.06153846153846154,True,True
4415,How many bacterias have taxonomy as Bacillales and domain as Bacteria?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales> . ?uri <http://dbpedia.org/property/domain> <http://dbpedia.org/resource/Bacteria> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many bacterias have taxonomy as Bacillales and domain as Bacteria?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?bacteria) AS ?count)
WHERE {
  ?bacteria dbo:wikiPageID ?wikiPageID .
  ?bacteria dbo:dbpediaClass ?class .
  FILTER (regex(?wikiPageID, ""Bacteria"", ""i""))
  FILTER (regex(?wikiPageID, ""Bacillales"", ""i""))
  FILTER (str(?class) = ""Bacteria"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?bacteria) AS ?count)
WHERE {
  ?bacteria dbo:wikiPageID ?wikiPageID .
  ?bacteria dbo:dbpediaClass ?class .
  FILTER (regex(?wikiPageID, ""Bacteria"", ""i""))
  FILTER (regex(?wikiPageID, ""Bacillales"", ""i""))
  FILTER (str(?class) = ""Bacteria"")
}",8.34186146802972e-232,0.04878048780487805,True,True
2323,What are some cars similar to luxury cars?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/class> <http://dbpedia.org/resource/Luxury_vehicle> . ?x <http://dbpedia.org/property/related> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some cars similar to luxury cars?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?car
WHERE {
  ?car dbo:carType ""Luxury car"" .
  ?car dbo:similarTo ?similarCar .
  ?similarCar dbo:carType ?carType .
  FILTER ( ?carType != ""Luxury car"" )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?car
WHERE {
  ?car dbo:carType ""Luxury car"" .
  ?car dbo:similarTo ?similarCar .
  ?similarCar dbo:carType ?carType .
  FILTER ( ?carType != ""Luxury car"" )
}",3.0382827129023445e-155,0.06666666666666667,True,True
3725,Current players of Colorado Avalanche have previously played for how many different teams?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Colorado_Avalanche> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Current players of Colorado Avalanche have previously played for how many different teams?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?player ?teams
WHERE {
  ?player dbo:team ""Colorado Avalanche""^^xsd:string .
  ?player dbo:previousTeam ?team .
  ?team dbo:name ?teams .
  FILTER (NOT EXISTS { ?player dbo:previousTeam ?team . })
}
GROUP BY ?player ?teams
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?player ?teams
WHERE {
  ?player dbo:team ""Colorado Avalanche""^^xsd:string .
  ?player dbo:previousTeam ?team .
  ?team dbo:name ?teams .
  FILTER (NOT EXISTS { ?player dbo:previousTeam ?team . })
}
GROUP BY ?player ?teams",2.2589949720910505e-155,0.047619047619047616,True,True
2359,Colin Powell was the commander of which military conflict ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Colin_Powell>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Colin Powell was the commander of which military conflict ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?conflict
WHERE {
  ?person dbo:birthPlace ""Colin Powell"" .
  ?person dbo:occupation ""Military officer"" .
  ?person dbo:role ?conflict .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?conflict
WHERE {
  ?person dbo:birthPlace ""Colin Powell"" .
  ?person dbo:occupation ""Military officer"" .
  ?person dbo:role ?conflict .
}",8.042329535708995e-232,0.04225352112676056,True,True
3385,Does the US navy have the structure of command of us department of defence?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/United_States_Navy> <http://dbpedia.org/property/commandStructure> <http://dbpedia.org/resource/United_States_Department_of_Defense> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the US navy have the structure of command of us department of defence?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/United_States_Navy> .
  ?x dbo:partOf ?y .
  ?y dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/United_States_Department_of_Defense> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/United_States_Navy> .
  ?x dbo:partOf ?y .
  ?y dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/United_States_Department_of_Defense> .
}",2.1483903094550452e-155,0.04477611940298507,True,True
2019,List the people who influenced the comedian who acted in Good Hair ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Good_Hair> <http://dbpedia.org/property/starring> ?x . ?x <http://dbpedia.org/ontology/influencedBy> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Comedian>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the people who influenced the comedian who acted in Good Hair ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person
WHERE {
  ?comedian dbo:actedIn <http://dbpedia.org/resource/Good_Hair> .
  ?comedian dbo:influencedBy ?person .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person
WHERE {
  ?comedian dbo:actedIn <http://dbpedia.org/resource/Good_Hair> .
  ?comedian dbo:influencedBy ?person .
}",3.2361225152319982e-155,0.0821917808219178,True,True
2805,Who is on the board of Kate Spade and company?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/board> <http://dbpedia.org/resource/Kate_Spade_&_Company>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is on the board of Kate Spade and company?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?company dbo:company ?KateSpade .
  ?KateSpade dbp:boardMember ?person .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?company dbo:company ?KateSpade .
  ?KateSpade dbp:boardMember ?person .
}",3.0940944781388835e-155,0.07575757575757576,True,True
4312,"List all the movies whose directors were born in Kenosha, Wisconsin?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Kenosha,_Wisconsin> . ?uri <http://dbpedia.org/property/director> ?x  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the movies whose directors were born in Kenosha, Wisconsin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movie ?director
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:birthDate ?birthDate .
  ?birthDate dbo:birthPlace <http://dbpedia.org/resource/Kenosha,_Wisconsin> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movie ?director
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:birthDate ?birthDate .
  ?birthDate dbo:birthPlace <http://dbpedia.org/resource/Kenosha,_Wisconsin> .
}",3.979059567726874e-155,0.09722222222222222,True,True
2629,Where did ed podolak go to high school,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ed_Podolak> <http://dbpedia.org/ontology/highschool> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did ed podolak go to high school
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Ed Podolak"" .
  ?person dbo:almaMater ?school .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Ed Podolak"" .
  ?person dbo:almaMater ?school .
}",2.494821638843469e-155,0.06153846153846154,True,True
1285,On which subjects does the author of the novel Thud! delve?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thud!> <http://dbpedia.org/ontology/nonFictionSubject> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: On which subjects does the author of the novel Thud! delve?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?subject
WHERE {
  ?book dbo:title ""Thud!"".
  ?book dbo:author ?author.
  ?author dbo:topic ?subject.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?subject
WHERE {
  ?book dbo:title ""Thud!"".
  ?book dbo:author ?author.
  ?author dbo:topic ?subject.
}",2.99393103522275e-155,0.07042253521126761,True,True
4979,Whose resting place is William Henry Harrison Tomb State Memorial and has kids named John Scott Harrison?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/William_Henry_Harrison_Tomb_State_Memorial> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/John_Scott_Harrison>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose resting place is William Henry Harrison Tomb State Memorial and has kids named John Scott Harrison?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?person
WHERE {
  ?person dbo:restingPlace ?tomb .
  ?tomb dbo:name ""William Henry Harrison Tomb State Memorial"" .
  ?person dbo:children ?child .
  ?child dbo:name ""John Scott Harrison"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?person
WHERE {
  ?person dbo:restingPlace ?tomb .
  ?tomb dbo:name ""William Henry Harrison Tomb State Memorial"" .
  ?person dbo:children ?child .
  ?child dbo:name ""John Scott Harrison"" .
}",2.2589949720910505e-155,0.04878048780487805,True,True
2800,In which wars did Percy Fitzwallace fight?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Percy_Fitzwallace> <http://dbpedia.org/property/battles> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which wars did Percy Fitzwallace fight?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?war
WHERE {
  ?person dbo:birthPlace ""South Africa"" .
  ?person dbo:name ""Percy Fitzwallace"" .
  ?person dbo:involvedInWar ?war .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?war
WHERE {
  ?person dbo:birthPlace ""South Africa"" .
  ?person dbo:name ""Percy Fitzwallace"" .
  ?person dbo:involvedInWar ?war .
}",3.032816514970993e-155,0.07352941176470588,True,True
2468,What layout can be found in cars similar to the Subaru Outback?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/related> <http://dbpedia.org/resource/Subaru_Outback> . ?x <http://dbpedia.org/ontology/layout> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What layout can be found in cars similar to the Subaru Outback?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?layout
WHERE {
  ?car dbo:model ""Subaru Outback"" .
  ?car dbo:hasLayout ?layout .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?layout
WHERE {
  ?car dbo:model ""Subaru Outback"" .
  ?car dbo:hasLayout ?layout .
}",3.1137823863213763e-155,0.06666666666666667,True,True
4146,Is the Hyundai Lavita assembled in Kulim?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Hyundai_Lavita> <http://dbpedia.org/ontology/assembly> <http://dbpedia.org/resource/Kulim> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is the Hyundai Lavita assembled in Kulim?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:model ""Hyundai Lavita"" .
  ?x dbo:assemblyLocation <http://dbpedia.org/resource/Kulim> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:model ""Hyundai Lavita"" .
  ?x dbo:assemblyLocation <http://dbpedia.org/resource/Kulim> .
}",2.4606427705034855e-155,0.0625,True,True
1456,Name the home town of Rolando Gomez?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rolando_Gomez> <http://dbpedia.org/property/homeTown> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the home town of Rolando Gomez?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hometown
WHERE {
  ?person dbo:name ""Rolando Gomez"" .
  ?person dbo: hometown ?hometown .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hometown
WHERE {
  ?person dbo:name ""Rolando Gomez"" .
  ?person dbo: hometown ?hometown .
}",2.494821638843469e-155,0.06349206349206349,False,False
2693,Which party won both the general election and the andhra pradesh election in 2004?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indian_general_election,_2004_(Delhi)> <http://dbpedia.org/ontology/affiliation> ?uri. <http://dbpedia.org/resource/Indian_general_election,_2004_(Andhra_Pradesh)> <http://dbpedia.org/ontology/affiliation> ?uri . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which party won both the general election and the andhra pradesh election in 2004?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?party
WHERE {
  ?party dbo:wikiPageRedirects ?redirect .
  ?redirect dbo:abstract ""won the 2004 Indian general election"" .
  ?party dbo:wikiPageRedirects ?redirect2 .
  ?redirect2 dbo:abstract ""won the 2004 Andhra Pradesh Legislative Assembly election"" .
  FILTER (STR(?party) != """")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?party
WHERE {
  ?party dbo:wikiPageRedirects ?redirect .
  ?redirect dbo:abstract ""won the 2004 Indian general election"" .
  ?party dbo:wikiPageRedirects ?redirect2 .
  ?redirect2 dbo:abstract ""won the 2004 Andhra Pradesh Legislative Assembly election"" .
  FILTER (STR(?party) != """")
}",2.1925377309400425e-155,0.060240963855421686,True,True
2818,Who was in youth clubs of FC Barcelona and Newell's Old Boys?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/FC_Barcelona> . ?uri <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/Newell's_Old_Boys> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was in youth clubs of FC Barcelona and Newell's Old Boys?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?person
WHERE {
  ?person dbo:memberOf ?club .
  ?club dbo:name ""FC Barcelona"" .
  FILTER (regex(?person, ""youth club"", ""i""))
  UNION
  ?person dbo:memberOf ?club .
  ?club dbo:name ""Newell's Old Boys"" .
  FILTER (regex(?person, ""youth club"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?person
WHERE {
  ?person dbo:memberOf ?club .
  ?club dbo:name ""FC Barcelona"" .
  FILTER (regex(?person, ""youth club"", ""i""))
  UNION
  ?person dbo:memberOf ?club .
  ?club dbo:name ""Newell's Old Boys"" .
  FILTER (regex(?person, ""youth club"", ""i""))
}",2.8782193009504276e-155,0.07407407407407407,False,False
452,What region is governed by Mario Olivero?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/leader> <http://dbpedia.org/resource/Mario_Oliverio> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What region is governed by Mario Olivero?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?region
WHERE {
  ?person dbo:name ""Mario Olivero"" .
  ?person dbo:governes ?region .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?region
WHERE {
  ?person dbo:name ""Mario Olivero"" .
  ?person dbo:governes ?region .
}",8.259885936748448e-232,0.046875,True,True
3218,Give me the count of interests of the philosopher whose primary interest is Metaphysics ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/mainInterests> <http://dbpedia.org/resource/Metaphysics> . ?x <http://dbpedia.org/property/mainInterests> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me the count of interests of the philosopher whose primary interest is Metaphysics ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?philosopher dbo:primaryInterest dbo:Metaphysics .
  ?philosopher dbo:interests ?interests .
  ?count = COUNT(DISTINCT ?interests)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?philosopher dbo:primaryInterest dbo:Metaphysics .
  ?philosopher dbo:interests ?interests .
  ?count = COUNT(DISTINCT ?interests)
}",2.4708136900731027e-155,0.06666666666666667,False,False
2724,What are the notableworks of Russell T Davies?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Russell_T_Davies> <http://dbpedia.org/property/notableworks> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the notableworks of Russell T Davies?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?work
WHERE {
  ?person dbo:name ""Russell T Davies"" .
  ?person dbo:notableWorks ?work .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?work
WHERE {
  ?person dbo:name ""Russell T Davies"" .
  ?person dbo:notableWorks ?work .
}",3.0940944781388835e-155,0.07692307692307693,True,True
3498,What award was won by the father of Angelina Jolie?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Angelina_Jolie> . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What award was won by the father of Angelina Jolie?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?award
WHERE {
  ?father dbo:fatherOf Angelina Jolie .
  ?father dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?award
WHERE {
  ?father dbo:fatherOf Angelina Jolie .
  ?father dbo:award ?award .
}",3.2383880054191053e-155,0.07352941176470588,False,False
3868,What team had the debut of Marv Throneberry and Curt Coleman?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marv_Throneberry> <http://dbpedia.org/property/debutteam> ?uri. <http://dbpedia.org/resource/Curt_Coleman> <http://dbpedia.org/ontology/debutTeam> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What team had the debut of Marv Throneberry and Curt Coleman?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:debutTeam ?team .
  FILTER (?player IN (dbo:Marv_Throneberry , dbo:Curt_Coleman))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:debutTeam ?team .
  FILTER (?player IN (dbo:Marv_Throneberry , dbo:Curt_Coleman))
}",2.8682607706800413e-155,0.0547945205479452,True,True
4384,Is Pulau Ubin the largest city of Singapore?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Singapore> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Pulau Ubin the largest city of Singapore?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Pulau Ubin"" .
  ?x dbo:country ""Singapore"" .
  ?x dbo:population ?pop .
  FILTER (BOUND(?pop))
  
  ?y dbo:name ""Singapore"" .
  ?y dbo:largestCity ?largestCity .
  FILTER (BOUND(?largestCity))
  
  ?largestCity dbo:name ?largestCityName .
  FILTER ( ?largestCityName = ""Pulau Ubin"" )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Pulau Ubin"" .
  ?x dbo:country ""Singapore"" .
  ?x dbo:population ?pop .
  FILTER (BOUND(?pop))
  
  ?y dbo:name ""Singapore"" .
  ?y dbo:largestCity ?largestCity .
  FILTER (BOUND(?largestCity))
  
  ?largestCity dbo:name ?largestCityName .
  FILTER ( ?largestCityName = ""Pulau Ubin"" )
}",1.948597508855997e-155,0.03896103896103896,True,True
3364,How many people played for Newell's Old Boys?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/youthclubs> <http://dbpedia.org/resource/Newell's_Old_Boys>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people played for Newell's Old Boys?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?player)) AS ?count
WHERE {
  ?player dbo:playsFor ?team .
  ?team dbo:name ""Newell's Old Boys"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?player)) AS ?count
WHERE {
  ?player dbo:playsFor ?team .
  ?team dbo:name ""Newell's Old Boys"" .
}",2.427831263680579e-155,0.057971014492753624,False,False
2858,Which builder of Edwin Andrews Air Base is also place of birth of the Akinoumi Setsuo ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Edwin_Andrews_Air_Base> <http://dbpedia.org/ontology/builder> ?uri. <http://dbpedia.org/resource/Akinoumi_Setsuo> <http://dbpedia.org/property/placeOfBirth> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which builder of Edwin Andrews Air Base is also place of birth of the Akinoumi Setsuo ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?builder
WHERE {
  ?builder dbo:wikiPageRedirects ?airbase .
  ?airbase dbo:builder ?builder .
  ?builder dbo:placeOfBirth ?birthplace .
  ?birthplace dbo:wikiPageRedirects ?person .
  ?person dbo:name ""Akinoumi Setsuo"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?builder
WHERE {
  ?builder dbo:wikiPageRedirects ?airbase .
  ?airbase dbo:builder ?builder .
  ?builder dbo:placeOfBirth ?birthplace .
  ?birthplace dbo:wikiPageRedirects ?person .
  ?person dbo:name ""Akinoumi Setsuo"" .
}",2.553782876480489e-155,0.04938271604938271,True,True
2809,What is the death location of the scientist who is the known authority of Hallopus ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hallopus> <http://dbpedia.org/ontology/binomialAuthority> ?x . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the death location of the scientist who is the known authority of Hallopus ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?deathLocation
WHERE {
  ?scientist dbo:knownFor ?hallopus .
  ?hallopus dbo:authority ?scientist .
  ?scientist dbo:deathPlace ?deathLocation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?deathLocation
WHERE {
  ?scientist dbo:knownFor ?hallopus .
  ?hallopus dbo:authority ?scientist .
  ?scientist dbo:deathPlace ?deathLocation .
}",2.4123225276763925e-155,0.05405405405405406,True,True
3001,What are some seas inside europe ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Europe>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some seas inside europe ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sea ?seaLabel
WHERE {
  ?sea dbo:locatedIn ?country .
  ?country dbo:countryName ""Europe"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sea ?seaLabel
WHERE {
  ?sea dbo:locatedIn ?country .
  ?country dbo:countryName ""Europe"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.336751314796786e-155,0.05405405405405406,False,False
4339,Los Angeles Lakers is the team of which basketball players?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/team> <http://dbpedia.org/resource/Los_Angeles_Lakers>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Los Angeles Lakers is the team of which basketball players?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player
WHERE {
  ?team dbo:name ""Los Angeles Lakers"" .
  ?team dbo:player ?player .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player
WHERE {
  ?team dbo:name ""Los Angeles Lakers"" .
  ?team dbo:player ?player .
}",2.3809857162598948e-155,0.056338028169014086,True,True
3966,How many different people have been in any political seat in places which are under the Indian Standard timezone?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/timeZone> <http://dbpedia.org/resource/Indian_Standard_Time> . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many different people have been in any political seat in places which are under the Indian Standard timezone?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>

SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?place dbo:country ?country .
  ?country dbo:officialName ""India"" .
  ?place geo:geoContains ?location .
  ?location geo:timeZoneId ""Asia/Kolkata"" .
  ?person dbo:birthPlace ?place .
  ?person dbo:occupation dbo:Politician .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX geo: <http://www.w3.org/2003/01/geo/wgs84_pos#>

SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?place dbo:country ?country .
  ?country dbo:officialName ""India"" .
  ?place geo:geoContains ?location .
  ?location geo:timeZoneId ""Asia/Kolkata"" .
  ?person dbo:birthPlace ?place .
  ?person dbo:occupation dbo:Politician .
}",2.6902653402532207e-155,0.053763440860215055,True,True
743,Which publisher of Stone Canoe is also the university for which Michael Powell plays for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Stone_Canoe> <http://dbpedia.org/ontology/publisher> ?uri. <http://dbpedia.org/resource/Michael_Powell_(lacrosse)> <http://dbpedia.org/ontology/team> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which publisher of Stone Canoe is also the university for which Michael Powell plays for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?publisher
WHERE {
  ?book dbo:author ?author .
  ?author dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country ?country .
  ?country dbo:name ""United States""^^xsd:string .
  ?book dbo:publisher ?publisher .
  ?publisher dbo:name ""Stone Canoe"" .
  ?university dbo:student ?author .
  ?university dbo:name ?universityName .
  FILTER (regex(?universityName, ""University""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?publisher
WHERE {
  ?book dbo:author ?author .
  ?author dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country ?country .
  ?country dbo:name ""United States""^^xsd:string .
  ?book dbo:publisher ?publisher .
  ?publisher dbo:name ""Stone Canoe"" .
  ?university dbo:student ?author .
  ?university dbo:name ?universityName .
  FILTER (regex(?universityName, ""University""))
}",2.3865239465594637e-155,0.044444444444444446,True,True
705,How many races have the horses bred by Jacques Van't Hart participated in?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/breeder> <http://dbpedia.org/resource/Jacques_Van't_Hart> . ?x <http://dbpedia.org/property/race> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many races have the horses bred by Jacques Van't Hart participated in?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?race) AS ?count)
WHERE {
  ?horse dbo:bredBy ?breeder .
  ?breeder dbo:name ""Jacques Van't Hart"" .
  ?horse rdf:type dbo:Racehorse .
  ?horse dbo:participatedIn ?race .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?race) AS ?count)
WHERE {
  ?horse dbo:bredBy ?breeder .
  ?breeder dbo:name ""Jacques Van't Hart"" .
  ?horse rdf:type dbo:Racehorse .
  ?horse dbo:participatedIn ?race .
}",2.91841165985534e-155,0.06097560975609756,True,True
3069,"Which university's affiliation is with Kalpan, Inc. and has campus at Iowa ?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.> . ?uri <http://dbpedia.org/ontology/campus> <http://dbpedia.org/resource/Iowa>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which university's affiliation is with Kalpan, Inc. and has campus at Iowa ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?university
WHERE {
  ?university dbo:affiliation ?company .
  ?company dbo:name ""Kalpan, Inc."" .
  ?university dbo:location ?location .
  ?location dbo:name ""Iowa"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?university
WHERE {
  ?university dbo:affiliation ?company .
  ?company dbo:name ""Kalpan, Inc."" .
  ?university dbo:location ?location .
  ?location dbo:name ""Iowa"" .
}",2.371081855250832e-155,0.05063291139240506,True,True
368,Which university was attended by both Richard H Immerman and Franklin W Olin?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Richard_H._Immerman> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Franklin_W._Olin> <http://dbpedia.org/property/education> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which university was attended by both Richard H Immerman and Franklin W Olin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university
WHERE {
  ?person dbo:attendedUniversity ?university .
  FILTER (?person IN (dbo:Richard_H_Immerman, dbo:Franklin_W_Olin))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university
WHERE {
  ?person dbo:attendedUniversity ?university .
  FILTER (?person IN (dbo:Richard_H_Immerman, dbo:Franklin_W_Olin))
}",3.1537059338519422e-155,0.08,True,True
1567,Ernest Rutherford was the advisor of how many people?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Ernest_Rutherford>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Ernest Rutherford was the advisor of how many people?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?person dbo:advisor ?rutherford .
  ?rutherford dbo:name ""Ernest Rutherford""^^xsd:string .
  FILTER (BOUND(?person))
}
GROUP BY ?rutherford
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?person dbo:advisor ?rutherford .
  ?rutherford dbo:name ""Ernest Rutherford""^^xsd:string .
  FILTER (BOUND(?person))
}
GROUP BY ?rutherford",8.669612184277444e-232,0.056338028169014086,True,True
1114,Name the species of Panthera leo fossilis?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Panthera_leo_fossilis> <http://dbpedia.org/ontology/species> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the species of Panthera leo fossilis?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?species
WHERE {
  ?fossil dbo:species ?species .
  FILTER (str(?fossil) = ""http://dbpedia.org/resource/Panthera_leo_fossilis"")
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?species
WHERE {
  ?fossil dbo:species ?species .
  FILTER (str(?fossil) = ""http://dbpedia.org/resource/Panthera_leo_fossilis"")
}",2.4775553999024465e-155,0.06060606060606061,True,True
1128,What is the genre of the Band whose home town is County Westmeath?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/County_Westmeath> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the genre of the Band whose home town is County Westmeath?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?genre
WHERE {
  ?band dbo: hometown dbp:CountyWestmeath .
  ?band dbo:genre ?genre .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?genre
WHERE {
  ?band dbo: hometown dbp:CountyWestmeath .
  ?band dbo:genre ?genre .
}",2.50170125957988e-155,0.05555555555555555,False,False
1138,Does Lousana lie at the end of Alberta Highway 42?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Alberta_Highway_42> <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Lousana>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Lousana lie at the end of Alberta Highway 42?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Lousana"" .
  ?x dbp:location dbp:AlbertaHighway42 .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Lousana"" .
  ?x dbp:location dbp:AlbertaHighway42 .
}",2.8871942127949523e-155,0.05970149253731343,True,True
3643,What is the religion of the ones in the Kampuchean Union of Salvation?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Kampuchean_United_Front_for_National_Salvation> . ?x <http://dbpedia.org/ontology/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the religion of the ones in the Kampuchean Union of Salvation?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religion
WHERE {
  ?organization dbo:name ""Kampuchean Union of Salvation"" .
  ?organization dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religion
WHERE {
  ?organization dbo:name ""Kampuchean Union of Salvation"" .
  ?organization dbo:religion ?religion .
}",3.1335534263807668e-155,0.07246376811594203,True,True
4131,Which borough is common for Duddeston and Bordesley railway station ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Duddeston_railway_station> <http://dbpedia.org/property/borough> ?uri. <http://dbpedia.org/resource/Bordesley_railway_station> <http://dbpedia.org/property/borough> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which borough is common for Duddeston and Bordesley railway station ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?borough
WHERE {
  ?station dbo:location ?location .
  ?location dbo:borough ?borough .
  FILTER (regex(?station, ""Duddeston"", ""i"") || regex(?station, ""Bordesley"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?borough
WHERE {
  ?station dbo:location ?location .
  ?location dbo:borough ?borough .
  FILTER (regex(?station, ""Duddeston"", ""i"") || regex(?station, ""Bordesley"", ""i""))
}",3.0025357216578434e-155,0.0759493670886076,True,True
1891,What is the death place of the Marina Pankova and Viktor Ulyanich?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marina_Pankova> <http://dbpedia.org/ontology/deathPlace> ?uri. <http://dbpedia.org/resource/Viktor_Ulyanich> <http://dbpedia.org/ontology/deathPlace> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the death place of the Marina Pankova and Viktor Ulyanich?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?deathPlace
WHERE {
  ?person dbo:deathPlace ?deathPlace .
  FILTER (regex(?person, ""Marina Pankova"", ""i"") || regex(?person, ""Viktor Ulyanich"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?deathPlace
WHERE {
  ?person dbo:deathPlace ?deathPlace .
  FILTER (regex(?person, ""Marina Pankova"", ""i"") || regex(?person, ""Viktor Ulyanich"", ""i""))
}",2.486113577066771e-155,0.06578947368421052,True,True
4377,What is the  name of the television show whose developer is J. Michael Straczynski and actor is Jason Carter (actor)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/J._Michael_Straczynski> . ?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the  name of the television show whose developer is J. Michael Straczynski and actor is Jason Carter (actor)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showName
WHERE {
  ?show dbo:developer J.MichaelStraczynski .
  ?show dbo:actor ?actor .
  ?actor dbo:name ""Jason Carter"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showName
WHERE {
  ?show dbo:developer J.MichaelStraczynski .
  ?show dbo:actor ?actor .
  ?actor dbo:name ""Jason Carter"" .
}",8.34186146802972e-232,0.037037037037037035,False,False
1798,Does Mt St. Peter Churt follow the architectural style of art deco?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Mount_St._Peter_Church> <http://dbpedia.org/property/architecture> <http://dbpedia.org/resource/Art_Deco> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Mt St. Peter Churt follow the architectural style of art deco?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?style
WHERE {
  <http://dbpedia.org/resource/Mount_St._Peter_Churt> dbo:architecturalStyle ?style .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?style
WHERE {
  <http://dbpedia.org/resource/Mount_St._Peter_Churt> dbo:architecturalStyle ?style .
}",2.2898861187450904e-155,0.045454545454545456,True,True
1737,What is the common country of Ganz UV and Balaton wine region?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ganz_UV> <http://dbpedia.org/ontology/operator> ?uri. <http://dbpedia.org/resource/Balaton_wine_region> <http://dbpedia.org/ontology/location> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the common country of Ganz UV and Balaton wine region?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?wineRegion dbo:country ?country .
  FILTER (regex(?wineRegion, ""Ganz UV"", ""i"") || regex(?wineRegion, ""Balaton"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?wineRegion dbo:country ?country .
  FILTER (regex(?wineRegion, ""Ganz UV"", ""i"") || regex(?wineRegion, ""Balaton"", ""i""))
}",2.7960888070028265e-155,0.05194805194805195,True,True
4,Name the municipality of Roberto Clemente Bridge ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Roberto_Clemente_Bridge> <http://dbpedia.org/ontology/municipality> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the municipality of Roberto Clemente Bridge ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?municipality
WHERE {
  <http://dbpedia.org/resource/Roberto_Clemente_Bridge> dbo:locatedIn ?municipality .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?municipality
WHERE {
  <http://dbpedia.org/resource/Roberto_Clemente_Bridge> dbo:locatedIn ?municipality .
}",9.380005307821995e-79,0.08196721311475409,True,True
3579,To which series does Lost special belong to ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Lost_Special> <http://dbpedia.org/property/series> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which series does Lost special belong to ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?series
WHERE {
  ?special dbo:genre ?series .
  FILTER (regex(?series, ""Lost""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?series
WHERE {
  ?special dbo:genre ?series .
  FILTER (regex(?series, ""Lost""))
}",2.5124539841526692e-155,0.06060606060606061,True,True
1763,Where are Thomas Franois Burgers and Johannes Gerhardus Strijdom buried?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thomas_François_Burgers> <http://dbpedia.org/property/restingplace> ?uri. <http://dbpedia.org/resource/Johannes_Gerhardus_Strijdom> <http://dbpedia.org/property/restingplace> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where are Thomas Franois Burgers and Johannes Gerhardus Strijdom buried?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?burialPlace
WHERE {
  ?person a dbo:Person ;
    dbo:name ?name .
  FILTER (regex(?name, ""Thomas Franois Burgers"", ""i"") || regex(?name, ""Johannes Gerhardus Strijdom"", ""i"")) .
  ?person dbo:burialPlace ?burialPlace .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?burialPlace
WHERE {
  ?person a dbo:Person ;
    dbo:name ?name .
  FILTER (regex(?name, ""Thomas Franois Burgers"", ""i"") || regex(?name, ""Johannes Gerhardus Strijdom"", ""i"")) .
  ?person dbo:burialPlace ?burialPlace .
}",3.194645317303101e-155,0.07228915662650602,True,True
2772,Where is the birthplace of Ferrel Harris ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ferrel_Harris> <http://dbpedia.org/property/birthplace> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where is the birthplace of Ferrel Harris ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:birthPlace ?location .
  FILTER (regex(?person, ""Ferrel Harris"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:birthPlace ?location .
  FILTER (regex(?person, ""Ferrel Harris"", ""i""))
}",2.494821638843469e-155,0.06060606060606061,True,True
1369,Is Cologny a neighbouring city of Geneva?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Geneva> <http://dbpedia.org/property/neighboringMunicipalities> <http://dbpedia.org/resource/Cologny> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Cologny a neighbouring city of Geneva?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:neighbourhood ?y .
  ?y dbo:name ""Geneva"" .
  FILTER (str(?x) = ""Cologny"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:neighbourhood ?y .
  ?y dbo:name ""Geneva"" .
  FILTER (str(?x) = ""Cologny"")
}",2.2898861187450904e-155,0.046153846153846156,True,True
1677,Which spouse of Ptolemy XIV had a father named Ptolemy XII auletes?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Ptolemy_XII_Auletes> . ?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ptolemy_XIV_of_Egypt>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which spouse of Ptolemy XIV had a father named Ptolemy XII auletes?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?spouse
WHERE {
  ?spouse dbo:spouse ?person .
  ?person dbo:father ?father .
  ?father dbo:name ""Ptolemy XII Auletes"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?spouse
WHERE {
  ?spouse dbo:spouse ?person .
  ?person dbo:father ?father .
  ?father dbo:name ""Ptolemy XII Auletes"" .
}",3.075337680136661e-155,0.0684931506849315,True,True
4998,Is NY Rangers a prospective team for Robin Kovacs?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Robin_Kovacs> <http://dbpedia.org/ontology/prospectTeam> <http://dbpedia.org/resource/New_York_Rangers> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is NY Rangers a prospective team for Robin Kovacs?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""NY Rangers"" .
  ?x dbo:teamMember ?y .
  ?y dbo:name ""Robin Kovacs"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""NY Rangers"" .
  ?x dbo:teamMember ?y .
  ?y dbo:name ""Robin Kovacs"" .
}",2.1880577381778143e-155,0.04477611940298507,True,True
3936,How many companies have developed cross platformed software?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Cross-platform> . ?x <http://dbpedia.org/ontology/developer> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many companies have developed cross platformed software?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT (COUNT(DISTINCT ?company) AS ?count)
WHERE {
  ?company dbo:companyType ""Software Company""@en .
  ?company dbo:develops ?software .
  ?software dbo:platform ""Cross-platform""@en .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT (COUNT(DISTINCT ?company) AS ?count)
WHERE {
  ?company dbo:companyType ""Software Company""@en .
  ?company dbo:develops ?software .
  ?software dbo:platform ""Cross-platform""@en .
}",3.1335534263807668e-155,0.06666666666666667,True,True
2229,Which team did Dough Acomb played for which is also the draft team of Dale Mitchell ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dale_Mitchell_(ice_hockey)> <http://dbpedia.org/ontology/draftTeam> ?uri. <http://dbpedia.org/resource/Doug_Acomb> <http://dbpedia.org/property/playedFor> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which team did Dough Acomb played for which is also the draft team of Dale Mitchell ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:memberOf ?team .
  ?player dbo:name ""Dough Acomb""^^xsd:string .
  ?team dbp:draftTeam ?draftTeam .
  ?draftTeam dbo:name ""Dale Mitchell""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:memberOf ?team .
  ?player dbo:name ""Dough Acomb""^^xsd:string .
  ?team dbp:draftTeam ?draftTeam .
  ?draftTeam dbo:name ""Dale Mitchell""^^xsd:string .
}",2.5944303248170386e-155,0.04938271604938271,True,True
3986,Count the number of people became famous for when Andrew Jackson was a commander ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Andrew_Jackson> . ?uri <http://dbpedia.org/ontology/knownFor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of people became famous for when Andrew Jackson was a commander ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace ?deathPlace .
  ?person dbo:becameFamousFor ?becameFamousFor .
  FILTER ( ?becameFamousFor = <http://dbpedia.org/resource/Andrew_Jackson> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace ?deathPlace .
  ?person dbo:becameFamousFor ?becameFamousFor .
  FILTER ( ?becameFamousFor = <http://dbpedia.org/resource/Andrew_Jackson> )
}",2.5092505335702585e-155,0.07058823529411765,True,True
2262,Which location city of Denver Broncos is the palce of birth of Steven Clark Cunningham ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?uri. <http://dbpedia.org/resource/Steven_Clark_Cunningham> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which location city of Denver Broncos is the palce of birth of Steven Clark Cunningham ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  ?person dbo:name ""Steven Clark Cunningham"" .
  FILTER (regex(?city, ""Denver""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  ?person dbo:name ""Steven Clark Cunningham"" .
  FILTER (regex(?city, ""Denver""))
}",2.1108049473741715e-155,0.038461538461538464,True,True
855,Which people are known for appearing on the television show Dragon's Den?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Dragons'_Den_(UK_TV_series)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which people are known for appearing on the television show Dragon's Den?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:knownFor ?show .
  ?show rdfs:label ""Dragon's Den"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:knownFor ?show .
  ?show rdfs:label ""Dragon's Den"" .
}",2.4119102000777368e-155,0.05714285714285714,True,True
377,"Which office holder's governor is Charles Willing Byrd and has final resting place in North Bend, Ohio?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/governor> <http://dbpedia.org/resource/Charles_Willing_Byrd> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/North_Bend,_Ohio>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which office holder's governor is Charles Willing Byrd and has final resting place in North Bend, Ohio?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?officeHolder
WHERE {
  ?officeHolder dbo:governor ?governor .
  ?governor dbo:name ""Charles Willing Byrd""^^xsd:string .
  ?officeHolder dbo:finalRestingPlace ?restingPlace .
  ?restingPlace dbo:name ""North Bend, Ohio""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?officeHolder
WHERE {
  ?officeHolder dbo:governor ?governor .
  ?governor dbo:name ""Charles Willing Byrd""^^xsd:string .
  ?officeHolder dbo:finalRestingPlace ?restingPlace .
  ?restingPlace dbo:name ""North Bend, Ohio""^^xsd:string .
}",8.252630869637644e-232,0.03614457831325301,True,True
2308,List all the faiths that British Columbian politicians follow?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/British_Columbia> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the faiths that British Columbian politicians follow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?faith
WHERE {
  ?politician dbo: nationality ""British Columbian"" .
  ?politician dbo:religion ?faith .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?faith
WHERE {
  ?politician dbo: nationality ""British Columbian"" .
  ?politician dbo:religion ?faith .
}",3.1537059338519422e-155,0.07042253521126761,False,False
688,In which cities can the beverage related to Barq's be found?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Barq's> <http://dbpedia.org/ontology/related> ?x . ?x <http://dbpedia.org/property/locationCity> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which cities can the beverage related to Barq's be found?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?product dbo:brand ""Barq's"" .
  ?product dbo:productType ""beverage"" .
  ?product dbp:availableIn ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?product dbo:brand ""Barq's"" .
  ?product dbo:productType ""beverage"" .
  ?product dbp:availableIn ?city .
}",3.53714058675999e-155,0.08108108108108109,True,True
2227,Trainees at the national film school of Lodz have received what awards?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/training> <http://dbpedia.org/resource/National_Film_School_in_Łódź> . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Trainees at the national film school of Lodz have received what awards?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?school dbo:name ""National Film School in Łódź"" .
  ?school dbo:trainee ?trainee .
  ?trainee dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?school dbo:name ""National Film School in Łódź"" .
  ?school dbo:trainee ?trainee .
  ?trainee dbo:award ?award .
}",3.433385853714441e-155,0.0759493670886076,True,True
1018,Give me the count of all people who ascended a peak in California?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/California> . ?x <http://dbpedia.org/ontology/firstAscentPerson> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me the count of all people who ascended a peak in California?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?person) AS ?count)
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country ?country .
  FILTER(?country = dbo:UnitedStates)
  ?person dbo:ascendedPeak ?peak .
  ?peak dbo:location ?location .
  FILTER(?location = dbo:California)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?person) AS ?count)
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country ?country .
  FILTER(?country = dbo:UnitedStates)
  ?person dbo:ascendedPeak ?peak .
  ?peak dbo:location ?location .
  FILTER(?location = dbo:California)
}",2.3318865198845825e-155,0.047619047619047616,True,True
3702,What is the region of Kim Sawchuk ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kim_Sawchuk> <http://dbpedia.org/property/region> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the region of Kim Sawchuk ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?region
WHERE {
  ?person dbo:name ""Kim Sawchuk"" .
  ?person dbo:region ?region .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?region
WHERE {
  ?person dbo:name ""Kim Sawchuk"" .
  ?person dbo:region ?region .
}",2.494821638843469e-155,0.0625,True,True
1173,List the total number of executive producer of TV show which have one of the executiive producer as Steven Moffat ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Steven_Moffat> . ?x <http://dbpedia.org/property/executiveProducer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the total number of executive producer of TV show which have one of the executiive producer as Steven Moffat ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?executiveProducer) AS ?count)
WHERE {
  ?tvShow dbo:executiveProducer ?executiveProducer .
  ?executiveProducer dbo:name ""Steven Moffat"" .
  FILTER (BOUND(?executiveProducer))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?executiveProducer) AS ?count)
WHERE {
  ?tvShow dbo:executiveProducer ?executiveProducer .
  ?executiveProducer dbo:name ""Steven Moffat"" .
  FILTER (BOUND(?executiveProducer))
}",2.3192471031465984e-155,0.058823529411764705,True,True
4084,Who all were venerated in Islam?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Islam>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who all were venerated in Islam?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:religion ""Islam""^^xsd:string .
  ?subject dbo:veneratedBy ?object .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:religion ""Islam""^^xsd:string .
  ?subject dbo:veneratedBy ?object .
}",3.181891987622405e-155,0.078125,True,True
3753,List down the opponents of Frank Stilwell?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frank_Stilwell> <http://dbpedia.org/ontology/opponent> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List down the opponents of Frank Stilwell?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?opponent
WHERE {
  ?opponent dbo:opponentOf ?frankStilwell .
  ?frankStilwell dbo:name ""Frank Stilwell"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?opponent
WHERE {
  ?opponent dbo:opponentOf ?frankStilwell .
  ?frankStilwell dbo:name ""Frank Stilwell"" .
}",3.1370721297783126e-155,0.078125,True,True
3703,Which colored race horses have won the Grand National?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/honours> <http://dbpedia.org/resource/Grand_National> . ?x <http://dbpedia.org/ontology/colour> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RaceHorse>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which colored race horses have won the Grand National?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?horse ?color
WHERE {
  ?horse dbo:wikiPageRedirects* dbo:GrandNationalWinner .
  ?horse dbp:coatColor ?color .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?horse ?color
WHERE {
  ?horse dbo:wikiPageRedirects* dbo:GrandNationalWinner .
  ?horse dbp:coatColor ?color .
}",3.1742523358973992e-155,0.07042253521126761,True,True
3932,List bacterias whose order is Bacillales and division is Firmicutes?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales> . ?uri <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Firmicutes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List bacterias whose order is Bacillales and division is Firmicutes?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:order ""Bacillales""^^xsd:string .
  ?bacteria dbo:division ""Firmicutes""^^xsd:string .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:order ""Bacillales""^^xsd:string .
  ?bacteria dbo:division ""Firmicutes""^^xsd:string .
}",2.5502845355614067e-155,0.056338028169014086,True,True
4784,Brian Moriarty designed video games written by whom?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designer> <http://dbpedia.org/resource/Brian_Moriarty> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Brian Moriarty designed video games written by whom?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?writer
WHERE {
  ?game dbo:designer Brian Moriarty .
  ?game dbo:writer ?writer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?writer
WHERE {
  ?game dbo:designer Brian Moriarty .
  ?game dbo:writer ?writer .
}",3.195205633963664e-155,0.07142857142857142,False,False
1242,List the other members of the band of which Juelz Santana is a part?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Juelz_Santana> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the other members of the band of which Juelz Santana is a part?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?otherMember
WHERE {
  ?band dbo:member ?member .
  ?member dbo:name ""Juelz Santana""^^xsd:string .
  ?band dbo:member ?otherMember .
  FILTER ( ?otherMember != ?member )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?otherMember
WHERE {
  ?band dbo:member ?member .
  ?member dbo:name ""Juelz Santana""^^xsd:string .
  ?band dbo:member ?otherMember .
  FILTER ( ?otherMember != ?member )
}",2.951204860745888e-155,0.06493506493506493,True,True
1570,What is the nationality of Aishath Saffa?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aishath_Saffa> <http://dbpedia.org/property/nationality> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the nationality of Aishath Saffa?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?nationality
WHERE {
  dbp:nationality Aishath_Saffa ?nationality .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?nationality
WHERE {
  dbp:nationality Aishath_Saffa ?nationality .
}",2.606590994551401e-155,0.06666666666666667,False,False
4768,Is Fluidinfo written in PostgreSQL language?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Fluidinfo> <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/PostgreSQL> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Fluidinfo written in PostgreSQL language?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects/dbp:programmingLanguage ""PostgreSQL"" .
  ?x dbo:wikiPageRedirects/dbp:name ""Fluidinfo"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects/dbp:programmingLanguage ""PostgreSQL"" .
  ?x dbo:wikiPageRedirects/dbp:name ""Fluidinfo"" .
}",2.321693139700891e-155,0.047619047619047616,True,True
4676,Estimate the number of sports divisions at the universities under international association of universities.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/International_Association_of_Universities> . ?x <http://dbpedia.org/ontology/sport> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Estimate the number of sports divisions at the universities under international association of universities.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?sportDivision) AS ?count)
WHERE {
  ?university dbo:memberOf ?iau .
  ?iau dbo:name ""International Association of Universities""@en .
  ?university dbo:sportsDivision ?sportDivision .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?sportDivision) AS ?count)
WHERE {
  ?university dbo:memberOf ?iau .
  ?iau dbo:name ""International Association of Universities""@en .
  ?university dbo:sportsDivision ?sportDivision .
}",2.951204860745888e-155,0.0625,True,True
1915,How many universities participate in the NCAA Division I Football Bowl Subdivision?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/athletics> <http://dbpedia.org/resource/NCAA_Division_I_Football_Bowl_Subdivision>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many universities participate in the NCAA Division I Football Bowl Subdivision?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?university)) AS ?count
WHERE {
  ?university dbo:sportsTeam ?footballTeam .
  ?footballTeam dbo:league dbp:NCAA_Division_I_Football_Bowl_Subdivision .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?university)) AS ?count
WHERE {
  ?university dbo:sportsTeam ?footballTeam .
  ?footballTeam dbo:league dbp:NCAA_Division_I_Football_Bowl_Subdivision .
}",8.06798322521923e-232,0.04054054054054054,False,False
2992,Count everyone who was in the military unit which is structured like the Marine Aircraft Group 13 ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/commandStructure> <http://dbpedia.org/resource/Marine_Aircraft_Group_13> . ?uri <http://dbpedia.org/ontology/militaryUnit> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count everyone who was in the military unit which is structured like the Marine Aircraft Group 13 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX schema: <http://schema.org/>

SELECT ?person
WHERE {
  ?person dbo:memberOf ?unit .
  ?unit dbo:isPartOf ?mag .
  ?mag dbo:name ""Marine Aircraft Group 13""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX schema: <http://schema.org/>

SELECT ?person
WHERE {
  ?person dbo:memberOf ?unit .
  ?unit dbo:isPartOf ?mag .
  ?mag dbo:name ""Marine Aircraft Group 13""^^xsd:string .
}",2.8712091323971647e-155,0.060240963855421686,True,True
851,What novels belong to the genre of Utopian and dystopian fiction?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Utopian_and_dystopian_fiction> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What novels belong to the genre of Utopian and dystopian fiction?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?novel
WHERE {
  ?novel dbo:genre ?genre .
  ?genre dbo:wikiPageRedirects ?wikiPage .
  FILTER (regex(?wikiPage, ""Utopian|Dystopian""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?novel
WHERE {
  ?novel dbo:genre ?genre .
  ?genre dbo:wikiPageRedirects ?wikiPage .
  FILTER (regex(?wikiPage, ""Utopian|Dystopian""))
}",2.3962983105918537e-155,0.057971014492753624,True,True
311,Name the constituency of Domenico Modugno?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Domenico_Modugno> <http://dbpedia.org/property/constituency> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the constituency of Domenico Modugno?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?constituency
WHERE {
  ?person dbo:name ""Domenico Modugno"" .
  ?person dbp:constituency ?constituency .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?constituency
WHERE {
  ?person dbo:name ""Domenico Modugno"" .
  ?person dbp:constituency ?constituency .
}",2.530465559854518e-155,0.06451612903225806,True,True
3577,What is the predecessor of PlayStation 4?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/PlayStation_4>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the predecessor of PlayStation 4?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?playstation4 dbo:successor ?predecessor .
  FILTER ( ?playstation4 = <http://dbpedia.org/resource/PlayStation_4> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?playstation4 dbo:successor ?predecessor .
  FILTER ( ?playstation4 = <http://dbpedia.org/resource/PlayStation_4> )
}",9.352284301430419e-232,0.07575757575757576,True,True
84,Which title of Zaman Shah Durrani is also the nationality of Salahuddin?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Zaman_Shah_Durrani> <http://dbpedia.org/property/title> ?uri. <http://dbpedia.org/resource/Salahuddin_Rabbani> <http://dbpedia.org/ontology/nationality> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which title of Zaman Shah Durrani is also the nationality of Salahuddin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?title
WHERE {
  ?zaman dbo:title ?title .
  ?zaman dbo:birthPlace ""Afghanistan"" .
  ?salahuddin dbo:nationality ""Afghan"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?title
WHERE {
  ?zaman dbo:title ?title .
  ?zaman dbo:birthPlace ""Afghanistan"" .
  ?salahuddin dbo:nationality ""Afghan"" .
}",2.1745921280630745e-155,0.04054054054054054,True,True
691,List the ceremonial county of East Tilbury?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/East_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the ceremonial county of East Tilbury?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?ceremonialCounty
WHERE {
  ?town dbo:ceremonialCounty ?ceremonialCounty .
  FILTER (regex(?town, ""East Tilbury"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?ceremonialCounty
WHERE {
  ?town dbo:ceremonialCounty ?ceremonialCounty .
  FILTER (regex(?town, ""East Tilbury"", ""i""))
}",2.5124539841526692e-155,0.06153846153846154,True,True
2377,List bacteria whose order (taxonomy) is Bacillales and domain is Bacteria?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales> . ?uri <http://dbpedia.org/property/domain> <http://dbpedia.org/resource/Bacteria>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List bacteria whose order (taxonomy) is Bacillales and domain is Bacteria?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:wikiPageID ?wikiPageID .
  ?bacteria dbo:dbpediaClass ?class .
  ?class rdfs:subClassOf* dbo:Bacteria .
  ?bacteria dbo:order ?order .
  ?order dbo:name ""Bacillales"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:wikiPageID ?wikiPageID .
  ?bacteria dbo:dbpediaClass ?class .
  ?class rdfs:subClassOf* dbo:Bacteria .
  ?bacteria dbo:order ?order .
  ?order dbo:name ""Bacillales"" .
}",2.3577979608859863e-155,0.05128205128205128,True,True
297,For which other teams do members of tanzanian national football team play?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Tanzania_national_football_team> . ?x <http://dbpedia.org/ontology/team> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: For which other teams do members of tanzanian national football team play?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:memberOf <http://dbpedia.org/resource/Tanzanian_national_football_team> .
  ?player dbo:playsFor ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:memberOf <http://dbpedia.org/resource/Tanzanian_national_football_team> .
  ?player dbo:playsFor ?team .
}",3.6040982025556637e-155,0.08108108108108109,True,True
4574,Which televison shows have location as Massachusetts ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Massachusetts>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which televison shows have location as Massachusetts ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?showLabel ?show
WHERE {
  ?show dbo:location dbp:Massachusetts .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?showLabel ?show
WHERE {
  ?show dbo:location dbp:Massachusetts .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.427831263680579e-155,0.056338028169014086,False,False
3367,Which architect of the Marine Corps Air Station Kaneohe Bay is the branch of the Burnet R. Maybank?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?uri. <http://dbpedia.org/resource/Burnet_R._Maybank> <http://dbpedia.org/property/branch> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which architect of the Marine Corps Air Station Kaneohe Bay is the branch of the Burnet R. Maybank?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?architect
WHERE {
  ?architect dbo:architectOf ?building .
  ?building dbp:location dbo:MarineCorpsAirStationKaneoheBay .
  ?architect dbo:branchOf ?branch .
  ?branch dbo:name ""Burnet R. Maybank"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?architect
WHERE {
  ?architect dbo:architectOf ?building .
  ?building dbp:location dbo:MarineCorpsAirStationKaneoheBay .
  ?architect dbo:branchOf ?branch .
  ?branch dbo:name ""Burnet R. Maybank"" .
}",2.5806662832054458e-155,0.04938271604938271,True,True
4648,How many people play for the Dallas Cowboys?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Dallas_Cowboys>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people play for the Dallas Cowboys?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:name ""Dallas Cowboys"" .
  ?team dbo:officialWebsite ?website .
  ?player dbo:playsFor ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:name ""Dallas Cowboys"" .
  ?team dbo:officialWebsite ?website .
  ?player dbo:playsFor ?team .
}",2.3962983105918537e-155,0.057971014492753624,True,True
4039,Is the Caterpullar 797F assembled in North America?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Caterpillar_797F> <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/North_America> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is the Caterpullar 797F assembled in North America?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?assemblyLocation
WHERE {
  ?caterpillar dbo:assemblyLocation ?assemblyLocation .
  FILTER (regex(?assemblyLocation, ""North America"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?assemblyLocation
WHERE {
  ?caterpillar dbo:assemblyLocation ?assemblyLocation .
  FILTER (regex(?assemblyLocation, ""North America"", ""i""))
}",2.2744651330897987e-155,0.04477611940298507,True,True
4937,Name the origins of the river with Quich Department as one of the origin ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Quiché_Department> . ?x <http://dbpedia.org/ontology/origin> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the origins of the river with Quich Department as one of the origin ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?riverName
WHERE {
  ?river dbo:origin ?origin .
  ?origin dbo:locatedIn ?department .
  ?department rdfs:label ""Quich Department"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?riverName
WHERE {
  ?river dbo:origin ?origin .
  ?origin dbo:locatedIn ?department .
  ?department rdfs:label ""Quich Department"" .
}",3.0025357216578434e-155,0.06666666666666667,True,True
2631,Which university attended by Donn Barber and education institute of Jack McGregor ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Donn_Barber> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Jack_McGregor> <http://dbpedia.org/ontology/education> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which university attended by Donn Barber and education institute of Jack McGregor ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university ?institute
WHERE {
  ?person dbo:almaMater ?university .
  FILTER(?person IN (dbo:Donn_Barber, dbo:Jack_McGregor))
  ?institute dbo:headquarters ?person .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university ?institute
WHERE {
  ?person dbo:almaMater ?university .
  FILTER(?person IN (dbo:Donn_Barber, dbo:Jack_McGregor))
  ?institute dbo:headquarters ?person .
}",2.7788812895482627e-155,0.05263157894736842,True,True
3453,Was Gerald Gibbs the cinematographer of X the unknown?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/X_the_Unknown> <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Gerald_Gibbs_(cinematographer)> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Gerald Gibbs the cinematographer of X the unknown?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:director Gerald Gibbs .
  ?x dbo:title ""X the unknown"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:director Gerald Gibbs .
  ?x dbo:title ""X the unknown"" .
}",2.2300068516948962e-155,0.046875,False,False
2758,"Where did the wrestler die who was billed in Norman, Oklahoma?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/billed> <http://dbpedia.org/resource/Norman,_Oklahoma> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Wrestler>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the wrestler die who was billed in Norman, Oklahoma?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?place WHERE {
  ?person dbo:birthDate ?birth.
  ?person dbo:deathDate ?death.
  ?person dbo:placeOfBirth ?birthplace.
  ?person dbo:billingLocation ""Norman, Oklahoma"".
  FILTER(?death != NULL)
  FILTER(?place != NULL)
  ?person dbo:deathPlace ?place.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?place WHERE {
  ?person dbo:birthDate ?birth.
  ?person dbo:deathDate ?death.
  ?person dbo:placeOfBirth ?birthplace.
  ?person dbo:billingLocation ""Norman, Oklahoma"".
  FILTER(?death != NULL)
  FILTER(?place != NULL)
  ?person dbo:deathPlace ?place.
}",2.09870814592606e-155,0.037037037037037035,False,False
4685,What is the club of Perianne Jones ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Perianne_Jones> <http://dbpedia.org/property/club> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the club of Perianne Jones ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?club
WHERE {
  ?person dbo:name ""Perianne Jones"" .
  ?person dbo:memberOf ?club .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?club
WHERE {
  ?person dbo:name ""Perianne Jones"" .
  ?person dbo:memberOf ?club .
}",2.494821638843469e-155,0.0625,True,True
4773,How many ingedients are required to make the Ragout Fin?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Ragout_fin> <http://dbpedia.org/ontology/ingredient> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many ingedients are required to make the Ragout Fin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?ingredient) AS ?count)
WHERE {
  ?recipe dbo:name ""Ragout Fin""@en .
  ?recipe dbo:ingredient ?ingredient .
}
GROUP BY ?recipe
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?ingredient) AS ?count)
WHERE {
  ?recipe dbo:name ""Ragout Fin""@en .
  ?recipe dbo:ingredient ?ingredient .
}
GROUP BY ?recipe",2.99393103522275e-155,0.0684931506849315,True,True
3738,What are the relatives of the rugby player one of whose relatives is Nick Williams?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Nick_Williams> . ?x <http://dbpedia.org/ontology/relative> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RugbyPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the relatives of the rugby player one of whose relatives is Nick Williams?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?relative
WHERE {
  ?rugbyPlayer dbo:relative ?relative .
  ?relative dbo:relative ""Nick Williams"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?relative
WHERE {
  ?rugbyPlayer dbo:relative ?relative .
  ?relative dbo:relative ""Nick Williams"" .
}",3.1137823863213763e-155,0.06944444444444445,True,True
666,Marika Gombitov makes songs in which languages?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Marika_Gombitová> . ?x <http://dbpedia.org/property/language> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Marika Gombitov makes songs in which languages?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?language
WHERE {
  ?artist dbo:name ""Marika Gombitov"" .
  ?artist dbo:genres ?genre .
  ?genre rdfs:label ?genreLabel .
  FILTER (regex(?genreLabel, ""music"", ""i""))
  ?genre dbp:language ?language .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?language
WHERE {
  ?artist dbo:name ""Marika Gombitov"" .
  ?artist dbo:genres ?genre .
  ?genre rdfs:label ?genreLabel .
  FILTER (regex(?genreLabel, ""music"", ""i""))
  ?genre dbp:language ?language .
}",3.433385853714441e-155,0.07692307692307693,True,True
214,Which parent organization of Get TV also owns the Galleria ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri. <http://dbpedia.org/resource/The_Galleria> <http://dbpedia.org/ontology/owner> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which parent organization of Get TV also owns the Galleria ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?parentOrganization
WHERE {
  ?organization dbo:wikiPageRedirects/dbp:name ""Get TV"" .
  ?organization dbo:parentOrganization ?parentOrganization .
  ?parentOrganization dbo:wikiPageRedirects/dbp:name ""Galleria"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?parentOrganization
WHERE {
  ?organization dbo:wikiPageRedirects/dbp:name ""Get TV"" .
  ?organization dbo:parentOrganization ?parentOrganization .
  ?parentOrganization dbo:wikiPageRedirects/dbp:name ""Galleria"" .
}",2.1745921280630745e-155,0.0410958904109589,True,True
4769,"Who currently operates the railway lines one of whose stockholder is Chicago, St Paul, Minneapolis and Omaha railway?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Chicago,_St._Paul,_Minneapolis_and_Omaha_Railway> . ?x <http://dbpedia.org/ontology/operatedBy> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RailwayLine>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who currently operates the railway lines one of whose stockholder is Chicago, St Paul, Minneapolis and Omaha railway?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?operator
WHERE {
  ?railway dbo:stockholder ?company .
  ?company rdfs:label ""Chicago, St Paul, Minneapolis and Omaha railway"" .
  ?railway dbo:operator ?operator .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?operator
WHERE {
  ?railway dbo:stockholder ?company .
  ?company rdfs:label ""Chicago, St Paul, Minneapolis and Omaha railway"" .
  ?railway dbo:operator ?operator .
}",2.8559767164037747e-155,0.06097560975609756,True,True
1418,Whose music composer is signed up with Sony Music Entertainment?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose music composer is signed up with Sony Music Entertainment?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?composer ?composerLabel
WHERE {
  ?composer dbo:musicComposer ?musicComposer .
  ?musicComposer dbp:recordLabel dbo:SonyMusicEntertainment .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?composer ?composerLabel
WHERE {
  ?composer dbo:musicComposer ?musicComposer .
  ?musicComposer dbp:recordLabel dbo:SonyMusicEntertainment .
}",3.699591675882789e-155,0.08450704225352113,True,True
4597,Which sports are played in the school which runs the Fr. Agnel Stadium?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fr._Agnel_Stadium> <http://dbpedia.org/property/operator> ?x . ?x <http://dbpedia.org/ontology/sport> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports are played in the school which runs the Fr. Agnel Stadium?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?stadium dbo:operator ?school .
  ?school rdfs:label ""Fr. Agnel Stadium""@en .
  ?school dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?stadium dbo:operator ?school .
  ?school rdfs:label ""Fr. Agnel Stadium""@en .
  ?school dbo:sports ?sport .
}",3.4534064447194983e-155,0.07894736842105263,True,True
65,Was Ganymede discovered by Galileo Galilei?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Ganymede_(moon)> <http://dbpedia.org/property/discoverer> <http://dbpedia.org/resource/Galileo_Galilei> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Ganymede discovered by Galileo Galilei?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x rdf:type dbo:Moon .
  ?x dbo:name ""Ganymede""^^xsd:string .
  ?x dbo:discoveredBy ?y .
  ?y rdf:type dbo:Person .
  ?y dbo:name ""Galileo Galilei""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x rdf:type dbo:Moon .
  ?x dbo:name ""Ganymede""^^xsd:string .
  ?x dbo:discoveredBy ?y .
  ?y rdf:type dbo:Person .
  ?y dbo:name ""Galileo Galilei""^^xsd:string .
}",2.135639655544596e-155,0.04411764705882353,True,True
3797,How many politicians are there from the city of Ganges?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Ganges> <http://dbpedia.org/property/city> ?x . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many politicians are there from the city of Ganges?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?politician) AS ?count)
WHERE {
  ?politician dbo:birthPlace dbp:Ganges .
  ?politician dbo:profession/rdfs:label ""Politician"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?politician) AS ?count)
WHERE {
  ?politician dbo:birthPlace dbp:Ganges .
  ?politician dbo:profession/rdfs:label ""Politician"" .
}",3.216579438360415e-155,0.06944444444444445,True,True
4275,Waddy wachtel did the music for what movies?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Waddy_Wachtel>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Waddy wachtel did the music for what movies?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Waddy Wachtel"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Waddy Wachtel"" .
}",2.4775553999024465e-155,0.06060606060606061,True,True
4210,Where common region are soylent and bannock sold?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Soylent_(drink)> <http://dbpedia.org/ontology/region> ?uri. <http://dbpedia.org/resource/Bannock_(food)> <http://dbpedia.org/ontology/region> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where common region are soylent and bannock sold?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?region
WHERE {
  ?product dbo:country ?country .
  ?product dbp:region ?region .
  FILTER (regex(?product, ""soylent"", ""i"") || regex(?product, ""bannock"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?region
WHERE {
  ?product dbo:country ?country .
  ?product dbp:region ?region .
  FILTER (regex(?product, ""soylent"", ""i"") || regex(?product, ""bannock"", ""i""))
}",3.1137823863213763e-155,0.08,True,True
2901,Which rivers start from the Provinces of Zambia?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/settlementType> <http://dbpedia.org/resource/Provinces_of_Zambia> . ?uri <http://dbpedia.org/ontology/sourceRegion> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which rivers start from the Provinces of Zambia?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river ?riverLabel
WHERE {
  ?river dbo:sourceLocation ?location .
  ?location dbo:country ?country .
  ?country dbo:name ""Zambia"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river ?riverLabel
WHERE {
  ?river dbo:sourceLocation ?location .
  ?location dbo:country ?country .
  ?country dbo:name ""Zambia"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.9851289841006984e-155,0.0641025641025641,False,False
582,Who are the people which ITV(TV network) has employed?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/ITV_(TV_network)>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the people which ITV(TV network) has employed?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:employedBy ?network .
  ?network dbo:name ""ITV"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:employedBy ?network .
  ?network dbo:name ""ITV"" .
}",3.1153609837288e-155,0.07575757575757576,True,True
4126,Is Greg Weeks the band member of Beyond the Sixth Seal?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Beyond_the_Sixth_Seal> <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Greg_Weeks> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Greg Weeks the band member of Beyond the Sixth Seal?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Greg Weeks"" .
  ?x dbo:memberOf <http://dbpedia.org/resource/Beyond_the_Sixth_Seal> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Greg Weeks"" .
  ?x dbo:memberOf <http://dbpedia.org/resource/Beyond_the_Sixth_Seal> .
}",2.4440718429993668e-155,0.06153846153846154,True,True
2488,Is Steve Nash the chairman of Vancouver Whitecaps FC?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Vancouver_Whitecaps_FC> <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Steve_Nash> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Steve Nash the chairman of Vancouver Whitecaps FC?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Steve Nash"" .
  ?x dbo:chairmanOf ?y .
  ?y dbo:name ""Vancouver Whitecaps FC"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Steve Nash"" .
  ?x dbo:chairmanOf ?y .
  ?y dbo:name ""Vancouver Whitecaps FC"" .
}",2.215756877004116e-155,0.045454545454545456,True,True
2550,Name the notable commanders of Army Group Oberrhein ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Army_Group_Oberrhein_(Germany)> <http://dbpedia.org/property/notableCommanders> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the notable commanders of Army Group Oberrhein ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?commander
WHERE {
  ?armyGroup dbo:commander ?commander .
  FILTER (regex(?armyGroup, ""Oberrhein"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?commander
WHERE {
  ?armyGroup dbo:commander ?commander .
  FILTER (regex(?armyGroup, ""Oberrhein"", ""i""))
}",3.0528361925813156e-155,0.07246376811594203,True,True
3998,How many movies have their music signed up with Sony Music Entertainment.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many movies have their music signed up with Sony Music Entertainment.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:genre ""Film"" .
  ?movie dbp:musicLabel ?musicLabel .
  ?musicLabel dbo:name ""Sony Music Entertainment"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:genre ""Film"" .
  ?movie dbp:musicLabel ?musicLabel .
  ?musicLabel dbo:name ""Sony Music Entertainment"" .
}",2.4123225276763925e-155,0.04938271604938271,True,True
2776,Count all the books written by an author buried in the Convent of Barefoot Trinitarians?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Convent_of_the_Barefoot_Trinitarians> . ?uri <http://dbpedia.org/ontology/author> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all the books written by an author buried in the Convent of Barefoot Trinitarians?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?author ?book
WHERE {
  ?author dbo:deathPlace ""Convent of Barefoot Trinitarians"" .
  ?author dbo:birthPlace ?birthPlace .
  ?author dbo:author ?book .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?author ?book
WHERE {
  ?author dbo:deathPlace ""Convent of Barefoot Trinitarians"" .
  ?author dbo:birthPlace ?birthPlace .
  ?author dbo:author ?book .
}",2.371081855250832e-155,0.05063291139240506,True,True
951,How many people are there whose children died in Indiana?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Indiana> . ?uri <http://dbpedia.org/ontology/child> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people are there whose children died in Indiana?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?personCount
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:child ?child .
  ?child dbo:deathPlace ""Indiana"" .
  FILTER (BOUND(?person))
}
GROUP BY ?person
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?personCount
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:child ?child .
  ?child dbo:deathPlace ""Indiana"" .
  FILTER (BOUND(?person))
}
GROUP BY ?person",2.4708136900731027e-155,0.05128205128205128,True,True
3232,How many people have been canonized by Pope Benedict XVI?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Pope_Benedict_XVI>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people have been canonized by Pope Benedict XVI?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?person dbo:canonizedBy ?pope .
  ?pope dbo:name ""Benedict XVI""^^xsd:string .
  FILTER (BOUND(?pope))
}
GROUP BY ?pope
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?person dbo:canonizedBy ?pope .
  ?pope dbo:name ""Benedict XVI""^^xsd:string .
  FILTER (BOUND(?pope))
}
GROUP BY ?pope",8.642045500889408e-232,0.0547945205479452,True,True
1430,What is the birth place of the children of Miguel Garca Granados?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Miguel_García_Granados> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the birth place of the children of Miguel Garca Granados?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?childBirthPlace
WHERE {
  ?child dbo:birthDate ?childBirthDate .
  ?child dbo:birthPlace ?childBirthPlace .
  ?person dbo:name ""Miguel García Granados""^^xsd:string .
  ?person dbo:children ?child .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?childBirthPlace
WHERE {
  ?child dbo:birthDate ?childBirthDate .
  ?child dbo:birthPlace ?childBirthPlace .
  ?person dbo:name ""Miguel García Granados""^^xsd:string .
  ?person dbo:children ?child .
}",2.968021523431445e-155,0.06578947368421052,True,True
2802,Players from how many teams have participated in the National Hockey League?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/National_Hockey_League> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Players from how many teams have participated in the National Hockey League?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?teamCount
WHERE {
  ?team dbo:sportsLeague dbp:National_Hockey_League .
  ?team dbo:player ?player .
  GROUP BY ?team
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?teamCount
WHERE {
  ?team dbo:sportsLeague dbp:National_Hockey_League .
  ?team dbo:player ?player .
  GROUP BY ?team
}",2.533776972251024e-155,0.05333333333333334,False,False
2432,What is the television show with presenter as Ryan Seacrest and theme music composer as Julian Gingell?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Julian_Gingell>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the television show with presenter as Ryan Seacrest and theme music composer as Julian Gingell?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:presenter ?presenter .
  ?presenter dbo:name ""Ryan Seacrest"" .
  ?show dbo:themeMusicComposer ?composer .
  ?composer dbo:name ""Julian Gingell"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:presenter ?presenter .
  ?presenter dbo:name ""Ryan Seacrest"" .
  ?show dbo:themeMusicComposer ?composer .
  ?composer dbo:name ""Julian Gingell"" .
}",8.296646461826084e-232,0.037037037037037035,True,True
2470,How many organizations work for Environmentalism?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many organizations work for Environmentalism?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?organization)) AS ?count
WHERE {
  ?organization dbo:wikiPageRedirects* dbo:Environmentalism .
  ?organization dbo:type dbo:Organization .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?organization)) AS ?count
WHERE {
  ?organization dbo:wikiPageRedirects* dbo:Environmentalism .
  ?organization dbo:type dbo:Organization .
}",2.494821638843469e-155,0.06060606060606061,False,False
907,Which county of Tremont Avenue is also the birht place of Ron Galotti?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tremont_Avenue> <http://dbpedia.org/property/counties> ?uri. <http://dbpedia.org/resource/Ron_Galotti> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which county of Tremont Avenue is also the birht place of Ron Galotti?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?county
WHERE {
  ?county dbo:name ""Tremont Avenue"" .
  ?county dbp:birthPlace ?person .
  ?person dbo:name ""Ron Galotti"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?county
WHERE {
  ?county dbo:name ""Tremont Avenue"" .
  ?county dbp:birthPlace ?person .
  ?person dbo:name ""Ron Galotti"" .
}",2.7130972940000843e-155,0.05263157894736842,True,True
1682,List all binomial authorities of the insects whose one of the binomial authority is douard Mntries?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/binomialAuthority> <http://dbpedia.org/resource/Édouard_Ménétries> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all binomial authorities of the insects whose one of the binomial authority is douard Mntries?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?insect ?authority
WHERE {
  ?insect dbo:binomialAuthority ?authority .
  FILTER ( ?authority = <http://dbpedia.org/resource/Douard_Mntries> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?insect ?authority
WHERE {
  ?insect dbo:binomialAuthority ?authority .
  FILTER ( ?authority = <http://dbpedia.org/resource/Douard_Mntries> )
}",3.0025357216578434e-155,0.07894736842105263,True,True
2307,Who produces the tv series which made Scott Haran famous?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Scott_Haran> <http://dbpedia.org/ontology/knownFor> ?x . ?x <http://dbpedia.org/ontology/producer> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who produces the tv series which made Scott Haran famous?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?producer
WHERE {
  ?person dbo:name ""Scott Haran"" .
  ?person dbo:knownFor ?tvSeries .
  ?tvSeries dbo:producer ?producer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?producer
WHERE {
  ?person dbo:name ""Scott Haran"" .
  ?person dbo:knownFor ?tvSeries .
  ?tvSeries dbo:producer ?producer .
}",3.0943809285865547e-155,0.0684931506849315,True,True
3003,Who are the key people of FWD.us?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/FWD.us> <http://dbpedia.org/property/keyPeople> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the key people of FWD.us?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:memberOf ?organization .
  ?organization dbo:name ""FWD.us"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:memberOf ?organization .
  ?organization dbo:name ""FWD.us"" .
}",3.159243630213636e-155,0.07936507936507936,True,True
3083,What is the hometown of John Speraw ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Speraw> <http://dbpedia.org/property/hometown> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the hometown of John Speraw ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hometown
WHERE {
  ?person dbo:name ""John Speraw"" .
  ?person dbo:birthPlace ?hometown .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hometown
WHERE {
  ?person dbo:name ""John Speraw"" .
  ?person dbo:birthPlace ?hometown .
}",2.494821638843469e-155,0.0625,True,True
3955,Was the body of Elsie Paroubek discovered in Chicago?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Elsie_Paroubek> <http://dbpedia.org/ontology/bodyDiscovered> <http://dbpedia.org/resource/Chicago> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was the body of Elsie Paroubek discovered in Chicago?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:deathPlace ""Chicago"" .
  ?x rdf:type dbo:Person .
  FILTER (str(?x) = ""http://dbpedia.org/resource/Elsie_Paroubek"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:deathPlace ""Chicago"" .
  ?x rdf:type dbo:Person .
  FILTER (str(?x) = ""http://dbpedia.org/resource/Elsie_Paroubek"")
}",2.215756877004116e-155,0.043478260869565216,True,True
4573,Which religions are followed by people in England?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/England> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which religions are followed by people in England?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:nationality ""England""@en .
  ?person dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:nationality ""England""@en .
  ?person dbo:religion ?religion .
}",3.2833699258334827e-155,0.07246376811594203,True,True
4820,What company is the one which wrote the google web toolkit and PlayN?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri. <http://dbpedia.org/resource/PlayN> <http://dbpedia.org/ontology/author> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What company is the one which wrote the google web toolkit and PlayN?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?company
WHERE {
  ?company dbo:wikiPageRedirects ?redirect
  ?redirect dbo:wikiPageCaption ""Google Web Toolkit"" .
  ?redirect dbo:creator ?creator
  ?creator dbo:wikiPageRedirects ?redirect2
  ?redirect2 dbo:wikiPageCaption ""PlayN"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?company
WHERE {
  ?company dbo:wikiPageRedirects ?redirect
  ?redirect dbo:wikiPageCaption ""Google Web Toolkit"" .
  ?redirect dbo:creator ?creator
  ?creator dbo:wikiPageRedirects ?redirect2
  ?redirect2 dbo:wikiPageCaption ""PlayN"" .
}",2.8039101108246434e-155,0.06493506493506493,False,False
726,Name the city served by Juhu Aerodrome?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juhu_Aerodrome> <http://dbpedia.org/property/cityServed> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the city served by Juhu Aerodrome?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?aerodrome dbo:location ?city .
  FILTER (regex(?aerodrome, ""Juhu Aerodrome"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?aerodrome dbo:location ?city .
  FILTER (regex(?aerodrome, ""Juhu Aerodrome"", ""i""))
}",2.5124539841526692e-155,0.06153846153846154,True,True
3085,Which awards has been given to both michel hazanavicius and geoffrey rush?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michel_Hazanavicius> <http://dbpedia.org/property/awards> ?uri. <http://dbpedia.org/resource/Geoffrey_Rush> <http://dbpedia.org/property/awards> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which awards has been given to both michel hazanavicius and geoffrey rush?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?person a dbo:Person ;
    dbo:name ?name .
  FILTER (regex(?name, ""Michel Hazanavicius"", ""i"") || regex(?name, ""Geoffrey Rush"", ""i"")) .
  ?person dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?person a dbo:Person ;
    dbo:name ?name .
  FILTER (regex(?name, ""Michel Hazanavicius"", ""i"") || regex(?name, ""Geoffrey Rush"", ""i"")) .
  ?person dbo:award ?award .
}",3.194645317303101e-155,0.07058823529411765,True,True
1412,How many artists' works are in Musee d'Orsay?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/museum> <http://dbpedia.org/resource/Musée_d'Orsay> . ?x <http://dbpedia.org/property/artist> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many artists' works are in Musee d'Orsay?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?artist) AS ?count)
WHERE {
  ?work dbo:artist ?artist .
  ?work dbp:location dbo:Musee_dOrsay .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?artist) AS ?count)
WHERE {
  ?work dbo:artist ?artist .
  ?work dbp:location dbo:Musee_dOrsay .
}",2.5502845355614067e-155,0.05333333333333334,True,True
4128,Name the television show voiced by April Stewart and Eliza Schneider?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/April_Stewart> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Eliza_Schneider> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the television show voiced by April Stewart and Eliza Schneider?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?showLabel
WHERE {
  ?show dbo:voiceActor ?actor .
  ?actor dbo:name ""April Stewart"" .
  UNION
  ?show dbo:voiceActor ?actor .
  ?actor dbo:name ""Eliza Schneider"" .
  ?show rdfs:label ?showLabel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?showLabel
WHERE {
  ?show dbo:voiceActor ?actor .
  ?actor dbo:name ""April Stewart"" .
  UNION
  ?show dbo:voiceActor ?actor .
  ?actor dbo:name ""Eliza Schneider"" .
  ?show rdfs:label ?showLabel .
}",2.8866879095378115e-155,0.06493506493506493,False,False
2823,Which adminstrative region of Lawrence F. Cafero is also the resting place of Samuel Keeler ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lawrence_F._Cafero> <http://dbpedia.org/ontology/region> ?uri. <http://dbpedia.org/resource/Samuel_Keeler> <http://dbpedia.org/ontology/restingPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which adminstrative region of Lawrence F. Cafero is also the resting place of Samuel Keeler ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?region
WHERE {
  ?person dbo:birthPlace ?region .
  FILTER ( ?person = dbo:Lawrence_F_Cafero )
  ?person dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:locatedIn ?region .
  ?person rdf:type dbo:Politician .
  ?person dbo:name ""Samuel Keeler"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?region
WHERE {
  ?person dbo:birthPlace ?region .
  FILTER ( ?person = dbo:Lawrence_F_Cafero )
  ?person dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:locatedIn ?region .
  ?person rdf:type dbo:Politician .
  ?person dbo:name ""Samuel Keeler"" .
}",2.4900858824700132e-155,0.04597701149425287,True,True
3219,"Which ceremonial County of the East Tilbury is also the local authority of the Trinity School, Brentwood?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/East_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?uri. <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which ceremonial County of the East Tilbury is also the local authority of the Trinity School, Brentwood?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?county
WHERE {
  ?county dbo:ceremonialCounty ?eastTilbury .
  ?eastTilbury dbo:localAuthority ?localAuthority .
  ?localAuthority dbo:school ?trinitySchool .
  ?trinitySchool rdfs:label ""Trinity School, Brentwood"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?county
WHERE {
  ?county dbo:ceremonialCounty ?eastTilbury .
  ?eastTilbury dbo:localAuthority ?localAuthority .
  ?localAuthority dbo:school ?trinitySchool .
  ?trinitySchool rdfs:label ""Trinity School, Brentwood"" .
}",2.5944303248170386e-155,0.05,True,True
4970,Name the military conflict whose commander was Colin Powell and took place in israel ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Colin_Powell> . ?uri <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Israel>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the military conflict whose commander was Colin Powell and took place in israel ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?conflict
WHERE {
  ?person dbo:birthPlace ""Colin Powell"" .
  ?person dbo:occupation ""Military officer"" .
  ?person dbo:militaryConflict ?conflict .
  ?conflict dbo:location ""Israel"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?conflict
WHERE {
  ?person dbo:birthPlace ""Colin Powell"" .
  ?person dbo:occupation ""Military officer"" .
  ?person dbo:militaryConflict ?conflict .
  ?conflict dbo:location ""Israel"" .
}",8.412065649527267e-232,0.0379746835443038,True,True
1566,In which fields are both Paul Demiville and Sylvain levi experts?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paul_Demiéville> <http://dbpedia.org/property/fields> ?uri. <http://dbpedia.org/resource/Sylvain_Lévi> <http://dbpedia.org/property/fields> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which fields are both Paul Demiville and Sylvain levi experts?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?field
WHERE {
  ?person dbo:occupation ?field .
  FILTER (?person IN (dbo:Paul_Demiville, dbo:Sylvain_Levi))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?field
WHERE {
  ?person dbo:occupation ?field .
  FILTER (?person IN (dbo:Paul_Demiville, dbo:Sylvain_Levi))
}",3.195205633963664e-155,0.0821917808219178,True,True
603,"Give me all commanders which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_Fort_Stephenson> <http://dbpedia.org/ontology/commander> ?uri. <http://dbpedia.org/resource/Battle_of_the_Thames> <http://dbpedia.org/ontology/commander> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all commanders which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?commander
WHERE {
  ?commander dbo:birthPlace ?birthPlace .
  ?commander dbo:deathPlace ?deathPlace .
  ?commander dbo:involvedIn ?battle1 .
  ?battle1 dbo:name ""Battle of Fort Stephenson""^^xsd:string .
  ?commander dbo:involvedIn ?battle2 .
  ?battle2 dbo:name ""Battle of the Thames""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?commander
WHERE {
  ?commander dbo:birthPlace ?birthPlace .
  ?commander dbo:deathPlace ?deathPlace .
  ?commander dbo:involvedIn ?battle1 .
  ?battle1 dbo:name ""Battle of Fort Stephenson""^^xsd:string .
  ?commander dbo:involvedIn ?battle2 .
  ?battle2 dbo:name ""Battle of the Thames""^^xsd:string .
}",2.9361994042171736e-155,0.07058823529411765,True,True
171,Is Queen Latifah associated with Afrika Baby Bam?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Afrika_Baby_Bam> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Queen_Latifah> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Queen Latifah associated with Afrika Baby Bam?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Queen Latifah""^^xsd:string .
  ?x dbp:associatedWith ?y .
  ?y dbo:name ""Afrika Baby Bam""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Queen Latifah""^^xsd:string .
  ?x dbp:associatedWith ?y .
  ?y dbo:name ""Afrika Baby Bam""^^xsd:string .
}",2.2300068516948962e-155,0.045454545454545456,True,True
3309,Who battled under commander Egushawa in a conflict?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Egushawa> . ?x <http://dbpedia.org/property/combatant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who battled under commander Egushawa in a conflict?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:commander ?commander .
  ?commander dbo:name ""Egushawa"" .
  ?subject dbo:involvedInConflict ?conflict .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:commander ?commander .
  ?commander dbo:name ""Egushawa"" .
  ?subject dbo:involvedInConflict ?conflict .
}",3.195205633963664e-155,0.07142857142857142,True,True
3662,"Which companies make cars with a front engine, rear wheel drive layout?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/Front-engine,_rear-wheel-drive_layout> . ?x <http://dbpedia.org/ontology/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which companies make cars with a front engine, rear wheel drive layout?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?company ?carModel
WHERE {
  ?company dbo:companyType ""Automotive"" .
  ?carModel dbo:manufacturer ?company .
  ?carModel dbo:engineLayout ""Front engine, rear wheel drive"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?company ?carModel
WHERE {
  ?company dbo:companyType ""Automotive"" .
  ?carModel dbo:manufacturer ?company .
  ?carModel dbo:engineLayout ""Front engine, rear wheel drive"" .
}",3.0202505652128895e-155,0.06666666666666667,True,True
356,Where do the sister stations of Al Khaleejiya 100.9 play?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterStations> <http://dbpedia.org/resource/Al_Khaleejiya_100.9> . ?x <http://dbpedia.org/property/location> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where do the sister stations of Al Khaleejiya 100.9 play?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?station ?location
WHERE {
  ?station dbo:name ""Al Khaleejiya 100.9"" .
  ?station dbo:sisterStation ?sisterStation .
  ?sisterStation dbo:location ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?station ?location
WHERE {
  ?station dbo:name ""Al Khaleejiya 100.9"" .
  ?station dbo:sisterStation ?sisterStation .
  ?sisterStation dbo:location ?location .
}",3.4945213227383114e-155,0.08108108108108109,True,True
1225,The software with Mac OS as operating system and C++ as programming language are [answer].,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Apple_Productivity_Experience_Group> <http://dbpedia.org/ontology/product> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: The software with Mac OS as operating system and C++ as programming language are [answer].
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?software
WHERE {
  ?software rdf:type dbo:Software .
  ?software dbo:operatingSystem  <http://dbpedia.org/resource/Mac_OS> .
  ?software dbo:programmingLanguage  <http://dbpedia.org/resource/C%2B%2B> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?software
WHERE {
  ?software rdf:type dbo:Software .
  ?software dbo:operatingSystem  <http://dbpedia.org/resource/Mac_OS> .
  ?software dbo:programmingLanguage  <http://dbpedia.org/resource/C%2B%2B> .
}",2.868751113594075e-155,0.06756756756756757,True,True
1645,Which license provider of MSX basic is also the designer of Language Integrated Query?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which license provider of MSX basic is also the designer of Language Integrated Query?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?licenseProvider ?designer
WHERE {
  ?licenseProvider dbo:licenseProviderOf ?software .
  ?software dbo:name ""MSX Basic""^^xsd:string .
  ?designer dbo:designerOf ?software .
  ?designer dbo:name ""Language Integrated Query""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?licenseProvider ?designer
WHERE {
  ?licenseProvider dbo:licenseProviderOf ?software .
  ?software dbo:name ""MSX Basic""^^xsd:string .
  ?designer dbo:designerOf ?software .
  ?designer dbo:name ""Language Integrated Query""^^xsd:string .
}",2.0523206950207848e-155,0.038461538461538464,True,True
3333,In which city are the schools whose district is Mumbai Suburban?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/district> <http://dbpedia.org/resource/Mumbai_Suburban_district> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which city are the schools whose district is Mumbai Suburban?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?school ?schoolCity
WHERE {
  ?school dbo:district ""Mumbai Suburban"" .
  ?school dbo:location ?schoolCity .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?school ?schoolCity
WHERE {
  ?school dbo:district ""Mumbai Suburban"" .
  ?school dbo:location ?schoolCity .
}",3.1137823863213763e-155,0.06756756756756757,True,True
1204,What is the place of death of the royalties one of whose parents was Adam Ludwik Czartoryski?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Adam_Ludwik_Czartoryski> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the place of death of the royalties one of whose parents was Adam Ludwik Czartoryski?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?royalty ?royaltyPlaceOfDeath
WHERE {
  ?royalty dbo:father ?czartoryski .
  ?czartoryski dbo:name ""Adam Ludwik Czartoryski"" .
  ?royalty dbo:placeOfDeath ?royaltyPlaceOfDeath .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?royalty ?royaltyPlaceOfDeath
WHERE {
  ?royalty dbo:father ?czartoryski .
  ?czartoryski dbo:name ""Adam Ludwik Czartoryski"" .
  ?royalty dbo:placeOfDeath ?royaltyPlaceOfDeath .
}",2.91841165985534e-155,0.06329113924050633,True,True
3638,How many developers make software for Unix like operating systems?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Unix-like> . ?x <http://dbpedia.org/ontology/developer> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many developers make software for Unix like operating systems?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?developer) AS ?count)
WHERE {
  ?developer dbo:occupation ""Software Developer"" .
  ?developer dbo:worksFor ?company .
  ?company dbo:product ?product .
  ?product dbo:operatingSystem ""Unix"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?developer) AS ?count)
WHERE {
  ?developer dbo:occupation ""Software Developer"" .
  ?developer dbo:worksFor ?company .
  ?company dbo:product ?product .
  ?product dbo:operatingSystem ""Unix"" .
}",3.0382827129023445e-155,0.06493506493506493,True,True
3644,"List the employments of people who died in Tampa, Florida.",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the employments of people who died in Tampa, Florida.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?person ?employment
WHERE {
  ?person dbo:deathPlace dbp:Tampa.
  ?person dbo:occupation ?employment.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?person ?employment
WHERE {
  ?person dbo:deathPlace dbp:Tampa.
  ?person dbo:occupation ?employment.
}",3.0528361925813156e-155,0.07042253521126761,True,True
3157,"Who was on the first team in the GPs that were held at Watkins Glen, NY?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Watkins_Glen,_New_York> . ?x <http://dbpedia.org/property/firstTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was on the first team in the GPs that were held at Watkins Glen, NY?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?driver
WHERE {
  ?gp dbo:location <http://dbpedia.org/resource/Watkins_Glen_International> .
  ?gp dbo:firstTeam ?driver .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?driver
WHERE {
  ?gp dbo:location <http://dbpedia.org/resource/Watkins_Glen_International> .
  ?gp dbo:firstTeam ?driver .
}",3.0566417519593477e-155,0.06578947368421052,True,True
1995,Which company produced the car which was a new version of Daewoo's Tico?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Daewoo_Tico> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which company produced the car which was a new version of Daewoo's Tico?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?car dbo:model ""Tico"" .
  ?car dbo:manufacturer ?company .
  FILTER (regex(?car, ""Daewoo"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?car dbo:model ""Tico"" .
  ?car dbo:manufacturer ?company .
  FILTER (regex(?car, ""Daewoo"", ""i""))
}",3.0382827129023445e-155,0.0641025641025641,True,True
3021,List the things for which people of New Orleans are famous for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/New_Orleans> . ?x <http://dbpedia.org/property/knownFor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the things for which people of New Orleans are famous for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:birthPlace dbp:New_Orleans .
  ?person dbo:knownFor ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:birthPlace dbp:New_Orleans .
  ?person dbo:knownFor ?thing .
}",3.1335534263807668e-155,0.0684931506849315,True,True
4088,What is the field of interest of the advisor of Henri Maspero ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henri_Maspero> <http://dbpedia.org/ontology/academicAdvisor> ?x . ?x <http://dbpedia.org/property/fields> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the field of interest of the advisor of Henri Maspero ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?advisorField
WHERE {
  ?advisor dbo:advisorOf ?person .
  ?person dbo:name ""Henri Maspero"" .
  ?advisor dbo:fieldOfInterest ?advisorField .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?advisorField
WHERE {
  ?advisor dbo:advisorOf ?person .
  ?person dbo:name ""Henri Maspero"" .
  ?advisor dbo:fieldOfInterest ?advisorField .
}",3.0382827129023445e-155,0.0684931506849315,True,True
869,What is the political party of the Bengalis?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/ethnicity> <http://dbpedia.org/resource/Bengalis> . ?x <http://dbpedia.org/ontology/party> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the political party of the Bengalis?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?politicalParty
WHERE {
  ?bengali dbo:nationality ""Bengali"" .
  ?bengali dbo:politicalParty ?politicalParty .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?politicalParty
WHERE {
  ?bengali dbo:nationality ""Bengali"" .
  ?bengali dbo:politicalParty ?politicalParty .
}",3.3065753972821387e-155,0.07692307692307693,True,True
4283,Count the number of ingredient of the foods which have one of the ingredient is Pork ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Pork> . ?x <http://dbpedia.org/ontology/ingredient> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of ingredient of the foods which have one of the ingredient is Pork ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?ingredient) AS ?count)
WHERE {
  ?food dbo:ingredient ?ingredient .
  FILTER (regex(?ingredient, ""Pork"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?ingredient) AS ?count)
WHERE {
  ?food dbo:ingredient ?ingredient .
  FILTER (regex(?ingredient, ""Pork"", ""i""))
}",2.4123225276763925e-155,0.0641025641025641,True,True
4054,Who are the associated musical artist of Carolyn Dennis?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carolyn_Dennis> <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the associated musical artist of Carolyn Dennis?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:spouse Carolyn Dennis .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:spouse Carolyn Dennis .
}",3.181891987622405e-155,0.07936507936507936,False,False
664,List the movies whose music composer is often associated with Jon and Vangelis.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Jon_and_Vangelis> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the movies whose music composer is often associated with Jon and Vangelis.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:musicComposer ?composer .
  ?composer dbo:birthPlace ""Greece"" .
  ?composer dbo:name ?name .
  FILTER (regex(?name, ""Jon"", ""i"") || regex(?name, ""Vangelis"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:musicComposer ?composer .
  ?composer dbo:birthPlace ""Greece"" .
  ?composer dbo:name ?name .
  FILTER (regex(?name, ""Jon"", ""i"") || regex(?name, ""Vangelis"", ""i""))
}",2.9024197612372904e-155,0.05952380952380952,True,True
1632,What is the former team of the Athens borned basketball players?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Athens> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the former team of the Athens borned basketball players?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?player ?team
WHERE {
  ?player dbo:birthPlace ""Athens"" .
  ?player dbo:profession ""Basketball player"" .
  ?player dbo:formerTeam ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?player ?team
WHERE {
  ?player dbo:birthPlace ""Athens"" .
  ?player dbo:profession ""Basketball player"" .
  ?player dbo:formerTeam ?team .
}",3.0382827129023445e-155,0.06666666666666667,True,True
3929,In which areas can I find wine made of Vitis vinifera grapes?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Vitis_vinifera> . ?x <http://dbpedia.org/ontology/wineRegion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Grape>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which areas can I find wine made of Vitis vinifera grapes?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?area
WHERE {
  ?wine dbo:grapeVariety ""Vitis vinifera"" .
  ?wine dbo:producedIn ?area .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?area
WHERE {
  ?wine dbo:grapeVariety ""Vitis vinifera"" .
  ?wine dbo:producedIn ?area .
}",3.1137823863213763e-155,0.06578947368421052,True,True
1851,How many had their debut team coached by Chip Kelly?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Chip_Kelly> . ?uri <http://dbpedia.org/ontology/debutTeam> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many had their debut team coached by Chip Kelly?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?player) AS ?count)
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:debutTeam ?debutTeam .
  ?debutTeam dbo:coach ?coach .
  ?coach dbo:name ""Chip Kelly"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?player) AS ?count)
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:debutTeam ?debutTeam .
  ?debutTeam dbo:coach ?coach .
  ?coach dbo:name ""Chip Kelly"" .
}",2.968021523431445e-155,0.06172839506172839,True,True
3871,How many characters are there in The Office?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/The_Office_(U.S._TV_series)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many characters are there in The Office?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?character) AS ?count)
WHERE {
  ?character dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/The_Office_(American_TV_series)> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?character) AS ?count)
WHERE {
  ?character dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/The_Office_(American_TV_series)> .
}",8.319100378795605e-232,0.04411764705882353,True,True
2075,Count the number of religions followed by BJP members.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/party> <http://dbpedia.org/resource/Bharatiya_Janata_Party> . ?x <http://dbpedia.org/ontology/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of religions followed by BJP members.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?person dbo:memberOf <http://en.wikipedia.org/wiki/Bharatiya_Janata_Party> .
  ?person dbo:religion ?religion .
}
GROUP BY ?religion
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?person dbo:memberOf <http://en.wikipedia.org/wiki/Bharatiya_Janata_Party> .
  ?person dbo:religion ?religion .
}
GROUP BY ?religion",3.1537059338519422e-155,0.06944444444444445,True,True
1905,Some movies whose screenplay is done by american born people?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/screenplay> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Some movies whose screenplay is done by american born people?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?movie ?screenwriter
WHERE {
  ?movie dbo:director ?screenwriter .
  ?screenwriter dbo:birthPlace ""United States"" .
  FILTER(?screenwriter != dbo:Unknown)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?movie ?screenwriter
WHERE {
  ?movie dbo:director ?screenwriter .
  ?screenwriter dbo:birthPlace ""United States"" .
  FILTER(?screenwriter != dbo:Unknown)
}",3.1961673212459418e-155,0.07894736842105263,True,True
4399,Count the number of members of the organization which have Austria as one of the member ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/membership> <http://dbpedia.org/resource/Austria> . ?x <http://dbpedia.org/property/membership> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of members of the organization which have Austria as one of the member ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organization ?count
WHERE {
  ?organization dbo:member ?member .
  ?member dbo:country ?country .
  ?country rdfs:label ""Austria"" .
  GROUP BY ?organization
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organization ?count
WHERE {
  ?organization dbo:member ?member .
  ?member dbo:country ?country .
  ?country rdfs:label ""Austria"" .
  GROUP BY ?organization
}",2.384592839964215e-155,0.06578947368421052,False,False
2293,Who is the headcoach of 2008-09 Marquette Golden Eagles men's basketball team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2008–09_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/property/headcoach> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the headcoach of 2008-09 Marquette Golden Eagles men's basketball team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?coach
WHERE {
  ?team dbo:headCoach ?coach .
  ?team rdfs:label ""2008-09 Marquette Golden Eagles men's basketball team"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?coach
WHERE {
  ?team dbo:headCoach ?coach .
  ?team rdfs:label ""2008-09 Marquette Golden Eagles men's basketball team"" .
}",2.294894159058245e-155,0.056338028169014086,True,True
1275,Which venue of Indy PopCon is also the death palce of Louis LeCocq?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indy_PopCon> <http://dbpedia.org/property/venue> ?uri. <http://dbpedia.org/resource/Louis_LeCocq> <http://dbpedia.org/property/placeOfDeath> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which venue of Indy PopCon is also the death palce of Louis LeCocq?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?venue
WHERE {
  ?venue dbo:location dbp:Indianapolis .
  ?venue dbo:name ?name .
  ?venue dbo:deathPlace ?deathPlace .
  FILTER ( ?deathPlace = <http://dbpedia.org/resource/Louis_LeCocq> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?venue
WHERE {
  ?venue dbo:location dbp:Indianapolis .
  ?venue dbo:name ?name .
  ?venue dbo:deathPlace ?deathPlace .
  FILTER ( ?deathPlace = <http://dbpedia.org/resource/Louis_LeCocq> )
}",2.8039101108246434e-155,0.0625,True,True
4480,Name the fictional character whose species is American Pekin duck and has relatives named Ludwig Von Drake?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/American_Pekin_duck> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ludwig_Von_Drake>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the fictional character whose species is American Pekin duck and has relatives named Ludwig Von Drake?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?character
WHERE {
  ?character dbo:species dbp:American_Pekin_duck .
  ?character dbo:relative ?relative .
  ?relative dbo:name ""Ludwig Von Drake"" .
  FILTER (STR(?character) != ""http://dbpedia.org/resource/Ludwig_von_Drake"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?character
WHERE {
  ?character dbo:species dbp:American_Pekin_duck .
  ?character dbo:relative ?relative .
  ?relative dbo:name ""Ludwig Von Drake"" .
  FILTER (STR(?character) != ""http://dbpedia.org/resource/Ludwig_von_Drake"")
}",8.296646461826084e-232,0.03571428571428571,True,True
871,Was Writings and Drawings illustrated by Bob Dylan?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Writings_and_Drawings> <http://dbpedia.org/property/illustrator> <http://dbpedia.org/resource/Bob_Dylan> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Writings and Drawings illustrated by Bob Dylan?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:title ""Writings and Drawings"" .
  ?x dbo:illustrator ?y .
  ?y rdfs:label ""Bob Dylan"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:title ""Writings and Drawings"" .
  ?x dbo:illustrator ?y .
  ?y rdfs:label ""Bob Dylan"" .
}",2.1880577381778143e-155,0.04411764705882353,True,True
711,Which party does Iqbal Singh and B Shiva Rao currently belong to?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Iqbal_Singh_(politician)> <http://dbpedia.org/property/party> ?uri. <http://dbpedia.org/resource/B._Shiva_Rao> <http://dbpedia.org/property/party> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which party does Iqbal Singh and B Shiva Rao currently belong to?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?party
WHERE {
  ?person a dbo:Person ;
    dbp:memberOf ?party .
  FILTER (regex(?person, ""Iqbal Singh"", ""i"") || regex(?person, ""B Shiva Rao"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?party
WHERE {
  ?person a dbo:Person ;
    dbp:memberOf ?party .
  FILTER (regex(?person, ""Iqbal Singh"", ""i"") || regex(?person, ""B Shiva Rao"", ""i""))
}",3.0025357216578434e-155,0.07407407407407407,True,True
3266,Name the scientist whose supervisor also supervised Mary Ainsworth?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Mary_Ainsworth> . ?uri <http://dbpedia.org/property/doctoralAdvisor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the scientist whose supervisor also supervised Mary Ainsworth?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:supervisor ?supervisor .
  ?supervisor dbo:supervisor Mary Ainsworth .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:supervisor ?supervisor .
  ?supervisor dbo:supervisor Mary Ainsworth .
}",3.2383880054191053e-155,0.07352941176470588,False,False
1127,Who is the common prime minster of William Deaner and Mark Latham?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Deane> <http://dbpedia.org/ontology/primeMinister> ?uri. <http://dbpedia.org/resource/Mark_Latham> <http://dbpedia.org/property/primeminister> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the common prime minster of William Deaner and Mark Latham?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?primeMinister
WHERE {
  ?person dbo:primeMinister ?primeMinister .
  FILTER ( ?person IN ( dbo:William_Deaner , dbo:Mark_Latham ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?primeMinister
WHERE {
  ?person dbo:primeMinister ?primeMinister .
  FILTER ( ?person IN ( dbo:William_Deaner , dbo:Mark_Latham ) )
}",2.7788812895482627e-155,0.05333333333333334,True,True
122,"Count all those who've played for the youth club which owns the Rosario, Santa Fe stadium.",google/gemma-2-9b-it,"SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Rosario,_Santa_Fe> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all those who've played for the youth club which owns the Rosario, Santa Fe stadium.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person
WHERE {
  ?person dbo:playsFor ?club .
  ?club dbo:stadium dbr:Rosario_Central_Stadium .
  FILTER (regex(?club, ""Rosario Central Youth"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person
WHERE {
  ?person dbo:playsFor ?club .
  ?club dbo:stadium dbr:Rosario_Central_Stadium .
  FILTER (regex(?club, ""Rosario Central Youth"", ""i""))
}",2.4957986594494052e-155,0.06172839506172839,True,True
1367,Name a person who was educated in Humes High School?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/education> <http://dbpedia.org/resource/Humes_High_School>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name a person who was educated in Humes High School?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:education ?school .
  ?school rdfs:label ""Humes High School"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:education ?school .
  ?school rdfs:label ""Humes High School"" .
}",8.147480343967206e-232,0.04411764705882353,True,True
4273,What is the parent company of PrivateCore?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/PrivateCore> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the parent company of PrivateCore?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parentCompany
WHERE {
  ?company dbo:name ""PrivateCore"" .
  ?company dbo:parentCompany ?parentCompany .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parentCompany
WHERE {
  ?company dbo:name ""PrivateCore"" .
  ?company dbo:parentCompany ?parentCompany .
}",8.289228799996742e-232,0.04838709677419355,True,True
3317,In how many nations can I find people related to the feminist movement?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/movement> <http://dbpedia.org/resource/Feminism> . ?x <http://dbpedia.org/ontology/nationality> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In how many nations can I find people related to the feminist movement?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?nation) AS ?count)
WHERE {
  ?person dbo:birthPlace ?nation .
  ?person dbo:occupation ""Feminist"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?nation) AS ?count)
WHERE {
  ?person dbo:birthPlace ?nation .
  ?person dbo:occupation ""Feminist"" .
}",3.075337680136661e-155,0.0641025641025641,True,True
1783,Who is the former partner of Chris Knierim?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chris_Knierim> <http://dbpedia.org/ontology/formerPartner> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the former partner of Chris Knierim?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?partner
WHERE {
  ?person dbo:name ""Chris Knierim"" .
  ?person dbo:partner ?partner .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?partner
WHERE {
  ?person dbo:name ""Chris Knierim"" .
  ?person dbo:partner ?partner .
}",2.494821638843469e-155,0.0625,True,True
2936,Under which scientist did doctoral students erban ieica and Erich Bagge study?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Șerban_Țițeica> . ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Erich_Bagge> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Under which scientist did doctoral students erban ieica and Erich Bagge study?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?scientist
WHERE {
  ?student dbo:doctoralAdvisor ?scientist .
  FILTER (regex(?student, ""erban ieica"", ""i"") || regex(?student, ""erich bagge"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?scientist
WHERE {
  ?student dbo:doctoralAdvisor ?scientist .
  FILTER (regex(?student, ""erban ieica"", ""i"") || regex(?student, ""erich bagge"", ""i""))
}",2.938309220081021e-155,0.06329113924050633,True,True
3278,Which birthplace of Svetlana Gounkina is also the largest city of Union State?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_State> <http://dbpedia.org/property/largestCity> ?uri. <http://dbpedia.org/resource/Svetlana_Gounkina> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which birthplace of Svetlana Gounkina is also the largest city of Union State?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?birthplace
WHERE {
  ?person dbo:name ""Svetlana Gounkina"" .
  ?person dbo:birthPlace ?birthplace .
  ?birthplace dbo:country ""Belarus"" .
  ?birthplace dbo:population ?population .
  FILTER(?population > 1000000)
  ?birthplace dbo:name ?city .
  ?city dbo:country ""Belarus"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?birthplace
WHERE {
  ?person dbo:name ""Svetlana Gounkina"" .
  ?person dbo:birthPlace ?birthplace .
  ?birthplace dbo:country ""Belarus"" .
  ?birthplace dbo:population ?population .
  FILTER(?population > 1000000)
  ?birthplace dbo:name ?city .
  ?city dbo:country ""Belarus"" .
}",2.5149879802969635e-155,0.04878048780487805,True,True
2514,What is the television show whose developer is J. Michael Straczynski?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/J._Michael_Straczynski>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the television show whose developer is J. Michael Straczynski?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?showLabel WHERE {
  ?show dbo:developer J.MichaelStraczynski .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?showLabel WHERE {
  ?show dbo:developer J.MichaelStraczynski .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",8.094051362019983e-232,0.04225352112676056,False,False
4918,During the reigns of which monarchs was the name to the Israelite kingdom as United Monarch?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Kingdom_of_Israel_(united_monarchy)> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: During the reigns of which monarchs was the name to the Israelite kingdom as United Monarch?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?monarch ?reignStart ?reignEnd
WHERE {
  ?monarch dbo:birthPlace ?birthPlace .
  ?monarch dbo:deathPlace ?deathPlace .
  ?monarch dbo:reignStart ?reignStart .
  ?monarch dbo:reignEnd ?reignEnd .
  ?monarch dbo:name ?name .
  FILTER (regex(?name, ""United Monarch"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?monarch ?reignStart ?reignEnd
WHERE {
  ?monarch dbo:birthPlace ?birthPlace .
  ?monarch dbo:deathPlace ?deathPlace .
  ?monarch dbo:reignStart ?reignStart .
  ?monarch dbo:reignEnd ?reignEnd .
  ?monarch dbo:name ?name .
  FILTER (regex(?name, ""United Monarch"", ""i""))
}",2.0939042922429456e-155,0.04819277108433735,True,True
1319,Which things are Breann McGregor known for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Breann_McGregor> <http://dbpedia.org/property/knownFor> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which things are Breann McGregor known for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?thing
WHERE {
  ?person dbo:name ""Breann McGregor"" .
  ?person dbo:knownFor ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?thing
WHERE {
  ?person dbo:name ""Breann McGregor"" .
  ?person dbo:knownFor ?thing .
}",3.1370721297783126e-155,0.07692307692307693,True,True
2941,What is the common award won by Charles LeMaire and Eric Roth,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/property/awards> ?uri. <http://dbpedia.org/resource/Eric_Roth> <http://dbpedia.org/ontology/award> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the common award won by Charles LeMaire and Eric Roth
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:award ?award .
  FILTER (regex(?person, ""Charles LeMaire"", ""i"") || regex(?person, ""Eric Roth"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:award ?award .
  FILTER (regex(?person, ""Charles LeMaire"", ""i"") || regex(?person, ""Eric Roth"", ""i""))
}",2.7788812895482627e-155,0.05128205128205128,True,True
3552,Name the Chris Marve's school ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chris_Marve> <http://dbpedia.org/ontology/school> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the Chris Marve's school ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Chris Marve"" .
  ?person dbp:almaMater ?school .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Chris Marve"" .
  ?person dbp:almaMater ?school .
}",2.530465559854518e-155,0.06451612903225806,True,True
901,Which are the countires where Pioneer Corporation has flourished?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pioneer_Corporation> <http://dbpedia.org/property/country> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which are the countires where Pioneer Corporation has flourished?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?company dbo: headquarters ?location .
  ?location dbo:country ?country .
  ?company dbo:name ""Pioneer Corporation"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?company dbo: headquarters ?location .
  ?location dbo:country ?country .
  ?company dbo:name ""Pioneer Corporation"" .
}",2.938309220081021e-155,0.07142857142857142,False,False
2394,How many shows belong to the network one of whose sister station is Cartoonite?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/sisterStation> <http://dbpedia.org/resource/Cartoonito> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many shows belong to the network one of whose sister station is Cartoonite?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?show) AS ?count)
WHERE {
  ?network dbo:sisterStation ?sisterStation .
  ?sisterStation rdfs:label ""Cartoonite"" .
  ?network dbo:shows ?show .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?show) AS ?count)
WHERE {
  ?network dbo:sisterStation ?sisterStation .
  ?sisterStation rdfs:label ""Cartoonite"" .
  ?network dbo:shows ?show .
}",2.4123225276763925e-155,0.04938271604938271,True,True
4519,What show had NTSC format and theme music composed byRon Grainer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/format> <http://dbpedia.org/resource/NTSC> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What show had NTSC format and theme music composed byRon Grainer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:format ?format .
  ?format dbo:name ""NTSC"" .
  ?show dbo:themeMusic ?music .
  ?music dbo:composer ?composer .
  ?composer dbo:name ""Ron Grainer"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:format ?format .
  ?format dbo:name ""NTSC"" .
  ?show dbo:themeMusic ?music .
  ?music dbo:composer ?composer .
  ?composer dbo:name ""Ron Grainer"" .
}",2.344734865707205e-155,0.05063291139240506,True,True
449,Who has starred in the amusement park attractions where Jim Dooley was performing?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Jim_Dooley> . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmusementParkAttraction>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who has starred in the amusement park attractions where Jim Dooley was performing?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?star
WHERE {
  ?attraction dbo:attractionType ""Amusement Park"".
  ?attraction dbo:performer ?performer .
  ?performer dbo:name ""Jim Dooley"".
  ?attraction dbo:star ?star .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?star
WHERE {
  ?attraction dbo:attractionType ""Amusement Park"".
  ?attraction dbo:performer ?performer .
  ?performer dbo:name ""Jim Dooley"".
  ?attraction dbo:star ?star .
}",2.968021523431445e-155,0.06172839506172839,True,True
3183,What are the musical performances whose label is Celluloid Records?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the musical performances whose label is Celluloid Records?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?performance
WHERE {
  ?performance dbo:label ""Celluloid Records"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?performance
WHERE {
  ?performance dbo:label ""Celluloid Records"" .
}",3.159243630213636e-155,0.07575757575757576,True,True
3398,"Who is the opponent of United States House of Representatives elections in Ohio, 2010 ?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010> <http://dbpedia.org/property/opponent> ?uri }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the opponent of United States House of Representatives elections in Ohio, 2010 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?opponent
WHERE {
  ?election dbo:opponent ?opponent .
  ?election dbo:location ""Ohio"" .
  ?election dbo:electionType ""United States House of Representatives elections"" .
  ?election dbo:year ""2010"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?opponent
WHERE {
  ?election dbo:opponent ?opponent .
  ?election dbo:location ""Ohio"" .
  ?election dbo:electionType ""United States House of Representatives elections"" .
  ?election dbo:year ""2010"" .
}",2.181647159764084e-155,0.05263157894736842,True,True
2208,In which state is Colemanville Covered Bridge located ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Colemanville_Covered_Bridge> <http://dbpedia.org/ontology/state> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which state is Colemanville Covered Bridge located ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?bridge dbo:location ?location .
  ?location dbo:country ""United States""^^xsd:string .
  ?location dbo:state ?state .
  FILTER (regex(?bridge, ""Colemanville Covered Bridge"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?bridge dbo:location ?location .
  ?location dbo:country ""United States""^^xsd:string .
  ?location dbo:state ?state .
  FILTER (regex(?bridge, ""Colemanville Covered Bridge"", ""i""))
}",2.322545481391416e-155,0.0547945205479452,True,True
1743,Panthera leo fossils and Liger belong to which species?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Panthera_leo_fossilis> <http://dbpedia.org/ontology/species> ?uri. <http://dbpedia.org/resource/Liger> <http://dbpedia.org/ontology/species> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Panthera leo fossils and Liger belong to which species?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?species
WHERE {
  ?fossil dbo:species ?species .
  FILTER (regex(?species, ""Panthera leo""))
  ?liger dbo:species ?species .
  FILTER (regex(?species, ""Panthera leo""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?species
WHERE {
  ?fossil dbo:species ?species .
  FILTER (regex(?species, ""Panthera leo""))
  ?liger dbo:species ?species .
  FILTER (regex(?species, ""Panthera leo""))
}",3.0382827129023445e-155,0.0821917808219178,True,True
1152,Whose commanders are Colin Powell and Jaber Al-Ahmad Al-Sabah?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Colin_Powell> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Jaber_Al-Ahmad_Al-Sabah> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose commanders are Colin Powell and Jaber Al-Ahmad Al-Sabah?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?country dbo:commander ?commander .
  ?commander dbo:name ""Colin Powell""^^xsd:string .
  FILTER (BOUND(?commander))
  ?commander dbo:name ""Jaber Al-Ahmad Al-Sabah""^^xsd:string .
  FILTER (BOUND(?commander))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?country dbo:commander ?commander .
  ?commander dbo:name ""Colin Powell""^^xsd:string .
  FILTER (BOUND(?commander))
  ?commander dbo:name ""Jaber Al-Ahmad Al-Sabah""^^xsd:string .
  FILTER (BOUND(?commander))
}",3.157656468883577e-155,0.08333333333333333,True,True
2049,Did Bob Dylan write the lyrics of the times they are a changin'?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/property/lyrics> <http://dbpedia.org/resource/Bob_Dylan> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Did Bob Dylan write the lyrics of the times they are a changin'?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?song
WHERE {
  ?song rdf:type dbo:Song .
  ?song dbo:title ""The Times They Are a-Changin'"" .
  ?song dbo:lyrics ?lyrics .
  ?lyrics dbo:author ?author .
  ?author dbo:name ""Bob Dylan"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?song
WHERE {
  ?song rdf:type dbo:Song .
  ?song dbo:title ""The Times They Are a-Changin'"" .
  ?song dbo:lyrics ?lyrics .
  ?lyrics dbo:author ?author .
  ?author dbo:name ""Bob Dylan"" .
}",2.0088791894285736e-155,0.038461538461538464,True,True
3908,What is the debut team of people born in Vargas?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vargas_(state)> . ?x <http://dbpedia.org/property/debutteam> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the debut team of people born in Vargas?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?debutTeam
WHERE {
  ?person dbo:birthPlace dbo:Vargas .
  ?person dbo:debutTeam ?debutTeam .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?debutTeam
WHERE {
  ?person dbo:birthPlace dbo:Vargas .
  ?person dbo:debutTeam ?debutTeam .
}",3.627276877392474e-155,0.08450704225352113,True,True
376,Name all those whose spouses have performed with Tony Bennett?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Tony_Bennett> . ?uri <http://dbpedia.org/ontology/spouse> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name all those whose spouses have performed with Tony Bennett?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbp:partnerOf ?tonyBennett .
  ?tonyBennett dbo:name ""Tony Bennett"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbp:partnerOf ?tonyBennett .
  ?tonyBennett dbo:name ""Tony Bennett"" .
}",3.6040982025556637e-155,0.0821917808219178,True,True
4101,Count the band members of Skull Gang?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Skull_Gang> <http://dbpedia.org/ontology/bandMember> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the band members of Skull Gang?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?memberCount
WHERE {
  ?band dbo:name ""Skull Gang"" .
  ?band dbo:member ?member .
  GROUP BY ?band
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?memberCount
WHERE {
  ?band dbo:name ""Skull Gang"" .
  ?band dbo:member ?member .
  GROUP BY ?band
}",2.4119102000777368e-155,0.056338028169014086,False,False
3265,Which territory of Tonkin campaign is also the death place of Theophane Venard ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tonkin_Campaign> <http://dbpedia.org/ontology/territory> ?uri. <http://dbpedia.org/resource/Théophane_Vénard> <http://dbpedia.org/ontology/deathPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which territory of Tonkin campaign is also the death place of Theophane Venard ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?territory
WHERE {
  ?territory dbo:wikiPageRedirects ?redirect
  ?redirect dbo:abstract ""Tonkin campaign"" .
  ?territory dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:wikiPageRedirects <http://dbpedia.org/resource/Theophane_Venard> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?territory
WHERE {
  ?territory dbo:wikiPageRedirects ?redirect
  ?redirect dbo:abstract ""Tonkin campaign"" .
  ?territory dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:wikiPageRedirects <http://dbpedia.org/resource/Theophane_Venard> .
}",2.6667146252330243e-155,0.05128205128205128,False,False
4795,Was John muir one of the first to ascend a mountain on Mt hoffmann?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/John_Muir> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was John muir one of the first to ascend a mountain on Mt hoffmann?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:birthPlace ""John Muir"" .
  ?x dbo:occupation ""Mountain climber"" .
  ?x dbo:mountainClimbed ""Mt. Hoffmann"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:birthPlace ""John Muir"" .
  ?x dbo:occupation ""Mountain climber"" .
  ?x dbo:mountainClimbed ""Mt. Hoffmann"" .
}",2.1108049473741715e-155,0.04054054054054054,True,True
4551,Is Christchurch the largest city of South Island?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/South_Island> <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Christchurch> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Christchurch the largest city of South Island?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?populationChristchurch ?populationSouthIsland
WHERE {
  ?city dbo:population ?populationChristchurch .
  FILTER(?city = <http://dbpedia.org/resource/Christchurch>)
  ?southIsland dbo:largestCity ?city .
  ?city dbo:population ?populationSouthIsland .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?populationChristchurch ?populationSouthIsland
WHERE {
  ?city dbo:population ?populationChristchurch .
  FILTER(?city = <http://dbpedia.org/resource/Christchurch>)
  ?southIsland dbo:largestCity ?city .
  ?city dbo:population ?populationSouthIsland .
}",2.1745921280630745e-155,0.04411764705882353,True,True
3520,Which religion is followed by the PM who was served by Chea Sim?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chea_Sim> <http://dbpedia.org/property/primeminister> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which religion is followed by the PM who was served by Chea Sim?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?pm dbo:servedBy ?cheasim .
  ?cheasim dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?pm dbo:servedBy ?cheasim .
  ?cheasim dbo:religion ?religion .
}",3.1335534263807668e-155,0.06944444444444445,True,True
2782,What is the sovereign state of the Dafydd Benfras where Jasmine Lowson is also citizen of?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dafydd_Benfras> <http://dbpedia.org/ontology/country> ?uri. <http://dbpedia.org/resource/Jasmine_Lowson> <http://dbpedia.org/ontology/citizenship> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the sovereign state of the Dafydd Benfras where Jasmine Lowson is also citizen of?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sovereignState
WHERE {
  ?person dbo:nationality ?sovereignState .
  FILTER ( ?person = <http://dbpedia.org/resource/Jasmine_Lowson> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sovereignState
WHERE {
  ?person dbo:nationality ?sovereignState .
  FILTER ( ?person = <http://dbpedia.org/resource/Jasmine_Lowson> )
}",2.8856766331839354e-155,0.0641025641025641,True,True
4458,What is the resting place of the child of Linda Lee Cadwell?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Lee_Cadwell> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the resting place of the child of Linda Lee Cadwell?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?restingPlace
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Linda Lee Cadwell""^^xsd:string .
  ?person dbo:child ?child .
  ?child dbo:restingPlace ?restingPlace .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?restingPlace
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Linda Lee Cadwell""^^xsd:string .
  ?person dbo:child ?child .
  ?child dbo:restingPlace ?restingPlace .
}",2.968021523431445e-155,0.06666666666666667,True,True
4929,In how many different places are Brown haired models living?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/hairColor> <http://dbpedia.org/resource/Brown_hair> . ?x <http://dbpedia.org/ontology/residence> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In how many different places are Brown haired models living?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?model dbo:hairColor ""Brown"" .
  ?model dbo:livingPlace ?place .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?model dbo:hairColor ""Brown"" .
  ?model dbo:livingPlace ?place .
}",3.1335534263807668e-155,0.06578947368421052,True,True
276,How many people are known for Dragons' Den?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Dragons'_Den_(UK_TV_series)>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people are known for Dragons' Den?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person dbo:knownFor ?show .
  ?show rdfs:label ""Dragons' Den"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person dbo:knownFor ?show .
  ?show rdfs:label ""Dragons' Den"" .
}",2.4440718429993668e-155,0.057971014492753624,True,True
2383,How many sports are played at the university whose president is Emanuel de Guzman?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/president> <http://dbpedia.org/resource/Emanuel_de_Guzman> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sport>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many sports are played at the university whose president is Emanuel de Guzman?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?sport)) AS ?count
WHERE {
  ?university dbo:president ?president .
  ?president dbo:name ""Emanuel de Guzman"" .
  ?university dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?sport)) AS ?count
WHERE {
  ?university dbo:president ?president .
  ?president dbo:name ""Emanuel de Guzman"" .
  ?university dbo:sports ?sport .
}",2.371081855250832e-155,0.04819277108433735,False,False
236,What is the major shrine of Jacques-Dsir Laval ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jacques-Désiré_Laval> <http://dbpedia.org/ontology/majorShrine> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the major shrine of Jacques-Dsir Laval ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?shrine
WHERE {
  ?person dbo:birthPlace <http://dbpedia.org/resource/Haiti> .
  ?person dbo:name ""Jacques-Dsir Laval"" .
  ?person dbo:majorShrine ?shrine .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?shrine
WHERE {
  ?person dbo:birthPlace <http://dbpedia.org/resource/Haiti> .
  ?person dbo:name ""Jacques-Dsir Laval"" .
  ?person dbo:majorShrine ?shrine .
}",2.4119102000777368e-155,0.05970149253731343,True,True
149,Who were all the people in office when bob hawke was the PM?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/primeMinister> <http://dbpedia.org/resource/Bob_Hawke> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who were all the people in office when bob hawke was the PM?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?role
WHERE {
  ?person dbo:primeMinister ?hawke .
  ?hawke dbo:termStart ?start .
  ?person dbo:termStart ?start .
  ?person dbo:termEnd ?end .
  FILTER(?start <= ?end)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?role
WHERE {
  ?person dbo:primeMinister ?hawke .
  ?hawke dbo:termStart ?start .
  ?person dbo:termStart ?start .
  ?person dbo:termEnd ?end .
  FILTER(?start <= ?end)
}",2.205362109328438e-155,0.05263157894736842,True,True
3837,Which sports exist in the universities whose president is Emanuel de Guzman?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Emanuel_de_Guzman> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports exist in the universities whose president is Emanuel de Guzman?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:president ?president .
  ?president dbo:name ""Emanuel de Guzman"" .
  ?university dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:president ?president .
  ?president dbo:name ""Emanuel de Guzman"" .
  ?university dbo:sports ?sport .
}",3.0202505652128895e-155,0.06493506493506493,True,True
64,In which team did Dave Bing and Ron Reed started their basketball career?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dave_Bing> <http://dbpedia.org/property/draftTeam> ?uri. <http://dbpedia.org/resource/Ron_Reed> <http://dbpedia.org/property/draftTeam> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which team did Dave Bing and Ron Reed started their basketball career?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:team ?team .
  FILTER ( ?player IN ( dbo:DaveBing , dbo:RonReed ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:team ?team .
  FILTER ( ?player IN ( dbo:DaveBing , dbo:RonReed ) )
}",2.9346708496857675e-155,0.07407407407407407,True,True
1832,Whose songs are Tickle Me and Viva Las Vegas?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tickle_Me> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/Viva_Las_Vegas> <http://dbpedia.org/property/artist> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose songs are Tickle Me and Viva Las Vegas?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?song dbo:title ""Tickle Me"" .
  ?song dbo:artist ?artist .
  
  ?song2 dbo:title ""Viva Las Vegas"" .
  ?song2 dbo:artist ?artist .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?song dbo:title ""Tickle Me"" .
  ?song dbo:artist ?artist .
  
  ?song2 dbo:title ""Viva Las Vegas"" .
  ?song2 dbo:artist ?artist .
}",3.3624125453069686e-155,0.08333333333333333,True,True
972,"Who is the founder of European School, Karlsruhe?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/European_School,_Karlsruhe> <http://dbpedia.org/property/founder> ?uri }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the founder of European School, Karlsruhe?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?founder
WHERE {
  ?school dbo:founder ?founder .
  FILTER (regex(?school, ""European School, Karlsruhe"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?founder
WHERE {
  ?school dbo:founder ?founder .
  FILTER (regex(?school, ""European School, Karlsruhe"", ""i""))
}",2.4775553999024465e-155,0.06060606060606061,True,True
4201,Does KOMC play Gospel Music?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/KOMC_(AM)> <http://dbpedia.org/ontology/programmeFormat> <http://dbpedia.org/resource/Gospel_music> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does KOMC play Gospel Music?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?genre
WHERE {
  ?artist dbo:genre ?genre .
  FILTER ( ?artist = <http://dbpedia.org/resource/KOMC> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?genre
WHERE {
  ?artist dbo:genre ?genre .
  FILTER ( ?artist = <http://dbpedia.org/resource/KOMC> )
}",2.3548635457910922e-155,0.047619047619047616,True,True
3012,"Where was Henri, Duke of Rohan laid to rest?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henri,_Duke_of_Rohan> <http://dbpedia.org/ontology/placeOfBurial> ?uri }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where was Henri, Duke of Rohan laid to rest?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace ?deathPlace .
  FILTER ( ?person = <http://dbpedia.org/resource/Henri,_Duke_of_Rohan> )
  ?deathPlace dbo:name ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace ?deathPlace .
  FILTER ( ?person = <http://dbpedia.org/resource/Henri,_Duke_of_Rohan> )
  ?deathPlace dbo:name ?location .
}",2.4708136900731027e-155,0.06944444444444445,True,True
702,Where are INKAS located which is also the state of origin for Jojo Chintoh?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jojo_Chintoh> <http://dbpedia.org/ontology/stateOfOrigin> ?uri. <http://dbpedia.org/resource/INKAS> <http://dbpedia.org/property/locations> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where are INKAS located which is also the state of origin for Jojo Chintoh?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?location dbo:country ?country .
  ?country dbo:name ""Nigeria""@en .
  ?person dbo:birthPlace ?location .
  ?person dbo:name ""Jojo Chintoh""@en .
  ?location dbo:name ?locationName .
  FILTER (regex(?locationName, ""INKAS"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?location dbo:country ?country .
  ?country dbo:name ""Nigeria""@en .
  ?person dbo:birthPlace ?location .
  ?person dbo:name ""Jojo Chintoh""@en .
  ?location dbo:name ?locationName .
  FILTER (regex(?locationName, ""INKAS"", ""i""))
}",2.5406524524079725e-155,0.04819277108433735,True,True
4833,Was Michael Schumacher the Pole driver of 1994 Spanish Grand Prix?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/property/poleDriver> <http://dbpedia.org/resource/Michael_Schumacher> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Michael Schumacher the Pole driver of 1994 Spanish Grand Prix?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:birthPlace ""Kerpen, Germany"" .
  ?x dbo:name ""Michael Schumacher"" .
  ?x dbo:startSeason ""1991"" .
  ?x dbo:endSeason ""2006"" .
  ?x dbo:participatedInEvent ?event .
  ?event dbo:name ""1994 Spanish Grand Prix"" .
  ?event dbo:polePosition ?poleDriver .
  ?poleDriver dbo:name ?x .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:birthPlace ""Kerpen, Germany"" .
  ?x dbo:name ""Michael Schumacher"" .
  ?x dbo:startSeason ""1991"" .
  ?x dbo:endSeason ""2006"" .
  ?x dbo:participatedInEvent ?event .
  ?event dbo:name ""1994 Spanish Grand Prix"" .
  ?event dbo:polePosition ?poleDriver .
  ?poleDriver dbo:name ?x .
}",1.9112994652876815e-155,0.0379746835443038,True,True
2920,Why did Letita McTavish Hargrave and Sextus Barbour die?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Letitia_MacTavish_Hargrave> <http://dbpedia.org/ontology/deathCause> ?uri. <http://dbpedia.org/resource/Sextus_Barbour> <http://dbpedia.org/property/deathCause> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Why did Letita McTavish Hargrave and Sextus Barbour die?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?reason
WHERE {
  ?person dbo:deathReason ?reason .
  FILTER (regex(?person, ""Letita McTavish Hargrave"", ""i"") || regex(?person, ""Sextus Barbour"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?reason
WHERE {
  ?person dbo:deathReason ?reason .
  FILTER (regex(?person, ""Letita McTavish Hargrave"", ""i"") || regex(?person, ""Sextus Barbour"", ""i""))
}",2.215756877004116e-155,0.04,True,True
952,Which mountain range is the one with Ponte d'Aveneyre and Le Gibloux?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pointe_d'Aveneyre> <http://dbpedia.org/ontology/mountainRange> ?uri. <http://dbpedia.org/resource/Le_Gibloux> <http://dbpedia.org/ontology/mountainRange> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which mountain range is the one with Ponte d'Aveneyre and Le Gibloux?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?mountainRange
WHERE {
  ?mountainRange dbo:locatedIn ?location .
  ?location dbo:name ""Ponte d'Aveneyre"" .
  ?location dbo:name ""Le Gibloux"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?mountainRange
WHERE {
  ?mountainRange dbo:locatedIn ?location .
  ?location dbo:name ""Ponte d'Aveneyre"" .
  ?location dbo:name ""Le Gibloux"" .
}",2.9029053187216252e-155,0.06756756756756757,True,True
3329,"Give me all office holders who finally retired in Montpelier, Orange, Virgina?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all office holders who finally retired in Montpelier, Orange, Virgina?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:placeOfBirth dbp:Montpelier .
  ?person dbo:placeOfDeath dbp:Montpelier .
  ?person dbo:occupation dbo:Politician .
  FILTER (regex(?personLabel, ""retired"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:placeOfBirth dbp:Montpelier .
  ?person dbo:placeOfDeath dbp:Montpelier .
  ?person dbo:occupation dbo:Politician .
  FILTER (regex(?personLabel, ""retired"", ""i""))
}",2.2552086692851858e-155,0.05063291139240506,True,True
2779,Name the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Georgina_Theodora_Wood> <http://dbpedia.org/ontology/nationality> ?uri. <http://dbpedia.org/resource/Akwasi_Oppong_Fosu> <http://dbpedia.org/ontology/nationality> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?nationality
WHERE {
  ?person dbo:nationality ?nationality .
  FILTER (regex(?person, ""Georgina Theodora Wood"", ""i"") || regex(?person, ""akwasi Oppong Fosu"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?nationality
WHERE {
  ?person dbo:nationality ?nationality .
  FILTER (regex(?person, ""Georgina Theodora Wood"", ""i"") || regex(?person, ""akwasi Oppong Fosu"", ""i""))
}",3.0202505652128895e-155,0.0759493670886076,True,True
4719,Give me some TV stations whose network's main language is American English?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/American_English> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionStation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me some TV stations whose network's main language is American English?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?station ?network
WHERE {
  ?station dbpedia:network ?network .
  ?network rdfs:label ""American English""@en .
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?station ?network
WHERE {
  ?station dbpedia:network ?network .
  ?network rdfs:label ""American English""@en .
}",3.1537059338519422e-155,0.06756756756756757,True,True
685,How many religions are followed by the people in the Royal Thai Army?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Royal_Thai_Army> . ?x <http://dbpedia.org/ontology/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many religions are followed by the people in the Royal Thai Army?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religionCount
WHERE {
  ?army dbo:follows ?religion .
  FILTER ( ?army = <http://dbpedia.org/resource/Royal_Thai_Army> )
  GROUP BY ?religion
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religionCount
WHERE {
  ?army dbo:follows ?religion .
  FILTER ( ?army = <http://dbpedia.org/resource/Royal_Thai_Army> )
  GROUP BY ?religion
}",2.60205383027793e-155,0.07792207792207792,False,False
207,What is the name of the movie whose director of photography was Jordan Cronenweth and music composer was Vangelis?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/Jordan_Cronenweth> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Vangelis>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the name of the movie whose director of photography was Jordan Cronenweth and music composer was Vangelis?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movieLabel WHERE {
  ?movie dbo:directorOfPhotography <http://dbpedia.org/resource/Jordan_Cronenweth> .
  ?movie dbo:musicComposer <http://dbpedia.org/resource/Vangelis> .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movieLabel WHERE {
  ?movie dbo:directorOfPhotography <http://dbpedia.org/resource/Jordan_Cronenweth> .
  ?movie dbo:musicComposer <http://dbpedia.org/resource/Vangelis> .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.951204860745888e-155,0.0625,False,False
36,List the teams for which Bobby Hoppe played ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bobby_Hoppe> <http://dbpedia.org/property/pastteams> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the teams for which Bobby Hoppe played ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:name ""Bobby Hoppe"" .
  ?player dbp:sportsTeam ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:name ""Bobby Hoppe"" .
  ?player dbp:sportsTeam ?team .
}",3.0940944781388835e-155,0.07692307692307693,True,True
750,Semani languages are spoken in which countries?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/languages> <http://dbpedia.org/resource/Semnani_languages>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Semani languages are spoken in which countries?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?language dbo:wikiPageRedirects ?semLanguage .
  ?semLanguage rdfs:label ""Semani""@en .
  ?language dbp:spokenIn ?country .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?language dbo:wikiPageRedirects ?semLanguage .
  ?semLanguage rdfs:label ""Semani""@en .
  ?language dbp:spokenIn ?country .
}",2.3962983105918537e-155,0.05714285714285714,True,True
690,From which state do the White Plum Asangas come?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/White_Plum_Asanga> . ?x <http://dbpedia.org/ontology/stateOfOrigin> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: From which state do the White Plum Asangas come?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?state
WHERE {
  ?fruit dbo:origin ?state .
  FILTER (regex(?fruit, ""White Plum Asangas"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?state
WHERE {
  ?fruit dbo:origin ?state .
  FILTER (regex(?fruit, ""White Plum Asangas"", ""i""))
}",3.216579438360415e-155,0.08450704225352113,True,True
423,"Who founded the city where First Church of Christ, Scientist is located?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/First_Church_of_Christ,_Scientist_(Pittsburgh)> <http://dbpedia.org/property/locationTown> ?x . ?x <http://dbpedia.org/ontology/founder> ?uri  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who founded the city where First Church of Christ, Scientist is located?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?founder
WHERE {
  ?church dbo:location ?city .
  ?city dbo:foundedBy ?founder .
  FILTER ( ?church = <http://dbpedia.org/resource/First_Church_of_Christ,_Scientist> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?founder
WHERE {
  ?church dbo:location ?city .
  ?city dbo:foundedBy ?founder .
  FILTER ( ?church = <http://dbpedia.org/resource/First_Church_of_Christ,_Scientist> )
}",2.5548810418069474e-155,0.06493506493506493,True,True
4650,Where did the people die who were known for Young Life?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Young_Life> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the people die who were known for Young Life?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?place
WHERE {
  ?person dbo:deathPlace ?place .
  ?person dbo:knownFor ""Young Life"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?place
WHERE {
  ?person dbo:deathPlace ?place .
  ?person dbo:knownFor ""Young Life"" .
}",3.1742523358973992e-155,0.07042253521126761,True,True
2048,List the things for which the relatives of Mrunalini Kunte are known?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mrunalini_Kunte> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/property/knownFor> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the things for which the relatives of Mrunalini Kunte are known?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:name ""Mrunalini Kunte"" .
  ?person dbo:spouse ?spouse .
  ?spouse dbo:knownFor ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:name ""Mrunalini Kunte"" .
  ?person dbo:spouse ?spouse .
  ?spouse dbo:knownFor ?thing .
}",3.4945213227383114e-155,0.08108108108108109,True,True
574,How many cities are around the sea into which the aegean sea flows?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Aegean_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many cities are around the sea into which the aegean sea flows?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city (COUNT(?city) AS ?cityCount)
WHERE {
  ?city dbo:locatedIn ?sea .
  ?sea dbo:connectedTo <http://dbpedia.org/resource/Aegean_Sea> .
  FILTER ( ?sea != <http://dbpedia.org/resource/Aegean_Sea> )
}
GROUP BY ?city
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city (COUNT(?city) AS ?cityCount)
WHERE {
  ?city dbo:locatedIn ?sea .
  ?sea dbo:connectedTo <http://dbpedia.org/resource/Aegean_Sea> .
  FILTER ( ?sea != <http://dbpedia.org/resource/Aegean_Sea> )
}
GROUP BY ?city",2.454081903007032e-155,0.06097560975609756,True,True
4382,Who are the people whose phD advisor was Harry Harlow?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Harry_Harlow>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the people whose phD advisor was Harry Harlow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:PhDAdvisor ?advisor .
  ?advisor dbo:name ""Harry Harlow"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:PhDAdvisor ?advisor .
  ?advisor dbo:name ""Harry Harlow"" .
}",2.4440718429993668e-155,0.057971014492753624,True,True
346,Name the office holder with predecessor as Samuel W. McCall and office in Massachusetts House of Representatives?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Samuel_W._McCall> . ?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Massachusetts_House_of_Representatives>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the office holder with predecessor as Samuel W. McCall and office in Massachusetts House of Representatives?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?successor
WHERE {
  ?successor dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Samuel W. McCall""^^xsd:string .
  ?successor dbo:office ?office .
  ?office dbo:location ""Massachusetts"" .
  ?office dbo:name ""House of Representatives"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?successor
WHERE {
  ?successor dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Samuel W. McCall""^^xsd:string .
  ?successor dbo:office ?office .
  ?office dbo:location ""Massachusetts"" .
  ?office dbo:name ""House of Representatives"" .
}",8.167977311814523e-232,0.03614457831325301,True,True
1538,Who manufactures the SHO V8?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_SHO_V8_engine> <http://dbpedia.org/ontology/manufacturer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who manufactures the SHO V8?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?manufacturer
WHERE {
  ?car dbo:manufacturer ?manufacturer .
  ?car dbo:name ""SHO V8"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?manufacturer
WHERE {
  ?car dbo:manufacturer ?manufacturer .
  ?car dbo:name ""SHO V8"" .
}",2.5488701582353735e-155,0.06557377049180328,True,True
1372,Does the Sicklefin lemon shark belong in the animal kingdom?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Sicklefin_lemon_shark> <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Animal> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the Sicklefin lemon shark belong in the animal kingdom?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:abstract ""Sicklefin lemon shark"" .
  ?x dbo:species ""Sicklefin lemon shark"" .
  ?x dbo:classification ?y .
  ?y dbo:higherClassification ?z .
  ?z dbo:name ""Animal"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:abstract ""Sicklefin lemon shark"" .
  ?x dbo:species ""Sicklefin lemon shark"" .
  ?x dbo:classification ?y .
  ?y dbo:higherClassification ?z .
  ?z dbo:name ""Animal"" .
}",2.0868169697040566e-155,0.043478260869565216,True,True
4849,What awards were presented to the person who produced Paradise place?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paradise_Place> <http://dbpedia.org/property/producer> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What awards were presented to the person who produced Paradise place?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?film dbo:director ?person .
  ?film rdfs:label ""Paradise Place"" .
  ?person dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?film dbo:director ?person .
  ?film rdfs:label ""Paradise Place"" .
  ?person dbo:award ?award .
}",3.0566417519593477e-155,0.06578947368421052,True,True
2664,Which country were the associates of Hilda Duhalde from?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hilda_de_Duhalde> <http://dbpedia.org/ontology/associate> ?x . ?x <http://dbpedia.org/ontology/nationality> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which country were the associates of Hilda Duhalde from?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?country
WHERE {
  ?person dbo:birthPlace ?country .
  ?person dbo:name ""Hilda Duhalde"" .
  ?person dbo:associate ?associate .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?country
WHERE {
  ?person dbo:birthPlace ?country .
  ?person dbo:name ""Hilda Duhalde"" .
  ?person dbo:associate ?associate .
}",3.559043432561587e-155,0.0821917808219178,True,True
4236,Who starred in Nothing in Common and produced From the Earth to the Moon?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/From_the_Earth_to_the_Moon_(miniseries)> <http://dbpedia.org/ontology/executiveProducer> ?uri. <http://dbpedia.org/resource/Nothing_in_Common> <http://dbpedia.org/property/starring> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who starred in Nothing in Common and produced From the Earth to the Moon?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?actor ?producer
WHERE {
  ?actor dbo:filmography ?movie .
  ?movie dbo:title ""Nothing in Common"" .
  ?producer dbo:produced ?movie .
  ?movie dbo:title ""From the Earth to the Moon"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?actor ?producer
WHERE {
  ?actor dbo:filmography ?movie .
  ?movie dbo:title ""Nothing in Common"" .
  ?producer dbo:produced ?movie .
  ?movie dbo:title ""From the Earth to the Moon"" .
}",3.127732480617132e-155,0.07692307692307693,True,True
439,Which fields are covered by academic journals in the US?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/country> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/property/discipline> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AcademicJournal>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which fields are covered by academic journals in the US?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?field
WHERE {
  ?journal dbo:country ""United States""^^xsd:string .
  ?journal dbo:field ?field .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?field
WHERE {
  ?journal dbo:country ""United States""^^xsd:string .
  ?journal dbo:field ?field .
}",3.216579438360415e-155,0.07042253521126761,True,True
1478,Where did the plays written by Robert Schenkkan take place?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Robert_Schenkkan> . ?x <http://dbpedia.org/property/place> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Play>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the plays written by Robert Schenkkan take place?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?play dbo:author ?author .
  ?author dbo:name ""Robert Schenkkan"" .
  ?play dbo:setting ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?play dbo:author ?author .
  ?author dbo:name ""Robert Schenkkan"" .
  ?play dbo:setting ?location .
}",3.075337680136661e-155,0.06666666666666667,True,True
1189,What is the product of the BBC Multimedia and series of the The Last Resort (Doctor Who)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/BBC_Multimedia> <http://dbpedia.org/property/products> ?uri. <http://dbpedia.org/resource/The_Last_Resort_(Doctor_Who)> <http://dbpedia.org/ontology/series> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the product of the BBC Multimedia and series of the The Last Resort (Doctor Who)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?product
WHERE {
  ?series dbo:title ""The Last Resort"" .
  ?series dbo:partOf ?product .
  ?product dbo:productionCompany dbo:BBCMultimedia .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?product
WHERE {
  ?series dbo:title ""The Last Resort"" .
  ?series dbo:partOf ?product .
  ?product dbo:productionCompany dbo:BBCMultimedia .
}",2.0868169697040566e-155,0.039473684210526314,True,True
1939,To which political party do the children of Sonia Gandhi belong?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sonia_Gandhi> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/party> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which political party do the children of Sonia Gandhi belong?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?party
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Sonia Gandhi""^^xsd:string .
  ?person dbo:father ?parent .
  ?parent dbo:politicalParty ?party .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?party
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Sonia Gandhi""^^xsd:string .
  ?person dbo:father ?parent .
  ?parent dbo:politicalParty ?party .
}",3.0566417519593477e-155,0.06756756756756757,True,True
4143,What are some famous veterinary physicians known for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/field> <http://dbpedia.org/resource/Veterinary_physician> . ?x <http://dbpedia.org/property/knownFor> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some famous veterinary physicians known for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subject ?knownFor
WHERE {
  ?subject dbo:type dbo:Veterinarian .
  ?subject dbo:knownFor ?knownFor .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subject ?knownFor
WHERE {
  ?subject dbo:type dbo:Veterinarian .
  ?subject dbo:knownFor ?knownFor .
}",3.6750083101231446e-155,0.08571428571428572,True,True
2037,What are the artists that are associated with the Framptons camel album?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Frampton's_Camel>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the artists that are associated with the Framptons camel album?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?artist
WHERE {
  ?album dbo:artist ?artist .
  ?album rdf:type dbo:Album .
  FILTER (regex(?album, ""Framptons camel"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?artist
WHERE {
  ?album dbo:artist ?artist .
  ?album rdf:type dbo:Album .
  FILTER (regex(?album, ""Framptons camel"", ""i""))
}",2.308595628361502e-155,0.05405405405405406,True,True
2108,What is the profession of William Luther Hill ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Luther_Hill> <http://dbpedia.org/ontology/profession> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the profession of William Luther Hill ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession
WHERE {
  <http://dbpedia.org/resource/William_Luther_Hill> dbo:profession ?profession .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession
WHERE {
  <http://dbpedia.org/resource/William_Luther_Hill> dbo:profession ?profession .
}",9.274792349638353e-79,0.08064516129032258,True,True
4171,What is the total number of professions in which someone who has suicided worked?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the total number of professions in which someone who has suicided worked?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?profession) AS ?totalProfessions)
WHERE {
  ?person dbo:deathCause ""Suicide"" .
  ?person dbo:occupation ?profession .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?profession) AS ?totalProfessions)
WHERE {
  ?person dbo:deathCause ""Suicide"" .
  ?person dbo:occupation ?profession .
}",3.1137823863213763e-155,0.06493506493506493,True,True
1727,What is the location of the Walter Evans Edge office which is also the place of birth of henry Miller ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Walter_Evans_Edge> <http://dbpedia.org/property/office> ?uri. <http://dbpedia.org/resource/Henry_Miller_Shreve> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the location of the Walter Evans Edge office which is also the place of birth of henry Miller ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?location
WHERE {
  ?office dbo:location ?location .
  ?office dbp:name ""Walter Evans Edge"" .
  ?miller dbo:birthPlace ?location .
  ?miller dbo:name ""Henry Miller"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?location
WHERE {
  ?office dbo:location ?location .
  ?office dbp:name ""Walter Evans Edge"" .
  ?miller dbo:birthPlace ?location .
  ?miller dbo:name ""Henry Miller"" .
}",1.9881679882945454e-155,0.036585365853658534,True,True
2590,Where did the beverage sold by Refriango originate?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Refriango> . ?x <http://dbpedia.org/property/origin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Beverage>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the beverage sold by Refriango originate?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?origin
WHERE {
  ?product dbo:brand ""Refriango"" .
  ?product dbp:origin ?origin .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?origin
WHERE {
  ?product dbo:brand ""Refriango"" .
  ?product dbp:origin ?origin .
}",3.2833699258334827e-155,0.07352941176470588,True,True
4087,List the websites which the authors of Tornado own ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tornado_(web_server)> <http://dbpedia.org/property/author> ?x . ?x <http://dbpedia.org/ontology/owner> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the websites which the authors of Tornado own ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?website
WHERE {
  ?author dbo:ownsWebsite ?website .
  ?author dbo:name ""Tornado"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?website
WHERE {
  ?author dbo:ownsWebsite ?website .
  ?author dbo:name ""Tornado"" .
}",3.650908595319347e-155,0.08571428571428572,True,True
2430,Where were Justina Machado and John Englehard born?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Justina_Machado> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/John_Englehart> <http://dbpedia.org/ontology/birthPlace> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where were Justina Machado and John Englehard born?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  FILTER (regex(?person, ""Justina Machado"", ""i"") || regex(?person, ""John Englehard"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  FILTER (regex(?person, ""Justina Machado"", ""i"") || regex(?person, ""John Englehard"", ""i""))
}",3.1537059338519422e-155,0.07894736842105263,True,True
1086,Who owns the newspaper which was founded by Nehru?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Jawaharlal_Nehru> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who owns the newspaper which was founded by Nehru?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?newspaper ?owner
WHERE {
  ?newspaper dbo:founder ?nehru .
  ?nehru dbo:name ""Nehru"" .
  ?newspaper dbo:owner ?owner .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?newspaper ?owner
WHERE {
  ?newspaper dbo:founder ?nehru .
  ?nehru dbo:name ""Nehru"" .
  ?newspaper dbo:owner ?owner .
}",2.50170125957988e-155,0.05555555555555555,True,True
1378,What belongs to the families of Buccinidae and Buccinoidea?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinidae> . ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinoidea> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What belongs to the families of Buccinidae and Buccinoidea?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?item
WHERE {
  ?item dbo:family ?family .
  FILTER (regex(?family, ""Buccinidae"", ""i"") || regex(?family, ""Buccinoidea"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?item
WHERE {
  ?item dbo:family ?family .
  FILTER (regex(?family, ""Buccinidae"", ""i"") || regex(?family, ""Buccinoidea"", ""i""))
}",3.1137823863213763e-155,0.08108108108108109,True,True
3938,Was Class Conflict an interest of Karl Marx?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Karl_Marx> <http://dbpedia.org/ontology/mainInterest> <http://dbpedia.org/resource/Class_conflict> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Class Conflict an interest of Karl Marx?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?interest
WHERE {
  ?person rdf:type dbo:Person ;
         dbo:name ""Karl Marx"" ;
         dbo:interest ?interest .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?interest
WHERE {
  ?person rdf:type dbo:Person ;
         dbo:name ""Karl Marx"" ;
         dbo:interest ?interest .
}",2.2445353519102238e-155,0.043478260869565216,True,True
2374,Does the north carolina highway 280 end in Arden?,google/gemma-2-9b-it,"ASK WHERE { <http://dbpedia.org/resource/North_Carolina_Highway_280> <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Arden,_North_Carolina> }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the north carolina highway 280 end in Arden?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?endLocation
WHERE {
  ?highway dbo:officialName ""North Carolina Highway 280"" .
  ?highway dbo:endLocation ?endLocation .
  FILTER (str(?endLocation) = ""Arden"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?endLocation
WHERE {
  ?highway dbo:officialName ""North Carolina Highway 280"" .
  ?highway dbo:endLocation ?endLocation .
  FILTER (str(?endLocation) = ""Arden"")
}",2.1745921280630745e-155,0.041666666666666664,True,True
468,Who gives the license of WXXV-DT2?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WXXV-DT2> <http://dbpedia.org/property/licensee> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who gives the license of WXXV-DT2?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?licensee
WHERE {
  ?station dbo:licensee ?licensee .
  FILTER (regex(?station, ""WXXV-DT2"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?licensee
WHERE {
  ?station dbo:licensee ?licensee .
  FILTER (regex(?station, ""WXXV-DT2"", ""i""))
}",2.5488701582353735e-155,0.06349206349206349,True,True
180,Which holy places did consider Pope Gregory I as a saint?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pope_Gregory_I> <http://dbpedia.org/property/veneratedIn> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which holy places did consider Pope Gregory I as a saint?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?holyPlace
WHERE {
  ?pope dbo:canonizedBy ?holyPlace .
  FILTER ( ?pope = <http://dbpedia.org/resource/Pope_Gregory_I> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?holyPlace
WHERE {
  ?pope dbo:canonizedBy ?holyPlace .
  FILTER ( ?pope = <http://dbpedia.org/resource/Pope_Gregory_I> )
}",3.1137823863213763e-155,0.08333333333333333,True,True
4952,Where did john o conner study?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_O'Connor_(archbishop_of_New_York)> <http://dbpedia.org/ontology/almaMater> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did john o conner study?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""John O'Connor"" .
  ?person dbo:educationPlace ?university .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""John O'Connor"" .
  ?person dbo:educationPlace ?university .
}",2.530465559854518e-155,0.06349206349206349,True,True
3787,Where did Allama Matthews study?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allama_Matthews> <http://dbpedia.org/ontology/college> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did Allama Matthews study?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""Allama Matthews"" .
  ?person dbo:educationPlace ?university .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""Allama Matthews"" .
  ?person dbo:educationPlace ?university .
}",2.5488701582353735e-155,0.06451612903225806,True,True
245,Count all the scientologists.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Scientology>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all the scientologists.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?subject
WHERE {
  ?subject dbo:religion ""Scientology"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?subject
WHERE {
  ?subject dbo:religion ""Scientology"" .
}",2.668419795632472e-155,0.06896551724137931,True,True
2567,How many molluscs are there whose families are Buccinidae and Buccinoidea?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinidae> . ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinoidea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many molluscs are there whose families are Buccinidae and Buccinoidea?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x rdf:type dbo:Mollusca .
  ?x dbo:family ?family .
  FILTER (regex(?family, ""Buccinidae"", ""i"") || regex(?family, ""Buccinoidea"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x rdf:type dbo:Mollusca .
  ?x dbo:family ?family .
  FILTER (regex(?family, ""Buccinidae"", ""i"") || regex(?family, ""Buccinoidea"", ""i""))
}",2.268207528392565e-155,0.05,True,True
3468,Bud Adams owns which american football team?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Bud_Adams>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Bud Adams owns which american football team?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?person dbo:owns ?team .
  ?person dbo:name ""Bud Adams"" .
  ?team dbo:type dbo:SportsTeam .
  FILTER (regex(?team, ""American football"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?person dbo:owns ?team .
  ?person dbo:name ""Bud Adams"" .
  ?team dbo:type dbo:SportsTeam .
  FILTER (regex(?team, ""American football"", ""i""))
}",8.017078581883202e-232,0.0410958904109589,True,True
1616,List everything in which saxophone players have been cast.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Saxophone> . ?uri <http://dbpedia.org/property/starring> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List everything in which saxophone players have been cast.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?work
WHERE {
  ?person dbo:occupation ""Saxophonist"" .
  ?person dbp:castIn ?work .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?work
WHERE {
  ?person dbo:occupation ""Saxophonist"" .
  ?person dbp:castIn ?work .
}",3.6750083101231446e-155,0.08450704225352113,True,True
146,What system is both a platform where Nord runs and also distributed The beauty inside?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nord_(video_game)> <http://dbpedia.org/ontology/computingPlatform> ?uri. <http://dbpedia.org/resource/The_Beauty_Inside> <http://dbpedia.org/ontology/distributor> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What system is both a platform where Nord runs and also distributed The beauty inside?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?system
WHERE {
  ?system dbo:wikiPageRedirects ?nordPlatform .
  ?nordPlatform dbo:wikiPageRedirects ?nord .
  ?nord dbo:description ""Nord"" .
  ?system dbo:wikiPageRedirects ?beautyInside .
  ?beautyInside dbo:description ""The beauty inside"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?system
WHERE {
  ?system dbo:wikiPageRedirects ?nordPlatform .
  ?nordPlatform dbo:wikiPageRedirects ?nord .
  ?nord dbo:description ""Nord"" .
  ?system dbo:wikiPageRedirects ?beautyInside .
  ?beautyInside dbo:description ""The beauty inside"" .
}",3.194645317303101e-155,0.07692307692307693,True,True
3686,Was Castillo discovered by Galileo?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Callisto_(moon)> <http://dbpedia.org/property/discoverer> <http://dbpedia.org/resource/Galileo_Galilei> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Castillo discovered by Galileo?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:discoveredBy <http://dbpedia.org/resource/Galileo_Galilei> .
  FILTER (regex(str(?x), ""Castillo"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:discoveredBy <http://dbpedia.org/resource/Galileo_Galilei> .
  FILTER (regex(str(?x), ""Castillo"", ""i""))
}",2.5676822842398837e-155,0.06451612903225806,True,True
4966,Which office holder's constituency is Haight-Ashbury and has military unit as USS Kittiwake ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Haight-Ashbury> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/USS_Kittiwake_(ASR-13)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which office holder's constituency is Haight-Ashbury and has military unit as USS Kittiwake ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?officeHolder ?officeHolderLabel
WHERE {
  ?officeHolder dbo:constituency ?constituency .
  ?constituency dbo:name ""Haight-Ashbury"" .
  ?officeHolder dbo:militaryUnit ?militaryUnit .
  ?militaryUnit dbo:name ""USS Kittiwake"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?officeHolder ?officeHolderLabel
WHERE {
  ?officeHolder dbo:constituency ?constituency .
  ?constituency dbo:name ""Haight-Ashbury"" .
  ?officeHolder dbo:militaryUnit ?militaryUnit .
  ?militaryUnit dbo:name ""USS Kittiwake"" .
}",2.344734865707205e-155,0.04938271604938271,True,True
1999,What is the mascot of Galatasaray Handball Team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Galatasaray_Handball_Team> <http://dbpedia.org/property/mascot> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the mascot of Galatasaray Handball Team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?mascot
WHERE {
  ?team dbo:name ""Galatasaray Handball Team"" .
  ?team dbo:mascot ?mascot .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?mascot
WHERE {
  ?team dbo:name ""Galatasaray Handball Team"" .
  ?team dbo:mascot ?mascot .
}",2.4606427705034855e-155,0.06153846153846154,True,True
802,Which awards did the narrator of Oscar and Lucinda win?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Oscar_and_Lucinda_(film)> <http://dbpedia.org/ontology/narrator> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which awards did the narrator of Oscar and Lucinda win?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:narratorOf <http://dbpedia.org/resource/Oscar_and_Lucinda> ;
  dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:narratorOf <http://dbpedia.org/resource/Oscar_and_Lucinda> ;
  dbo:award ?award .
}",3.608498281805203e-155,0.08695652173913043,True,True
1174,What is the nation of the Major All Stars Season 1 and Pioneer Corporation ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Major_All_Stars_Season_1> <http://dbpedia.org/property/country> ?uri. <http://dbpedia.org/resource/Pioneer_Corporation> <http://dbpedia.org/property/country> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the nation of the Major All Stars Season 1 and Pioneer Corporation ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?nationMajorStars ?nationPioneer
WHERE {
  ?majorStars dbo:country ?nationMajorStars .
  ?pioneer dbo:country ?nationPioneer .
  FILTER (regex(?nationMajorStars, ""United States"") || regex(?nationPioneer, ""Japan""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?nationMajorStars ?nationPioneer
WHERE {
  ?majorStars dbo:country ?nationMajorStars .
  ?pioneer dbo:country ?nationPioneer .
  FILTER (regex(?nationMajorStars, ""United States"") || regex(?nationPioneer, ""Japan""))
}",2.9346708496857675e-155,0.07407407407407407,True,True
3664,Do the polet airlines fly to moscow?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Polet_Airlines> <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Moscow> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Do the polet airlines fly to moscow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?airline
WHERE {
  ?airline dbo:name ""polet airlines"" .
  ?airline dbo:airlineDestination ?destination .
  ?destination dbo:name ""moscow"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?airline
WHERE {
  ?airline dbo:name ""polet airlines"" .
  ?airline dbo:airlineDestination ?destination .
  ?destination dbo:name ""moscow"" .
}",2.2300068516948962e-155,0.046153846153846156,True,True
1635,Name the television show directed by Simon Fuller and judged by Jennifier Lopez?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the television show directed by Simon Fuller and judged by Jennifier Lopez?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:director ?director .
  ?director dbo:name ""Simon Fuller"" .
  ?show dbo:judge ?judge .
  ?judge dbo:name ""Jennifer Lopez"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:director ?director .
  ?director dbo:name ""Simon Fuller"" .
  ?show dbo:judge ?judge .
  ?judge dbo:name ""Jennifer Lopez"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",8.231055179516831e-232,0.03614457831325301,False,False
4412,Which broad cast area of CFRX is the country of North America Poker Tour ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/CFRX> <http://dbpedia.org/ontology/broadcastArea> ?uri. <http://dbpedia.org/resource/North_American_Poker_Tour> <http://dbpedia.org/ontology/country> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which broad cast area of CFRX is the country of North America Poker Tour ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?broadcastArea
WHERE {
  ?broadcastArea dbo:country ?country .
  ?country rdfs:label ""North America"" .
  ?broadcastArea dbo:broadcasts ?event .
  ?event dbo:name ""North America Poker Tour"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?broadcastArea
WHERE {
  ?broadcastArea dbo:country ?country .
  ?country rdfs:label ""North America"" .
  ?broadcastArea dbo:broadcasts ?event .
  ?event dbo:name ""North America Poker Tour"" .
}",2.5944303248170386e-155,0.05,True,True
3724,Name some sports played in institutions of Maharashtra?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/state> <http://dbpedia.org/resource/Maharashtra> . ?x <http://dbpedia.org/ontology/sport> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name some sports played in institutions of Maharashtra?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?institution dbo:location dbp:Maharashtra .
  ?institution dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?institution dbo:location dbp:Maharashtra .
  ?institution dbo:sports ?sport .
}",3.699591675882789e-155,0.08571428571428572,True,True
4840,South Side elevated railroad and twin cities 400 are operated by which city?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Twin_Cities_400> <http://dbpedia.org/ontology/operatedBy> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: South Side elevated railroad and twin cities 400 are operated by which city?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?railroad dbo:operatedBy ?city .
  FILTER (regex(?railroad, ""South Side elevated railroad"") || regex(?railroad, ""twin cities 400""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?railroad dbo:operatedBy ?city .
  FILTER (regex(?railroad, ""South Side elevated railroad"") || regex(?railroad, ""twin cities 400""))
}",2.4123225276763925e-155,0.06329113924050633,True,True
3667,Name some islands in a pacific archipelago?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Pacific_Ocean> . ?uri <http://dbpedia.org/property/archipelago> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Island>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name some islands in a pacific archipelago?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?islandLabel
WHERE {
  ?island dbo:location ?location .
  ?location dbo:continent ""Pacific Ocean""^^xsd:string .
  ?island rdfs:label ?islandLabel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?islandLabel
WHERE {
  ?island dbo:location ?location .
  ?location dbo:continent ""Pacific Ocean""^^xsd:string .
  ?island rdfs:label ?islandLabel .
}",3.1335534263807668e-155,0.06944444444444445,True,True
1286,Is Lancy a city close to Geneva?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Geneva> <http://dbpedia.org/ontology/neighboringMunicipality> <http://dbpedia.org/resource/Lancy> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Lancy a city close to Geneva?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?distance
WHERE {
  ?city dbo:name ""Lancy"" .
  ?city dbo:locatedIn ?country .
  ?country dbo:name ""Switzerland"" .
  ?city dbp:distanceTo ?otherCity .
  ?otherCity dbo:name ""Geneva"" .
  ?distance a dbo:Distance ;
    dbo:value ?distance .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?distance
WHERE {
  ?city dbo:name ""Lancy"" .
  ?city dbo:locatedIn ?country .
  ?country dbo:name ""Switzerland"" .
  ?city dbp:distanceTo ?otherCity .
  ?otherCity dbo:name ""Geneva"" .
  ?distance a dbo:Distance ;
    dbo:value ?distance .
}",2.0523206950207848e-155,0.04225352112676056,True,True
3065,Which fictional character is portrayed by Roger Barton (film editor)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/portrayer> <http://dbpedia.org/resource/Roger_Barton_(film_editor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which fictional character is portrayed by Roger Barton (film editor)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?character
WHERE {
  ?character dbo:portrayedBy ?editor .
  ?editor dbo:name ""Roger Barton"" .
  FILTER ( ?character rdfs:type dbo:FictionalCharacter )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?character
WHERE {
  ?character dbo:portrayedBy ?editor .
  ?editor dbo:name ""Roger Barton"" .
  FILTER ( ?character rdfs:type dbo:FictionalCharacter )
}",7.943631954232605e-232,0.039473684210526314,False,False
4759,What are the houses of legislature in the political leader's seat of Medininagar?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Medininagar> <http://dbpedia.org/property/leaderTitle> ?x . ?x <http://dbpedia.org/property/houses> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Legislature>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the houses of legislature in the political leader's seat of Medininagar?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?house
WHERE {
  ?leader dbo:seat ?location .
  ?location dbo:name ""Medininagar"" .
  ?location dbo:legislativeBody ?house .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?house
WHERE {
  ?leader dbo:seat ?location .
  ?location dbo:name ""Medininagar"" .
  ?location dbo:legislativeBody ?house .
}",3.0382827129023445e-155,0.06666666666666667,True,True
2759,How many different genres of games can I find which are compatible with the Commodore 64?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Commodore_64> . ?x <http://dbpedia.org/property/genre> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many different genres of games can I find which are compatible with the Commodore 64?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?genre
WHERE {
  ?game dbo:compatibleWith dbr:Commodore_64 .
  ?game dbo:genre ?genre .
}
GROUP BY ?genre
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?genre
WHERE {
  ?game dbo:compatibleWith dbr:Commodore_64 .
  ?game dbo:genre ?genre .
}
GROUP BY ?genre",3.0202505652128895e-155,0.06329113924050633,True,True
2190,Who is the owner of  Chelsea F.C. ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chelsea_F.C.> <http://dbpedia.org/property/owner> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the owner of  Chelsea F.C. ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?owner
WHERE {
  ?club dbo:name ""Chelsea F.C."" .
  ?club dbo:owner ?owner .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?owner
WHERE {
  ?club dbo:name ""Chelsea F.C."" .
  ?club dbo:owner ?owner .
}",2.494821638843469e-155,0.0625,True,True
716,Does Cascade Airways have a hub in Seattle?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Cascade_Airways> <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Seattle> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Cascade Airways have a hub in Seattle?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hub
WHERE {
  ?airline dbo:name ""Cascade Airways"" .
  ?airline dbo:hub ?hub .
  FILTER (str(?hub) = ""Seattle"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hub
WHERE {
  ?airline dbo:name ""Cascade Airways"" .
  ?airline dbo:hub ?hub .
  FILTER (str(?hub) = ""Seattle"")
}",2.259351571061102e-155,0.04477611940298507,True,True
3909,Which companies have Kumho Asiana Group as their parent company?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parentCompany> <http://dbpedia.org/resource/Kumho_Asiana_Group> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which companies have Kumho Asiana Group as their parent company?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:parentOrganization dbp:Kumho_Asiana_Group .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:parentOrganization dbp:Kumho_Asiana_Group .
}",2.4775553999024465e-155,0.05970149253731343,True,True
1850,What is the city of the 2015 MLS All-Star Game and birthplace of the The Okee Dokee Brothers?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_MLS_All-Star_Game> <http://dbpedia.org/property/city> ?uri. <http://dbpedia.org/resource/The_Okee_Dokee_Brothers> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the city of the 2015 MLS All-Star Game and birthplace of the The Okee Dokee Brothers?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city1 ?city2
WHERE {
  ?game dbo:location ?city1 .
  FILTER(?game = <http://dbpedia.org/resource/2015_MLS_All-Star_Game>)
  ?person dbo:birthPlace ?city2 .
  FILTER(?person IN (
    <http://dbpedia.org/resource/Joe_Mailander>,
    <http://dbpedia.org/resource/Justin_""J.D.""_O'Keefe>
  ))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city1 ?city2
WHERE {
  ?game dbo:location ?city1 .
  FILTER(?game = <http://dbpedia.org/resource/2015_MLS_All-Star_Game>)
  ?person dbo:birthPlace ?city2 .
  FILTER(?person IN (
    <http://dbpedia.org/resource/Joe_Mailander>,
    <http://dbpedia.org/resource/Justin_""J.D.""_O'Keefe>
  ))
}",2.0302514477228347e-155,0.03571428571428571,False,False
2305,List TV shows with producer as Erik Bork and company is DreamWorks Television ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/DreamWorks_Television> . ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Erik_Bork>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List TV shows with producer as Erik Bork and company is DreamWorks Television ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:producer dbr:Erik_Bork .
  ?show dbo:company dbr:DreamWorks_Television .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:producer dbr:Erik_Bork .
  ?show dbo:company dbr:DreamWorks_Television .
}",2.486113577066771e-155,0.05263157894736842,True,True
987,Is Peter Piper Pizza in the pizza industry?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Peter_Piper_Pizza> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Pizza> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Peter Piper Pizza in the pizza industry?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?industry
WHERE {
  ?pizza dbo:industry ?industry .
  FILTER (regex(?pizza, ""Peter Piper Pizza"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?industry
WHERE {
  ?pizza dbo:industry ?industry .
  FILTER (regex(?pizza, ""Peter Piper Pizza"", ""i""))
}",2.305625093843957e-155,0.046153846153846156,True,True
3271,Count all the universities who participated in the tournament won by Alabama Crimson Tides in 2015 ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/champion> <http://dbpedia.org/resource/2015_Alabama_Crimson_Tide_football_team> . ?uri <http://dbpedia.org/property/athletics> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all the universities who participated in the tournament won by Alabama Crimson Tides in 2015 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?university
WHERE {
  ?tournament dbo:winner <http://dbpedia.org/resource/Alabama_Crimson_Tides> .
  ?tournament dbo:year ""2015""^^xsd:gYear .
  ?tournament dbo:participant ?university .
  FILTER ( ?university != <http://dbpedia.org/resource/Alabama_Crimson_Tides> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?university
WHERE {
  ?tournament dbo:winner <http://dbpedia.org/resource/Alabama_Crimson_Tides> .
  ?tournament dbo:year ""2015""^^xsd:gYear .
  ?tournament dbo:participant ?university .
  FILTER ( ?university != <http://dbpedia.org/resource/Alabama_Crimson_Tides> )
}",2.3192471031465984e-155,0.04819277108433735,True,True
1276,"What state was Cyrus Mann born in, and has the famous Downriver?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Downriver> <http://dbpedia.org/ontology/state> ?uri. <http://dbpedia.org/resource/Cyrus_Mann> <http://dbpedia.org/property/birthPlace> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What state was Cyrus Mann born in, and has the famous Downriver?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?state
WHERE {
  ?person dbo:birthPlace ?state .
  ?person dbo:name ""Cyrus Mann"" .
  ?location dbo:name ""Downriver"" ;
    dbp:locatedIn ?state .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?state
WHERE {
  ?person dbo:birthPlace ?state .
  ?person dbo:name ""Cyrus Mann"" .
  ?location dbo:name ""Downriver"" ;
    dbp:locatedIn ?state .
}",2.868751113594075e-155,0.06493506493506493,True,True
4349,Which TV show's company is PlayTone and is produced by Stephen E. Ambrose ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Playtone> . ?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which TV show's company is PlayTone and is produced by Stephen E. Ambrose ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:productionCompany ?company .
  ?company dbo:name ""PlayTone"" .
  ?show dbo:director ?director .
  ?director dbo:name ""Stephen E. Ambrose"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:productionCompany ?company .
  ?company dbo:name ""PlayTone"" .
  ?show dbo:director ?director .
  ?director dbo:name ""Stephen E. Ambrose"" .
}",2.344734865707205e-155,0.05063291139240506,True,True
4644,"How many teams was Garry Unger in, previously?",google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Garry_Unger> <http://dbpedia.org/ontology/formerTeam> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many teams was Garry Unger in, previously?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?teamCount
WHERE {
  ?player dbo:name ""Garry Unger"" .
  ?player dbo:previousTeams ?team .
  GROUP BY ?player
  
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?teamCount
WHERE {
  ?player dbo:name ""Garry Unger"" .
  ?player dbo:previousTeams ?team .
  GROUP BY ?player
  
}",2.4440718429993668e-155,0.056338028169014086,False,False
2555,List the name of those who became famous for something garrisoned at Tennessee?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Tennessee> . ?uri <http://dbpedia.org/property/knownFor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the name of those who became famous for something garrisoned at Tennessee?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name
WHERE {
  ?person dbo:birthPlace dbp:Tennessee .
  ?person dbo:knownFor ?thing .
  ?thing dbo:location dbp:Tennessee .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name
WHERE {
  ?person dbo:birthPlace dbp:Tennessee .
  ?person dbo:knownFor ?thing .
  ?thing dbo:location dbp:Tennessee .
}",3.4945213227383114e-155,0.08,True,True
4968,Which TV show's writer is Erik Jendresen and distributor is HBO?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/HBO>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which TV show's writer is Erik Jendresen and distributor is HBO?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:writer ErikJendresen .
  ?show dbo:distributor HBO .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:writer ErikJendresen .
  ?show dbo:distributor HBO .
}",2.533776972251024e-155,0.05555555555555555,False,False
2644,What are some cars similar to the ones assembled at Toluca?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Toluca> . ?x <http://dbpedia.org/property/related> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some cars similar to the ones assembled at Toluca?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?car
WHERE {
  ?car dbo:assemblyLocation <http://dbpedia.org/resource/Toluca> .
  ?car dbo:manufacturer ?manufacturer .
  ?similarCar dbo:manufacturer ?manufacturer .
  FILTER (NOT EXISTS { ?car ?p ?o . })
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?car
WHERE {
  ?car dbo:assemblyLocation <http://dbpedia.org/resource/Toluca> .
  ?car dbo:manufacturer ?manufacturer .
  ?similarCar dbo:manufacturer ?manufacturer .
  FILTER (NOT EXISTS { ?car ?p ?o . })
}",3.3566500347661918e-155,0.075,True,True
4707,What is the allegiance of Albert Kwesi Ocran ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albert_Kwesi_Ocran> <http://dbpedia.org/property/allegiance> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the allegiance of Albert Kwesi Ocran ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?allegiance
WHERE {
  ?person dbo:name ""Albert Kwesi Ocran"" .
  ?person dbo:allegiance ?allegiance .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?allegiance
WHERE {
  ?person dbo:name ""Albert Kwesi Ocran"" .
  ?person dbo:allegiance ?allegiance .
}",2.4606427705034855e-155,0.06153846153846154,True,True
605,Name the scientist who was the winner of Royal Society award and had Georg Meissner as his doctoral advisor ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Royal_Society> . ?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the scientist who was the winner of Royal Society award and had Georg Meissner as his doctoral advisor ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?scientist
WHERE {
  ?scientist dbo:award <http://dbpedia.org/resource/Royal_Society_Award> .
  ?scientist dbo:advisor ?advisor .
  ?advisor dbo:name ""Georg Meissner"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?scientist
WHERE {
  ?scientist dbo:award <http://dbpedia.org/resource/Royal_Society_Award> .
  ?scientist dbo:advisor ?advisor .
  ?advisor dbo:name ""Georg Meissner"" .
}",8.34186146802972e-232,0.036585365853658534,True,True
2321,Does the white river flow into the connecticut river?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Connecticut_River> <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/White_River_(Vermont)> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the white river flow into the connecticut river?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""White River"" .
  ?x dbo:mouth ?y .
  ?y dbo:name ""Connecticut River"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""White River"" .
  ?x dbo:mouth ?y .
  ?y dbo:name ""Connecticut River"" .
}",2.2300068516948962e-155,0.046875,True,True
3617,Where did Louis chevrolet die ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Louis_Chevrolet> <http://dbpedia.org/property/deathPlace> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did Louis chevrolet die ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:name ""Louis Chevrolet"" .
  ?person dbo:deathPlace ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:name ""Louis Chevrolet"" .
  ?person dbo:deathPlace ?location .
}",2.530465559854518e-155,0.06349206349206349,True,True
2945,Which river has its roots in Baikal Mountains?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Baikal_Mountains> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which river has its roots in Baikal Mountains?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?river
WHERE {
  ?river dbo:source ?source .
  ?source dbo:locatedIn <http://dbpedia.org/resource/Baikal_Mountains> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?river
WHERE {
  ?river dbo:source ?source .
  ?source dbo:locatedIn <http://dbpedia.org/resource/Baikal_Mountains> .
}",2.6379527083228047e-155,0.07692307692307693,True,True
2415,List the relative of Tim Nanai-Williams ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tim_Nanai-Williams> <http://dbpedia.org/ontology/relative> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the relative of Tim Nanai-Williams ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?relative
WHERE {
  ?person dbo:name ""Tim Nanai-Williams"" .
  ?person dbo:relative ?relative .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?relative
WHERE {
  ?person dbo:name ""Tim Nanai-Williams"" .
  ?person dbo:relative ?relative .
}",3.1370721297783126e-155,0.078125,True,True
3688,Who are the chancellors of universities which is affiliated with Plymouth University?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Plymouth_University> . ?x <http://dbpedia.org/property/chancellor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the chancellors of universities which is affiliated with Plymouth University?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?chancellor ?university
WHERE {
  ?university dbo:affiliatedWith <http://dbpedia.org/resource/Plymouth_University> .
  ?university rdfs:label ?universityLabel .
  ?university dbo:chancellor ?chancellor .
  ?chancellor rdfs:label ?chancellorLabel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?chancellor ?university
WHERE {
  ?university dbo:affiliatedWith <http://dbpedia.org/resource/Plymouth_University> .
  ?university rdfs:label ?universityLabel .
  ?university dbo:chancellor ?chancellor .
  ?chancellor rdfs:label ?chancellorLabel .
}",3.4137094800074316e-155,0.07792207792207792,True,True
2864,From how many different places have participants of Breeders's Cup Turf come?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/race> <http://dbpedia.org/resource/Breeders'_Cup_Turf> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: From how many different places have participants of Breeders's Cup Turf come?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?participant dbo:birthPlace ?place .
  ?participant dbo:participatedIn ?event .
  ?event rdfs:label ""Breeders' Cup Turf"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?participant dbo:birthPlace ?place .
  ?participant dbo:participatedIn ?event .
  ?event rdfs:label ""Breeders' Cup Turf"" .
}",2.9851289841006984e-155,0.06172839506172839,True,True
4071,Who gave the musical score of 9 to 5 (musical) ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/9_to_5_(musical)> <http://dbpedia.org/ontology/musicBy> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who gave the musical score of 9 to 5 (musical) ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?composer
WHERE {
  ?musical dbo:composer ?composer .
  FILTER (str(?musical) = ""9 to 5 (musical)"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?composer
WHERE {
  ?musical dbo:composer ?composer .
  FILTER (str(?musical) = ""9 to 5 (musical)"")
}",2.4119102000777368e-155,0.057971014492753624,True,True
3342,Who is the leader of Allgemeine SS ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allgemeine_SS> <http://dbpedia.org/ontology/leader> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the leader of Allgemeine SS ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?leader
WHERE {
  ?leader dbo:leaderOf <http://dbpedia.org/resource/Allgemeine_SS> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?leader
WHERE {
  ?leader dbo:leaderOf <http://dbpedia.org/resource/Allgemeine_SS> .
}",2.7353319119103705e-155,0.08196721311475409,True,True
4618,How many movies are distributed by Cinema International Corporation?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many movies are distributed by Cinema International Corporation?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:distributor dbo:Cinema_International_Corporation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:distributor dbo:Cinema_International_Corporation .
}",8.289228799996742e-232,0.043478260869565216,True,True
4199,Does Chicago own the Monroe Station?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Monroe_station_(CTA_Blue_Line)> <http://dbpedia.org/property/owned> <http://dbpedia.org/resource/Chicago> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Chicago own the Monroe Station?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:officialName ""Chicago"" .
  ?x dbo:owns ?y .
  ?y dbo:officialName ""Monroe Station"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:officialName ""Chicago"" .
  ?x dbo:owns ?y .
  ?y dbo:officialName ""Monroe Station"" .
}",2.2898861187450904e-155,0.04838709677419355,True,True
4653,Give me a count of movies whose editor is Mark Stevens?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me a count of movies whose editor is Mark Stevens?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Mark Stevens"" .
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Mark Stevens"" .
}",8.094051362019983e-232,0.0410958904109589,True,True
230,Which Fox show is presented by Ryan Seacrest?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest> . ?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which Fox show is presented by Ryan Seacrest?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:presentedBy ?person .
  ?person dbo:name ""Ryan Seacrest"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:presentedBy ?person .
  ?person dbo:name ""Ryan Seacrest"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",8.561894227089738e-232,0.03896103896103896,False,False
1168,Name the river passing through Reading Berkshire and has mouth place at Essex?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Reading,_Berkshire> . ?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the river passing through Reading Berkshire and has mouth place at Essex?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:locatedIn ?location .
  ?location dbo:name ""Reading, Berkshire""@en .
  ?river dbo:mouthPlace ?mouthPlace .
  ?mouthPlace dbo:name ?mouthName .
  FILTER (regex(?mouthName, ""Essex"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:locatedIn ?location .
  ?location dbo:name ""Reading, Berkshire""@en .
  ?river dbo:mouthPlace ?mouthPlace .
  ?mouthPlace dbo:name ?mouthName .
  FILTER (regex(?mouthName, ""Essex"", ""i""))
}",8.319100378795605e-232,0.037037037037037035,True,True
2007,What is the currency of Republic of Montenegro (1992-2006) ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Republic_of_Montenegro_(1992–2006)> <http://dbpedia.org/property/currency> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the currency of Republic of Montenegro (1992-2006) ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?currency
WHERE {
  ?country dbo:name ""Republic of Montenegro"" .
  ?country dbo:officialCurrency ?currency .
  FILTER (regex(?country rdfs:label ""Republic of Montenegro"", ""1992-2006""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?currency
WHERE {
  ?country dbo:name ""Republic of Montenegro"" .
  ?country dbo:officialCurrency ?currency .
  FILTER (regex(?country rdfs:label ""Republic of Montenegro"", ""1992-2006""))
}",2.294894159058245e-155,0.05555555555555555,False,False
3330,What is the headquarters of Juan Dalmau Ramerez?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juan_Dalmau_Ramírez> <http://dbpedia.org/property/headquarters> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the headquarters of Juan Dalmau Ramerez?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?headquarters
WHERE {
  ?person dbo:name ""Juan Dalmau Ramerez"" .
  ?person dbo:headquarters ?headquarters .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?headquarters
WHERE {
  ?person dbo:name ""Juan Dalmau Ramerez"" .
  ?person dbo:headquarters ?headquarters .
}",2.4775553999024465e-155,0.0625,True,True
3921,Name the television program voiced by Isaac Hayes and aired on Comedy Central?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes> . ?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the television program voiced by Isaac Hayes and aired on Comedy Central?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?program
WHERE {
  ?program dbo:voicedBy ?actor .
  ?actor dbo:name ""Isaac Hayes"" .
  ?program dbo:broadcastNetwork dbo:ComedyCentral .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?program
WHERE {
  ?program dbo:voicedBy ?actor .
  ?actor dbo:name ""Isaac Hayes"" .
  ?program dbo:broadcastNetwork dbo:ComedyCentral .
}",8.510469113101058e-232,0.039473684210526314,True,True
3229,Name the award given in Norway and presented by Swedish Academy ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Swedish_Academy> . ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Norway>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the award given in Norway and presented by Swedish Academy ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?awardName
WHERE {
  ?award dbo:awardName ?awardName .
  ?award dbo:presentedBy ?presentedBy .
  ?presentedBy dbo:country ?country .
  FILTER(?country = ""Sweden"")
  ?award dbo:location ?location .
  FILTER(?location = ""Norway"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?awardName
WHERE {
  ?award dbo:awardName ?awardName .
  ?award dbo:presentedBy ?presentedBy .
  ?presentedBy dbo:country ?country .
  FILTER(?country = ""Sweden"")
  ?award dbo:location ?location .
  FILTER(?location = ""Norway"")
}",8.319100378795605e-232,0.037037037037037035,True,True
984,List all the doctoral student of the scientist who has advised John Bowlby?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/John_Bowlby> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the doctoral student of the scientist who has advised John Bowlby?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?student
WHERE {
  ?scientist dbo:advised ?bowlby .
  ?bowlby rdf:type dbo:Person .
  ?bowlby dbp:birthDate ""1907-01-26""^^xsd:date .
  ?scientist dbo:doctoralStudent ?student .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?student
WHERE {
  ?scientist dbo:advised ?bowlby .
  ?bowlby rdf:type dbo:Person .
  ?bowlby dbp:birthDate ""1907-01-26""^^xsd:date .
  ?scientist dbo:doctoralStudent ?student .
}",2.968021523431445e-155,0.06493506493506493,True,True
2052,How many saints have been venerated in Judaism?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Judaism>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Saint>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many saints have been venerated in Judaism?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?saint dbo:religion ""Judaism""^^xsd:string .
  ?saint dbo:religious_tradition ""Saint""^^xsd:string .
  FILTER (EXISTS { ?saint dbo:venerated_by ?venerator . })
}
GROUP BY ?saint
HAVING (COUNT(?venerator) > 0)
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?saint dbo:religion ""Judaism""^^xsd:string .
  ?saint dbo:religious_tradition ""Saint""^^xsd:string .
  FILTER (EXISTS { ?saint dbo:venerated_by ?venerator . })
}
GROUP BY ?saint
HAVING (COUNT(?venerator) > 0)",7.873430974476304e-232,0.0379746835443038,True,False
2771,Which non fictional subject of Thud is the athletics of PATTS College of Aeronautics ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thud!> <http://dbpedia.org/ontology/nonFictionSubject> ?uri. <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> <http://dbpedia.org/property/athletics> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which non fictional subject of Thud is the athletics of PATTS College of Aeronautics ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:subjectOf <http://dbpedia.org/resource/Thud> .
  ?subject dbo:genre ""Non-fiction""@en .
  ?subject dbp:subjectOf ?athletics .
  ?athletics dbo:wikiPageRedirects <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:subjectOf <http://dbpedia.org/resource/Thud> .
  ?subject dbo:genre ""Non-fiction""@en .
  ?subject dbp:subjectOf ?athletics .
  ?athletics dbo:wikiPageRedirects <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> .
}",2.8039101108246434e-155,0.0641025641025641,True,True
3371,What is the occupation of the band members of The Shirelles?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/The_Shirelles> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the occupation of the band members of The Shirelles?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?member ?occupation
WHERE {
  ?band dbo:members ?member .
  ?band dbo:name ""The Shirelles"" .
  ?member dbo:occupation ?occupation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?member ?occupation
WHERE {
  ?band dbo:members ?member .
  ?band dbo:name ""The Shirelles"" .
  ?member dbo:occupation ?occupation .
}",3.4945213227383114e-155,0.0821917808219178,True,True
2833,What is the religious affiliation of Hong Kong Taoist Association Tang Hin Memorial Secondary School ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hong_Kong_Taoist_Association_Tang_Hin_Memorial_Secondary_School> <http://dbpedia.org/property/religiousAffiliation> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the religious affiliation of Hong Kong Taoist Association Tang Hin Memorial Secondary School ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religiousAffiliation
WHERE {
  ?school dbo:religiousAffiliation ?religiousAffiliation .
  FILTER (regex(?school, ""Hong Kong Taoist Association Tang Hin Memorial Secondary School"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religiousAffiliation
WHERE {
  ?school dbo:religiousAffiliation ?religiousAffiliation .
  FILTER (regex(?school, ""Hong Kong Taoist Association Tang Hin Memorial Secondary School"", ""i""))
}",2.268207528392565e-155,0.05405405405405406,True,True
3974,"For how many PMs did the politician work, whose successor was Kingsley Wood?",google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Kingsley_Wood> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: For how many PMs did the politician work, whose successor was Kingsley Wood?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?politician dbo:successor ?successor .
  ?successor dbo:name ""Kingsley Wood"" .
  ?politician dbp:primeMinister ?pm .
  ?pm dbo:name ?pmName .
  GROUP BY ?politician
  
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?politician dbo:successor ?successor .
  ?successor dbo:name ""Kingsley Wood"" .
  ?politician dbp:primeMinister ?pm .
  ?pm dbo:name ?pmName .
  GROUP BY ?politician
  
}",2.384592839964215e-155,0.05,False,False
3666,In which state is the alma matter of Jan Paulsen located ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jan_Paulsen> <http://dbpedia.org/ontology/almaMater> ?x . ?x <http://dbpedia.org/property/state> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which state is the alma matter of Jan Paulsen located ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?state
WHERE {
  ?person dbo:almaMater ?university .
  ?university dbp:location ?location .
  ?location dbo:country ?country .
  FILTER ( ?person = <http://dbpedia.org/resource/Jan_Paulsen> )
  FILTER ( ?country = <http://dbpedia.org/resource/United_States> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?state
WHERE {
  ?person dbo:almaMater ?university .
  ?university dbp:location ?location .
  ?location dbo:country ?country .
  FILTER ( ?person = <http://dbpedia.org/resource/Jan_Paulsen> )
  FILTER ( ?country = <http://dbpedia.org/resource/United_States> )
}",2.5092505335702585e-155,0.07407407407407407,True,True
1059,What are the track and field events of Jamiatu Muslim Mindanao?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jamiatu_Muslim_Mindanao> <http://dbpedia.org/property/athletics> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the track and field events of Jamiatu Muslim Mindanao?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?event
WHERE {
  ?university dbo:sportsTeam ?team .
  ?team dbo:name ""Jamiatu Muslim Mindanao"" .
  ?team dbo:participatesIn ?event .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?event
WHERE {
  ?university dbo:sportsTeam ?team .
  ?team dbo:name ""Jamiatu Muslim Mindanao"" .
  ?team dbo:participatesIn ?event .
}",2.9029053187216252e-155,0.07042253521126761,True,True
3294,Whose predecessor had Jenny Macklin as a deputy ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/deputy> <http://dbpedia.org/resource/Jenny_Macklin> . ?uri <http://dbpedia.org/property/predecessor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose predecessor had Jenny Macklin as a deputy ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?person dbo:predecessor ?predecessor .
  ?predecessor dbo:deputy ?Macklin .
  FILTER (str(?Macklin) = ""Jenny Macklin"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?person dbo:predecessor ?predecessor .
  ?predecessor dbo:deputy ?Macklin .
  FILTER (str(?Macklin) = ""Jenny Macklin"")
}",2.6692174103668895e-155,0.06944444444444445,True,True
979,Mike Shinoda is in which band?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Mike_Shinoda> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Mike Shinoda is in which band?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?band
WHERE {
  ?person dbo:name ""Mike Shinoda"" .
  ?person dbo:memberOf ?band .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?band
WHERE {
  ?person dbo:name ""Mike Shinoda"" .
  ?person dbo:memberOf ?band .
}",8.289228799996742e-232,0.047619047619047616,True,True
2494,What is the home town of Rolando Gomez and is also the place of death of Clyde McNeal?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rolando_Gomez> <http://dbpedia.org/property/homeTown> ?uri. <http://dbpedia.org/resource/Clyde_McNeal> <http://dbpedia.org/property/deathDate> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the home town of Rolando Gomez and is also the place of death of Clyde McNeal?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?hometown ?deathplace
WHERE {
  ?rolandoGomez dbo:birthPlace ?hometown .
  ?clydeMcNeal dbo:deathPlace ?deathplace .
  FILTER(?hometown = ?deathplace)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?hometown ?deathplace
WHERE {
  ?rolandoGomez dbo:birthPlace ?hometown .
  ?clydeMcNeal dbo:deathPlace ?deathplace .
  FILTER(?hometown = ?deathplace)
}",2.6667146252330243e-155,0.05128205128205128,True,True
4214,Which hub of Cascade Airways is also the resting place of Brandon Lee ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cascade_Airways> <http://dbpedia.org/property/hubs> ?uri. <http://dbpedia.org/resource/Brandon_Lee> <http://dbpedia.org/ontology/restingPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which hub of Cascade Airways is also the resting place of Brandon Lee ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?hub
WHERE {
  ?hub dbo:hubOf ?airline .
  ?airline dbo:name ""Cascade Airways"" .
  ?hub dbo:locatedIn ?city .
  ?city dbo:name ""Los Angeles"" .
  ?city dbo:locatedIn ?state .
  ?state dbo:name ""California"" .
  ?city dbo:birthPlace ?person .
  ?person dbo:name ""Brandon Lee"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?hub
WHERE {
  ?hub dbo:hubOf ?airline .
  ?airline dbo:name ""Cascade Airways"" .
  ?hub dbo:locatedIn ?city .
  ?city dbo:name ""Los Angeles"" .
  ?city dbo:locatedIn ?state .
  ?state dbo:name ""California"" .
  ?city dbo:birthPlace ?person .
  ?person dbo:name ""Brandon Lee"" .
}",1.902304865284239e-155,0.03571428571428571,True,True
4288,What is the birthplace of the netball player who is the relative of Rachel Rasmussen ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rachel_Rasmussen> <http://dbpedia.org/property/relatives> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/NetballPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the birthplace of the netball player who is the relative of Rachel Rasmussen ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?birthplace
WHERE {
  ?player dbo:birthDate ?birth.
  ?player dbo:birthPlace ?birthplace.
  ?player dbo:family ?relative.
  ?relative dbo:name ""Rachel Rasmussen"" .
  FILTER (lang(?birth) = ""en"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?birthplace
WHERE {
  ?player dbo:birthDate ?birth.
  ?player dbo:birthPlace ?birthplace.
  ?player dbo:family ?relative.
  ?relative dbo:name ""Rachel Rasmussen"" .
  FILTER (lang(?birth) = ""en"")
}",2.205362109328438e-155,0.047619047619047616,True,True
4875,Which hockey team is head coached by Bill Peters?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/headCoach> <http://dbpedia.org/resource/Bill_Peters_(ice_hockey)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HockeyTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which hockey team is head coached by Bill Peters?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?team dbo:headCoach ?coach .
  ?coach dbo:name ""Bill Peters"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?team dbo:headCoach ?coach .
  ?coach dbo:name ""Bill Peters"" .
}",8.202720662090001e-232,0.04411764705882353,True,True
4623,Which person works at the American Magazine?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/employer> <http://dbpedia.org/resource/The_American_Magazine>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which person works at the American Magazine?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:employedBy ?organization .
  ?organization dbo:name ""American Magazine"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:employedBy ?organization .
  ?organization dbo:name ""American Magazine"" .
}",2.494821638843469e-155,0.06060606060606061,True,True
481,What are the cities located on the sea into which the Aegean Sea flows?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aegean_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the cities located on the sea into which the Aegean Sea flows?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city ?cityLabel
WHERE {
  ?city dbo:locatedIn ?sea .
  ?sea dbo:subsumedBy <http://dbpedia.org/resource/Aegean_Sea> .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city ?cityLabel
WHERE {
  ?city dbo:locatedIn ?sea .
  ?sea dbo:subsumedBy <http://dbpedia.org/resource/Aegean_Sea> .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",3.171276006009064e-155,0.08860759493670886,False,False
1184,Who owns the schools which have a penguin as its mascot?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/mascot> <http://dbpedia.org/resource/Penguin> . ?x <http://dbpedia.org/ontology/authority> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who owns the schools which have a penguin as its mascot?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?school ?owner
WHERE {
  ?school dbo:mascot ?penguin .
  ?penguin dbo:name ""Penguin"" .
  ?school dbo:owner ?owner .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?school ?owner
WHERE {
  ?school dbo:mascot ?penguin .
  ?penguin dbo:name ""Penguin"" .
  ?school dbo:owner ?owner .
}",3.0566417519593477e-155,0.06756756756756757,True,True
4309,Name the movie whose director is Stanley Kubrick and editor is Anthony Harvey?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/editing> <http://dbpedia.org/resource/Anthony_Harvey> . ?uri <http://dbpedia.org/ontology/director> <http://dbpedia.org/resource/Stanley_Kubrick>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the movie whose director is Stanley Kubrick and editor is Anthony Harvey?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movie
WHERE {
  ?movie dbo:director <http://dbpedia.org/resource/Stanley_Kubrick> .
  ?movie dbo:editor <http://dbpedia.org/resource/Anthony_Harvey> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movie
WHERE {
  ?movie dbo:director <http://dbpedia.org/resource/Stanley_Kubrick> .
  ?movie dbo:editor <http://dbpedia.org/resource/Anthony_Harvey> .
}",3.195205633963664e-155,0.07142857142857142,True,True
1325,Name the movies writtten by the group Monty Python?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Monty_Python>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the movies writtten by the group Monty Python?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?movieLabel
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Monty Python"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?movieLabel
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Monty Python"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.308595628361502e-155,0.05333333333333334,False,False
4280,What show has writing of Erik Jendresen and Graham Yost?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> . ?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Graham_Yost> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What show has writing of Erik Jendresen and Graham Yost?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:writer ?writer .
  ?writer dbo:name ""Erik Jendresen"" .
  FILTER (BOUND(?writer))
  ?show dbo:writer ?writer2 .
  ?writer2 dbo:name ""Graham Yost"" .
  FILTER (BOUND(?writer2))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:writer ?writer .
  ?writer dbo:name ""Erik Jendresen"" .
  FILTER (BOUND(?writer))
  ?show dbo:writer ?writer2 .
  ?writer2 dbo:name ""Graham Yost"" .
  FILTER (BOUND(?writer2))
}",2.91841165985534e-155,0.0641025641025641,True,True
204,Who were in the youth clubs that were in season of 2015 Argentine Primera Division?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/season> <http://dbpedia.org/resource/2015_Argentine_Primera_División> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who were in the youth clubs that were in season of 2015 Argentine Primera Division?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player
WHERE {
  ?club dbo:season ?season .
  ?season dbo:year ""2015""^^xsd:gYear .
  ?club dbo:league dbp:Argentine_Primera_Division .
  ?club dbo:youthClub ?youthClub .
  ?youthClub dbo:member ?player .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?player
WHERE {
  ?club dbo:season ?season .
  ?season dbo:year ""2015""^^xsd:gYear .
  ?club dbo:league dbp:Argentine_Primera_Division .
  ?club dbo:youthClub ?youthClub .
  ?youthClub dbo:member ?player .
}",3.3023594192188504e-155,0.0759493670886076,True,True
3020,Which city near to Elliott Bay was the death place of George F. Moore?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Elliott_Bay> <http://dbpedia.org/ontology/nearestCity> ?uri. <http://dbpedia.org/resource/George_F._Moore_(lieutenant_governor)> <http://dbpedia.org/property/placeOfDeath> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which city near to Elliott Bay was the death place of George F. Moore?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?person dbo:deathPlace ?city .
  ?person dbo:name ""George F. Moore"" .
  ?city dbo:locatedIn ?location .
  ?location dbo:near ?bay .
  ?bay dbo:name ""Elliott Bay"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?person dbo:deathPlace ?city .
  ?person dbo:name ""George F. Moore"" .
  ?city dbo:locatedIn ?location .
  ?location dbo:near ?bay .
  ?bay dbo:name ""Elliott Bay"" .
}",2.0194805030799393e-155,0.037037037037037035,True,True
2972,List all the mebers of Mekong River Commission?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mekong_River_Commission> <http://dbpedia.org/property/membership> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the mebers of Mekong River Commission?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?member
WHERE {
  ?member dbo:memberOf ?commission .
  ?commission dbo:name ""Mekong River Commission"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?member
WHERE {
  ?member dbo:memberOf ?commission .
  ?commission dbo:name ""Mekong River Commission"" .
}",3.032816514970993e-155,0.07462686567164178,True,True
2922,"What are Breann McGregor and Anika Knudsen, both known for?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Breann_McGregor> <http://dbpedia.org/property/knownFor> ?uri. <http://dbpedia.org/resource/Anika_Knudsen> <http://dbpedia.org/property/knownFor> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are Breann McGregor and Anika Knudsen, both known for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?knownFor
WHERE {
  ?person a dbo:Person ;
    dbp:knownFor ?knownFor .
  FILTER (regex(?person, ""Breann McGregor"", ""i"") || regex(?person, ""Anika Knudsen"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?knownFor
WHERE {
  ?person a dbo:Person ;
    dbp:knownFor ?knownFor .
  FILTER (regex(?person, ""Breann McGregor"", ""i"") || regex(?person, ""Anika Knudsen"", ""i""))
}",3.0566417519593477e-155,0.0759493670886076,True,True
3507,Who are the shareholders of the soccer club for whom Steve Holland plays?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Steve_Holland_(footballer)> <http://dbpedia.org/property/currentclub> ?x . ?x <http://dbpedia.org/property/owner> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the shareholders of the soccer club for whom Steve Holland plays?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?shareholder
WHERE {
  ?player dbo:playsFor ?club .
  ?player rdf:type dbo:SoccerPlayer .
  ?player dbo:name ""Steve Holland""^^xsd:string .
  ?club dbo:shareholder ?shareholder .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?shareholder
WHERE {
  ?player dbo:playsFor ?club .
  ?player rdf:type dbo:SoccerPlayer .
  ?player dbo:name ""Steve Holland""^^xsd:string .
  ?club dbo:shareholder ?shareholder .
}",2.968021523431445e-155,0.06578947368421052,True,True
640,List the broadcast area of the TV stations which also serves in Agalga?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/broadcastArea> <http://dbpedia.org/resource/Agaléga> . ?x <http://dbpedia.org/property/broadcastArea> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the broadcast area of the TV stations which also serves in Agalga?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?station ?broadcastArea
WHERE {
  ?station dbo:location dbo:Agalga .
  ?station dbo:broadcastArea ?broadcastArea .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?station ?broadcastArea
WHERE {
  ?station dbo:location dbo:Agalga .
  ?station dbo:broadcastArea ?broadcastArea .
}",3.559043432561587e-155,0.0821917808219178,True,True
304,What is the place of birth of the stars of Auto Shankar ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Auto_Shankar_(film)> <http://dbpedia.org/property/starring> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the place of birth of the stars of Auto Shankar ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?place
WHERE {
  ?person dbo:birthPlace ?place .
  ?person dbo:name ""Auto Shankar"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?place
WHERE {
  ?person dbo:birthPlace ?place .
  ?person dbo:name ""Auto Shankar"" .
}",3.1742523358973992e-155,0.07246376811594203,True,True
1335,Whose opponents are Ike Clanton and Billy Clanton?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Ike_Clanton> . ?uri <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Billy_Clanton> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose opponents are Ike Clanton and Billy Clanton?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?opponent
WHERE {
  ?person dbo:name ""Ike Clanton"" .
  ?person dbp:opponent ?opponent .
  UNION
  ?person dbo:name ""Billy Clanton"" .
  ?person dbp:opponent ?opponent .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?opponent
WHERE {
  ?person dbo:name ""Ike Clanton"" .
  ?person dbp:opponent ?opponent .
  UNION
  ?person dbo:name ""Billy Clanton"" .
  ?person dbp:opponent ?opponent .
}",3.5156372159951298e-155,0.08695652173913043,False,False
4387,In how many places have people canonized by John Paul II died?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Pope_John_Paul_II> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Place>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In how many places have people canonized by John Paul II died?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?person dbo:canonizedBy ?pope .
  ?pope dbo:name ""John Paul II""^^xsd:string .
  ?person dbo:deathPlace ?place .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?person dbo:canonizedBy ?pope .
  ?pope dbo:name ""John Paul II""^^xsd:string .
  ?person dbo:deathPlace ?place .
}",2.3983374600418706e-155,0.04878048780487805,True,True
919,Whose theme music was composed by a band which collaborated with Phish?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Phish> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose theme music was composed by a band which collaborated with Phish?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person ?themeMusic
WHERE {
  ?person dbo:themeMusic ?themeMusic .
  ?themeMusic dbo:composer ?composer .
  ?composer dbo:collaboratedWith ?collaborator .
  ?collaborator dbo:name ""Phish"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT DISTINCT ?person ?themeMusic
WHERE {
  ?person dbo:themeMusic ?themeMusic .
  ?themeMusic dbo:composer ?composer .
  ?composer dbo:collaboratedWith ?collaborator .
  ?collaborator dbo:name ""Phish"" .
}",3.3566500347661918e-155,0.07792207792207792,True,True
4856,How many cars succeed the cars assembled in Canada?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Canada> . ?x <http://dbpedia.org/ontology/predecessor> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many cars succeed the cars assembled in Canada?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?car dbo:assemblyLocation dbp:Canada .
  ?successor dbo:successorOf ?car .
  FILTER NOT EXISTS { ?successor dbo:assemblyLocation dbp:Canada }
  
}
GROUP BY ?car
COUNT(?successor) AS ?count
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?car dbo:assemblyLocation dbp:Canada .
  ?successor dbo:successorOf ?car .
  FILTER NOT EXISTS { ?successor dbo:assemblyLocation dbp:Canada }
  
}
GROUP BY ?car
COUNT(?successor) AS ?count",2.4123225276763925e-155,0.05263157894736842,False,False
349,List down the schools whose mascot's order is Even-toed ungulate?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Even-toed_ungulate> . ?uri <http://dbpedia.org/property/mascot> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List down the schools whose mascot's order is Even-toed ungulate?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?school
WHERE {
  ?school dbo:mascot ?mascot .
  ?mascot dbo:classification dbo:Even_toed_ungulate .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?school
WHERE {
  ?school dbo:mascot ?mascot .
  ?mascot dbo:classification dbo:Even_toed_ungulate .
}",3.7246750897077527e-155,0.08695652173913043,True,True
4110,What are the important buildings of the architect whose one of the significant building is Krasnye Vorota?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/significantBuilding> <http://dbpedia.org/resource/Krasnye_Vorota_(Moscow_Metro)> . ?x <http://dbpedia.org/ontology/significantBuilding> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the important buildings of the architect whose one of the significant building is Krasnye Vorota?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?architect ?architectLabel ?building ?buildingLabel
WHERE {
  ?building dbo:architect ?architect .
  ?building rdfs:label ""Krasnye Vorota""@en .
  ?architect rdfs:label ?architectLabel .
  ?building rdfs:label ?buildingLabel .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?architect ?architectLabel ?building ?buildingLabel
WHERE {
  ?building dbo:architect ?architect .
  ?building rdfs:label ""Krasnye Vorota""@en .
  ?architect rdfs:label ?architectLabel .
  ?building rdfs:label ?buildingLabel .
}",2.8409841948588806e-155,0.0641025641025641,True,True
431,List the stadium of the teams which uses Nea Smyrni as one of the stadium?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/stadium> <http://dbpedia.org/resource/Nea_Smyrni_Stadium> . ?x <http://dbpedia.org/property/stadium> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the stadium of the teams which uses Nea Smyrni as one of the stadium?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team ?stadium
WHERE {
  ?team dbo:stadium ?stadium .
  ?stadium dbo:location dbp:Nea_Smyrni .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team ?stadium
WHERE {
  ?team dbo:stadium ?stadium .
  ?stadium dbo:location dbp:Nea_Smyrni .
}",3.5156372159951298e-155,0.08450704225352113,True,True
630,Which company is the parent company of Chevrolet Spark?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chevrolet_Spark> <http://dbpedia.org/property/parentCompany> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which company is the parent company of Chevrolet Spark?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parentCompany WHERE {
  ?car dbo:brand ""Chevrolet"" .
  ?car dbo:model ""Spark"" .
  ?car dbo:parentCompany ?parentCompany .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parentCompany WHERE {
  ?car dbo:brand ""Chevrolet"" .
  ?car dbo:model ""Spark"" .
  ?car dbo:parentCompany ?parentCompany .
}",2.427831263680579e-155,0.06153846153846154,True,True
2296,Name the office holder with associate as Marcus Calpurnius Bibulus and has a kid named Augustus?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associate> <http://dbpedia.org/resource/Marcus_Calpurnius_Bibulus> . ?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Augustus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the office holder with associate as Marcus Calpurnius Bibulus and has a kid named Augustus?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?officeHolder
WHERE {
  ?officeHolder dbo:associate ?associate .
  ?associate dbo:name ""Marcus Calpurnius Bibulus""^^xsd:string .
  ?officeHolder dbo:child ?child .
  ?child dbo:name ""Augustus""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?officeHolder
WHERE {
  ?officeHolder dbo:associate ?associate .
  ?associate dbo:name ""Marcus Calpurnius Bibulus""^^xsd:string .
  ?officeHolder dbo:child ?child .
  ?child dbo:name ""Augustus""^^xsd:string .
}",2.3192471031465984e-155,0.05,True,True
3945,How many different organizations own the railway lines which are a part of Norfolk Southern Railway?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/system> <http://dbpedia.org/resource/Norfolk_Southern_Railway> . ?x <http://dbpedia.org/property/owner> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many different organizations own the railway lines which are a part of Norfolk Southern Railway?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?organizationCount
WHERE {
  ?railway dbo:partOf ?nsRailway .
  ?nsRailway dbo:ownedBy ?organization .
  GROUP BY ?organization
  
  
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?organizationCount
WHERE {
  ?railway dbo:partOf ?nsRailway .
  ?nsRailway dbo:ownedBy ?organization .
  GROUP BY ?organization
  
  
}",2.426555136425675e-155,0.05,False,False
3245,Mota Engil built bridges over which rivers?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/builder> <http://dbpedia.org/resource/Mota-Engil> . ?x <http://dbpedia.org/ontology/crosses> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Mota Engil built bridges over which rivers?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river
WHERE {
  ?company dbo:constructionProject ?project .
  ?project dbo:location ?location .
  ?location dbo:locatedIn ?river .
  FILTER ( ?company = <http://dbpedia.org/resource/Mota-Engil> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river
WHERE {
  ?company dbo:constructionProject ?project .
  ?project dbo:location ?location .
  ?location dbo:locatedIn ?river .
  FILTER ( ?company = <http://dbpedia.org/resource/Mota-Engil> )
}",3.157656468883577e-155,0.07792207792207792,True,True
601,Does the Vadodara Railway station lie at the end of the Mathura Vadodara route?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Mathura–Vadodara_Section> <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Vadodara_Junction_railway_station> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the Vadodara Railway station lie at the end of the Mathura Vadodara route?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Vadodara Railway station"" .
  ?x dbo:location dbp:location_of_railway_station ?y .
  ?y dbo:name ""Mathura Vadodara route"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Vadodara Railway station"" .
  ?x dbo:location dbp:location_of_railway_station ?y .
  ?y dbo:name ""Mathura Vadodara route"" .
}",2.0868169697040566e-155,0.04225352112676056,False,False
929,Which television show is the subsequent work of Frasier and the opening theme is Gary Portnoy?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsequentWork> <http://dbpedia.org/resource/Frasier> . ?uri <http://dbpedia.org/ontology/openingTheme> <http://dbpedia.org/resource/Gary_Portnoy>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which television show is the subsequent work of Frasier and the opening theme is Gary Portnoy?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:previousWork ?frasier .
  ?frasier dbo:title ""Frasier"" .
  ?show dbp:openingTheme ?theme .
  ?theme dbo:composer ""Gary Portnoy"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:previousWork ?frasier .
  ?frasier dbo:title ""Frasier"" .
  ?show dbp:openingTheme ?theme .
  ?theme dbo:composer ""Gary Portnoy"" .
}",8.34186146802972e-232,0.0379746835443038,True,True
677,Who was the bronze medalist of Swimming at the 2008 Summer Olympics Men's 400 metre individual medley?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Swimming_at_the_2008_Summer_Olympics_–_Men's_400_metre_individual_medley> <http://dbpedia.org/ontology/bronzeMedalist> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the bronze medalist of Swimming at the 2008 Summer Olympics Men's 400 metre individual medley?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?athlete
WHERE {
  ?athlete dbo:olympicMedal ""Bronze""^^xsd:string .
  ?athlete dbo:olympicGames <http://dbpedia.org/resource/2008_Summer_Olympics> .
  ?athlete dbo:sport dbp:Swimming .
  ?athlete dbo:olympicEvent <http://dbpedia.org/resource/Men%27s_400_metre_individual_medley> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?athlete
WHERE {
  ?athlete dbo:olympicMedal ""Bronze""^^xsd:string .
  ?athlete dbo:olympicGames <http://dbpedia.org/resource/2008_Summer_Olympics> .
  ?athlete dbo:sport dbp:Swimming .
  ?athlete dbo:olympicEvent <http://dbpedia.org/resource/Men%27s_400_metre_individual_medley> .
}",2.2175133245798802e-155,0.05194805194805195,True,True
112,What is the province of Rouen Business School?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rouen_Business_School> <http://dbpedia.org/property/province> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the province of Rouen Business School?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?province
WHERE {
  ?school dbo:location ?location .
  ?location dbo:country ""France"" .
  ?location dbo:administrativeRegion ?province .
  FILTER (regex(?school, ""Rouen Business School"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?province
WHERE {
  ?school dbo:location ?location .
  ?location dbo:country ""France"" .
  ?location dbo:administrativeRegion ?province .
  FILTER (regex(?school, ""Rouen Business School"", ""i""))
}",2.3512210545397443e-155,0.05714285714285714,True,True
3351,In which part of the world can i find Xynisteri and Mavro?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xynisteri> <http://dbpedia.org/ontology/origin> ?uri. <http://dbpedia.org/resource/Mavro> <http://dbpedia.org/ontology/origin> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which part of the world can i find Xynisteri and Mavro?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?wine a dbo:Wine .
  ?wine dbo:variety ""Xynisteri""^^xsd:string .
  ?wine dbo:variety ""Mavro""^^xsd:string .
  ?wine dbo:origin ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?wine a dbo:Wine .
  ?wine dbo:variety ""Xynisteri""^^xsd:string .
  ?wine dbo:variety ""Mavro""^^xsd:string .
  ?wine dbo:origin ?location .
}",3.3624125453069686e-155,0.08333333333333333,True,True
2793,List the universities with athletics NCAA Division I Football Bowl Subdivision?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/athletics> <http://dbpedia.org/resource/NCAA_Division_I_Football_Bowl_Subdivision>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the universities with athletics NCAA Division I Football Bowl Subdivision?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university
WHERE {
  ?university dbo:wikiPageRedirects* dbo:University .
  ?university dbo:sportsTeam ?team .
  ?team dbo:sportsLeague ?league .
  ?league dbo:name ""NCAA Division I Football Bowl Subdivision"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university
WHERE {
  ?university dbo:wikiPageRedirects* dbo:University .
  ?university dbo:sportsTeam ?team .
  ?team dbo:sportsLeague ?league .
  ?league dbo:name ""NCAA Division I Football Bowl Subdivision"" .
}",2.2552086692851858e-155,0.05405405405405406,True,True
1652,Who produced the Pixar Image Computer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/product> <http://dbpedia.org/resource/Pixar_Image_Computer>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who produced the Pixar Image Computer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?producer
WHERE {
  ?computer dbo:producedBy ?producer .
  FILTER (regex(?computer, ""Pixar Image Computer"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?producer
WHERE {
  ?computer dbo:producedBy ?producer .
  FILTER (regex(?computer, ""Pixar Image Computer"", ""i""))
}",8.875825067922154e-232,0.06153846153846154,True,True
1758,Which football players currently have their contracts with Stoke City F.C.?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/currentclub> <http://dbpedia.org/resource/Stoke_City_F.C.> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which football players currently have their contracts with Stoke City F.C.?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?player ?playerLabel
WHERE {
  ?player dbo:playsFor ?club .
  ?club dbo:name ""Stoke City F.C."" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?player ?playerLabel
WHERE {
  ?player dbo:playsFor ?club .
  ?club dbo:name ""Stoke City F.C."" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.2552086692851858e-155,0.05194805194805195,False,False
3408,Give me an estimate number of races where horses grandsired by the Wild Risk have raced in?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/grandsire> <http://dbpedia.org/resource/Wild_Risk> . ?x <http://dbpedia.org/property/race> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/HorseRace>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me an estimate number of races where horses grandsired by the Wild Risk have raced in?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?race) AS ?raceCount)
WHERE {
  ?horse dbo:grandsire ?grandsire .
  ?grandsire dbo:name ""Wild Risk""^^xsd:string .
  ?horse dbo:participatedIn ?race .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?race) AS ?raceCount)
WHERE {
  ?horse dbo:grandsire ?grandsire .
  ?grandsire dbo:name ""Wild Risk""^^xsd:string .
  ?horse dbo:participatedIn ?race .
}",2.344734865707205e-155,0.046511627906976744,True,True
4547,List the destinations of Novair International Airways ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Novair_International_Airways> <http://dbpedia.org/property/destinations> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the destinations of Novair International Airways ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?destination
WHERE {
  ?airline dbo:airlineDestinations ?destination .
  FILTER (str(?airline) = ""Novair International Airways"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?destination
WHERE {
  ?airline dbo:airlineDestinations ?destination .
  FILTER (str(?airline) = ""Novair International Airways"")
}",3.0940944781388835e-155,0.07462686567164178,True,True
3151,What is the common product of the Apple Productivity Experience Group and services of the 21Vianet ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Apple_Productivity_Experience_Group> <http://dbpedia.org/ontology/product> ?uri. <http://dbpedia.org/resource/21Vianet> <http://dbpedia.org/property/services> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the common product of the Apple Productivity Experience Group and services of the 21Vianet ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?product
WHERE {
  ?group dbo:product ?product .
  ?group rdfs:label ""Apple Productivity Experience Group"" .
  ?service dbo:product ?product .
  ?service rdfs:label ""21Vianet"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?product
WHERE {
  ?group dbo:product ?product .
  ?group rdfs:label ""Apple Productivity Experience Group"" .
  ?service dbo:product ?product .
  ?service rdfs:label ""21Vianet"" .
}",2.5806662832054458e-155,0.05194805194805195,True,True
1139,Which president of the United States had vice president as John Adams?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/vicePresident> <http://dbpedia.org/resource/John_Adams>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which president of the United States had vice president as John Adams?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?president
WHERE {
  ?president dbo:vicePresident ?johnAdams .
  ?johnAdams dbo:name ""John Adams"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?president
WHERE {
  ?president dbo:vicePresident ?johnAdams .
  ?johnAdams dbo:name ""John Adams"" .
}",8.120546156106983e-232,0.043478260869565216,True,True
3452,Is Rajya Sabha a house of parliament in India?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Parliament_of_India> <http://dbpedia.org/property/houses> <http://dbpedia.org/resource/Rajya_Sabha> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Rajya Sabha a house of parliament in India?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Rajya Sabha"" .
  ?x dbo:partOf ?y .
  ?y dbo:name ""Parliament of India"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Rajya Sabha"" .
  ?x dbo:partOf ?y .
  ?y dbo:name ""Parliament of India"" .
}",2.215756877004116e-155,0.045454545454545456,True,True
983,Which associated band of the Teddy Riley is also the performer of the Before I Let You Go?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Teddy_Riley> <http://dbpedia.org/ontology/associatedBand> ?uri. <http://dbpedia.org/resource/Before_I_Let_You_Go> <http://dbpedia.org/ontology/musicalArtist> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which associated band of the Teddy Riley is also the performer of the Before I Let You Go?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?band
WHERE {
  ?artist dbo:associatedBand ?band .
  ?artist dbo:name ""Teddy Riley"" .
  ?band dbo:name ""Before I Let You Go"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?band
WHERE {
  ?artist dbo:associatedBand ?band .
  ?artist dbo:name ""Teddy Riley"" .
  ?band dbo:name ""Before I Let You Go"" .
}",2.0411965960034616e-155,0.038461538461538464,True,True
650,Who are the former partners of the figure skaters whose performance have been choreographed by Catarina Lindgren in the past?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/formerChoreographer> <http://dbpedia.org/resource/Catarina_Lindgren> . ?x <http://dbpedia.org/ontology/formerPartner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FigureSkater>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the former partners of the figure skaters whose performance have been choreographed by Catarina Lindgren in the past?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?formerPartner
WHERE {
  ?skater dbo:partner ?formerPartner .
  ?skater dbo:choreography ?choreography .
  ?choreography dbo:choreographer Catarina Lindgren .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?formerPartner
WHERE {
  ?skater dbo:partner ?formerPartner .
  ?skater dbo:choreography ?choreography .
  ?choreography dbo:choreographer Catarina Lindgren .
}",2.8559767164037747e-155,0.060240963855421686,False,False
3153,Name the sovereign state of Wallington railway station ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wallington_railway_station> <http://dbpedia.org/ontology/country> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the sovereign state of Wallington railway station ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?sovereignState
WHERE {
  ?station dbo:name ""Wallington railway station"" .
  ?station dbp:locatedIn ?location .
  ?location dbo:country ?sovereignState .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?sovereignState
WHERE {
  ?station dbo:name ""Wallington railway station"" .
  ?station dbp:locatedIn ?location .
  ?location dbo:country ?sovereignState .
}",2.3962983105918537e-155,0.05970149253731343,True,True
2316,Which admin center of pulau Ujong is also the largest city of Pulau Ubin ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/largestCity> ?uri. <http://dbpedia.org/resource/Pulau_Ujong> <http://dbpedia.org/ontology/capital> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which admin center of pulau Ujong is also the largest city of Pulau Ubin ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?city dbo:adminCenterOf ?location .
  ?location dbo:name ""Pulau Ujong""^^xsd:string .
  ?city dbo:locatedIn ?location2 .
  ?location2 dbo:name ""Pulau Ubin""^^xsd:string .
  ?city dbo:population ?population .
  FILTER ( ?population > 0 )
  ?city dbo:largestCityOf ?location3 .
  ?location3 dbo:name ""Pulau Ubin""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?city dbo:adminCenterOf ?location .
  ?location dbo:name ""Pulau Ujong""^^xsd:string .
  ?city dbo:locatedIn ?location2 .
  ?location2 dbo:name ""Pulau Ubin""^^xsd:string .
  ?city dbo:population ?population .
  FILTER ( ?population > 0 )
  ?city dbo:largestCityOf ?location3 .
  ?location3 dbo:name ""Pulau Ubin""^^xsd:string .
}",1.876064362016577e-155,0.034482758620689655,True,True
4898,Who was the parent of person whose child is William C P breckinridge?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/children> <http://dbpedia.org/resource/William_Campbell_Preston_Breckinridge> . ?x <http://dbpedia.org/ontology/parent> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the parent of person whose child is William C P breckinridge?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parent
WHERE {
  ?child dbo:child ?parent .
  FILTER (regex(?child, ""William C P breckinridge"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parent
WHERE {
  ?child dbo:child ?parent .
  FILTER (regex(?child, ""William C P breckinridge"", ""i""))
}",2.3809857162598948e-155,0.05333333333333334,True,True
4495,Which serving railway line of the Daund Junction railway station is the home port of INS Viraat ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/INS_Viraat_(R22)> <http://dbpedia.org/ontology/homeport> ?uri. <http://dbpedia.org/resource/Daund_Junction_railway_station> <http://dbpedia.org/ontology/servingRailwayLine> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which serving railway line of the Daund Junction railway station is the home port of INS Viraat ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?railwayLine
WHERE {
  ?station dbo:name ""Daund Junction"" .
  ?station dbo:servingRailwayLine ?railwayLine .
  ?railwayLine rdfs:label ?label .
  FILTER (regex(?label, ""INS Viraat"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?railwayLine
WHERE {
  ?station dbo:name ""Daund Junction"" .
  ?station dbo:servingRailwayLine ?railwayLine .
  ?railwayLine rdfs:label ?label .
  FILTER (regex(?label, ""INS Viraat"", ""i""))
}",2.5806662832054458e-155,0.047619047619047616,True,True
3836,Where does the network cofounded by Seewoosagur Ramgoolam air its shows?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Seewoosagur_Ramgoolam> . ?x <http://dbpedia.org/property/broadcastArea> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where does the network cofounded by Seewoosagur Ramgoolam air its shows?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?channel
WHERE {
  ?person dbo:birthPlace ""Mauritius"" .
  ?person dbo:name ""Seewoosagur Ramgoolam"" .
  ?person dbo:cofounded ?network .
  ?network dbp:broadcastsOn ?channel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?channel
WHERE {
  ?person dbo:birthPlace ""Mauritius"" .
  ?person dbo:name ""Seewoosagur Ramgoolam"" .
  ?person dbo:cofounded ?network .
  ?network dbp:broadcastsOn ?channel .
}",2.4123225276763925e-155,0.05194805194805195,True,True
4129,Is Robin Gibb the singer of Oh! Darling?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Oh!_Darling> <http://dbpedia.org/ontology/musicalArtist> <http://dbpedia.org/resource/Robin_Gibb> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Robin Gibb the singer of Oh! Darling?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:name ""Robin Gibb"" .
  ?x dbo:artist ""Oh! Darling"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:name ""Robin Gibb"" .
  ?x dbo:artist ""Oh! Darling"" .
}",2.259351571061102e-155,0.045454545454545456,True,True
4923,Which  person has opponent Ike Clanton?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Ike_Clanton>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which  person has opponent Ike Clanton?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:opponent ?opponent .
  ?opponent dbo:name ""Ike Clanton"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:opponent ?opponent .
  ?opponent dbo:name ""Ike Clanton"" .
}",8.289228799996742e-232,0.046153846153846156,True,True
993,What organisations purpose is Peace?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Peace>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What organisations purpose is Peace?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?organisation ?purpose
WHERE {
  ?organisation dbo:purpose ?purpose .
  FILTER (regex(?purpose, ""Peace"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?organisation ?purpose
WHERE {
  ?organisation dbo:purpose ?purpose .
  FILTER (regex(?purpose, ""Peace"", ""i""))
}",2.530465559854518e-155,0.06060606060606061,True,True
370,What are Monrow Carell Jr Children Hospital and Vanderbilt University Medical Center both affiliated with?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Monroe_Carell_Jr._Children's_Hospital_at_Vanderbilt> <http://dbpedia.org/property/affiliation> ?uri. <http://dbpedia.org/resource/Vanderbilt_University_Medical_Center> <http://dbpedia.org/property/affiliation> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are Monrow Carell Jr Children Hospital and Vanderbilt University Medical Center both affiliated with?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?affiliation
WHERE {
  ?hospital dbo:affiliatedWith ?affiliation .
  FILTER (regex(?hospital, ""Monrow Carell Jr Children Hospital"", ""i"") || regex(?hospital, ""Vanderbilt University Medical Center"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?affiliation
WHERE {
  ?hospital dbo:affiliatedWith ?affiliation .
  FILTER (regex(?hospital, ""Monrow Carell Jr Children Hospital"", ""i"") || regex(?hospital, ""Vanderbilt University Medical Center"", ""i""))
}",2.9346708496857675e-155,0.07317073170731707,True,True
1975,Name the office holder whose constituency is Haight-Ashbury?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Haight-Ashbury>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the office holder whose constituency is Haight-Ashbury?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?name
WHERE {
  ?person dbo:constituency ?constituency .
  ?constituency dbo:name ""Haight-Ashbury"" .
  ?person dbo:name ?name .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?name
WHERE {
  ?person dbo:constituency ?constituency .
  ?constituency dbo:name ""Haight-Ashbury"" .
  ?person dbo:name ?name .
}",8.147480343967206e-232,0.045454545454545456,True,True
4238,Who is the builder of the Stadium of Costa Rica women's national football team?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Costa_Rica_women's_national_football_team> <http://dbpedia.org/ontology/stadium> ?x . ?x <http://dbpedia.org/ontology/builder> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the builder of the Stadium of Costa Rica women's national football team?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?builder
WHERE {
  ?stadium dbo:builder ?builder .
  ?stadium dbp:name ""Stadium of Costa Rica"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?builder
WHERE {
  ?stadium dbo:builder ?builder .
  ?stadium dbp:name ""Stadium of Costa Rica"" .
}",2.50170125957988e-155,0.05555555555555555,True,True
3112,Which musical artists have collaborated with Waylon Jennings?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Waylon_Jennings>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which musical artists have collaborated with Waylon Jennings?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:collaborator ?waylon .
  ?waylon dbo:name ""Waylon Jennings"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:collaborator ?waylon .
  ?waylon dbo:name ""Waylon Jennings"" .
}",2.4775553999024465e-155,0.058823529411764705,True,True
2129,Does Ronaldinho play in the brazil's under 23 team?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Ronaldinho> <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Brazil_national_under-23_football_team> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Ronaldinho play in the brazil's under 23 team?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x rdf:type dbo:SportsTeam .
  ?x dbo:name ""Brazil U23"" .
  ?x dbo:member ?player .
  ?player dbo:name ""Ronaldinho"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x rdf:type dbo:SportsTeam .
  ?x dbo:name ""Brazil U23"" .
  ?x dbo:member ?player .
  ?player dbo:name ""Ronaldinho"" .
}",2.1483903094550452e-155,0.043478260869565216,True,True
1620,"Where did the president study, who's the president of Besiktas JK?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Beşiktaş_JK_(wheelchair_basketball)> <http://dbpedia.org/ontology/president> ?x . ?x <http://dbpedia.org/property/almaMater> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the president study, who's the president of Besiktas JK?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?president ?presidentEducation
WHERE {
  ?president dbo:nationality ""Turkish"" .
  ?president dbo:position ""President"" .
  ?president dbo:memberOf <http://dbpedia.org/resource/Beşiktaş_J.K.> .
  ?president dbo:education ?presidentEducation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?president ?presidentEducation
WHERE {
  ?president dbo:nationality ""Turkish"" .
  ?president dbo:position ""President"" .
  ?president dbo:memberOf <http://dbpedia.org/resource/Beşiktaş_J.K.> .
  ?president dbo:education ?presidentEducation .
}",3.0025357216578434e-155,0.0684931506849315,True,True
3964,Who designed the stadiums which have been rented by Oakland athletics?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Oakland_Athletics> . ?x <http://dbpedia.org/property/architect> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who designed the stadiums which have been rented by Oakland athletics?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?designer
WHERE {
  ?stadium dbo:architect ?designer .
  ?stadium dbp:sportsTeam ?team .
  ?team dbo:name ""Oakland Athletics"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?designer
WHERE {
  ?stadium dbo:architect ?designer .
  ?stadium dbp:sportsTeam ?team .
  ?team dbo:name ""Oakland Athletics"" .
}",3.0566417519593477e-155,0.06578947368421052,True,True
4744,What is the launch site of the Juno I which was also the ground of 2016 Fort Lauderdale Strikers season ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juno_I> <http://dbpedia.org/ontology/launchSite> ?uri. <http://dbpedia.org/resource/2016_Fort_Lauderdale_Strikers_season> <http://dbpedia.org/ontology/ground> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the launch site of the Juno I which was also the ground of 2016 Fort Lauderdale Strikers season ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?launchSite
WHERE {
  ?spacecraft dbo:name ""Juno I"" .
  ?spacecraft dbo:launchSite ?launchSite .
  ?ground dbo:name ""2016 Fort Lauderdale Strikers season"" .
  ?ground dbo:location ?launchSite .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?launchSite
WHERE {
  ?spacecraft dbo:name ""Juno I"" .
  ?spacecraft dbo:launchSite ?launchSite .
  ?ground dbo:name ""2016 Fort Lauderdale Strikers season"" .
  ?ground dbo:location ?launchSite .
}",1.968084453516327e-155,0.03614457831325301,True,True
1243,Where did the 2015 MLS All-Star Game take place?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_MLS_All-Star_Game> <http://dbpedia.org/property/city> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the 2015 MLS All-Star Game take place?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?game dbo:location ?location .
  FILTER (regex(?game, ""2015 MLS All-Star Game"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?game dbo:location ?location .
  FILTER (regex(?game, ""2015 MLS All-Star Game"", ""i""))
}",2.4440718429993668e-155,0.05970149253731343,True,True
3883,Name the branch of Carroll E. Lanier ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carroll_E._Lanier> <http://dbpedia.org/property/branch> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the branch of Carroll E. Lanier ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?branch
WHERE {
  ?person dbo:name ""Carroll E. Lanier"" .
  ?person dbo:branch ?branch .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?branch
WHERE {
  ?person dbo:name ""Carroll E. Lanier"" .
  ?person dbo:branch ?branch .
}",2.4775553999024465e-155,0.0625,True,True
3585,List the common official language of the ladonia and Empire of Atlantium ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ladonia_(micronation)> <http://dbpedia.org/ontology/officialLanguage> ?uri. <http://dbpedia.org/resource/Empire_of_Atlantium> <http://dbpedia.org/ontology/officialLanguage> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the common official language of the ladonia and Empire of Atlantium ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?language
WHERE {
  ?country dbo:officialLanguage ?language .
  FILTER (regex(?country, ""Ladonia"", ""i"") || regex(?country, ""Atlantium"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?language
WHERE {
  ?country dbo:officialLanguage ?language .
  FILTER (regex(?country, ""Ladonia"", ""i"") || regex(?country, ""Atlantium"", ""i""))
}",3.0943809285865547e-155,0.08,True,True
1287,Which awards have been given to the horse who sired Triplicate?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Triplicate> <http://dbpedia.org/property/sire> ?x . ?x <http://dbpedia.org/ontology/honours> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which awards have been given to the horse who sired Triplicate?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?award
WHERE {
  ?horse dbo:sired ?offspring .
  ?offspring dbp:name ""Triplicate""^^xsd:string .
  ?horse dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?award
WHERE {
  ?horse dbo:sired ?offspring .
  ?offspring dbp:name ""Triplicate""^^xsd:string .
  ?horse dbo:award ?award .
}",3.53714058675999e-155,0.08108108108108109,True,True
1781,Terminal Station at Chattanooga is made by architects from which University?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Terminal_Station_(Chattanooga)> . ?x <http://dbpedia.org/property/education> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Architect>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Terminal Station at Chattanooga is made by architects from which University?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?university
WHERE {
  ?station dbo:architect ?architect .
  ?architect dbo:memberOf ?university .
  ?station rdfs:label ""Terminal Station at Chattanooga"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?university
WHERE {
  ?station dbo:architect ?architect .
  ?architect dbo:memberOf ?university .
  ?station rdfs:label ""Terminal Station at Chattanooga"" .
}",2.4410426763339902e-155,0.05263157894736842,True,True
4804,Which constructor's team won the 1967 Mexican Grand Prix ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1967_Mexican_Grand_Prix> <http://dbpedia.org/property/firstTeam> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which constructor's team won the 1967 Mexican Grand Prix ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?constructor ?team
WHERE {
  ?constructor dbo:driver ?driver .
  ?driver dbp:participatedInRace ?race .
  ?race dbo:name ""1967 Mexican Grand Prix"" .
  ?team dbo:teamOf ?driver .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?constructor ?team
WHERE {
  ?constructor dbo:driver ?driver .
  ?driver dbp:participatedInRace ?race .
  ?race dbo:name ""1967 Mexican Grand Prix"" .
  ?team dbo:teamOf ?driver .
}",2.2552086692851858e-155,0.05555555555555555,True,True
4070,What is the origin of Xynisteri?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Xynisteri> <http://dbpedia.org/ontology/origin> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the origin of Xynisteri?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?origin
WHERE {
  ?wine dbo:origin ?origin .
  FILTER (regex(?wine, ""Xynisteri"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?origin
WHERE {
  ?wine dbo:origin ?origin .
  FILTER (regex(?wine, ""Xynisteri"", ""i""))
}",2.5488701582353735e-155,0.06349206349206349,True,True
4167,where did Deion Sanders debut?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Deion_Sanders> <http://dbpedia.org/property/debutteam> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: where did Deion Sanders debut?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?debutLocation
WHERE {
  ?person dbo:name ""Deion Sanders"" .
  ?person dbo:debutLocation ?debutLocation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?debutLocation
WHERE {
  ?person dbo:name ""Deion Sanders"" .
  ?person dbo:debutLocation ?debutLocation .
}",2.5488701582353735e-155,0.06451612903225806,True,True
3257,Give me some administrators of bridges over which cars can go?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/carries> <http://dbpedia.org/resource/Motor_vehicle> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bridge>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me some administrators of bridges over which cars can go?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bridge ?admin
WHERE {
  ?bridge dbo:type dbo:Bridge .
  ?bridge dbp:hasVehicleType ""car"" .
  ?bridge dbo:hasAdministrator ?admin .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bridge ?admin
WHERE {
  ?bridge dbo:type dbo:Bridge .
  ?bridge dbp:hasVehicleType ""car"" .
  ?bridge dbo:hasAdministrator ?admin .
}",3.0566417519593477e-155,0.06578947368421052,True,True
2688,Who were the pole drivers in GP when Damon hill was the first driver?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/firstDriver> <http://dbpedia.org/resource/Damon_Hill> . ?x <http://dbpedia.org/ontology/poleDriver> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who were the pole drivers in GP when Damon hill was the first driver?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?driver
WHERE {
  ?driver dbo:birthDate ?birthDate .
  ?driver dbo:profession ""Formula One driver""^^rdfs:Literal .
  ?driver dbo:participatedInEvent ?event .
  ?event dbo:name ""British Grand Prix"" .
  ?event dbo:startYear ?startYear .
  FILTER(?startYear = 1996)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?driver
WHERE {
  ?driver dbo:birthDate ?birthDate .
  ?driver dbo:profession ""Formula One driver""^^rdfs:Literal .
  ?driver dbo:participatedInEvent ?event .
  ?event dbo:name ""British Grand Prix"" .
  ?event dbo:startYear ?startYear .
  FILTER(?startYear = 1996)
}",2.7832917260583544e-155,0.056818181818181816,True,True
4837,Is San Salvador Island a part of the Bahamas?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/San_Salvador_Island> <http://dbpedia.org/ontology/archipelago> <http://dbpedia.org/resource/The_Bahamas> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is San Salvador Island a part of the Bahamas?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:country ""Bahamas"" .
  ?x dbo:partOf ?y .
  ?y dbo:name ""San Salvador Island"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:country ""Bahamas"" .
  ?x dbo:partOf ?y .
  ?y dbo:name ""San Salvador Island"" .
}",2.2300068516948962e-155,0.046153846153846156,True,True
1411,Who is the developer of Montecito Inn?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Montecito_Inn> <http://dbpedia.org/property/developer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the developer of Montecito Inn?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?developer
WHERE {
  ?hotel dbo:developer ?developer .
  FILTER (str(?hotel) = ""Montecito Inn"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?developer
WHERE {
  ?hotel dbo:developer ?developer .
  FILTER (str(?hotel) = ""Montecito Inn"")
}",2.5124539841526692e-155,0.06153846153846154,True,True
817,Henry McDaniel's trained horses have won which awards?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/trainer> <http://dbpedia.org/resource/Henry_McDaniel_(racehorse_trainer)> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Horse>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Henry McDaniel's trained horses have won which awards?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?horse dbo:trainedBy <http://dbpedia.org/resource/Henry_McDaniel> .
  ?horse dbo:wins ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?horse dbo:trainedBy <http://dbpedia.org/resource/Henry_McDaniel> .
  ?horse dbo:wins ?award .
}",3.2833699258334827e-155,0.07246376811594203,True,True
2119,List all crafts of the people whose one of the profession is Kingdom of Naples ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/occupation> <http://dbpedia.org/resource/Kingdom_of_Naples> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all crafts of the people whose one of the profession is Kingdom of Naples ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?craft
WHERE {
  ?person dbo:profession dbp:Kingdom_of_Naples .
  ?person dbo:craft ?craft .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?craft
WHERE {
  ?person dbo:profession dbp:Kingdom_of_Naples .
  ?person dbo:craft ?craft .
}",3.0382827129023445e-155,0.06756756756756757,True,True
3203,Which gadgets are made by companies of New Taipei City?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/locationCity> <http://dbpedia.org/resource/New_Taipei_City> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which gadgets are made by companies of New Taipei City?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?gadget ?company
WHERE {
  ?gadget dbo:manufacturer ?company .
  ?company dbo:location dbo:NewTaipeiCity .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?gadget ?company
WHERE {
  ?gadget dbo:manufacturer ?company .
  ?company dbo:location dbo:NewTaipeiCity .
}",3.627276877392474e-155,0.08333333333333333,True,True
1149,Where does Dennis DeConcini and Scott Berkun both live?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Scott_Berkun> <http://dbpedia.org/property/residence> ?uri. <http://dbpedia.org/resource/Dennis_DeConcini> <http://dbpedia.org/property/residence> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where does Dennis DeConcini and Scott Berkun both live?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?person dbo:birthDate ?birth_date .
  ?person dbo:placeOfBirth ?location .
  FILTER ( ?person IN ( dbo:Dennis_DeConcini , dbo:Scott_Berkun ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?location
WHERE {
  ?person dbo:birthDate ?birth_date .
  ?person dbo:placeOfBirth ?location .
  FILTER ( ?person IN ( dbo:Dennis_DeConcini , dbo:Scott_Berkun ) )
}",3.0566417519593477e-155,0.08,True,True
1835,Which club of perianne Lones is also the home town of the Kady O'Malley ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kady_O'Malley> <http://dbpedia.org/property/homeTown> ?uri. <http://dbpedia.org/resource/Perianne_Jones> <http://dbpedia.org/property/club> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which club of perianne Lones is also the home town of the Kady O'Malley ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?club
WHERE {
  ?person dbo:birthPlace ?town .
  ?town rdfs:label ""Kady O'Malley"" .
  ?person dbo:memberOf ?club .
  ?club dbo:location ?town .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?club
WHERE {
  ?person dbo:birthPlace ?town .
  ?town rdfs:label ""Kady O'Malley"" .
  ?person dbo:memberOf ?club .
  ?club dbo:location ?town .
}",2.637082623203696e-155,0.05128205128205128,True,True
1154,"Who is the person whose home town is Fairmount, Indiana?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Fairmount,_Indiana>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the person whose home town is Fairmount, Indiana?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:birthPlace dbp:Fairmount_Indiana .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:birthPlace dbp:Fairmount_Indiana .
}",8.319100378795605e-232,0.046875,True,True
3037,Where was the deadbody discovered of one of the alumni of General Educational Development?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/education> <http://dbpedia.org/resource/General_Educational_Development> . ?x <http://dbpedia.org/property/bodyDiscovered> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where was the deadbody discovered of one of the alumni of General Educational Development?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?person dbo:alumniOf <http://dbpedia.org/resource/General_Educational_Development> .
  ?person dbo:deathPlace ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?person dbo:alumniOf <http://dbpedia.org/resource/General_Educational_Development> .
  ?person dbo:deathPlace ?location .
}",3.954266712463121e-155,0.09722222222222222,True,True
2844,Name the common distributing label of the Chinga Chang Records and StandBy Records?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chinga_Chang_Records> <http://dbpedia.org/ontology/distributingLabel> ?uri. <http://dbpedia.org/resource/StandBy_Records> <http://dbpedia.org/ontology/distributingLabel> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the common distributing label of the Chinga Chang Records and StandBy Records?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?label
WHERE {
  ?recordLabel dbo:distributedBy ?recordCompany .
  ?recordCompany dbo:name ""Chinga Chang Records"" .
  ?recordCompany dbo:name ""StandBy Records"" .
  ?recordLabel rdfs:label ?label .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?label
WHERE {
  ?recordLabel dbo:distributedBy ?recordCompany .
  ?recordCompany dbo:name ""Chinga Chang Records"" .
  ?recordCompany dbo:name ""StandBy Records"" .
  ?recordLabel rdfs:label ?label .
}",3.229753418204598e-155,0.07894736842105263,True,True
382,Give the distinct number of other party of the people which have one of the party as Janata Party?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/otherParty> <http://dbpedia.org/resource/Janata_Party> . ?x <http://dbpedia.org/ontology/otherParty> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give the distinct number of other party of the people which have one of the party as Janata Party?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?otherParty
WHERE {
  ?person dbo:party ?party .
  ?party dbo:name ""Janata Party""^^xsd:string .
  ?person dbp:otherParty ?otherParty .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?otherParty
WHERE {
  ?person dbo:party ?party .
  ?party dbo:name ""Janata Party""^^xsd:string .
  ?person dbp:otherParty ?otherParty .
}",2.968021523431445e-155,0.07894736842105263,True,True
1157,List the shows whose company's successor is Amblin Television.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Amblin_Television> . ?uri <http://dbpedia.org/ontology/company> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the shows whose company's successor is Amblin Television.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?show
WHERE {
  ?show dbo:company ?company .
  ?company dbo:successor ?successor .
  ?successor dbo:name ""Amblin Television"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?show
WHERE {
  ?show dbo:company ?company .
  ?company dbo:successor ?successor .
  ?successor dbo:name ""Amblin Television"" .
}",3.1537059338519422e-155,0.06944444444444445,True,True
2578,Who is the publisher of The Rolling Stone Album Guide ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Rolling_Stone_Album_Guide> <http://dbpedia.org/ontology/publisher> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the publisher of The Rolling Stone Album Guide ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?publisher
WHERE {
  ?book dbo:title ""The Rolling Stone Album Guide"" .
  ?book dbo:publisher ?publisher .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?publisher
WHERE {
  ?book dbo:title ""The Rolling Stone Album Guide"" .
  ?book dbo:publisher ?publisher .
}",2.3962983105918537e-155,0.05970149253731343,True,True
4587,Name the river mouth of Moordener Kill ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Moordener_Kill> <http://dbpedia.org/ontology/riverMouth> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the river mouth of Moordener Kill ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?riverMouth
WHERE {
  ?riverMouth dbo:mouthOf ?kill .
  ?kill dbo:name ""Moordener Kill"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?riverMouth
WHERE {
  ?riverMouth dbo:mouthOf ?kill .
  ?kill dbo:name ""Moordener Kill"" .
}",2.494821638843469e-155,0.0625,True,True
4116,What do the banks owned by Norwegian ministry of finance produce?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentCompany> <http://dbpedia.org/resource/Ministry_of_Finance_(Norway)> . ?x <http://dbpedia.org/property/products> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What do the banks owned by Norwegian ministry of finance produce?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?product
WHERE {
  ?bank dbo:country ""Norway""^^xsd:string .
  ?bank dbo:owner ?owner .
  ?owner dbo:name ""Norwegian Ministry of Finance""^^xsd:string .
  ?bank dbo:produces ?product .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?product
WHERE {
  ?bank dbo:country ""Norway""^^xsd:string .
  ?bank dbo:owner ?owner .
  ?owner dbo:name ""Norwegian Ministry of Finance""^^xsd:string .
  ?bank dbo:produces ?product .
}",2.951204860745888e-155,0.06329113924050633,True,True
4601,Katharevousa writers have been given which awards?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/movement> <http://dbpedia.org/resource/Katharevousa> . ?x <http://dbpedia.org/ontology/award> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Katharevousa writers have been given which awards?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?writer dbo:birthPlace ""Greece"" .
  ?writer dbo:language ""Katharevousa"" .
  ?writer dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?writer dbo:birthPlace ""Greece"" .
  ?writer dbo:language ""Katharevousa"" .
  ?writer dbo:award ?award .
}",3.1537059338519422e-155,0.06944444444444445,True,True
1864,List the school of Bobby Skinstad?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bobby_Skinstad> <http://dbpedia.org/property/school> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the school of Bobby Skinstad?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Bobby Skinstad"" .
  ?person dbo:school ?school .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Bobby Skinstad"" .
  ?person dbo:school ?school .
}",2.530465559854518e-155,0.06451612903225806,True,True
3391,What is the municipality of Homestead Grays Bridge ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Homestead_Grays_Bridge> <http://dbpedia.org/ontology/municipality> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the municipality of Homestead Grays Bridge ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?municipality
WHERE {
  ?bridge dbo:location ?location .
  ?location dbp:municipality ?municipality .
  FILTER ( ?bridge = <http://dbpedia.org/resource/Homestead_Grays_Bridge> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?municipality
WHERE {
  ?bridge dbo:location ?location .
  ?location dbp:municipality ?municipality .
  FILTER ( ?bridge = <http://dbpedia.org/resource/Homestead_Grays_Bridge> )
}",2.533776972251024e-155,0.07246376811594203,True,True
3250,What is the area of Tar Heel Sports Network ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tar_Heel_Sports_Network> <http://dbpedia.org/property/area> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the area of Tar Heel Sports Network ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?area
WHERE {
  ?network dbo:area ?area .
  FILTER (regex(?network, ""Tar Heel Sports Network"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?area
WHERE {
  ?network dbo:area ?area .
  FILTER (regex(?network, ""Tar Heel Sports Network"", ""i""))
}",2.427831263680579e-155,0.058823529411764705,True,True
2118,What is the official residence of Sarah Kazemy ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sarah_Kazemy> <http://dbpedia.org/property/residence> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the official residence of Sarah Kazemy ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?residence
WHERE {
  ?person dbo:name ""Sarah Kazemy"" .
  ?person dbo:officialResidence ?residence .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?residence
WHERE {
  ?person dbo:name ""Sarah Kazemy"" .
  ?person dbo:officialResidence ?residence .
}",2.4775553999024465e-155,0.06153846153846154,True,True
254,Who are the politicians whose death place is Ontario?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Ontario>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the politicians whose death place is Ontario?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?politician ?politicianLabel
WHERE {
  ?politician dbo:deathPlace dbp:Ontario .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?politician ?politicianLabel
WHERE {
  ?politician dbo:deathPlace dbp:Ontario .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.4119102000777368e-155,0.056338028169014086,False,False
4065,"Through which important cities the does the river originating from the Duwamish, flow?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/source> <http://dbpedia.org/resource/Green_River_(Duwamish_River)> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Through which important cities the does the river originating from the Duwamish, flow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?river dbo:source ?source .
  ?source dbo:name ""Duwamish"" .
  ?river dbo:flowsThrough ?city .
  FILTER (lang(?city) = 'en')
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?river dbo:source ?source .
  ?source dbo:name ""Duwamish"" .
  ?river dbo:flowsThrough ?city .
  FILTER (lang(?city) = 'en')
}",2.968021523431445e-155,0.06329113924050633,True,True
2199,What are some bands out to texarkana?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/origin> <http://dbpedia.org/resource/Texarkana,_Texas>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some bands out to texarkana?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?band ?bandLabel
WHERE {
  ?band dbo:genre ""Rock Music"" .
  ?band dbp:location ""Texarkana"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?band ?bandLabel
WHERE {
  ?band dbo:genre ""Rock Music"" .
  ?band dbp:location ""Texarkana"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.3659629744803227e-155,0.0547945205479452,False,False
2955,Whose children are married to Fredric Joliot-Curie?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Frédéric_Joliot-Curie> . ?uri <http://dbpedia.org/property/children> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose children are married to Fredric Joliot-Curie?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:spouse FredricJoliotCurie .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:spouse FredricJoliotCurie .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",3.2566703570358492e-155,0.08333333333333333,False,False
3897,How many information appliance are manufactured by companies located in Taiwan?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/locationCity> <http://dbpedia.org/resource/Taiwan> . ?uri <http://dbpedia.org/ontology/manufacturer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/InformationAppliance>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many information appliance are manufactured by companies located in Taiwan?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?infoAppliance) AS ?count)
WHERE {
  ?infoAppliance dbo:type dbo:InformationAppliance .
  ?infoAppliance dbo:manufacturer ?manufacturer .
  ?manufacturer dbo:country ""Taiwan"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?infoAppliance) AS ?count)
WHERE {
  ?infoAppliance dbo:type dbo:InformationAppliance .
  ?infoAppliance dbo:manufacturer ?manufacturer .
  ?manufacturer dbo:country ""Taiwan"" .
}",2.455792850056901e-155,0.05063291139240506,True,True
2968,List the battles in which alumni of US Army Command and General Staff College fought?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/almaMater> <http://dbpedia.org/resource/United_States_Army_Command_and_General_Staff_College> . ?x <http://dbpedia.org/property/battles> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the battles in which alumni of US Army Command and General Staff College fought?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?battle
WHERE {
  ?person dbo:alumniOf <http://dbpedia.org/resource/United_States_Army_Command_and_General_Staff_College> .
  ?person dbo:involvedIn ?battle .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?battle
WHERE {
  ?person dbo:alumniOf <http://dbpedia.org/resource/United_States_Army_Command_and_General_Staff_College> .
  ?person dbo:involvedIn ?battle .
}",3.929931607904104e-155,0.09333333333333334,True,True
3946,"What is the job of the George Arceneaux, Jr. which is also the office of the Blanche Bruce?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/George_Arceneaux,_Jr.> <http://dbpedia.org/ontology/occupation> ?uri. <http://dbpedia.org/resource/Blanche_Bruce> <http://dbpedia.org/property/office> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the job of the George Arceneaux, Jr. which is also the office of the Blanche Bruce?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?job
WHERE {
  ?person dbo:birthPlace ""Louisiana, USA"" .
  ?person dbo:job ?job .
  FILTER (STR(?person) = ""http://dbpedia.org/resource/George_Arceneaux,_Jr."")
  ?person2 dbo:birthPlace ""Mississippi, USA"" .
  ?person2 dbo:job ?job .
  FILTER (STR(?person2) = ""http://dbpedia.org/resource/Blanche_Bruce"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?job
WHERE {
  ?person dbo:birthPlace ""Louisiana, USA"" .
  ?person dbo:job ?job .
  FILTER (STR(?person) = ""http://dbpedia.org/resource/George_Arceneaux,_Jr."")
  ?person2 dbo:birthPlace ""Mississippi, USA"" .
  ?person2 dbo:job ?job .
  FILTER (STR(?person2) = ""http://dbpedia.org/resource/Blanche_Bruce"")
}",1.978049756642675e-155,0.0375,True,True
720,How many services does the company who made Onedrive provide?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/service> <http://dbpedia.org/resource/OneDrive> . ?x <http://dbpedia.org/property/services> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many services does the company who made Onedrive provide?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?count
WHERE {
  ?company dbo:product ?product .
  ?product rdfs:label ""Onedrive"" .
  ?company dbo:offersService ?service .
  GROUP BY ?company
  
  
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?count
WHERE {
  ?company dbo:product ?product .
  ?product rdfs:label ""Onedrive"" .
  ?company dbo:offersService ?service .
  GROUP BY ?company
  
  
}",2.5703190919374843e-155,0.06578947368421052,False,False
2980,What sports are played at Vishwajyot High School?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Vishwajyot_High_School> <http://dbpedia.org/ontology/sport> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What sports are played at Vishwajyot High School?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?sport
WHERE {
  ?school dbo:sports ?sport .
  FILTER (regex(?school, ""Vishwajyot High School"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?sport
WHERE {
  ?school dbo:sports ?sport .
  FILTER (regex(?school, ""Vishwajyot High School"", ""i""))
}",3.0940944781388835e-155,0.07352941176470588,True,True
3586,What is the name of the characters created by Frank Miller?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/creators> <http://dbpedia.org/resource/Frank_Miller_(comics)> . ?x <http://dbpedia.org/property/characterName> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the name of the characters created by Frank Miller?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?characterName
WHERE {
  ?character dbo:creator dbr:Frank_Miller .
  ?character rdfs:label ?characterName .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?characterName
WHERE {
  ?character dbo:creator dbr:Frank_Miller .
  ?character rdfs:label ?characterName .
}",2.5502845355614067e-155,0.056338028169014086,True,True
2799,Which sports are played in schools founded by Fr Almeida?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Fr._Almeida> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports are played in schools founded by Fr Almeida?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?school dbo:founder ?founder .
  ?founder dbo:name ""Fr Almeida"" .
  ?school dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?school dbo:founder ?founder .
  ?founder dbo:name ""Fr Almeida"" .
  ?school dbo:sports ?sport .
}",3.075337680136661e-155,0.06578947368421052,True,True
3139,What is the division of Serbia national American football team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Serbia_national_American_football_team> <http://dbpedia.org/ontology/division> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the division of Serbia national American football team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?division
WHERE {
  ?team dbo:nationalTeamOf ""Serbia"" .
  ?team dbo:sportsTeamDivision ?division .
  FILTER (regex(?team, ""American football"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?division
WHERE {
  ?team dbo:nationalTeamOf ""Serbia"" .
  ?team dbo:sportsTeamDivision ?division .
  FILTER (regex(?team, ""American football"", ""i""))
}",2.3809857162598948e-155,0.056338028169014086,True,True
113,What religions do politicians in the Korean Minjoo Party follow?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Minjoo_Party_of_Korea> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What religions do politicians in the Korean Minjoo Party follow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?religion
WHERE {
  ?politician dbo:memberOf <http://dbpedia.org/resource/Korean_Minjoo_Party> .
  ?politician dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?religion
WHERE {
  ?politician dbo:memberOf <http://dbpedia.org/resource/Korean_Minjoo_Party> .
  ?politician dbo:religion ?religion .
}",3.1742523358973992e-155,0.06944444444444445,True,True
644,Name a scientist whose official residence is Cape Town and also won a gold medal at the Royal Astronomical Society ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Gold_Medal_of_the_Royal_Astronomical_Society> . ?uri <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/Cape_Town>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name a scientist whose official residence is Cape Town and also won a gold medal at the Royal Astronomical Society ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:officialResidence dbp:CapeTown .
  ?scientist dbo:award dbp:GoldMedal .
  ?scientist dbo:award rdfs:label ""Gold Medal"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:officialResidence dbp:CapeTown .
  ?scientist dbo:award dbp:GoldMedal .
  ?scientist dbo:award rdfs:label ""Gold Medal"" .
}",2.306811013701292e-155,0.04819277108433735,False,False
2790,What other awards have been given to Golden Globe winners?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/award> <http://dbpedia.org/resource/Golden_Globe_Award> . ?x <http://dbpedia.org/property/awards> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What other awards have been given to Golden Globe winners?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?winner dbo:award ?award .
  FILTER (regex(?award, ""Golden Globe"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?winner dbo:award ?award .
  FILTER (regex(?award, ""Golden Globe"", ""i""))
}",3.216579438360415e-155,0.0821917808219178,True,True
2201,Which cover artist of the The Adventures of Tom Sawyer is also the source of inspiration of The Appple Tree ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> <http://dbpedia.org/ontology/coverArtist> ?uri. <http://dbpedia.org/resource/The_Apple_Tree> <http://dbpedia.org/ontology/basedOn> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which cover artist of the The Adventures of Tom Sawyer is also the source of inspiration of The Appple Tree ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:coverArtist ?book .
  ?book dbo:title ""The Adventures of Tom Sawyer""^^xsd:string .
  ?artist dbo:inspiration ?inspiration .
  ?inspiration dbo:title ""The Apple Tree""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:coverArtist ?book .
  ?book dbo:title ""The Adventures of Tom Sawyer""^^xsd:string .
  ?artist dbo:inspiration ?inspiration .
  ?inspiration dbo:title ""The Apple Tree""^^xsd:string .
}",2.4900858824700132e-155,0.04878048780487805,True,True
2062,"Where was Live in Detroit, MI recorded and was also palce of birth of the Bodhin Kjolhede?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Live_in_Detroit,_MI> <http://dbpedia.org/ontology/recordedIn> ?uri. <http://dbpedia.org/resource/Bodhin_Kjolhede> <http://dbpedia.org/property/placeOfBirth> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where was Live in Detroit, MI recorded and was also palce of birth of the Bodhin Kjolhede?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?album ?city
WHERE {
  ?album dbo:recordingLocation ?city .
  ?album dbo:title ""Live in Detroit, MI"" .
  ?person dbo:placeOfBirth ?city .
  ?person dbo:name ""Bodhin Kjolhede"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?album ?city
WHERE {
  ?album dbo:recordingLocation ?city .
  ?album dbo:title ""Live in Detroit, MI"" .
  ?person dbo:placeOfBirth ?city .
  ?person dbo:name ""Bodhin Kjolhede"" .
}",2.553782876480489e-155,0.04938271604938271,True,True
519,What is the label of things produced by the band If?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/If_(band)> . ?x <http://dbpedia.org/property/label> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the label of things produced by the band If?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?label
WHERE {
  ?band dbo:name ""If""@en .
  ?band dbo:produced ?work .
  ?work rdfs:label ?label .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?label
WHERE {
  ?band dbo:name ""If""@en .
  ?band dbo:produced ?work .
  ?work rdfs:label ?label .
}",3.0943809285865547e-155,0.06944444444444445,True,True
2487,How many non fiction topics does Thud! deals with?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Thud!> <http://dbpedia.org/ontology/nonFictionSubject> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many non fiction topics does Thud! deals with?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?topic) AS ?count)
WHERE {
  ?book dbo:title ""Thud!"" .
  ?book dbo:genre ?genre .
  ?genre dbo:subGenre ?topic .
  FILTER(?genre != ""Fiction"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?topic) AS ?count)
WHERE {
  ?book dbo:title ""Thud!"" .
  ?book dbo:genre ?genre .
  ?genre dbo:subGenre ?topic .
  FILTER(?genre != ""Fiction"")
}",2.426555136425675e-155,0.0641025641025641,True,True
2304,What are the names of the casualties of Eric Harris and Dylan Klebold?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/deathCause> <http://dbpedia.org/resource/Eric_Harris_and_Dylan_Klebold>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the names of the casualties of Eric Harris and Dylan Klebold?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?casualtyName
WHERE {
  ?event dbo:victim ?casualty .
  ?casualty dbo:name ?casualtyName .
  FILTER (regex(?event, ""Eric Harris and Dylan Klebold"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?casualtyName
WHERE {
  ?event dbo:victim ?casualty .
  ?casualty dbo:name ?casualtyName .
  FILTER (regex(?event, ""Eric Harris and Dylan Klebold"", ""i""))
}",2.294894159058245e-155,0.0547945205479452,True,True
3092,Name the common editor of Easy Street (film) and Work (film)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Easy_Street_(film)> <http://dbpedia.org/ontology/editing> ?uri. <http://dbpedia.org/resource/Work_(film)> <http://dbpedia.org/ontology/editing> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the common editor of Easy Street (film) and Work (film)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?editor
WHERE {
  ?film dbo:director ?editor .
  FILTER ( ?film IN (
    <http://dbpedia.org/resource/Easy_Street_(film)>,
    <http://dbpedia.org/resource/Work_(film)>
  ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?editor
WHERE {
  ?film dbo:director ?editor .
  FILTER ( ?film IN (
    <http://dbpedia.org/resource/Easy_Street_(film)>,
    <http://dbpedia.org/resource/Work_(film)>
  ) )
}",3.2361225152319982e-155,0.0958904109589041,True,True
3949,Which royalty's spouse is Ptolemy XIV of Egypt?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/spouse> <http://dbpedia.org/resource/Ptolemy_XIV_of_Egypt>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which royalty's spouse is Ptolemy XIV of Egypt?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?royalty
WHERE {
  ?royalty dbo:spouse ?person .
  ?person dbo:birthDate ""1st century BC""^^xsd:gYear .
  ?person dbo:name ""Ptolemy XIV"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?royalty
WHERE {
  ?royalty dbo:spouse ?person .
  ?person dbo:birthDate ""1st century BC""^^xsd:gYear .
  ?person dbo:name ""Ptolemy XIV"" .
}",8.06798322521923e-232,0.04225352112676056,True,True
512,Who is the fictional character whose relative is Vestigial Peter?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/relative> <http://dbpedia.org/resource/Vestigial_Peter>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the fictional character whose relative is Vestigial Peter?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?character
WHERE {
  ?character dbo:relative ?relative .
  ?relative dbo:name ""Vestigial Peter"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?character
WHERE {
  ?character dbo:relative ?relative .
  ?relative dbo:name ""Vestigial Peter"" .
}",8.174867218666773e-232,0.04477611940298507,True,True
2090,Who is married to Susan Weber Soros?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/spouse> <http://dbpedia.org/resource/Susan_Weber_Soros>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is married to Susan Weber Soros?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouse
WHERE {
  ?person dbo:spouse ?spouse .
  FILTER ( ?spouse = <http://dbpedia.org/resource/Susan_Weber_Soros> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouse
WHERE {
  ?person dbo:spouse ?spouse .
  FILTER ( ?spouse = <http://dbpedia.org/resource/Susan_Weber_Soros> )
}",9.352284301430419e-232,0.07462686567164178,True,True
3154,Which TV show's theme was composed by a band in which Todd Huth used to perform?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/formerBandMember> <http://dbpedia.org/resource/Todd_Huth> . ?uri <http://dbpedia.org/property/themeMusicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which TV show's theme was composed by a band in which Todd Huth used to perform?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?show ?band
WHERE {
  ?show dbo:theme ?theme .
  ?theme dbo:composer ?composer .
  ?composer dbo:memberOf ?band .
  ?band dbo:member ?person .
  ?person dbo:name ""Todd Huth""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?show ?band
WHERE {
  ?show dbo:theme ?theme .
  ?theme dbo:composer ?composer .
  ?composer dbo:memberOf ?band .
  ?band dbo:member ?person .
  ?person dbo:name ""Todd Huth""^^xsd:string .
}",2.8262253362411533e-155,0.058823529411764705,True,True
4260,Which mainter of Pandaruan Bridge is also the land of Malaysia junior Hockey league ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pandaruan_Bridge> <http://dbpedia.org/ontology/maintainedBy> ?uri. <http://dbpedia.org/resource/Malaysia_Junior_Hockey_League> <http://dbpedia.org/ontology/country> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which mainter of Pandaruan Bridge is also the land of Malaysia junior Hockey league ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?maintainer ?land
WHERE {
  ?maintainer dbo:maintainerOf <http://dbpedia.org/resource/Pandaruan_Bridge> .
  ?land dbo:locationOf <http://dbpedia.org/resource/Malaysia_junior_Hockey_league> .
  ?maintainer rdfs:label ?maintainerLabel .
  ?land rdfs:label ?landLabel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?maintainer ?land
WHERE {
  ?maintainer dbo:maintainerOf <http://dbpedia.org/resource/Pandaruan_Bridge> .
  ?land dbo:locationOf <http://dbpedia.org/resource/Malaysia_junior_Hockey_league> .
  ?maintainer rdfs:label ?maintainerLabel .
  ?land rdfs:label ?landLabel .
}",2.788375385094078e-155,0.06329113924050633,True,True
4335,Which scientist is known for writing Philosophi Naturalis Principia Mathematica?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/knownFor> <http://dbpedia.org/resource/Philosophiæ_Naturalis_Principia_Mathematica> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which scientist is known for writing Philosophi Naturalis Principia Mathematica?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?scientist
WHERE {
  ?scientist dbo:birthPlace ?birthPlace .
  ?scientist dbo:knownFor dbp:Philosophi_Naturalis_Principia_Mathematica .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?scientist
WHERE {
  ?scientist dbo:birthPlace ?birthPlace .
  ?scientist dbo:knownFor dbp:Philosophi_Naturalis_Principia_Mathematica .
}",8.202720662090001e-232,0.046153846153846156,True,True
551,Which boarder country of Korean Peninsula was the state of Sodagreen?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Korean_Peninsula> <http://dbpedia.org/ontology/border> ?uri. <http://dbpedia.org/resource/Sodagreen> <http://dbpedia.org/ontology/country> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which boarder country of Korean Peninsula was the state of Sodagreen?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?band dbo:country ?country .
  ?band dbo:name ""Sodagreen"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?band dbo:country ?country .
  ?band dbo:name ""Sodagreen"" .
}",2.8496950006247937e-155,0.056338028169014086,True,True
3517,Was True Grit a novel of the western genre?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/True_Grit_(novel)> <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Western_(genre)> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was True Grit a novel of the western genre?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?genre
WHERE {
  ?movie dbo:genre ?genre .
  FILTER ( ?genre = dbo:Western )
  ?movie dbo:title ""True Grit"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?genre
WHERE {
  ?movie dbo:genre ?genre .
  FILTER ( ?genre = dbo:Western )
  ?movie dbo:title ""True Grit"" .
}",2.215756877004116e-155,0.04411764705882353,True,True
886,What is the draft team of Gene Conley?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Gene_Conley> <http://dbpedia.org/property/draftTeam> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the draft team of Gene Conley?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?draftTeam
WHERE {
  ?person dbo:name ""Gene Conley"" .
  ?person dbp:draftTeam ?draftTeam .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?draftTeam
WHERE {
  ?person dbo:name ""Gene Conley"" .
  ?person dbp:draftTeam ?draftTeam .
}",2.494821638843469e-155,0.0625,True,True
4429,Which child of Jack Ferguson became a Prime Minister?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ferguson> <http://dbpedia.org/ontology/child> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which child of Jack Ferguson became a Prime Minister?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?child
WHERE {
  ?child dbo:father ?jack .
  ?jack dbo:name ""Jack Ferguson"" .
  ?child dbo:occupation ""Prime Minister"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?child
WHERE {
  ?child dbo:father ?jack .
  ?jack dbo:name ""Jack Ferguson"" .
  ?child dbo:occupation ""Prime Minister"" .
}",3.0943809285865547e-155,0.0684931506849315,True,True
613,List the newspapers which has headquarters in Stockholm?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Stockholm>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the newspapers which has headquarters in Stockholm?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?newspaper
WHERE {
  ?newspaper dbo:wikiPageRedirects* dbr:Stockholm
  ?newspaper dbo:headquarters ?location .
  ?location dbo:country ?country .
  FILTER ( ?country = dbr:Sweden )
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?newspaper
WHERE {
  ?newspaper dbo:wikiPageRedirects* dbr:Stockholm
  ?newspaper dbo:headquarters ?location .
  ?location dbo:country ?country .
  FILTER ( ?country = dbr:Sweden )
}",2.308595628361502e-155,0.05333333333333334,False,False
2027,GetTV is owned by which organisation?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: GetTV is owned by which organisation?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organisation
WHERE {
  <http://dbpedia.org/resource/GetTV> dbo:ownedBy ?organisation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organisation
WHERE {
  <http://dbpedia.org/resource/GetTV> dbo:ownedBy ?organisation .
}",9.59903638430083e-79,0.08333333333333333,True,True
1780,Which companies are founded in the city of which Collin County Texas is a part?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/part> <http://dbpedia.org/resource/Collin_County,_Texas> . ?uri <http://dbpedia.org/ontology/foundationPlace> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Company>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which companies are founded in the city of which Collin County Texas is a part?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?county dbo:locatedIn ?city .
  ?city dbo:country ?country .
  FILTER(?country = <http://dbpedia.org/resource/United_States>)
  ?county dbp:name ""Collin County, Texas"" .
  ?company dbo:foundedIn ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?county dbo:locatedIn ?city .
  ?city dbo:country ?country .
  FILTER(?country = <http://dbpedia.org/resource/United_States>)
  ?county dbp:name ""Collin County, Texas"" .
  ?company dbo:foundedIn ?city .
}",2.8559767164037747e-155,0.058823529411764705,True,True
2579,In which country was Gumus first aired which is also the mouth country of Upper Neretva?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Upper_Neretva> <http://dbpedia.org/ontology/mouthCountry> ?uri. <http://dbpedia.org/resource/Gümüş_(TV_series)> <http://dbpedia.org/property/firstAired> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which country was Gumus first aired which is also the mouth country of Upper Neretva?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?country
WHERE {
  ?tvShow dbo:country ?country .
  ?tvShow dbo:name ""Gumus"" .
  ?river dbo:mouth ?location .
  ?location dbo:country ?country .
  ?river dbo:name ""Upper Neretva"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?country
WHERE {
  ?tvShow dbo:country ?country .
  ?tvShow dbo:name ""Gumus"" .
  ?river dbo:mouth ?location .
  ?location dbo:country ?country .
  ?river dbo:name ""Upper Neretva"" .
}",2.0194805030799393e-155,0.0379746835443038,True,True
4941,Which band had members who are now in The Bleeding Heart Band?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/The_Bleeding_Heart_Band> . ?uri <http://dbpedia.org/ontology/formerBandMember> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which band had members who are now in The Bleeding Heart Band?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?band
WHERE {
  ?band dbo:member ?musician .
  ?musician dbo:member <http://dbpedia.org/resource/The_Bleeding_Heart_Band> .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?band
WHERE {
  ?band dbo:member ?musician .
  ?musician dbo:member <http://dbpedia.org/resource/The_Bleeding_Heart_Band> .
}",3.6040982025556637e-155,0.08108108108108109,True,True
4990,Who are the tenants of the stadium which is a venue of WCW Mayhem ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WCW_Mayhem> <http://dbpedia.org/property/venue> ?x . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the tenants of the stadium which is a venue of WCW Mayhem ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?tenant
WHERE {
  ?stadium dbo:venueOf ?event .
  ?event dbo:name ""WCW Mayhem"" .
  ?stadium dbo:tenant ?tenant .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?tenant
WHERE {
  ?stadium dbo:venueOf ?event .
  ?event dbo:name ""WCW Mayhem"" .
  ?stadium dbo:tenant ?tenant .
}",2.9851289841006984e-155,0.06493506493506493,True,True
4175,What kind of games are made by Interplay Entertainment?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/publisher> <http://dbpedia.org/resource/Interplay_Entertainment> . ?x <http://dbpedia.org/property/genre> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What kind of games are made by Interplay Entertainment?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?gameType
WHERE {
  ?game dbo:producer Interplay Entertainment .
  ?game dbo:genre ?gameType .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?gameType
WHERE {
  ?game dbo:producer Interplay Entertainment .
  ?game dbo:genre ?gameType .
}",3.2383880054191053e-155,0.07142857142857142,False,False
51,Where did the office holder died who is successor to Elmer Burkett ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/Elmer_Burkett> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the office holder died who is successor to Elmer Burkett ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?successor dbo:successorOf ?predecessor .
  ?predecessor dbo:name ""Elmer Burkett"" .
  ?successor dbo:deathPlace ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?successor dbo:successorOf ?predecessor .
  ?predecessor dbo:name ""Elmer Burkett"" .
  ?successor dbo:deathPlace ?location .
}",2.486113577066771e-155,0.05333333333333334,True,True
2109,What religion is Kabir Suman from?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/birthName> <http://dbpedia.org/resource/Kabir_Suman> . ?x <http://dbpedia.org/property/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What religion is Kabir Suman from?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religion
WHERE {
  <http://dbpedia.org/resource/Kabir_Suman> dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religion
WHERE {
  <http://dbpedia.org/resource/Kabir_Suman> dbo:religion ?religion .
}",3.4569587276028865e-155,0.09523809523809523,True,True
1361,Which person's successor is Samsu-iluna?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/successor> <http://dbpedia.org/resource/Samsu-iluna>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which person's successor is Samsu-iluna?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:successor Samsu-iluna .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:successor Samsu-iluna .
}",8.477028509227734e-232,0.04918032786885246,False,False
3562,Who owns the broadcast network founded by CNN?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/foundedBy> <http://dbpedia.org/resource/CNN> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BroadcastNetwork>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who owns the broadcast network founded by CNN?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?owner
WHERE {
  ?network dbo:foundedBy <http://dbpedia.org/resource/Ted_Turner> .
  ?network dbo:parentOrganization ?owner .
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT ?owner
WHERE {
  ?network dbo:foundedBy <http://dbpedia.org/resource/Ted_Turner> .
  ?network dbo:parentOrganization ?owner .
}",2.601812955123188e-155,0.058823529411764705,True,True
2553,Murray Gold has composed music for how many things?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/composer> <http://dbpedia.org/resource/Murray_Gold>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Murray Gold has composed music for how many things?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?composition) AS ?count)
WHERE {
  ?composition dbo:composer Murray Gold .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?composition) AS ?count)
WHERE {
  ?composition dbo:composer Murray Gold .
}",2.4606427705034855e-155,0.05970149253731343,False,False
1349,List the organisation with motive for peace and environmentalism?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Peace> . ?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the organisation with motive for peace and environmentalism?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?organisation
WHERE {
  ?organisation dbo:wikiPageRedirects* dbo:Organisation .
  ?organisation dbo:description ?description .
  FILTER (regex(?description, ""peace"", ""i"") && regex(?description, ""environment"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?organisation
WHERE {
  ?organisation dbo:wikiPageRedirects* dbo:Organisation .
  ?organisation dbo:description ?description .
  FILTER (regex(?description, ""peace"", ""i"") && regex(?description, ""environment"", ""i""))
}",3.0943809285865547e-155,0.06756756756756757,True,True
1196,Of what all has David Ian Salter been an editor of?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/David_Ian_Salter> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Of what all has David Ian Salter been an editor of?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?item
WHERE {
  ?item dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/David_Ian_Salter> .
  ?item dbo:editorship ?editor .
  FILTER ( ?editor = <http://dbpedia.org/resource/David_Ian_Salter> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?item
WHERE {
  ?item dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/David_Ian_Salter> .
  ?item dbo:editorship ?editor .
  FILTER ( ?editor = <http://dbpedia.org/resource/David_Ian_Salter> )
}",2.486113577066771e-155,0.0684931506849315,True,True
1360,Which engine's successor's predecessor is BMW M10?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/BMW_M10> . ?uri <http://dbpedia.org/ontology/successor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Engine>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which engine's successor's predecessor is BMW M10?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?engine ?successor
WHERE {
  ?engine dbo:successor ?successor .
  ?successor dbo:predecessor <http://dbpedia.org/resource/BMW_M10> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?engine ?successor
WHERE {
  ?engine dbo:successor ?successor .
  ?successor dbo:predecessor <http://dbpedia.org/resource/BMW_M10> .
}",3.776411644491886e-155,0.08823529411764706,True,True
4364,Who is considered to be the deciding person when it comes to crustaceans from the Balanidae family?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Balanidae> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Crustacean>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is considered to be the deciding person when it comes to crustaceans from the Balanidae family?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:description ""deciding person for crustaceans from the Balanidae family"".
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:description ""deciding person for crustaceans from the Balanidae family"".
}",2.135639655544596e-155,0.04054054054054054,True,True
3774,What are some cartoons distributed by a subsidiary of Time Warner?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentCompany> <http://dbpedia.org/resource/Time_Warner> . ?uri <http://dbpedia.org/property/distributor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Cartoon>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some cartoons distributed by a subsidiary of Time Warner?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?cartoon WHERE {
  ?cartoon dbo:distributor ?distributor .
  ?distributor dbo:parentOrganization ?parent .
  ?parent dbo:name ""Time Warner"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?cartoon WHERE {
  ?cartoon dbo:distributor ?distributor .
  ?distributor dbo:parentOrganization ?parent .
  ?parent dbo:name ""Time Warner"" .
}",3.0566417519593477e-155,0.06578947368421052,True,True
3455,List the trainers of Shinya Aoki ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Shinya_Aoki> <http://dbpedia.org/ontology/trainer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the trainers of Shinya Aoki ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?trainer
WHERE {
  ?person dbo:name ""Shinya Aoki"" .
  ?person dbp:trainer ?trainer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?trainer
WHERE {
  ?person dbo:name ""Shinya Aoki"" .
  ?person dbp:trainer ?trainer .
}",3.1370721297783126e-155,0.078125,True,True
284,Greater Napanee is the home town of what people?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/hometown> <http://dbpedia.org/resource/Greater_Napanee>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Greater Napanee is the home town of what people?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo: hometown ?location .
  ?location dbo:name ""Greater Napanee"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo: hometown ?location .
  ?location dbo:name ""Greater Napanee"" .
}",2.4440718429993668e-155,0.058823529411764705,False,False
4976,How many have family as Ape and order (taxonomy) is Primate ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Ape> . ?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Primate> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many have family as Ape and order (taxonomy) is Primate ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x rdf:type dbo:Animal .
  ?x dbo:family ""Ape"" .
  ?x dbo:order ?order .
  FILTER (regex(?order, ""Primate"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x rdf:type dbo:Animal .
  ?x dbo:family ""Ape"" .
  ?x dbo:order ?order .
  FILTER (regex(?order, ""Primate"", ""i""))
}",8.412065649527267e-232,0.04878048780487805,True,True
1825,"How many awards have been received by graduates of University of Melbourne, Faculty of VCA & MCM?",google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/training> <http://dbpedia.org/resource/University_of_Melbourne_Faculty_of_VCA_and_MCM> . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many awards have been received by graduates of University of Melbourne, Faculty of VCA & MCM?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ex: <http://example.org/>

SELECT (COUNT(?award) AS ?awardCount)
WHERE {
  ?graduate dbo:almaMater ?university .
  ?university rdfs:label ""University of Melbourne"" .
  ?graduate dbo:memberOf ?faculty .
  ?faculty rdfs:label ""Faculty of VCA & MCM"" .
  ?graduate dbo:award ?award .
}
GROUP BY ?university
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX ex: <http://example.org/>

SELECT (COUNT(?award) AS ?awardCount)
WHERE {
  ?graduate dbo:almaMater ?university .
  ?university rdfs:label ""University of Melbourne"" .
  ?graduate dbo:memberOf ?faculty .
  ?faculty rdfs:label ""Faculty of VCA & MCM"" .
  ?graduate dbo:award ?award .
}
GROUP BY ?university",2.665354403099517e-155,0.054945054945054944,True,True
1938,In which state is Dorchester Bay (Boston Harbor)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dorchester_Bay_(Boston_Harbor)> <http://dbpedia.org/property/state> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which state is Dorchester Bay (Boston Harbor)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?bay dbo:location ?location .
  ?location dbo:country ""United States"" .
  ?location dbo:state ?state .
  FILTER (regex(?bay, ""Dorchester Bay""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?bay dbo:location ?location .
  ?location dbo:country ""United States"" .
  ?location dbo:state ?state .
  FILTER (regex(?bay, ""Dorchester Bay""))
}",2.3659629744803227e-155,0.056338028169014086,True,True
933,Count all the games whose distributors are located in America.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/country> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/distributor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all the games whose distributors are located in America.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?gameCount
WHERE {
  ?game dbo:distributor ?distributor .
  ?distributor dbo:country ""America""^^xsd:string .
  
}
GROUP BY ?game
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?gameCount
WHERE {
  ?game dbo:distributor ?distributor .
  ?distributor dbo:country ""America""^^xsd:string .
  
}
GROUP BY ?game",3.195205633963664e-155,0.06944444444444445,True,True
2927,Count the number of sports played by the universities whose one of the sports is baketball ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/athletics> <http://dbpedia.org/resource/Basketball> . ?x <http://dbpedia.org/property/athletics> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of sports played by the universities whose one of the sports is baketball ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?university ?sports
WHERE {
  ?university dbo:sports ?sports .
  ?sports dbo:name ""Basketball"" .
  
}
GROUP BY ?university
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?university ?sports
WHERE {
  ?university dbo:sports ?sports .
  ?sports dbo:name ""Basketball"" .
  
}
GROUP BY ?university",2.3983374600418706e-155,0.06578947368421052,True,True
679,Which country's people work in the Birdman enterprises?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/Birdman_Enterprises> . ?x <http://dbpedia.org/property/nationality> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Engineer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which country's people work in the Birdman enterprises?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?company dbo:country ?country .
  ?company dbo:name ""Birdman enterprises"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?company dbo:country ?country .
  ?company dbo:name ""Birdman enterprises"" .
}",3.2606462774617748e-155,0.07246376811594203,True,True
2275,What are the baseball teams who belongs to Guggenheim Partners?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Guggenheim_Partners>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BaseballTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the baseball teams who belongs to Guggenheim Partners?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?team dbo:owner ?owner .
  ?owner dbo:name ""Guggenheim Partners"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?team dbo:owner ?owner .
  ?owner dbo:name ""Guggenheim Partners"" .
}",2.4440718429993668e-155,0.057971014492753624,True,True
875,Who are the characters of Batman Live?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Batman_Live> <http://dbpedia.org/property/characters> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the characters of Batman Live?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?character
WHERE {
  ?character dbo:wikiPageRedirects ?batmanLive .
  ?batmanLive dbo:character ?character .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?character
WHERE {
  ?character dbo:wikiPageRedirects ?batmanLive .
  ?batmanLive dbo:character ?character .
}",3.159243630213636e-155,0.08064516129032258,True,True
1167,From how many different places have people gone to the Harward Medical School?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/institution> <http://dbpedia.org/resource/Harvard_Medical_School> . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: From how many different places have people gone to the Harward Medical School?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?placeCount
WHERE {
  ?school dbo:almaMater ?person .
  ?person dbp:birthPlace ?place .
  GROUP BY ?place
  
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?placeCount
WHERE {
  ?school dbo:almaMater ?person .
  ?person dbp:birthPlace ?place .
  GROUP BY ?place
  
}",2.6349938432494677e-155,0.06666666666666667,False,False
2552,In which mountain range does the Rochers De Naye lie?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parentMountainPeak> <http://dbpedia.org/resource/Rochers_de_Naye> . ?x <http://dbpedia.org/ontology/mountainRange> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which mountain range does the Rochers De Naye lie?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?mountainRange
WHERE {
  ?mountainRange dbo:locatedIn ?location .
  ?location dbo:name ""Rochers De Naye"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?mountainRange
WHERE {
  ?mountainRange dbo:locatedIn ?location .
  ?location dbo:name ""Rochers De Naye"" .
}",3.6750083101231446e-155,0.08571428571428572,True,True
2575,List the destinations to which the airlines headquartered at the Gatwick Airport fly to?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/headquarters> <http://dbpedia.org/resource/Gatwick_Airport> . ?x <http://dbpedia.org/ontology/destination> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Airline>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the destinations to which the airlines headquartered at the Gatwick Airport fly to?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?destination
WHERE {
  ?airline dbo:headquarters <http://dbpedia.org/resource/Gatwick_Airport> .
  ?airline dbo:fliesTo ?destination .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?destination
WHERE {
  ?airline dbo:headquarters <http://dbpedia.org/resource/Gatwick_Airport> .
  ?airline dbo:fliesTo ?destination .
}",3.559043432561587e-155,0.08108108108108109,True,True
4703,Who is the  distributor of Rev (drink) ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Rev_(drink)> <http://dbpedia.org/ontology/distributor> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the  distributor of Rev (drink) ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?distributor
WHERE {
  ?drink dbo:distributor ?distributor .
  FILTER (str(?drink) = ""Rev (drink)"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?distributor
WHERE {
  ?drink dbo:distributor ?distributor .
  FILTER (str(?drink) = ""Rev (drink)"")
}",2.494821638843469e-155,0.06060606060606061,True,True
4064,Who wrote A house not meant to stand and Akale?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/A_House_Not_Meant_to_Stand> <http://dbpedia.org/property/writer> ?uri. <http://dbpedia.org/resource/Akale> <http://dbpedia.org/ontology/writer> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who wrote A house not meant to stand and Akale?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?author
WHERE {
  ?book dbo:author ?author .
  FILTER (regex(?book, ""A house not meant to stand"", ""i""))
  UNION
  FILTER (regex(?book, ""Akale"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?author
WHERE {
  ?book dbo:author ?author .
  FILTER (regex(?book, ""A house not meant to stand"", ""i""))
  UNION
  FILTER (regex(?book, ""Akale"", ""i""))
}",2.7453983469116385e-155,0.05405405405405406,False,False
2519,From what american football teams did Carlos Emmons play?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carlos_Emmons_(American_football)> <http://dbpedia.org/ontology/formerTeam> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: From what american football teams did Carlos Emmons play?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthPlace ""United States"" .
  ?player dbo:name ""Carlos Emmons"" .
  ?player dbp:playedFor ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthPlace ""United States"" .
  ?player dbo:name ""Carlos Emmons"" .
  ?player dbp:playedFor ?team .
}",2.99393103522275e-155,0.07142857142857142,True,True
4607,List the subjects of the books whose one of the topics is Pau Broca ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/subject> <http://dbpedia.org/resource/Paul_Broca> . ?x <http://dbpedia.org/property/subject> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the subjects of the books whose one of the topics is Pau Broca ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?book
WHERE {
  ?book rdf:type dbo:Book .
  ?book dbo:topic ?topic .
  ?topic dbo:subject ?subject .
  FILTER (regex(?subject, ""Pau Broca"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?book
WHERE {
  ?book rdf:type dbo:Book .
  ?book dbo:topic ?topic .
  ?topic dbo:subject ?subject .
  FILTER (regex(?subject, ""Pau Broca"", ""i""))
}",2.91841165985534e-155,0.0625,True,True
753,Name the river whose source mountain is Baikal Mountains and mouth location is Arctic Ocean?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Baikal_Mountains> . ?uri <http://dbpedia.org/property/mouthLocation> <http://dbpedia.org/resource/Arctic_Ocean>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the river whose source mountain is Baikal Mountains and mouth location is Arctic Ocean?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:sourceMountain <http://dbpedia.org/resource/Baikal_Mountains> .
  ?river dbo:mouth <http://dbpedia.org/resource/Arctic_Ocean> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:sourceMountain <http://dbpedia.org/resource/Baikal_Mountains> .
  ?river dbo:mouth <http://dbpedia.org/resource/Arctic_Ocean> .
}",3.0943809285865547e-155,0.06756756756756757,True,True
2196,In which cities are there stations of SCOLA?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/broadcastNetwork> <http://dbpedia.org/resource/SCOLA_(TV_service)> . ?x <http://dbpedia.org/property/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionStation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which cities are there stations of SCOLA?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city ?station
WHERE {
  ?station dbo:operator ?operator .
  ?operator dbo:name ""SCOLA""^^xsd:string .
  ?station dbp:location ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city ?station
WHERE {
  ?station dbo:operator ?operator .
  ?operator dbo:name ""SCOLA""^^xsd:string .
  ?station dbp:location ?city .
}",3.1137823863213763e-155,0.0684931506849315,True,True
1293,List the awards given to the race horses bred by Willis Sharpe Kilmer.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/breeder> <http://dbpedia.org/resource/Willis_Sharpe_Kilmer> . ?x <http://dbpedia.org/ontology/honours> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RaceHorse>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the awards given to the race horses bred by Willis Sharpe Kilmer.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?award
WHERE {
  ?horse dbo:bredBy ?breeder .
  ?breeder dbo:name ""Willis Sharpe Kilmer"" .
  ?horse dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?award
WHERE {
  ?horse dbo:bredBy ?breeder .
  ?breeder dbo:name ""Willis Sharpe Kilmer"" .
  ?horse dbo:award ?award .
}",3.0025357216578434e-155,0.06493506493506493,True,True
3542,What are the movies with Daniel Waters as screenwriter?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/screenplay> <http://dbpedia.org/resource/Daniel_Waters_(screenwriter)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the movies with Daniel Waters as screenwriter?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movieLabel ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Daniel Waters"" .
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movieLabel ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Daniel Waters"" .
}",2.4440718429993668e-155,0.057971014492753624,True,True
2665,In what tv shows did Jason Carter act?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Jason_Carter_(actor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In what tv shows did Jason Carter act?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?show
WHERE {
  ?actor dbo:name ""Jason Carter"" .
  ?actor dbp:filmography ?show .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?show
WHERE {
  ?actor dbo:name ""Jason Carter"" .
  ?actor dbp:filmography ?show .
}",2.4775553999024465e-155,0.058823529411764705,True,True
183,Count the wars in which people awarded with the Croix de guerre fought.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/awards> <http://dbpedia.org/resource/Croix_de_guerre_1939–1945_(France)> . ?x <http://dbpedia.org/property/battles> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the wars in which people awarded with the Croix de guerre fought.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?war
WHERE {
  ?person dbo:award dbo:CroixDeGuerre .
  ?person dbo:participatedIn ?war .
}
GROUP BY ?war
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?war
WHERE {
  ?person dbo:award dbo:CroixDeGuerre .
  ?person dbo:participatedIn ?war .
}
GROUP BY ?war",2.4708136900731027e-155,0.05263157894736842,True,True
4988,Who is the father of Edith Vonnegut and is also a writer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/child> <http://dbpedia.org/resource/Edith_Vonnegut>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the father of Edith Vonnegut and is also a writer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?father ?fatherLabel
WHERE {
  ?father dbo:child ?edith .
  ?edith dbo:name ""Edith Vonnegut"" .
  ?father dbo:occupation ""Writer"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?father ?fatherLabel
WHERE {
  ?father dbo:child ?edith .
  ?edith dbo:name ""Edith Vonnegut"" .
  ?father dbo:occupation ""Writer"" .
}",7.992219124248642e-232,0.04285714285714286,True,True
2595,Is morrissey in the smiths?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Morrissey> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/The_Smiths> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is morrissey in the smiths?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Morrissey"" .
  ?x dbo:memberOf ?y .
  ?y dbo:name ""The Smiths"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Morrissey"" .
  ?x dbo:memberOf ?y .
  ?y dbo:name ""The Smiths"" .
}",2.305625093843957e-155,0.04918032786885246,True,True
299,How many maintainers are there of the bridges that can carry motor vehicles over them?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/carries> <http://dbpedia.org/resource/Motor_vehicle> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many maintainers are there of the bridges that can carry motor vehicles over them?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?maintainer) AS ?count)
WHERE {
  ?bridge dbo:bridgeType ""Bridge"" .
  ?bridge dbo:hasPart ?part .
  ?part dbo:isPartOf ?bridge .
  ?bridge dbo:maintainer ?maintainer .
  ?bridge dbo:hasPart ?vehicle_carrying_part .
  ?vehicle_carrying_part dbo:vehicleType ""Motor vehicle"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?maintainer) AS ?count)
WHERE {
  ?bridge dbo:bridgeType ""Bridge"" .
  ?bridge dbo:hasPart ?part .
  ?part dbo:isPartOf ?bridge .
  ?bridge dbo:maintainer ?maintainer .
  ?bridge dbo:hasPart ?vehicle_carrying_part .
  ?vehicle_carrying_part dbo:vehicleType ""Motor vehicle"" .
}",2.7832917260583544e-155,0.058823529411764705,True,True
395,How many golf players are there in Arizona State Sun Devils?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/college> <http://dbpedia.org/resource/Arizona_State_Sun_Devils>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GolfPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many golf players are there in Arizona State Sun Devils?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:sportsTeam ?sport .
  ?sport rdfs:label ""American football""@en .
  ?team dbo:location dbo:Arizona .
  ?team dbo:name ""Arizona State Sun Devils""@en .
  ?player dbo:memberOf ?team .
  ?player dbo:occupation dbo:Golfer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:sportsTeam ?sport .
  ?sport rdfs:label ""American football""@en .
  ?team dbo:location dbo:Arizona .
  ?team dbo:name ""Arizona State Sun Devils""@en .
  ?player dbo:memberOf ?team .
  ?player dbo:occupation dbo:Golfer .
}",7.601159375410181e-232,0.03529411764705882,True,True
4919,Tell me the total number of organizations who maintain the bridges made by the malaysian PWD?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/designer> <http://dbpedia.org/resource/Malaysian_Public_Works_Department> . ?x <http://dbpedia.org/ontology/maintainedBy> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Organisation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Tell me the total number of organizations who maintain the bridges made by the malaysian PWD?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?org) AS ?count)
WHERE {
  ?bridge dbo:maintainer ?org .
  ?bridge dbo:constructionCompany ""Malaysian Public Works Department""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?org) AS ?count)
WHERE {
  ?bridge dbo:maintainer ?org .
  ?bridge dbo:constructionCompany ""Malaysian Public Works Department""^^xsd:string .
}",2.384592839964215e-155,0.04819277108433735,True,True
1890,Which movies' music is composed by people associated with the band Yes?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Yes_(band)> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which movies' music is composed by people associated with the band Yes?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?movie ?composer
WHERE {
  ?movie dbo:musicBy ?composer .
  ?composer dbo:memberOf ?band .
  ?band dbo:name ""Yes"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?movie ?composer
WHERE {
  ?movie dbo:musicBy ?composer .
  ?composer dbo:memberOf ?band .
  ?band dbo:name ""Yes"" .
}",3.0382827129023445e-155,0.06578947368421052,True,True
607,What religion's politicians are in the Malaysian Chinese association?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/party> <http://dbpedia.org/resource/Malaysian_Chinese_Association> . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What religion's politicians are in the Malaysian Chinese association?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion ?politician
WHERE {
  ?politician dbo:religion ?religion .
  ?politician dbp:memberOf ?association .
  ?association dbo:name ""Malaysian Chinese Association"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion ?politician
WHERE {
  ?politician dbo:religion ?religion .
  ?politician dbp:memberOf ?association .
  ?association dbo:name ""Malaysian Chinese Association"" .
}",3.1137823863213763e-155,0.06944444444444445,True,True
2846,Which line of the Vadodara Junction railway station is the route end of Mumbai Vadodara Expressway?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mumbai_Vadodara_Expressway> <http://dbpedia.org/ontology/routeEnd> ?uri. <http://dbpedia.org/resource/Vadodara_Junction_railway_station> <http://dbpedia.org/property/line> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which line of the Vadodara Junction railway station is the route end of Mumbai Vadodara Expressway?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?line
WHERE {
  ?station dbo:location/dbp:location ?location .
  ?location dbo:name ""Vadodara Junction"" .
  ?station dbo:railwayLine ?line .
  ?line rdfs:label ""Mumbai Vadodara Expressway"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?line
WHERE {
  ?station dbo:location/dbp:location ?location .
  ?location dbo:name ""Vadodara Junction"" .
  ?station dbo:railwayLine ?line .
  ?line rdfs:label ""Mumbai Vadodara Expressway"" .
}",2.5944303248170386e-155,0.05,True,True
251,Under which archipelago does Canary Islands fall?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/archipelago> <http://dbpedia.org/resource/Canary_Islands> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Under which archipelago does Canary Islands fall?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?archipelago WHERE {
  ?island dbo:location ?location .
  ?location dbp:partOf ?archipelago .
  FILTER ( ?island = <http://dbpedia.org/resource/Canary_Islands> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?archipelago WHERE {
  ?island dbo:location ?location .
  ?location dbp:partOf ?archipelago .
  FILTER ( ?island = <http://dbpedia.org/resource/Canary_Islands> )
}",8.726094729337945e-232,0.058823529411764705,True,True
4625,Who are the tenants of the stadium where the UFC 140 is located?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/UFC_140> <http://dbpedia.org/ontology/location> ?x . ?x <http://dbpedia.org/ontology/tenant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Stadium>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the tenants of the stadium where the UFC 140 is located?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?tenant
WHERE {
  ?stadium dbo:location <http://dbpedia.org/resource/Toronto> .
  ?stadium dbo:name ""Air Canada Centre""@en .
  ?stadium dbp:tenant ?tenant .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?tenant
WHERE {
  ?stadium dbo:location <http://dbpedia.org/resource/Toronto> .
  ?stadium dbo:name ""Air Canada Centre""@en .
  ?stadium dbp:tenant ?tenant .
}",3.0025357216578434e-155,0.06493506493506493,True,True
4296,List the awards given to the key people in Pixar ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pixar> <http://dbpedia.org/property/keyPeople> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the awards given to the key people in Pixar ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?person ?award
WHERE {
  ?person dbo:type dbo:Person .
  ?person dbo:occupation dbp:film_director .
  ?person dbo:award ?award .
  FILTER (regex(str(?person), ""Pixar"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?person ?award
WHERE {
  ?person dbo:type dbo:Person .
  ?person dbo:occupation dbp:film_director .
  ?person dbo:award ?award .
  FILTER (regex(str(?person), ""Pixar"", ""i""))
}",3.102414336582158e-155,0.07792207792207792,True,True
396,Which rivers start in Wyoming?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceRegion> <http://dbpedia.org/resource/Wyoming> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which rivers start in Wyoming?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?river
WHERE {
  ?river dbo:wikiPageRedirects* dbo:River .
  ?river dbp:sourceLocation dbo:Wyoming .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?river
WHERE {
  ?river dbo:wikiPageRedirects* dbo:River .
  ?river dbp:sourceLocation dbo:Wyoming .
}",2.5488701582353735e-155,0.06451612903225806,True,True
2447,Name the city of Duwamish River ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Duwamish_River> <http://dbpedia.org/ontology/city> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the city of Duwamish River ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?river dbo:location ?city .
  FILTER (regex(?river, ""Duwamish River"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?river dbo:location ?city .
  FILTER (regex(?river, ""Duwamish River"", ""i""))
}",2.5124539841526692e-155,0.06153846153846154,True,True
2875,Count the number of tenants whose one of the tenant is Toronto Phantoms ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/tenant> <http://dbpedia.org/resource/Toronto_Phantoms> . ?x <http://dbpedia.org/ontology/tenant> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of tenants whose one of the tenant is Toronto Phantoms ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?tenant
WHERE {
  ?tenant dbo:tenant dbp:Toronto_Phantoms .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?tenant
WHERE {
  ?tenant dbo:tenant dbp:Toronto_Phantoms .
}",2.567119010698462e-155,0.07142857142857142,True,True
3189,"Which maintainer of Cheasty Boulevard South is also the county seat of King County, Washington?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Cheasty_Boulevard_South> <http://dbpedia.org/ontology/maintainedBy> ?uri. <http://dbpedia.org/resource/King_County,_Washington> <http://dbpedia.org/ontology/countySeat> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which maintainer of Cheasty Boulevard South is also the county seat of King County, Washington?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?maintainer
WHERE {
  ?maintainer dbo:maintainerOf dbo:Cheasty_Boulevard_South .
  ?maintainer dbo:countySeatOf ?county .
  ?county dbo:name ""King County, Washington"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?maintainer
WHERE {
  ?maintainer dbo:maintainerOf dbo:Cheasty_Boulevard_South .
  ?maintainer dbo:countySeatOf ?county .
  ?county dbo:name ""King County, Washington"" .
}",2.1108049473741715e-155,0.03896103896103896,True,True
2386,Philadelphia City Council is the governing body of which city?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/governingBody> <http://dbpedia.org/resource/Philadelphia_City_Council> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Philadelphia City Council is the governing body of which city?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  <http://dbpedia.org/resource/Philadelphia_City_Council> dbo:governs ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  <http://dbpedia.org/resource/Philadelphia_City_Council> dbo:governs ?city .
}",8.93945512687472e-232,0.06349206349206349,True,True
1964,"Which educational institution has Kaplan, Inc as it's affiliation?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Kaplan,_Inc.>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/EducationalInstitution>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which educational institution has Kaplan, Inc as it's affiliation?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?institution
WHERE {
  ?institution dbo:affiliation ?affiliation .
  ?affiliation dbo:name ""Kaplan, Inc"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?institution
WHERE {
  ?institution dbo:affiliation ?affiliation .
  ?affiliation dbo:name ""Kaplan, Inc"" .
}",8.202720662090001e-232,0.04411764705882353,True,True
196,"Where did they debut their careers, those who have played for US men's national soccer team?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/United_States_men's_national_soccer_team> . ?x <http://dbpedia.org/property/debutteam> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did they debut their careers, those who have played for US men's national soccer team?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?player ?debutLocation
WHERE {
  ?player dbo:birthDate ?birthDate .
  ?player dbo:country ?country .
  FILTER(?country = ""United States"")
  ?player dbo:playsFor ?team .
  ?team dbo:name ""US men's national soccer team"" .
  ?player dbo:debutLocation ?debutLocation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?player ?debutLocation
WHERE {
  ?player dbo:birthDate ?birthDate .
  ?player dbo:country ?country .
  FILTER(?country = ""United States"")
  ?player dbo:playsFor ?team .
  ?team dbo:name ""US men's national soccer team"" .
  ?player dbo:debutLocation ?debutLocation .
}",3.1387693160635146e-155,0.06818181818181818,True,True
1445,Which team has had both Martin prochzka and garry unger as its players ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Martin_Procházka> <http://dbpedia.org/ontology/formerTeam> ?uri. <http://dbpedia.org/resource/Garry_Unger> <http://dbpedia.org/ontology/formerTeam> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which team has had both Martin prochzka and garry unger as its players ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?team dbo:player ?player1 .
  ?player1 dbo:name ""Martin Procházka"" .
  ?team dbo:player ?player2 .
  ?player2 dbo:name ""Garry Unger"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?team dbo:player ?player1 .
  ?player1 dbo:name ""Martin Procházka"" .
  ?team dbo:player ?player2 .
  ?player2 dbo:name ""Garry Unger"" .
}",3.229753418204598e-155,0.0759493670886076,True,True
2179,List the honorary title given to the spouse of Lillian Disney ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lillian_Disney> <http://dbpedia.org/property/spouse> ?x . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the honorary title given to the spouse of Lillian Disney ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouseTitle
WHERE {
  ?lillian dbo:spouse ?spouse .
  ?spouse dbo:honorificPrefix ?spouseTitle .
  FILTER ( ?lillian = <http://dbpedia.org/resource/Lillian_Disney> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?spouseTitle
WHERE {
  ?lillian dbo:spouse ?spouse .
  ?spouse dbo:honorificPrefix ?spouseTitle .
  FILTER ( ?lillian = <http://dbpedia.org/resource/Lillian_Disney> )
}",2.7042882068441944e-155,0.08108108108108109,True,True
369,Name someone known for a project involved in the Occupation of Japan?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/battle> <http://dbpedia.org/resource/Occupation_of_Japan> . ?uri <http://dbpedia.org/property/knownFor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name someone known for a project involved in the Occupation of Japan?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:occupation ?occupation .
  ?occupation dbo:wikiPageRedirects ?occupationPage .
  ?occupationPage rdfs:label ""Occupation of Japan"" .
  FILTER (lang(?occupationPage) = 'en')
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:occupation ?occupation .
  ?occupation dbo:wikiPageRedirects ?occupationPage .
  ?occupationPage rdfs:label ""Occupation of Japan"" .
  FILTER (lang(?occupationPage) = 'en')
}",3.1205049827277816e-155,0.07894736842105263,True,True
2063,Which animal is the mascot of the 1502nd Infantry Brigade (Ready Reserve) and Galatasaray Handball Team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/1502nd_Infantry_Brigade_(Ready_Reserve)> <http://dbpedia.org/property/mascot> ?uri. <http://dbpedia.org/resource/Galatasaray_Handball_Team> <http://dbpedia.org/property/mascot> ?uri . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Animal>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which animal is the mascot of the 1502nd Infantry Brigade (Ready Reserve) and Galatasaray Handball Team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?animal
WHERE {
  ?animal dbo:mascotOf ?team .
  ?team dbo:name ""1502nd Infantry Brigade (Ready Reserve)"" .
  UNION
  ?team dbo:name ""Galatasaray Handball Team"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?animal
WHERE {
  ?animal dbo:mascotOf ?team .
  ?team dbo:name ""1502nd Infantry Brigade (Ready Reserve)"" .
  UNION
  ?team dbo:name ""Galatasaray Handball Team"" .
}",2.7287223683914353e-155,0.06172839506172839,False,False
3123,Momoko Kochi has acted in which movie ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/starring> <http://dbpedia.org/resource/Momoko_Kōchi>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Momoko Kochi has acted in which movie ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?movie
WHERE {
  dbr:Momoko_Kochi dbo:filmography ?movie .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?movie
WHERE {
  dbr:Momoko_Kochi dbo:filmography ?movie .
}",8.289228799996742e-232,0.045454545454545456,True,True
1565,What place is the birthplace of Vijay Chavan where Eka Lagnachi Teesri Goshta is located as well?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Eka_Lagnachi_Teesri_Goshta> <http://dbpedia.org/property/location> ?uri. <http://dbpedia.org/resource/Vijay_Chavan> <http://dbpedia.org/property/placeOfBirth> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What place is the birthplace of Vijay Chavan where Eka Lagnachi Teesri Goshta is located as well?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?place
WHERE {
  ?person dbo:birthPlace ?place .
  FILTER ( ?person = <http://dbpedia.org/resource/Vijay_Chavan> )
  ?place dbo:country ?country .
  ?country dbo:name ""India"" .
  ?movie dbo:country ?country .
  FILTER ( ?movie = <http://dbpedia.org/resource/Eka_Lagnachi_Teesri_Goshta> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?place
WHERE {
  ?person dbo:birthPlace ?place .
  FILTER ( ?person = <http://dbpedia.org/resource/Vijay_Chavan> )
  ?place dbo:country ?country .
  ?country dbo:name ""India"" .
  ?movie dbo:country ?country .
  FILTER ( ?movie = <http://dbpedia.org/resource/Eka_Lagnachi_Teesri_Goshta> )
}",2.9324767017223683e-155,0.09195402298850575,True,True
3008,Which river's source place is Gloucestershire and has mouth in North Sea?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourcePlace> <http://dbpedia.org/resource/Gloucestershire> . ?uri <http://dbpedia.org/ontology/riverMouth> <http://dbpedia.org/resource/North_Sea>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which river's source place is Gloucestershire and has mouth in North Sea?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river
WHERE {
  ?river dbo:sourcePlace dbo:Gloucestershire .
  ?river dbo:mouth dbp:North_Sea .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river
WHERE {
  ?river dbo:sourcePlace dbo:Gloucestershire .
  ?river dbo:mouth dbp:North_Sea .
}",2.5175858750356875e-155,0.05405405405405406,True,True
455,List the battles fought by Ali Habib Mahmud?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ali_Habib_Mahmud> <http://dbpedia.org/property/battles> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the battles fought by Ali Habib Mahmud?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?battle
WHERE {
  ?person dbo:name ""Ali Habib Mahmud"" .
  ?person dbo:involvedIn ?battle .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?battle
WHERE {
  ?person dbo:name ""Ali Habib Mahmud"" .
  ?person dbo:involvedIn ?battle .
}",3.0940944781388835e-155,0.07692307692307693,True,True
3993,What are the ideologies of the Union of Cambodian Democrats?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_of_Cambodian_Democrats> <http://dbpedia.org/ontology/ideology> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the ideologies of the Union of Cambodian Democrats?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?ideology
WHERE {
  ?party dbo:name ""Union of Cambodian Democrats"" .
  ?party dbo:ideology ?ideology .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?ideology
WHERE {
  ?party dbo:name ""Union of Cambodian Democrats"" .
  ?party dbo:ideology ?ideology .
}",3.032816514970993e-155,0.07692307692307693,True,True
3900,Who is the writer of mark twain Tonight?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/writer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the writer of mark twain Tonight?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?book dbo:author ?author .
  ?book rdfs:label ""Mark Twain Tonight""@en .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?author
WHERE {
  ?book dbo:author ?author .
  ?book rdfs:label ""Mark Twain Tonight""@en .
}",2.4775553999024465e-155,0.06153846153846154,True,True
1788,Who was the australian flag bearer of 2008 Summer Olympics?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Australia_at_the_2008_Summer_Olympics> <http://dbpedia.org/property/flagbearer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the australian flag bearer of 2008 Summer Olympics?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:birthPlace ""Australia"" .
  ?person dbo:olympicFlagBearer ""2008 Summer Olympics"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:birthPlace ""Australia"" .
  ?person dbo:olympicFlagBearer ""2008 Summer Olympics"" .
}",2.3962983105918537e-155,0.058823529411764705,True,True
586,List the opponents of the relatives of Thomas Helwys?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/relation> <http://dbpedia.org/resource/Thomas_Helwys> . ?x <http://dbpedia.org/ontology/opponent> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the opponents of the relatives of Thomas Helwys?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?relative ?opponent
WHERE {
  ?relative rdf:type dbo:Person .
  ?relative dbo:spouse ?helwys .
  ?helwys dbo:name ""Thomas Helwys""^^xsd:string .
  ?opponent dbo:opponentOf ?relative .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?relative ?opponent
WHERE {
  ?relative rdf:type dbo:Person .
  ?relative dbo:spouse ?helwys .
  ?helwys dbo:name ""Thomas Helwys""^^xsd:string .
  ?opponent dbo:opponentOf ?relative .
}",3.0025357216578434e-155,0.06756756756756757,True,True
394,Name the office holder whose child is Lori Black and predecessor is Henry E Catto Jr?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/children> <http://dbpedia.org/resource/Lori_Black> . ?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Henry_E._Catto,_Jr.>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the office holder whose child is Lori Black and predecessor is Henry E Catto Jr?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:child ?child .
  ?child dbo:name ""Lori Black""^^xsd:string .
  ?person dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Henry E Catto Jr""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:child ?child .
  ?child dbo:name ""Lori Black""^^xsd:string .
  ?person dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Henry E Catto Jr""^^xsd:string .
}",8.34186146802972e-232,0.038461538461538464,True,True
989,What is the religion of the person who founded the Emel magazine?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Emel_(magazine)> <http://dbpedia.org/property/founder> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the religion of the person who founded the Emel magazine?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?religion
WHERE {
  ?founder dbo:founded <http://dbpedia.org/resource/Emel_(magazine)> .
  ?founder dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?religion
WHERE {
  ?founder dbo:founded <http://dbpedia.org/resource/Emel_(magazine)> .
  ?founder dbo:religion ?religion .
}",2.6519400145405025e-155,0.07042253521126761,True,True
4310,Name the musician who was given label by Celluloid Records and has been associated with Africa'70 ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records> . ?uri <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Africa_'70_(band)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MusicalArtist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the musician who was given label by Celluloid Records and has been associated with Africa'70 ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?musician
WHERE {
  ?musician dbo:label ?label .
  ?musician dbp:recordLabel ?recordLabel .
  ?recordLabel dbo:name ""Celluloid Records"" .
  ?musician dbo:genre ?genre .
  ?genre dbo:name ""Afrobeat"" .
  FILTER (regex(?genre, ""Africa'70"", ""i""))
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?musician
WHERE {
  ?musician dbo:label ?label .
  ?musician dbp:recordLabel ?recordLabel .
  ?recordLabel dbo:name ""Celluloid Records"" .
  ?musician dbo:genre ?genre .
  ?genre dbo:name ""Afrobeat"" .
  FILTER (regex(?genre, ""Africa'70"", ""i""))
}",2.225022327381878e-155,0.045454545454545456,True,True
176,What is the largest city in the country where the San Marcos River originates?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/San_Marcos_River> <http://dbpedia.org/ontology/sourceMountain> ?x . ?x <http://dbpedia.org/ontology/largestCity> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the largest city in the country where the San Marcos River originates?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city ?country
WHERE {
  ?river dbo:source ?location .
  ?location dbo:country ?country .
  ?country dbo:largestCity ?city .
  FILTER ( ?river = <http://dbpedia.org/resource/San_Marcos_River> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city ?country
WHERE {
  ?river dbo:source ?location .
  ?location dbo:country ?country .
  ?country dbo:largestCity ?city .
  FILTER ( ?river = <http://dbpedia.org/resource/San_Marcos_River> )
}",2.454081903007032e-155,0.0625,True,True
273,How many TV shows have been created by Simon Fuller ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many TV shows have been created by Simon Fuller ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?show) AS ?count)
WHERE {
  ?show dbo:creator Simon Fuller .
  FILTER (regex(?show, ""TV show"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?show) AS ?count)
WHERE {
  ?show dbo:creator Simon Fuller .
  FILTER (regex(?show, ""TV show"", ""i""))
}",7.992219124248642e-232,0.03896103896103896,False,False
1407,Name the founders of the record labels whose one of the founders is Frank Rogers?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Frank_Rogers_(record_producer)> . ?x <http://dbpedia.org/property/founder> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RecordLabel>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the founders of the record labels whose one of the founders is Frank Rogers?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?label ?founder
WHERE {
  ?label dbo:founder ?founder .
  ?founder dbo:name ""Frank Rogers""^^xsd:string .
  
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?label ?founder
WHERE {
  ?label dbo:founder ?founder .
  ?founder dbo:name ""Frank Rogers""^^xsd:string .
  
}",3.0382827129023445e-155,0.0684931506849315,True,True
3983,How many things belong to phylum of Chordate?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/phylum> <http://dbpedia.org/resource/Chordate>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many things belong to phylum of Chordate?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x dbo:classification dbo:Chordata .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x dbo:classification dbo:Chordata .
}",2.5488701582353735e-155,0.06060606060606061,True,True
2733,"Which religion do the people follow, whose constituency is Jadavpur?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Jadavpur_(Lok_Sabha_constituency)> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which religion do the people follow, whose constituency is Jadavpur?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:constituency ""Jadavpur"" .
  ?person dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:constituency ""Jadavpur"" .
  ?person dbo:religion ?religion .
}",3.2383880054191053e-155,0.07142857142857142,True,True
3431,Who has produced movies that have a James Horner score?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/James_Horner> . ?x <http://dbpedia.org/property/producer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who has produced movies that have a James Horner score?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?director
WHERE {
  ?movie dbo:director ?director .
  ?movie dbp:musicComposer ?composer .
  ?composer dbo:name ""James Horner"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?director
WHERE {
  ?movie dbo:director ?director .
  ?movie dbp:musicComposer ?composer .
  ?composer dbo:name ""James Horner"" .
}",3.075337680136661e-155,0.06756756756756757,True,True
3699,Who is the prime minister of the successor of Kingsley Wood?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kingsley_Wood> <http://dbpedia.org/ontology/successor> ?x . ?x <http://dbpedia.org/property/primeminister> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the prime minister of the successor of Kingsley Wood?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?successor ?successorPrimeMinister
WHERE {
  ?person dbo:birthName ""Kingsley Wood"" .
  ?person dbo:successor ?successor .
  ?successor dbo:primeMinister ?successorPrimeMinister .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?successor ?successorPrimeMinister
WHERE {
  ?person dbo:birthName ""Kingsley Wood"" .
  ?person dbo:successor ?successor .
  ?successor dbo:primeMinister ?successorPrimeMinister .
}",3.0566417519593477e-155,0.06944444444444445,True,True
3950,Which race is the Best Mate is also the race of the Martin Molony?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Best_Mate> <http://dbpedia.org/property/race> ?uri. <http://dbpedia.org/resource/Martin_Molony> <http://dbpedia.org/ontology/race> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which race is the Best Mate is also the race of the Martin Molony?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?race
WHERE {
  ?bestMate dbo:race ?race .
  ?martinMolony dbo:race ?race .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?race
WHERE {
  ?bestMate dbo:race ?race .
  ?martinMolony dbo:race ?race .
}",2.7960888070028265e-155,0.05714285714285714,True,True
2465,Which sports are played at both the Polytech uni of Bataan and Taguig?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_–_Bataan> <http://dbpedia.org/ontology/sport> ?uri. <http://dbpedia.org/resource/Polytechnic_University_of_the_Philippines_Taguig> <http://dbpedia.org/ontology/sport> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports are played at both the Polytech uni of Bataan and Taguig?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:sports ?sport .
  FILTER(?university IN (dbp:Polytech_University_of_Bataan , dbp:Taguig_City))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:sports ?sport .
  FILTER(?university IN (dbp:Polytech_University_of_Bataan , dbp:Taguig_City))
}",3.0943809285865547e-155,0.07894736842105263,True,True
2310,List the television shows whose network's owning company is Turner Broadcasting System?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/owningCompany> <http://dbpedia.org/resource/Turner_Broadcasting_System> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the television shows whose network's owning company is Turner Broadcasting System?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?showLabel ?networkLabel
WHERE {
  ?show dbo:network ?network .
  ?network dbo:parentOrganization ?parentOrg .
  ?parentOrg dbo:name ""Turner Broadcasting System"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX dbo: <http://dbpedia.org/ontology/>
SELECT DISTINCT ?showLabel ?networkLabel
WHERE {
  ?show dbo:network ?network .
  ?network dbo:parentOrganization ?parentOrg .
  ?parentOrg dbo:name ""Turner Broadcasting System"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.8866879095378115e-155,0.060240963855421686,False,False
4497,Name the route start of Saint Petersburg  Moscow Railway ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Saint_Petersburg_–_Moscow_Railway> <http://dbpedia.org/ontology/routeStart> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the route start of Saint Petersburg  Moscow Railway ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?routeStart
WHERE {
  ?railway dbo:routeStart ?routeStart .
  FILTER (STR(?railway) = ""http://dbpedia.org/resource/Saint_Petersburg-Moscow_Railway"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?routeStart
WHERE {
  ?railway dbo:routeStart ?routeStart .
  FILTER (STR(?railway) = ""http://dbpedia.org/resource/Saint_Petersburg-Moscow_Railway"")
}",2.4775553999024465e-155,0.05970149253731343,True,True
270,What is the affiliation of tani University?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ōtani_University> <http://dbpedia.org/property/affiliation> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the affiliation of tani University?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?affiliation
WHERE {
  ?university dbo:name ""Tani University"" .
  ?university dbo:affiliation ?affiliation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?affiliation
WHERE {
  ?university dbo:name ""Tani University"" .
  ?university dbo:affiliation ?affiliation .
}",2.5124539841526692e-155,0.06349206349206349,True,True
4663,How many people have trained the wrestlers who were billed in Wisconsin?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/billed> <http://dbpedia.org/resource/Wisconsin> . ?x <http://dbpedia.org/ontology/trainer> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people have trained the wrestlers who were billed in Wisconsin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?trainer) AS ?count)
WHERE {
  ?wrestler dbo:birthDate ?birth.
  ?wrestler dbo:billedIn ?location.
  FILTER(?location = ""Wisconsin"")
  ?wrestler dbo:trainedBy ?trainer.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?trainer) AS ?count)
WHERE {
  ?wrestler dbo:birthDate ?birth.
  ?wrestler dbo:billedIn ?location.
  FILTER(?location = ""Wisconsin"")
  ?wrestler dbo:trainedBy ?trainer.
}",2.135639655544596e-155,0.036585365853658534,True,True
331,With whom is Heinz Kokott a relative to who also served Nazi Army?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Heinz_Kokott> <http://dbpedia.org/ontology/relation> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: With whom is Heinz Kokott a relative to who also served Nazi Army?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?relative ?relativeName
WHERE {
  ?person dbo:birthPlace ""Germany"" .
  ?person dbo:name ""Heinz Kokott"" .
  ?person dbo:spouse ?relative .
  ?relative dbo:name ?relativeName .
  ?relative dbo:occupation ?occupation .
  FILTER (regex(?occupation, ""Nazi Army"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?relative ?relativeName
WHERE {
  ?person dbo:birthPlace ""Germany"" .
  ?person dbo:name ""Heinz Kokott"" .
  ?person dbo:spouse ?relative .
  ?relative dbo:name ?relativeName .
  ?relative dbo:occupation ?occupation .
  FILTER (regex(?occupation, ""Nazi Army"", ""i""))
}",2.6727411373916324e-155,0.06097560975609756,True,True
3406,Were the 1995 south pacific games hosted in tahiti?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/1995_South_Pacific_Games> <http://dbpedia.org/property/hostCity> <http://dbpedia.org/resource/Tahiti> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Were the 1995 south pacific games hosted in tahiti?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/1995_South_Pacific_Games> .
  ?x dbo:location ?y .
  ?y dbo:name ""Tahiti"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/1995_South_Pacific_Games> .
  ?x dbo:location ?y .
  ?y dbo:name ""Tahiti"" .
}",2.215756877004116e-155,0.04477611940298507,True,True
819,List down the important people of The Elders?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Elders_(organization)> <http://dbpedia.org/property/keyPeople> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List down the important people of The Elders?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?name
WHERE {
  ?person dbo:memberOf <http://dbpedia.org/resource/The_Elders> .
  ?person dbo:name ?name .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?name
WHERE {
  ?person dbo:memberOf <http://dbpedia.org/resource/The_Elders> .
  ?person dbo:name ?name .
}",3.1153609837288e-155,0.078125,True,True
1063,Which administrative headquarters of the Pulau Ubin is also the resting place of the Nicole Lai?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pulau_Ubin> <http://dbpedia.org/ontology/capital> ?uri. <http://dbpedia.org/resource/Nicole_Lai> <http://dbpedia.org/ontology/restingPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which administrative headquarters of the Pulau Ubin is also the resting place of the Nicole Lai?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?administrativeHeadquarters ?restingPlace
WHERE {
  ?administrativeHeadquarters dbo:administrativeHeadquarters ?place .
  ?place dbp:location ?location .
  ?location dbo:name ""Pulau Ubin"" .
  ?restingPlace dbo:restingPlace ?person .
  ?person dbo:name ""Nicole Lai"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?administrativeHeadquarters ?restingPlace
WHERE {
  ?administrativeHeadquarters dbo:administrativeHeadquarters ?place .
  ?place dbp:location ?location .
  ?location dbo:name ""Pulau Ubin"" .
  ?restingPlace dbo:restingPlace ?person .
  ?person dbo:name ""Nicole Lai"" .
}",1.998443100417405e-155,0.037037037037037035,True,True
4322,How many different writers have written for Jump Square?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/magazine> <http://dbpedia.org/resource/Jump_Square> . ?x <http://dbpedia.org/property/author> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many different writers have written for Jump Square?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT (COUNT(DISTINCT ?writer) AS ?count)
WHERE {
  ?magazine dbo:genre ""Manga"" .
  ?magazine dbp:title ""Jump Square"" .
  ?writer dbo:work ?magazine .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT (COUNT(DISTINCT ?writer) AS ?count)
WHERE {
  ?magazine dbo:genre ""Manga"" .
  ?magazine dbp:title ""Jump Square"" .
  ?writer dbo:work ?magazine .
}",3.0566417519593477e-155,0.06493506493506493,True,True
3318,Name the home ground of  2015 Fort Lauderdale Strikers season ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_Fort_Lauderdale_Strikers_season> <http://dbpedia.org/ontology/ground> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the home ground of  2015 Fort Lauderdale Strikers season ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?homeGround
WHERE {
  ?team dbo:name ""2015 Fort Lauderdale Strikers"" .
  ?team dbo:homeGround ?homeGround .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?homeGround
WHERE {
  ?team dbo:name ""2015 Fort Lauderdale Strikers"" .
  ?team dbo:homeGround ?homeGround .
}",2.3659629744803227e-155,0.057971014492753624,True,True
4045,Music of how many things has been given by Akira Ifukube?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Akira_Ifukube>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Music of how many things has been given by Akira Ifukube?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?count
WHERE {
  ?thing dbo:composer Akira Ifukube .
  ?thing rdfs:label ?label .
  
  FILTER (lang(?label) = 'en')
  
  
}
GROUP BY ?label
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?count
WHERE {
  ?thing dbo:composer Akira Ifukube .
  ?thing rdfs:label ?label .
  
  FILTER (lang(?label) = 'en')
  
  
}
GROUP BY ?label",8.485327127592046e-232,0.05194805194805195,False,False
2839,Who has fought in wars under commander Arthur St Clair?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Arthur_St._Clair> . ?x <http://dbpedia.org/property/combatant> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who has fought in wars under commander Arthur St Clair?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?soldier
WHERE {
  ?soldier dbo:commander ?commander .
  ?commander dbo:name ""Arthur St Clair"" .
  ?soldier dbo:involvedInWar ?war .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?soldier
WHERE {
  ?soldier dbo:commander ?commander .
  ?commander dbo:name ""Arthur St Clair"" .
  ?soldier dbo:involvedInWar ?war .
}",3.5156372159951298e-155,0.08,True,True
4448,Where can one find the Dzogchen Ponolop Rinpoche?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dzogchen_Ponlop_Rinpoche> <http://dbpedia.org/property/location> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where can one find the Dzogchen Ponolop Rinpoche?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?location
WHERE {
  ?person dbo:name ""Dzogchen Ponolop Rinpoche"" .
  ?person dbo:birthPlace ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?location
WHERE {
  ?person dbo:name ""Dzogchen Ponolop Rinpoche"" .
  ?person dbo:birthPlace ?location .
}",2.427831263680579e-155,0.06060606060606061,True,True
4515,Who succeeded Lucius Crus as an office holder?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/predecessor> <http://dbpedia.org/resource/Lucius_Cornelius_Lentulus_Crus>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who succeeded Lucius Crus as an office holder?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?successor
WHERE {
  ?person dbo:successor ?successor .
  FILTER (regex(?person, ""Lucius Crus"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?successor
WHERE {
  ?person dbo:successor ?successor .
  FILTER (regex(?person, ""Lucius Crus"", ""i""))
}",8.231055179516831e-232,0.043478260869565216,True,True
3796,Who is the writer with notable works like Adventures of Huckleberry Finn and The Adventures of Tom Sawyer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/Adventures_of_Huckleberry_Finn> . ?uri <http://dbpedia.org/ontology/notableWork> <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Writer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the writer with notable works like Adventures of Huckleberry Finn and The Adventures of Tom Sawyer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?author
WHERE {
  ?author dbo:birthPlace ""Missouri"" .
  ?author dbo:work ?work .
  ?work dbo:title ""Adventures of Huckleberry Finn"" .
  FILTER (regex(?author, ""Mark Twain""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?author
WHERE {
  ?author dbo:birthPlace ""Missouri"" .
  ?author dbo:work ?work .
  ?work dbo:title ""Adventures of Huckleberry Finn"" .
  FILTER (regex(?author, ""Mark Twain""))
}",2.8409841948588806e-155,0.060240963855421686,True,True
4960,"Whose relatives are Clan McDuck and Huey, Dewey, and Louie?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Clan_McDuck> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Huey,_Dewey,_and_Louie> . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose relatives are Clan McDuck and Huey, Dewey, and Louie?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?relative
WHERE {
  ?person dbo:family ?relative .
  FILTER ( ?person IN ( dbo:Clan_McDuck , dbo:Huey , dbo:Dewey , dbo:Louie ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?relative
WHERE {
  ?person dbo:family ?relative .
  FILTER ( ?person IN ( dbo:Clan_McDuck , dbo:Huey , dbo:Dewey , dbo:Louie ) )
}",2.9851289841006984e-155,0.07894736842105263,True,True
4743,To which county of New York city does the Tremount Avenue street belong?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tremont_Avenue> <http://dbpedia.org/property/counties> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which county of New York city does the Tremount Avenue street belong?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?county
WHERE {
  ?street dbo:streetAddress ""Tremount Avenue"" .
  ?street dbo:locatedIn ?county .
  ?county dbo:country ""United States"" .
  ?county dbo:name ?countyName .
  FILTER (regex(?countyName, ""New York""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?county
WHERE {
  ?street dbo:streetAddress ""Tremount Avenue"" .
  ?street dbo:locatedIn ?county .
  ?county dbo:country ""United States"" .
  ?county dbo:name ?countyName .
  FILTER (regex(?countyName, ""New York""))
}",2.1934084870059202e-155,0.05,True,True
1038,Which wars were fought by the commander whose deputy was Robert T. Herres?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deputy> <http://dbpedia.org/resource/Robert_T._Herres> . ?uri <http://dbpedia.org/ontology/commander> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which wars were fought by the commander whose deputy was Robert T. Herres?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?war
WHERE {
  ?commander dbo:deputy ?deputy .
  ?deputy dbo:name ""Robert T. Herres"" .
  ?commander dbo:involvedInWar ?war .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?war
WHERE {
  ?commander dbo:deputy ?deputy .
  ?deputy dbo:name ""Robert T. Herres"" .
  ?commander dbo:involvedInWar ?war .
}",3.0566417519593477e-155,0.06578947368421052,True,True
3741,Where is the venue of the History of Penny Arcade Expo located?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/History_of_Penny_Arcade_Expo> <http://dbpedia.org/property/venue> ?x . ?x <http://dbpedia.org/property/address> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where is the venue of the History of Penny Arcade Expo located?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?expo dbo:venue ?location .
  FILTER (regex(?expo, ""History of Penny Arcade Expo"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?expo dbo:venue ?location .
  FILTER (regex(?expo, ""History of Penny Arcade Expo"", ""i""))
}",2.5175858750356875e-155,0.07042253521126761,True,True
1607,Which city was founded by George Washington and John Forbes (British Army officer)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/George_Washington> . ?uri <http://dbpedia.org/ontology/founder> <http://dbpedia.org/resource/John_Forbes_(British_Army_officer)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/City>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which city was founded by George Washington and John Forbes (British Army officer)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?city
WHERE {
  ?city dbo:founder ?founder .
  ?founder dbo:name ""George Washington"" .
  ?founder dbo:name ""John Forbes"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?city
WHERE {
  ?city dbo:founder ?founder .
  ?founder dbo:name ""George Washington"" .
  ?founder dbo:name ""John Forbes"" .
}",2.4123225276763925e-155,0.05128205128205128,True,True
3237,Does Sonny Bill Williams belong in the Canterbury Bankstown Bulldogs club?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Sonny_Bill_Williams> <http://dbpedia.org/property/club> <http://dbpedia.org/resource/Canterbury-Bankstown_Bulldogs> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Sonny Bill Williams belong in the Canterbury Bankstown Bulldogs club?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Sonny Bill Williams"" .
  ?x dbo:memberOf ?y .
  ?y dbo:name ""Canterbury Bankstown Bulldogs"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:name ""Sonny Bill Williams"" .
  ?x dbo:memberOf ?y .
  ?y dbo:name ""Canterbury Bankstown Bulldogs"" .
}",2.135639655544596e-155,0.04285714285714286,True,True
599,Name the profession of Oamr D Conger for which Jack Ryan was also nominated?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jack_Ryan_(politician)> <http://dbpedia.org/ontology/nominee> ?uri. <http://dbpedia.org/resource/Omar_D._Conger> <http://dbpedia.org/property/order> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the profession of Oamr D Conger for which Jack Ryan was also nominated?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession
WHERE {
  ?person dbo:profession ?profession .
  ?person dbo:name ""Oamr D Conger""^^xsd:string .
  ?person dbo:award ?award .
  ?award dbo:recipient ?jackryan .
  ?jackryan dbo:name ""Jack Ryan""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession
WHERE {
  ?person dbo:profession ?profession .
  ?person dbo:name ""Oamr D Conger""^^xsd:string .
  ?person dbo:award ?award .
  ?award dbo:recipient ?jackryan .
  ?jackryan dbo:name ""Jack Ryan""^^xsd:string .
}",2.0523206950207848e-155,0.038461538461538464,True,True
4219,Who was the head coach of Middlesbrough F.C. season 2006-7 also the coach of England national under 21 footbal team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2006–07_Middlesbrough_F.C._season> <http://dbpedia.org/ontology/manager> ?uri. <http://dbpedia.org/resource/England_national_under-21_football_team> <http://dbpedia.org/property/coach> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the head coach of Middlesbrough F.C. season 2006-7 also the coach of England national under 21 footbal team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?coach
WHERE {
  ?coach rdf:type dbo:FootballManager .
  ?coach dbo:headCoachOf ?team .
  ?team dbo:name ""Middlesbrough F.C."" .
  FILTER(?team dbo:season ""2006-7"")
  ?coach dbo:coachOf ?team2 .
  ?team2 dbo:name ""England national under 21 football team"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?coach
WHERE {
  ?coach rdf:type dbo:FootballManager .
  ?coach dbo:headCoachOf ?team .
  ?team dbo:name ""Middlesbrough F.C."" .
  FILTER(?team dbo:season ""2006-7"")
  ?coach dbo:coachOf ?team2 .
  ?team2 dbo:name ""England national under 21 football team"" .
}",1.893436069619061e-155,0.033707865168539325,False,False
2473,Who is the manager of the club whose homeground is the riverside stadium?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Riverside_Stadium> . ?uri <http://dbpedia.org/ontology/managerClub> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsManager>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the manager of the club whose homeground is the riverside stadium?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?manager
WHERE {
  ?club dbo:homeGround ""Riverside Stadium"" .
  ?club dbo:manager ?manager .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?manager
WHERE {
  ?club dbo:homeGround ""Riverside Stadium"" .
  ?club dbo:manager ?manager .
}",2.50170125957988e-155,0.05555555555555555,True,True
2125,What religion do the Wickramabahu Centeral College and Neungin High School both follow?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Wickramabahu_Central_College_(National_School)> <http://dbpedia.org/property/religiousAffiliation> ?uri. <http://dbpedia.org/resource/Neungin_High_School> <http://dbpedia.org/property/religiousAffiliation> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What religion do the Wickramabahu Centeral College and Neungin High School both follow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?school dbo:religion ?religion .
  FILTER (regex(?school, ""Wickramabahu Centeral College"") || regex(?school, ""Neungin High School""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?school dbo:religion ?religion .
  FILTER (regex(?school, ""Wickramabahu Centeral College"") || regex(?school, ""Neungin High School""))
}",2.426555136425675e-155,0.0641025641025641,True,True
2004,Which key person of maryland jockey club is the appointer of Joseph Clay ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Joseph_Clay_(Georgia)> <http://dbpedia.org/ontology/appointer> ?uri. <http://dbpedia.org/resource/Maryland_Jockey_Club> <http://dbpedia.org/property/keyPeople> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which key person of maryland jockey club is the appointer of Joseph Clay ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:appointer ?clay .
  ?clay dbo:name ""Joseph Clay""^^xsd:string .
  ?person dbo:memberOf ?club .
  ?club dbo:name ""Maryland Jockey Club""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?person
WHERE {
  ?person dbo:appointer ?clay .
  ?clay dbo:name ""Joseph Clay""^^xsd:string .
  ?person dbo:memberOf ?club .
  ?club dbo:name ""Maryland Jockey Club""^^xsd:string .
}",2.0636286749776556e-155,0.0379746835443038,True,True
2996,Who is the writer of Neverwhere (radio play) ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Neverwhere_(radio_play)> <http://dbpedia.org/ontology/writer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the writer of Neverwhere (radio play) ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?writer
WHERE {
  ?radioPlay dbo:workTitle ""Neverwhere (radio play)"" .
  ?radioPlay dbo:writer ?writer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?writer
WHERE {
  ?radioPlay dbo:workTitle ""Neverwhere (radio play)"" .
  ?radioPlay dbo:writer ?writer .
}",2.4606427705034855e-155,0.06153846153846154,True,True
2558,Who was the cover artist of The Adventure of Tom Sawyer and also wrote mark Twain Tonight?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/The_Adventures_of_Tom_Sawyer> <http://dbpedia.org/ontology/coverArtist> ?uri. <http://dbpedia.org/resource/Mark_Twain_Tonight> <http://dbpedia.org/property/writer> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the cover artist of The Adventure of Tom Sawyer and also wrote mark Twain Tonight?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:coverArtist ?book .
  ?book dbo:title ""The Adventure of Tom Sawyer""^^xsd:string .
  ?artist dbo:wrote ?performance .
  ?performance dbo:title ""Mark Twain Tonight""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:coverArtist ?book .
  ?book dbo:title ""The Adventure of Tom Sawyer""^^xsd:string .
  ?artist dbo:wrote ?performance .
  ?performance dbo:title ""Mark Twain Tonight""^^xsd:string .
}",2.5406524524079725e-155,0.04938271604938271,True,True
4747,What are the mascots of the teams participating in the Turkish Handball Super League?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/Turkish_Handball_Super_League> . ?x <http://dbpedia.org/property/mascot> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the mascots of the teams participating in the Turkish Handball Super League?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team ?mascot
WHERE {
  ?team dbo:sportsLeague dbp:TurkishHandballSuperLeague .
  ?team dbo:mascot ?mascot .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?team ?mascot
WHERE {
  ?team dbo:sportsLeague dbp:TurkishHandballSuperLeague .
  ?team dbo:mascot ?mascot .
}",3.075337680136661e-155,0.06756756756756757,True,True
4525,Name the ones who debuted in the San Francisco 49ers.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/debutTeam> <http://dbpedia.org/resource/San_Francisco_49ers>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the ones who debuted in the San Francisco 49ers.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?player
WHERE {
  ?player dbo:birthPlace ""San Francisco, California, USA""^^xsd:string .
  ?player dbo:sportsTeam dbp:San_Francisco_49ers .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?player
WHERE {
  ?player dbo:birthPlace ""San Francisco, California, USA""^^xsd:string .
  ?player dbo:sportsTeam dbp:San_Francisco_49ers .
}",3.032816514970993e-155,0.07246376811594203,True,True
2115,What is the genre of the things developed by Interplay Entertainment?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/developer> <http://dbpedia.org/resource/Interplay_Entertainment> . ?x <http://dbpedia.org/ontology/genre> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the genre of the things developed by Interplay Entertainment?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?genre
WHERE {
  ?game dbo:developer Interplay Entertainment .
  ?game dbo:genre ?genre .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?genre
WHERE {
  ?game dbo:developer Interplay Entertainment .
  ?game dbo:genre ?genre .
}",3.6750083101231446e-155,0.08695652173913043,False,False
4741,Name the part of Liverpool city region >,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Liverpool_City_Region> <http://dbpedia.org/ontology/part> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the part of Liverpool city region >
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?part
WHERE {
  ?part dbo:partOf <http://dbpedia.org/resource/Liverpool_city_region> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?part
WHERE {
  ?part dbo:partOf <http://dbpedia.org/resource/Liverpool_city_region> .
}",3.2286895410078598e-155,0.08064516129032258,True,True
1249,Who was the president at the time when the opponent of Benjamin Spock held office?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/opponent> <http://dbpedia.org/resource/Benjamin_Spock> . ?x <http://dbpedia.org/property/incumbent> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was the president at the time when the opponent of Benjamin Spock held office?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?president
WHERE {
  ?spock dbo:birthDate ?spockBirthdate .
  ?spock dbo:opponent ?opponent .
  ?opponent dbo:birthDate ?opponentBirthdate .
  ?president dbo:office ?office .
  FILTER(?opponentBirthdate < ?spockBirthdate)
  FILTER(?spockBirthdate < ?office)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?president
WHERE {
  ?spock dbo:birthDate ?spockBirthdate .
  ?spock dbo:opponent ?opponent .
  ?opponent dbo:birthDate ?opponentBirthdate .
  ?president dbo:office ?office .
  FILTER(?opponentBirthdate < ?spockBirthdate)
  FILTER(?spockBirthdate < ?office)
}",2.401580582872042e-155,0.06097560975609756,True,True
1876,Which fictional character's relatives were made by Ted Osborne?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/creator> <http://dbpedia.org/resource/Ted_Osborne> . ?uri <http://dbpedia.org/property/relatives> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which fictional character's relatives were made by Ted Osborne?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?character ?relative
WHERE {
  ?character dbo:characterType ""Fictional character"" .
  ?character dbo:creator ?creator .
  ?creator dbo:name ""Ted Osborne"" .
  ?character dbp:relative ?relative .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?character ?relative
WHERE {
  ?character dbo:characterType ""Fictional character"" .
  ?character dbo:creator ?creator .
  ?creator dbo:name ""Ted Osborne"" .
  ?character dbp:relative ?relative .
}",2.9851289841006984e-155,0.0641025641025641,True,True
698,How many fictional characters were humans?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Human>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many fictional characters were humans?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?character) AS ?count)
WHERE {
  ?character dbo:type dbo:FictionalCharacter .
  ?character dbo:abstract ?abstract .
  FILTER (regex(?abstract, ""human"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?character) AS ?count)
WHERE {
  ?character dbo:type dbo:FictionalCharacter .
  ?character dbo:abstract ?abstract .
  FILTER (regex(?abstract, ""human"", ""i""))
}",8.120546156106983e-232,0.0410958904109589,True,True
3236,What are the binomial authority of Menetries's warbler?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Menetries's_warbler> <http://dbpedia.org/ontology/binomialAuthority> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the binomial authority of Menetries's warbler?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?binomialAuthority
WHERE {
  ?menetriesWarbler dbo:wikiPageRedirects ?page .
  ?page rdfs:label ""Menetries's warbler"" .
  ?page dbo:binomialAuthority ?binomialAuthority .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?binomialAuthority
WHERE {
  ?menetriesWarbler dbo:wikiPageRedirects ?page .
  ?page rdfs:label ""Menetries's warbler"" .
  ?page dbo:binomialAuthority ?binomialAuthority .
}",2.3809857162598948e-155,0.058823529411764705,True,True
4174,How many leagues have used the O.co Coliseum?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/O.co_Coliseum> <http://dbpedia.org/ontology/tenant> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many leagues have used the O.co Coliseum?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?league)) AS ?count
WHERE {
  ?stadium dbo:location ""Oakland, California, USA"".
  ?stadium dbo:name ""O.co Coliseum"".
  ?stadium dbp:usedBy ?league.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?league)) AS ?count
WHERE {
  ?stadium dbo:location ""Oakland, California, USA"".
  ?stadium dbo:name ""O.co Coliseum"".
  ?stadium dbp:usedBy ?league.
}",2.3962983105918537e-155,0.0547945205479452,False,False
3222,Name the television show where Mona Marshall has given voice and is distributed by Comedy Central?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Mona_Marshall> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the television show where Mona Marshall has given voice and is distributed by Comedy Central?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showName
WHERE {
  ?actor dbo:name ""Mona Marshall"" .
  ?actor dbo:voiceOf ?show .
  ?show dbo:distributor ""Comedy Central"" .
  ?show ?showName rdfs:label .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showName
WHERE {
  ?actor dbo:name ""Mona Marshall"" .
  ?actor dbo:voiceOf ?show .
  ?show dbo:distributor ""Comedy Central"" .
  ?show ?showName rdfs:label .
}",8.319100378795605e-232,0.036585365853658534,True,True
905,Which city do both Arthur Ross and Edward Niesen come from?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Arthur_A._Ross> <http://dbpedia.org/property/placeOfBirth> ?uri. <http://dbpedia.org/resource/Edward_Niesen> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which city do both Arthur Ross and Edward Niesen come from?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  FILTER (?person IN (dbo:Arthur_Ross, dbo:Edward_Niesen))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  FILTER (?person IN (dbo:Arthur_Ross, dbo:Edward_Niesen))
}",2.8871942127949523e-155,0.0547945205479452,True,True
1560,Who hold stocks in the bank which is located at 731 Lexington Avenue?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/locationCity> <http://dbpedia.org/resource/731_Lexington_Avenue> . ?x <http://dbpedia.org/property/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bank>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who hold stocks in the bank which is located at 731 Lexington Avenue?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?stockholder
WHERE {
  ?bank dbo:address ""731 Lexington Avenue"" .
  ?bank dbo:stockholder ?stockholder .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?stockholder
WHERE {
  ?bank dbo:address ""731 Lexington Avenue"" .
  ?bank dbo:stockholder ?stockholder .
}",3.075337680136661e-155,0.06578947368421052,True,True
3986,Count the number of people became famous for when Andrew Jackson was a commander ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Andrew_Jackson> . ?uri <http://dbpedia.org/ontology/knownFor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of people became famous for when Andrew Jackson was a commander ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace ?deathPlace .
  ?person dbo:becameFamousFor ?becameFamousFor .
  FILTER ( ?becameFamousFor = <http://dbpedia.org/resource/Andrew_Jackson> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace ?deathPlace .
  ?person dbo:becameFamousFor ?becameFamousFor .
  FILTER ( ?becameFamousFor = <http://dbpedia.org/resource/Andrew_Jackson> )
}",2.5092505335702585e-155,0.07058823529411765,True,True
2262,Which location city of Denver Broncos is the palce of birth of Steven Clark Cunningham ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Denver_Broncos> <http://dbpedia.org/ontology/locationCity> ?uri. <http://dbpedia.org/resource/Steven_Clark_Cunningham> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which location city of Denver Broncos is the palce of birth of Steven Clark Cunningham ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  ?person dbo:name ""Steven Clark Cunningham"" .
  FILTER (regex(?city, ""Denver""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  ?person dbo:name ""Steven Clark Cunningham"" .
  FILTER (regex(?city, ""Denver""))
}",2.1108049473741715e-155,0.038461538461538464,True,True
855,Which people are known for appearing on the television show Dragon's Den?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Dragons'_Den_(UK_TV_series)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which people are known for appearing on the television show Dragon's Den?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:knownFor ?show .
  ?show rdfs:label ""Dragon's Den"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:knownFor ?show .
  ?show rdfs:label ""Dragon's Den"" .
}",2.4119102000777368e-155,0.05714285714285714,True,True
377,"Which office holder's governor is Charles Willing Byrd and has final resting place in North Bend, Ohio?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/governor> <http://dbpedia.org/resource/Charles_Willing_Byrd> . ?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/North_Bend,_Ohio>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which office holder's governor is Charles Willing Byrd and has final resting place in North Bend, Ohio?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?officeHolder
WHERE {
  ?officeHolder dbo:governor ?governor .
  ?governor dbo:name ""Charles Willing Byrd""^^xsd:string .
  ?officeHolder dbo:finalRestingPlace ?restingPlace .
  ?restingPlace dbo:name ""North Bend, Ohio""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?officeHolder
WHERE {
  ?officeHolder dbo:governor ?governor .
  ?governor dbo:name ""Charles Willing Byrd""^^xsd:string .
  ?officeHolder dbo:finalRestingPlace ?restingPlace .
  ?restingPlace dbo:name ""North Bend, Ohio""^^xsd:string .
}",8.252630869637644e-232,0.03614457831325301,True,True
2308,List all the faiths that British Columbian politicians follow?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/British_Columbia> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Politician>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the faiths that British Columbian politicians follow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?faith
WHERE {
  ?politician dbo: nationality ""British Columbian"" .
  ?politician dbo:religion ?faith .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?faith
WHERE {
  ?politician dbo: nationality ""British Columbian"" .
  ?politician dbo:religion ?faith .
}",3.1537059338519422e-155,0.07042253521126761,False,False
688,In which cities can the beverage related to Barq's be found?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Barq's> <http://dbpedia.org/ontology/related> ?x . ?x <http://dbpedia.org/property/locationCity> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which cities can the beverage related to Barq's be found?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?product dbo:brand ""Barq's"" .
  ?product dbo:productType ""beverage"" .
  ?product dbp:availableIn ?city .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?city
WHERE {
  ?product dbo:brand ""Barq's"" .
  ?product dbo:productType ""beverage"" .
  ?product dbp:availableIn ?city .
}",3.53714058675999e-155,0.08108108108108109,True,True
2227,Trainees at the national film school of Lodz have received what awards?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/training> <http://dbpedia.org/resource/National_Film_School_in_Łódź> . ?x <http://dbpedia.org/ontology/award> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Trainees at the national film school of Lodz have received what awards?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?school dbo:name ""National Film School in Łódź"" .
  ?school dbo:trainee ?trainee .
  ?trainee dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?school dbo:name ""National Film School in Łódź"" .
  ?school dbo:trainee ?trainee .
  ?trainee dbo:award ?award .
}",3.433385853714441e-155,0.0759493670886076,True,True
1018,Give me the count of all people who ascended a peak in California?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/locatedInArea> <http://dbpedia.org/resource/California> . ?x <http://dbpedia.org/ontology/firstAscentPerson> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me the count of all people who ascended a peak in California?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?person) AS ?count)
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country ?country .
  FILTER(?country = dbo:UnitedStates)
  ?person dbo:ascendedPeak ?peak .
  ?peak dbo:location ?location .
  FILTER(?location = dbo:California)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?person) AS ?count)
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?birthPlace dbo:country ?country .
  FILTER(?country = dbo:UnitedStates)
  ?person dbo:ascendedPeak ?peak .
  ?peak dbo:location ?location .
  FILTER(?location = dbo:California)
}",2.3318865198845825e-155,0.047619047619047616,True,True
3702,What is the region of Kim Sawchuk ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Kim_Sawchuk> <http://dbpedia.org/property/region> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the region of Kim Sawchuk ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?region
WHERE {
  ?person dbo:name ""Kim Sawchuk"" .
  ?person dbo:region ?region .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?region
WHERE {
  ?person dbo:name ""Kim Sawchuk"" .
  ?person dbo:region ?region .
}",2.494821638843469e-155,0.0625,True,True
1173,List the total number of executive producer of TV show which have one of the executiive producer as Steven Moffat ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/executiveProducer> <http://dbpedia.org/resource/Steven_Moffat> . ?x <http://dbpedia.org/property/executiveProducer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the total number of executive producer of TV show which have one of the executiive producer as Steven Moffat ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?executiveProducer) AS ?count)
WHERE {
  ?tvShow dbo:executiveProducer ?executiveProducer .
  ?executiveProducer dbo:name ""Steven Moffat"" .
  FILTER (BOUND(?executiveProducer))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?executiveProducer) AS ?count)
WHERE {
  ?tvShow dbo:executiveProducer ?executiveProducer .
  ?executiveProducer dbo:name ""Steven Moffat"" .
  FILTER (BOUND(?executiveProducer))
}",2.3192471031465984e-155,0.058823529411764705,True,True
4084,Who all were venerated in Islam?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Islam>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who all were venerated in Islam?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:religion ""Islam""^^xsd:string .
  ?subject dbo:veneratedBy ?object .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:religion ""Islam""^^xsd:string .
  ?subject dbo:veneratedBy ?object .
}",3.181891987622405e-155,0.078125,True,True
3753,List down the opponents of Frank Stilwell?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Frank_Stilwell> <http://dbpedia.org/ontology/opponent> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List down the opponents of Frank Stilwell?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?opponent
WHERE {
  ?opponent dbo:opponentOf ?frankStilwell .
  ?frankStilwell dbo:name ""Frank Stilwell"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?opponent
WHERE {
  ?opponent dbo:opponentOf ?frankStilwell .
  ?frankStilwell dbo:name ""Frank Stilwell"" .
}",3.1370721297783126e-155,0.078125,True,True
3703,Which colored race horses have won the Grand National?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/honours> <http://dbpedia.org/resource/Grand_National> . ?x <http://dbpedia.org/ontology/colour> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RaceHorse>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which colored race horses have won the Grand National?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?horse ?color
WHERE {
  ?horse dbo:wikiPageRedirects* dbo:GrandNationalWinner .
  ?horse dbp:coatColor ?color .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?horse ?color
WHERE {
  ?horse dbo:wikiPageRedirects* dbo:GrandNationalWinner .
  ?horse dbp:coatColor ?color .
}",3.1742523358973992e-155,0.07042253521126761,True,True
3932,List bacterias whose order is Bacillales and division is Firmicutes?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales> . ?uri <http://dbpedia.org/ontology/division> <http://dbpedia.org/resource/Firmicutes>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List bacterias whose order is Bacillales and division is Firmicutes?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:order ""Bacillales""^^xsd:string .
  ?bacteria dbo:division ""Firmicutes""^^xsd:string .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:order ""Bacillales""^^xsd:string .
  ?bacteria dbo:division ""Firmicutes""^^xsd:string .
}",2.5502845355614067e-155,0.056338028169014086,True,True
4784,Brian Moriarty designed video games written by whom?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/designer> <http://dbpedia.org/resource/Brian_Moriarty> . ?x <http://dbpedia.org/property/writer> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/VideoGame>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Brian Moriarty designed video games written by whom?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?writer
WHERE {
  ?game dbo:designer Brian Moriarty .
  ?game dbo:writer ?writer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?writer
WHERE {
  ?game dbo:designer Brian Moriarty .
  ?game dbo:writer ?writer .
}",3.195205633963664e-155,0.07142857142857142,False,False
1242,List the other members of the band of which Juelz Santana is a part?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/currentMembers> <http://dbpedia.org/resource/Juelz_Santana> . ?x <http://dbpedia.org/ontology/bandMember> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Band>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the other members of the band of which Juelz Santana is a part?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?otherMember
WHERE {
  ?band dbo:member ?member .
  ?member dbo:name ""Juelz Santana""^^xsd:string .
  ?band dbo:member ?otherMember .
  FILTER ( ?otherMember != ?member )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?otherMember
WHERE {
  ?band dbo:member ?member .
  ?member dbo:name ""Juelz Santana""^^xsd:string .
  ?band dbo:member ?otherMember .
  FILTER ( ?otherMember != ?member )
}",2.951204860745888e-155,0.06493506493506493,True,True
1570,What is the nationality of Aishath Saffa?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Aishath_Saffa> <http://dbpedia.org/property/nationality> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the nationality of Aishath Saffa?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?nationality
WHERE {
  dbp:nationality Aishath_Saffa ?nationality .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?nationality
WHERE {
  dbp:nationality Aishath_Saffa ?nationality .
}",2.606590994551401e-155,0.06666666666666667,False,False
4768,Is Fluidinfo written in PostgreSQL language?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Fluidinfo> <http://dbpedia.org/property/programmingLanguage> <http://dbpedia.org/resource/PostgreSQL> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Fluidinfo written in PostgreSQL language?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects/dbp:programmingLanguage ""PostgreSQL"" .
  ?x dbo:wikiPageRedirects/dbp:name ""Fluidinfo"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x WHERE {
  ?x dbo:wikiPageRedirects/dbp:programmingLanguage ""PostgreSQL"" .
  ?x dbo:wikiPageRedirects/dbp:name ""Fluidinfo"" .
}",2.321693139700891e-155,0.047619047619047616,True,True
4676,Estimate the number of sports divisions at the universities under international association of universities.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/affiliation> <http://dbpedia.org/resource/International_Association_of_Universities> . ?x <http://dbpedia.org/ontology/sport> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Estimate the number of sports divisions at the universities under international association of universities.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?sportDivision) AS ?count)
WHERE {
  ?university dbo:memberOf ?iau .
  ?iau dbo:name ""International Association of Universities""@en .
  ?university dbo:sportsDivision ?sportDivision .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT (COUNT(?sportDivision) AS ?count)
WHERE {
  ?university dbo:memberOf ?iau .
  ?iau dbo:name ""International Association of Universities""@en .
  ?university dbo:sportsDivision ?sportDivision .
}",2.951204860745888e-155,0.0625,True,True
1915,How many universities participate in the NCAA Division I Football Bowl Subdivision?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/athletics> <http://dbpedia.org/resource/NCAA_Division_I_Football_Bowl_Subdivision>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many universities participate in the NCAA Division I Football Bowl Subdivision?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?university)) AS ?count
WHERE {
  ?university dbo:sportsTeam ?footballTeam .
  ?footballTeam dbo:league dbp:NCAA_Division_I_Football_Bowl_Subdivision .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?university)) AS ?count
WHERE {
  ?university dbo:sportsTeam ?footballTeam .
  ?footballTeam dbo:league dbp:NCAA_Division_I_Football_Bowl_Subdivision .
}",8.06798322521923e-232,0.04054054054054054,False,False
2992,Count everyone who was in the military unit which is structured like the Marine Aircraft Group 13 ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/commandStructure> <http://dbpedia.org/resource/Marine_Aircraft_Group_13> . ?uri <http://dbpedia.org/ontology/militaryUnit> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count everyone who was in the military unit which is structured like the Marine Aircraft Group 13 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX schema: <http://schema.org/>

SELECT ?person
WHERE {
  ?person dbo:memberOf ?unit .
  ?unit dbo:isPartOf ?mag .
  ?mag dbo:name ""Marine Aircraft Group 13""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
PREFIX schema: <http://schema.org/>

SELECT ?person
WHERE {
  ?person dbo:memberOf ?unit .
  ?unit dbo:isPartOf ?mag .
  ?mag dbo:name ""Marine Aircraft Group 13""^^xsd:string .
}",2.8712091323971647e-155,0.060240963855421686,True,True
851,What novels belong to the genre of Utopian and dystopian fiction?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/literaryGenre> <http://dbpedia.org/resource/Utopian_and_dystopian_fiction> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What novels belong to the genre of Utopian and dystopian fiction?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?novel
WHERE {
  ?novel dbo:genre ?genre .
  ?genre dbo:wikiPageRedirects ?wikiPage .
  FILTER (regex(?wikiPage, ""Utopian|Dystopian""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?novel
WHERE {
  ?novel dbo:genre ?genre .
  ?genre dbo:wikiPageRedirects ?wikiPage .
  FILTER (regex(?wikiPage, ""Utopian|Dystopian""))
}",2.3962983105918537e-155,0.057971014492753624,True,True
311,Name the constituency of Domenico Modugno?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Domenico_Modugno> <http://dbpedia.org/property/constituency> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the constituency of Domenico Modugno?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?constituency
WHERE {
  ?person dbo:name ""Domenico Modugno"" .
  ?person dbp:constituency ?constituency .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?constituency
WHERE {
  ?person dbo:name ""Domenico Modugno"" .
  ?person dbp:constituency ?constituency .
}",2.530465559854518e-155,0.06451612903225806,True,True
3577,What is the predecessor of PlayStation 4?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/successor> <http://dbpedia.org/resource/PlayStation_4>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the predecessor of PlayStation 4?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?playstation4 dbo:successor ?predecessor .
  FILTER ( ?playstation4 = <http://dbpedia.org/resource/PlayStation_4> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?predecessor
WHERE {
  ?playstation4 dbo:successor ?predecessor .
  FILTER ( ?playstation4 = <http://dbpedia.org/resource/PlayStation_4> )
}",9.352284301430419e-232,0.07575757575757576,True,True
84,Which title of Zaman Shah Durrani is also the nationality of Salahuddin?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Zaman_Shah_Durrani> <http://dbpedia.org/property/title> ?uri. <http://dbpedia.org/resource/Salahuddin_Rabbani> <http://dbpedia.org/ontology/nationality> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which title of Zaman Shah Durrani is also the nationality of Salahuddin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?title
WHERE {
  ?zaman dbo:title ?title .
  ?zaman dbo:birthPlace ""Afghanistan"" .
  ?salahuddin dbo:nationality ""Afghan"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?title
WHERE {
  ?zaman dbo:title ?title .
  ?zaman dbo:birthPlace ""Afghanistan"" .
  ?salahuddin dbo:nationality ""Afghan"" .
}",2.1745921280630745e-155,0.04054054054054054,True,True
691,List the ceremonial county of East Tilbury?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/East_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the ceremonial county of East Tilbury?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?ceremonialCounty
WHERE {
  ?town dbo:ceremonialCounty ?ceremonialCounty .
  FILTER (regex(?town, ""East Tilbury"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?ceremonialCounty
WHERE {
  ?town dbo:ceremonialCounty ?ceremonialCounty .
  FILTER (regex(?town, ""East Tilbury"", ""i""))
}",2.5124539841526692e-155,0.06153846153846154,True,True
2377,List bacteria whose order (taxonomy) is Bacillales and domain is Bacteria?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/order> <http://dbpedia.org/resource/Bacillales> . ?uri <http://dbpedia.org/property/domain> <http://dbpedia.org/resource/Bacteria>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Bacteria>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List bacteria whose order (taxonomy) is Bacillales and domain is Bacteria?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:wikiPageID ?wikiPageID .
  ?bacteria dbo:dbpediaClass ?class .
  ?class rdfs:subClassOf* dbo:Bacteria .
  ?bacteria dbo:order ?order .
  ?order dbo:name ""Bacillales"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?bacteria
WHERE {
  ?bacteria dbo:wikiPageID ?wikiPageID .
  ?bacteria dbo:dbpediaClass ?class .
  ?class rdfs:subClassOf* dbo:Bacteria .
  ?bacteria dbo:order ?order .
  ?order dbo:name ""Bacillales"" .
}",2.3577979608859863e-155,0.05128205128205128,True,True
297,For which other teams do members of tanzanian national football team play?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/nationalteam> <http://dbpedia.org/resource/Tanzania_national_football_team> . ?x <http://dbpedia.org/ontology/team> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: For which other teams do members of tanzanian national football team play?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:memberOf <http://dbpedia.org/resource/Tanzanian_national_football_team> .
  ?player dbo:playsFor ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:memberOf <http://dbpedia.org/resource/Tanzanian_national_football_team> .
  ?player dbo:playsFor ?team .
}",3.6040982025556637e-155,0.08108108108108109,True,True
4574,Which televison shows have location as Massachusetts ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/location> <http://dbpedia.org/resource/Massachusetts>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which televison shows have location as Massachusetts ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?showLabel ?show
WHERE {
  ?show dbo:location dbp:Massachusetts .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?showLabel ?show
WHERE {
  ?show dbo:location dbp:Massachusetts .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.427831263680579e-155,0.056338028169014086,False,False
3367,Which architect of the Marine Corps Air Station Kaneohe Bay is the branch of the Burnet R. Maybank?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Marine_Corps_Air_Station_Kaneohe_Bay> <http://dbpedia.org/property/architect> ?uri. <http://dbpedia.org/resource/Burnet_R._Maybank> <http://dbpedia.org/property/branch> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which architect of the Marine Corps Air Station Kaneohe Bay is the branch of the Burnet R. Maybank?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?architect
WHERE {
  ?architect dbo:architectOf ?building .
  ?building dbp:location dbo:MarineCorpsAirStationKaneoheBay .
  ?architect dbo:branchOf ?branch .
  ?branch dbo:name ""Burnet R. Maybank"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?architect
WHERE {
  ?architect dbo:architectOf ?building .
  ?building dbp:location dbo:MarineCorpsAirStationKaneoheBay .
  ?architect dbo:branchOf ?branch .
  ?branch dbo:name ""Burnet R. Maybank"" .
}",2.5806662832054458e-155,0.04938271604938271,True,True
4648,How many people play for the Dallas Cowboys?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/team> <http://dbpedia.org/resource/Dallas_Cowboys>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people play for the Dallas Cowboys?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:name ""Dallas Cowboys"" .
  ?team dbo:officialWebsite ?website .
  ?player dbo:playsFor ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?player) AS ?count)
WHERE {
  ?team dbo:name ""Dallas Cowboys"" .
  ?team dbo:officialWebsite ?website .
  ?player dbo:playsFor ?team .
}",2.3962983105918537e-155,0.057971014492753624,True,True
4039,Is the Caterpullar 797F assembled in North America?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Caterpillar_797F> <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/North_America> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is the Caterpullar 797F assembled in North America?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?assemblyLocation
WHERE {
  ?caterpillar dbo:assemblyLocation ?assemblyLocation .
  FILTER (regex(?assemblyLocation, ""North America"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?assemblyLocation
WHERE {
  ?caterpillar dbo:assemblyLocation ?assemblyLocation .
  FILTER (regex(?assemblyLocation, ""North America"", ""i""))
}",2.2744651330897987e-155,0.04477611940298507,True,True
4937,Name the origins of the river with Quich Department as one of the origin ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/origin> <http://dbpedia.org/resource/Quiché_Department> . ?x <http://dbpedia.org/ontology/origin> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the origins of the river with Quich Department as one of the origin ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?riverName
WHERE {
  ?river dbo:origin ?origin .
  ?origin dbo:locatedIn ?department .
  ?department rdfs:label ""Quich Department"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?riverName
WHERE {
  ?river dbo:origin ?origin .
  ?origin dbo:locatedIn ?department .
  ?department rdfs:label ""Quich Department"" .
}",3.0025357216578434e-155,0.06666666666666667,True,True
2631,Which university attended by Donn Barber and education institute of Jack McGregor ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Donn_Barber> <http://dbpedia.org/property/education> ?uri. <http://dbpedia.org/resource/Jack_McGregor> <http://dbpedia.org/ontology/education> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which university attended by Donn Barber and education institute of Jack McGregor ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university ?institute
WHERE {
  ?person dbo:almaMater ?university .
  FILTER(?person IN (dbo:Donn_Barber, dbo:Jack_McGregor))
  ?institute dbo:headquarters ?person .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?university ?institute
WHERE {
  ?person dbo:almaMater ?university .
  FILTER(?person IN (dbo:Donn_Barber, dbo:Jack_McGregor))
  ?institute dbo:headquarters ?person .
}",2.7788812895482627e-155,0.05263157894736842,True,True
3453,Was Gerald Gibbs the cinematographer of X the unknown?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/X_the_Unknown> <http://dbpedia.org/ontology/cinematography> <http://dbpedia.org/resource/Gerald_Gibbs_(cinematographer)> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Gerald Gibbs the cinematographer of X the unknown?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:director Gerald Gibbs .
  ?x dbo:title ""X the unknown"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:director Gerald Gibbs .
  ?x dbo:title ""X the unknown"" .
}",2.2300068516948962e-155,0.046875,False,False
2758,"Where did the wrestler die who was billed in Norman, Oklahoma?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/billed> <http://dbpedia.org/resource/Norman,_Oklahoma> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Wrestler>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the wrestler die who was billed in Norman, Oklahoma?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?place WHERE {
  ?person dbo:birthDate ?birth.
  ?person dbo:deathDate ?death.
  ?person dbo:placeOfBirth ?birthplace.
  ?person dbo:billingLocation ""Norman, Oklahoma"".
  FILTER(?death != NULL)
  FILTER(?place != NULL)
  ?person dbo:deathPlace ?place.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?place WHERE {
  ?person dbo:birthDate ?birth.
  ?person dbo:deathDate ?death.
  ?person dbo:placeOfBirth ?birthplace.
  ?person dbo:billingLocation ""Norman, Oklahoma"".
  FILTER(?death != NULL)
  FILTER(?place != NULL)
  ?person dbo:deathPlace ?place.
}",2.09870814592606e-155,0.037037037037037035,False,False
4685,What is the club of Perianne Jones ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Perianne_Jones> <http://dbpedia.org/property/club> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the club of Perianne Jones ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?club
WHERE {
  ?person dbo:name ""Perianne Jones"" .
  ?person dbo:memberOf ?club .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?club
WHERE {
  ?person dbo:name ""Perianne Jones"" .
  ?person dbo:memberOf ?club .
}",2.494821638843469e-155,0.0625,True,True
4773,How many ingedients are required to make the Ragout Fin?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Ragout_fin> <http://dbpedia.org/ontology/ingredient> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many ingedients are required to make the Ragout Fin?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?ingredient) AS ?count)
WHERE {
  ?recipe dbo:name ""Ragout Fin""@en .
  ?recipe dbo:ingredient ?ingredient .
}
GROUP BY ?recipe
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?ingredient) AS ?count)
WHERE {
  ?recipe dbo:name ""Ragout Fin""@en .
  ?recipe dbo:ingredient ?ingredient .
}
GROUP BY ?recipe",2.99393103522275e-155,0.0684931506849315,True,True
3738,What are the relatives of the rugby player one of whose relatives is Nick Williams?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Nick_Williams> . ?x <http://dbpedia.org/ontology/relative> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RugbyPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the relatives of the rugby player one of whose relatives is Nick Williams?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?relative
WHERE {
  ?rugbyPlayer dbo:relative ?relative .
  ?relative dbo:relative ""Nick Williams"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?relative
WHERE {
  ?rugbyPlayer dbo:relative ?relative .
  ?relative dbo:relative ""Nick Williams"" .
}",3.1137823863213763e-155,0.06944444444444445,True,True
666,Marika Gombitov makes songs in which languages?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/artist> <http://dbpedia.org/resource/Marika_Gombitová> . ?x <http://dbpedia.org/property/language> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Marika Gombitov makes songs in which languages?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?language
WHERE {
  ?artist dbo:name ""Marika Gombitov"" .
  ?artist dbo:genres ?genre .
  ?genre rdfs:label ?genreLabel .
  FILTER (regex(?genreLabel, ""music"", ""i""))
  ?genre dbp:language ?language .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?language
WHERE {
  ?artist dbo:name ""Marika Gombitov"" .
  ?artist dbo:genres ?genre .
  ?genre rdfs:label ?genreLabel .
  FILTER (regex(?genreLabel, ""music"", ""i""))
  ?genre dbp:language ?language .
}",3.433385853714441e-155,0.07692307692307693,True,True
214,Which parent organization of Get TV also owns the Galleria ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/GetTV> <http://dbpedia.org/ontology/parentOrganisation> ?uri. <http://dbpedia.org/resource/The_Galleria> <http://dbpedia.org/ontology/owner> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which parent organization of Get TV also owns the Galleria ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?parentOrganization
WHERE {
  ?organization dbo:wikiPageRedirects/dbp:name ""Get TV"" .
  ?organization dbo:parentOrganization ?parentOrganization .
  ?parentOrganization dbo:wikiPageRedirects/dbp:name ""Galleria"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?parentOrganization
WHERE {
  ?organization dbo:wikiPageRedirects/dbp:name ""Get TV"" .
  ?organization dbo:parentOrganization ?parentOrganization .
  ?parentOrganization dbo:wikiPageRedirects/dbp:name ""Galleria"" .
}",2.1745921280630745e-155,0.0410958904109589,True,True
4769,"Who currently operates the railway lines one of whose stockholder is Chicago, St Paul, Minneapolis and Omaha railway?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/owner> <http://dbpedia.org/resource/Chicago,_St._Paul,_Minneapolis_and_Omaha_Railway> . ?x <http://dbpedia.org/ontology/operatedBy> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/RailwayLine>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who currently operates the railway lines one of whose stockholder is Chicago, St Paul, Minneapolis and Omaha railway?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?operator
WHERE {
  ?railway dbo:stockholder ?company .
  ?company rdfs:label ""Chicago, St Paul, Minneapolis and Omaha railway"" .
  ?railway dbo:operator ?operator .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?operator
WHERE {
  ?railway dbo:stockholder ?company .
  ?company rdfs:label ""Chicago, St Paul, Minneapolis and Omaha railway"" .
  ?railway dbo:operator ?operator .
}",2.8559767164037747e-155,0.06097560975609756,True,True
1418,Whose music composer is signed up with Sony Music Entertainment?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose music composer is signed up with Sony Music Entertainment?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?composer ?composerLabel
WHERE {
  ?composer dbo:musicComposer ?musicComposer .
  ?musicComposer dbp:recordLabel dbo:SonyMusicEntertainment .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?composer ?composerLabel
WHERE {
  ?composer dbo:musicComposer ?musicComposer .
  ?musicComposer dbp:recordLabel dbo:SonyMusicEntertainment .
}",3.699591675882789e-155,0.08450704225352113,True,True
4597,Which sports are played in the school which runs the Fr. Agnel Stadium?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Fr._Agnel_Stadium> <http://dbpedia.org/property/operator> ?x . ?x <http://dbpedia.org/ontology/sport> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports are played in the school which runs the Fr. Agnel Stadium?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?stadium dbo:operator ?school .
  ?school rdfs:label ""Fr. Agnel Stadium""@en .
  ?school dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?stadium dbo:operator ?school .
  ?school rdfs:label ""Fr. Agnel Stadium""@en .
  ?school dbo:sports ?sport .
}",3.4534064447194983e-155,0.07894736842105263,True,True
65,Was Ganymede discovered by Galileo Galilei?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Ganymede_(moon)> <http://dbpedia.org/property/discoverer> <http://dbpedia.org/resource/Galileo_Galilei> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Ganymede discovered by Galileo Galilei?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x rdf:type dbo:Moon .
  ?x dbo:name ""Ganymede""^^xsd:string .
  ?x dbo:discoveredBy ?y .
  ?y rdf:type dbo:Person .
  ?y dbo:name ""Galileo Galilei""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x rdf:type dbo:Moon .
  ?x dbo:name ""Ganymede""^^xsd:string .
  ?x dbo:discoveredBy ?y .
  ?y rdf:type dbo:Person .
  ?y dbo:name ""Galileo Galilei""^^xsd:string .
}",2.135639655544596e-155,0.04411764705882353,True,True
3797,How many politicians are there from the city of Ganges?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Ganges> <http://dbpedia.org/property/city> ?x . ?x <http://dbpedia.org/ontology/leaderName> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many politicians are there from the city of Ganges?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?politician) AS ?count)
WHERE {
  ?politician dbo:birthPlace dbp:Ganges .
  ?politician dbo:profession/rdfs:label ""Politician"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?politician) AS ?count)
WHERE {
  ?politician dbo:birthPlace dbp:Ganges .
  ?politician dbo:profession/rdfs:label ""Politician"" .
}",3.216579438360415e-155,0.06944444444444445,True,True
4275,Waddy wachtel did the music for what movies?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Waddy_Wachtel>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Waddy wachtel did the music for what movies?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Waddy Wachtel"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:director ?person .
  ?person dbo:name ""Waddy Wachtel"" .
}",2.4775553999024465e-155,0.06060606060606061,True,True
4210,Where common region are soylent and bannock sold?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Soylent_(drink)> <http://dbpedia.org/ontology/region> ?uri. <http://dbpedia.org/resource/Bannock_(food)> <http://dbpedia.org/ontology/region> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where common region are soylent and bannock sold?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?region
WHERE {
  ?product dbo:country ?country .
  ?product dbp:region ?region .
  FILTER (regex(?product, ""soylent"", ""i"") || regex(?product, ""bannock"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?region
WHERE {
  ?product dbo:country ?country .
  ?product dbp:region ?region .
  FILTER (regex(?product, ""soylent"", ""i"") || regex(?product, ""bannock"", ""i""))
}",3.1137823863213763e-155,0.08,True,True
2901,Which rivers start from the Provinces of Zambia?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/settlementType> <http://dbpedia.org/resource/Provinces_of_Zambia> . ?uri <http://dbpedia.org/ontology/sourceRegion> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which rivers start from the Provinces of Zambia?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river ?riverLabel
WHERE {
  ?river dbo:sourceLocation ?location .
  ?location dbo:country ?country .
  ?country dbo:name ""Zambia"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?river ?riverLabel
WHERE {
  ?river dbo:sourceLocation ?location .
  ?location dbo:country ?country .
  ?country dbo:name ""Zambia"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.9851289841006984e-155,0.0641025641025641,False,False
582,Who are the people which ITV(TV network) has employed?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/employer> <http://dbpedia.org/resource/ITV_(TV_network)>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the people which ITV(TV network) has employed?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:employedBy ?network .
  ?network dbo:name ""ITV"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:employedBy ?network .
  ?network dbo:name ""ITV"" .
}",3.1153609837288e-155,0.07575757575757576,True,True
4126,Is Greg Weeks the band member of Beyond the Sixth Seal?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Beyond_the_Sixth_Seal> <http://dbpedia.org/ontology/bandMember> <http://dbpedia.org/resource/Greg_Weeks> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Greg Weeks the band member of Beyond the Sixth Seal?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Greg Weeks"" .
  ?x dbo:memberOf <http://dbpedia.org/resource/Beyond_the_Sixth_Seal> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Greg Weeks"" .
  ?x dbo:memberOf <http://dbpedia.org/resource/Beyond_the_Sixth_Seal> .
}",2.4440718429993668e-155,0.06153846153846154,True,True
2488,Is Steve Nash the chairman of Vancouver Whitecaps FC?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Vancouver_Whitecaps_FC> <http://dbpedia.org/property/chairman> <http://dbpedia.org/resource/Steve_Nash> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Steve Nash the chairman of Vancouver Whitecaps FC?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Steve Nash"" .
  ?x dbo:chairmanOf ?y .
  ?y dbo:name ""Vancouver Whitecaps FC"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Steve Nash"" .
  ?x dbo:chairmanOf ?y .
  ?y dbo:name ""Vancouver Whitecaps FC"" .
}",2.215756877004116e-155,0.045454545454545456,True,True
2550,Name the notable commanders of Army Group Oberrhein ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Army_Group_Oberrhein_(Germany)> <http://dbpedia.org/property/notableCommanders> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the notable commanders of Army Group Oberrhein ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?commander
WHERE {
  ?armyGroup dbo:commander ?commander .
  FILTER (regex(?armyGroup, ""Oberrhein"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?commander
WHERE {
  ?armyGroup dbo:commander ?commander .
  FILTER (regex(?armyGroup, ""Oberrhein"", ""i""))
}",3.0528361925813156e-155,0.07246376811594203,True,True
3998,How many movies have their music signed up with Sony Music Entertainment.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/recordLabel> <http://dbpedia.org/resource/Sony_Music_Entertainment> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many movies have their music signed up with Sony Music Entertainment.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:genre ""Film"" .
  ?movie dbp:musicLabel ?musicLabel .
  ?musicLabel dbo:name ""Sony Music Entertainment"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:genre ""Film"" .
  ?movie dbp:musicLabel ?musicLabel .
  ?musicLabel dbo:name ""Sony Music Entertainment"" .
}",2.4123225276763925e-155,0.04938271604938271,True,True
2776,Count all the books written by an author buried in the Convent of Barefoot Trinitarians?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/restingPlace> <http://dbpedia.org/resource/Convent_of_the_Barefoot_Trinitarians> . ?uri <http://dbpedia.org/ontology/author> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Book>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all the books written by an author buried in the Convent of Barefoot Trinitarians?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?author ?book
WHERE {
  ?author dbo:deathPlace ""Convent of Barefoot Trinitarians"" .
  ?author dbo:birthPlace ?birthPlace .
  ?author dbo:author ?book .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?author ?book
WHERE {
  ?author dbo:deathPlace ""Convent of Barefoot Trinitarians"" .
  ?author dbo:birthPlace ?birthPlace .
  ?author dbo:author ?book .
}",2.371081855250832e-155,0.05063291139240506,True,True
951,How many people are there whose children died in Indiana?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Indiana> . ?uri <http://dbpedia.org/ontology/child> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people are there whose children died in Indiana?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?personCount
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:child ?child .
  ?child dbo:deathPlace ""Indiana"" .
  FILTER (BOUND(?person))
}
GROUP BY ?person
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?personCount
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:child ?child .
  ?child dbo:deathPlace ""Indiana"" .
  FILTER (BOUND(?person))
}
GROUP BY ?person",2.4708136900731027e-155,0.05128205128205128,True,True
3232,How many people have been canonized by Pope Benedict XVI?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/canonizedBy> <http://dbpedia.org/resource/Pope_Benedict_XVI>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people have been canonized by Pope Benedict XVI?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?person dbo:canonizedBy ?pope .
  ?pope dbo:name ""Benedict XVI""^^xsd:string .
  FILTER (BOUND(?pope))
}
GROUP BY ?pope
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?person dbo:canonizedBy ?pope .
  ?pope dbo:name ""Benedict XVI""^^xsd:string .
  FILTER (BOUND(?pope))
}
GROUP BY ?pope",8.642045500889408e-232,0.0547945205479452,True,True
1430,What is the birth place of the children of Miguel Garca Granados?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Miguel_García_Granados> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/birthPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the birth place of the children of Miguel Garca Granados?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?childBirthPlace
WHERE {
  ?child dbo:birthDate ?childBirthDate .
  ?child dbo:birthPlace ?childBirthPlace .
  ?person dbo:name ""Miguel García Granados""^^xsd:string .
  ?person dbo:children ?child .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?childBirthPlace
WHERE {
  ?child dbo:birthDate ?childBirthDate .
  ?child dbo:birthPlace ?childBirthPlace .
  ?person dbo:name ""Miguel García Granados""^^xsd:string .
  ?person dbo:children ?child .
}",2.968021523431445e-155,0.06578947368421052,True,True
2802,Players from how many teams have participated in the National Hockey League?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/league> <http://dbpedia.org/resource/National_Hockey_League> . ?x <http://dbpedia.org/ontology/team> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Players from how many teams have participated in the National Hockey League?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?teamCount
WHERE {
  ?team dbo:sportsLeague dbp:National_Hockey_League .
  ?team dbo:player ?player .
  GROUP BY ?team
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?teamCount
WHERE {
  ?team dbo:sportsLeague dbp:National_Hockey_League .
  ?team dbo:player ?player .
  GROUP BY ?team
}",2.533776972251024e-155,0.05333333333333334,False,False
2432,What is the television show with presenter as Ryan Seacrest and theme music composer as Julian Gingell?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Julian_Gingell>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the television show with presenter as Ryan Seacrest and theme music composer as Julian Gingell?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:presenter ?presenter .
  ?presenter dbo:name ""Ryan Seacrest"" .
  ?show dbo:themeMusicComposer ?composer .
  ?composer dbo:name ""Julian Gingell"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?show
WHERE {
  ?show dbo:presenter ?presenter .
  ?presenter dbo:name ""Ryan Seacrest"" .
  ?show dbo:themeMusicComposer ?composer .
  ?composer dbo:name ""Julian Gingell"" .
}",8.296646461826084e-232,0.037037037037037035,True,True
2470,How many organizations work for Environmentalism?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/purpose> <http://dbpedia.org/resource/Environmentalism>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many organizations work for Environmentalism?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?organization)) AS ?count
WHERE {
  ?organization dbo:wikiPageRedirects* dbo:Environmentalism .
  ?organization dbo:type dbo:Organization .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?organization)) AS ?count
WHERE {
  ?organization dbo:wikiPageRedirects* dbo:Environmentalism .
  ?organization dbo:type dbo:Organization .
}",2.494821638843469e-155,0.06060606060606061,False,False
907,Which county of Tremont Avenue is also the birht place of Ron Galotti?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tremont_Avenue> <http://dbpedia.org/property/counties> ?uri. <http://dbpedia.org/resource/Ron_Galotti> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which county of Tremont Avenue is also the birht place of Ron Galotti?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?county
WHERE {
  ?county dbo:name ""Tremont Avenue"" .
  ?county dbp:birthPlace ?person .
  ?person dbo:name ""Ron Galotti"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?county
WHERE {
  ?county dbo:name ""Tremont Avenue"" .
  ?county dbp:birthPlace ?person .
  ?person dbo:name ""Ron Galotti"" .
}",2.7130972940000843e-155,0.05263157894736842,True,True
1682,List all binomial authorities of the insects whose one of the binomial authority is douard Mntries?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/binomialAuthority> <http://dbpedia.org/resource/Édouard_Ménétries> . ?x <http://dbpedia.org/ontology/binomialAuthority> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all binomial authorities of the insects whose one of the binomial authority is douard Mntries?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?insect ?authority
WHERE {
  ?insect dbo:binomialAuthority ?authority .
  FILTER ( ?authority = <http://dbpedia.org/resource/Douard_Mntries> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?insect ?authority
WHERE {
  ?insect dbo:binomialAuthority ?authority .
  FILTER ( ?authority = <http://dbpedia.org/resource/Douard_Mntries> )
}",3.0025357216578434e-155,0.07894736842105263,True,True
2307,Who produces the tv series which made Scott Haran famous?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Scott_Haran> <http://dbpedia.org/ontology/knownFor> ?x . ?x <http://dbpedia.org/ontology/producer> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who produces the tv series which made Scott Haran famous?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?producer
WHERE {
  ?person dbo:name ""Scott Haran"" .
  ?person dbo:knownFor ?tvSeries .
  ?tvSeries dbo:producer ?producer .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?producer
WHERE {
  ?person dbo:name ""Scott Haran"" .
  ?person dbo:knownFor ?tvSeries .
  ?tvSeries dbo:producer ?producer .
}",3.0943809285865547e-155,0.0684931506849315,True,True
3003,Who are the key people of FWD.us?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/FWD.us> <http://dbpedia.org/property/keyPeople> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the key people of FWD.us?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:memberOf ?organization .
  ?organization dbo:name ""FWD.us"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:memberOf ?organization .
  ?organization dbo:name ""FWD.us"" .
}",3.159243630213636e-155,0.07936507936507936,True,True
3083,What is the hometown of John Speraw ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_Speraw> <http://dbpedia.org/property/hometown> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the hometown of John Speraw ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hometown
WHERE {
  ?person dbo:name ""John Speraw"" .
  ?person dbo:birthPlace ?hometown .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hometown
WHERE {
  ?person dbo:name ""John Speraw"" .
  ?person dbo:birthPlace ?hometown .
}",2.494821638843469e-155,0.0625,True,True
3955,Was the body of Elsie Paroubek discovered in Chicago?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Elsie_Paroubek> <http://dbpedia.org/ontology/bodyDiscovered> <http://dbpedia.org/resource/Chicago> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was the body of Elsie Paroubek discovered in Chicago?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:deathPlace ""Chicago"" .
  ?x rdf:type dbo:Person .
  FILTER (str(?x) = ""http://dbpedia.org/resource/Elsie_Paroubek"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:deathPlace ""Chicago"" .
  ?x rdf:type dbo:Person .
  FILTER (str(?x) = ""http://dbpedia.org/resource/Elsie_Paroubek"")
}",2.215756877004116e-155,0.043478260869565216,True,True
4573,Which religions are followed by people in England?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/residence> <http://dbpedia.org/resource/England> . ?x <http://dbpedia.org/property/religion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which religions are followed by people in England?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:nationality ""England""@en .
  ?person dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?religion
WHERE {
  ?person dbo:nationality ""England""@en .
  ?person dbo:religion ?religion .
}",3.2833699258334827e-155,0.07246376811594203,True,True
4820,What company is the one which wrote the google web toolkit and PlayN?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Google_Web_Toolkit> <http://dbpedia.org/ontology/author> ?uri. <http://dbpedia.org/resource/PlayN> <http://dbpedia.org/ontology/author> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What company is the one which wrote the google web toolkit and PlayN?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?company
WHERE {
  ?company dbo:wikiPageRedirects ?redirect
  ?redirect dbo:wikiPageCaption ""Google Web Toolkit"" .
  ?redirect dbo:creator ?creator
  ?creator dbo:wikiPageRedirects ?redirect2
  ?redirect2 dbo:wikiPageCaption ""PlayN"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?company
WHERE {
  ?company dbo:wikiPageRedirects ?redirect
  ?redirect dbo:wikiPageCaption ""Google Web Toolkit"" .
  ?redirect dbo:creator ?creator
  ?creator dbo:wikiPageRedirects ?redirect2
  ?redirect2 dbo:wikiPageCaption ""PlayN"" .
}",2.8039101108246434e-155,0.06493506493506493,False,False
726,Name the city served by Juhu Aerodrome?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juhu_Aerodrome> <http://dbpedia.org/property/cityServed> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the city served by Juhu Aerodrome?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?aerodrome dbo:location ?city .
  FILTER (regex(?aerodrome, ""Juhu Aerodrome"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?city
WHERE {
  ?aerodrome dbo:location ?city .
  FILTER (regex(?aerodrome, ""Juhu Aerodrome"", ""i""))
}",2.5124539841526692e-155,0.06153846153846154,True,True
3085,Which awards has been given to both michel hazanavicius and geoffrey rush?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Michel_Hazanavicius> <http://dbpedia.org/property/awards> ?uri. <http://dbpedia.org/resource/Geoffrey_Rush> <http://dbpedia.org/property/awards> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which awards has been given to both michel hazanavicius and geoffrey rush?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?person a dbo:Person ;
    dbo:name ?name .
  FILTER (regex(?name, ""Michel Hazanavicius"", ""i"") || regex(?name, ""Geoffrey Rush"", ""i"")) .
  ?person dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?person a dbo:Person ;
    dbo:name ?name .
  FILTER (regex(?name, ""Michel Hazanavicius"", ""i"") || regex(?name, ""Geoffrey Rush"", ""i"")) .
  ?person dbo:award ?award .
}",3.194645317303101e-155,0.07058823529411765,True,True
1412,How many artists' works are in Musee d'Orsay?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/museum> <http://dbpedia.org/resource/Musée_d'Orsay> . ?x <http://dbpedia.org/property/artist> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many artists' works are in Musee d'Orsay?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?artist) AS ?count)
WHERE {
  ?work dbo:artist ?artist .
  ?work dbp:location dbo:Musee_dOrsay .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?artist) AS ?count)
WHERE {
  ?work dbo:artist ?artist .
  ?work dbp:location dbo:Musee_dOrsay .
}",2.5502845355614067e-155,0.05333333333333334,True,True
4128,Name the television show voiced by April Stewart and Eliza Schneider?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/April_Stewart> . ?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Eliza_Schneider> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the television show voiced by April Stewart and Eliza Schneider?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?showLabel
WHERE {
  ?show dbo:voiceActor ?actor .
  ?actor dbo:name ""April Stewart"" .
  UNION
  ?show dbo:voiceActor ?actor .
  ?actor dbo:name ""Eliza Schneider"" .
  ?show rdfs:label ?showLabel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?showLabel
WHERE {
  ?show dbo:voiceActor ?actor .
  ?actor dbo:name ""April Stewart"" .
  UNION
  ?show dbo:voiceActor ?actor .
  ?actor dbo:name ""Eliza Schneider"" .
  ?show rdfs:label ?showLabel .
}",2.8866879095378115e-155,0.06493506493506493,False,False
2823,Which adminstrative region of Lawrence F. Cafero is also the resting place of Samuel Keeler ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Lawrence_F._Cafero> <http://dbpedia.org/ontology/region> ?uri. <http://dbpedia.org/resource/Samuel_Keeler> <http://dbpedia.org/ontology/restingPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which adminstrative region of Lawrence F. Cafero is also the resting place of Samuel Keeler ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?region
WHERE {
  ?person dbo:birthPlace ?region .
  FILTER ( ?person = dbo:Lawrence_F_Cafero )
  ?person dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:locatedIn ?region .
  ?person rdf:type dbo:Politician .
  ?person dbo:name ""Samuel Keeler"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?region
WHERE {
  ?person dbo:birthPlace ?region .
  FILTER ( ?person = dbo:Lawrence_F_Cafero )
  ?person dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:locatedIn ?region .
  ?person rdf:type dbo:Politician .
  ?person dbo:name ""Samuel Keeler"" .
}",2.4900858824700132e-155,0.04597701149425287,True,True
3219,"Which ceremonial County of the East Tilbury is also the local authority of the Trinity School, Brentwood?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/East_Tilbury> <http://dbpedia.org/ontology/ceremonialCounty> ?uri. <http://dbpedia.org/resource/Trinity_School,_Brentwood> <http://dbpedia.org/ontology/localAuthority> ?uri}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which ceremonial County of the East Tilbury is also the local authority of the Trinity School, Brentwood?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?county
WHERE {
  ?county dbo:ceremonialCounty ?eastTilbury .
  ?eastTilbury dbo:localAuthority ?localAuthority .
  ?localAuthority dbo:school ?trinitySchool .
  ?trinitySchool rdfs:label ""Trinity School, Brentwood"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?county
WHERE {
  ?county dbo:ceremonialCounty ?eastTilbury .
  ?eastTilbury dbo:localAuthority ?localAuthority .
  ?localAuthority dbo:school ?trinitySchool .
  ?trinitySchool rdfs:label ""Trinity School, Brentwood"" .
}",2.5944303248170386e-155,0.05,True,True
4970,Name the military conflict whose commander was Colin Powell and took place in israel ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Colin_Powell> . ?uri <http://dbpedia.org/ontology/place> <http://dbpedia.org/resource/Israel>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the military conflict whose commander was Colin Powell and took place in israel ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?conflict
WHERE {
  ?person dbo:birthPlace ""Colin Powell"" .
  ?person dbo:occupation ""Military officer"" .
  ?person dbo:militaryConflict ?conflict .
  ?conflict dbo:location ""Israel"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?conflict
WHERE {
  ?person dbo:birthPlace ""Colin Powell"" .
  ?person dbo:occupation ""Military officer"" .
  ?person dbo:militaryConflict ?conflict .
  ?conflict dbo:location ""Israel"" .
}",8.412065649527267e-232,0.0379746835443038,True,True
1566,In which fields are both Paul Demiville and Sylvain levi experts?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paul_Demiéville> <http://dbpedia.org/property/fields> ?uri. <http://dbpedia.org/resource/Sylvain_Lévi> <http://dbpedia.org/property/fields> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which fields are both Paul Demiville and Sylvain levi experts?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?field
WHERE {
  ?person dbo:occupation ?field .
  FILTER (?person IN (dbo:Paul_Demiville, dbo:Sylvain_Levi))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?field
WHERE {
  ?person dbo:occupation ?field .
  FILTER (?person IN (dbo:Paul_Demiville, dbo:Sylvain_Levi))
}",3.195205633963664e-155,0.0821917808219178,True,True
603,"Give me all commanders which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Battle_of_Fort_Stephenson> <http://dbpedia.org/ontology/commander> ?uri. <http://dbpedia.org/resource/Battle_of_the_Thames> <http://dbpedia.org/ontology/commander> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all commanders which had an important role in both, the Battle of Fort Stephenson and Battle of the Thames?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?commander
WHERE {
  ?commander dbo:birthPlace ?birthPlace .
  ?commander dbo:deathPlace ?deathPlace .
  ?commander dbo:involvedIn ?battle1 .
  ?battle1 dbo:name ""Battle of Fort Stephenson""^^xsd:string .
  ?commander dbo:involvedIn ?battle2 .
  ?battle2 dbo:name ""Battle of the Thames""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?commander
WHERE {
  ?commander dbo:birthPlace ?birthPlace .
  ?commander dbo:deathPlace ?deathPlace .
  ?commander dbo:involvedIn ?battle1 .
  ?battle1 dbo:name ""Battle of Fort Stephenson""^^xsd:string .
  ?commander dbo:involvedIn ?battle2 .
  ?battle2 dbo:name ""Battle of the Thames""^^xsd:string .
}",2.9361994042171736e-155,0.07058823529411765,True,True
171,Is Queen Latifah associated with Afrika Baby Bam?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Afrika_Baby_Bam> <http://dbpedia.org/ontology/associatedBand> <http://dbpedia.org/resource/Queen_Latifah> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Queen Latifah associated with Afrika Baby Bam?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Queen Latifah""^^xsd:string .
  ?x dbp:associatedWith ?y .
  ?y dbo:name ""Afrika Baby Bam""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""Queen Latifah""^^xsd:string .
  ?x dbp:associatedWith ?y .
  ?y dbo:name ""Afrika Baby Bam""^^xsd:string .
}",2.2300068516948962e-155,0.045454545454545456,True,True
3309,Who battled under commander Egushawa in a conflict?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Egushawa> . ?x <http://dbpedia.org/property/combatant> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/MilitaryConflict>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who battled under commander Egushawa in a conflict?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:commander ?commander .
  ?commander dbo:name ""Egushawa"" .
  ?subject dbo:involvedInConflict ?conflict .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:commander ?commander .
  ?commander dbo:name ""Egushawa"" .
  ?subject dbo:involvedInConflict ?conflict .
}",3.195205633963664e-155,0.07142857142857142,True,True
3662,"Which companies make cars with a front engine, rear wheel drive layout?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/automobilePlatform> <http://dbpedia.org/resource/Front-engine,_rear-wheel-drive_layout> . ?x <http://dbpedia.org/ontology/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which companies make cars with a front engine, rear wheel drive layout?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?company ?carModel
WHERE {
  ?company dbo:companyType ""Automotive"" .
  ?carModel dbo:manufacturer ?company .
  ?carModel dbo:engineLayout ""Front engine, rear wheel drive"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?company ?carModel
WHERE {
  ?company dbo:companyType ""Automotive"" .
  ?carModel dbo:manufacturer ?company .
  ?carModel dbo:engineLayout ""Front engine, rear wheel drive"" .
}",3.0202505652128895e-155,0.06666666666666667,True,True
356,Where do the sister stations of Al Khaleejiya 100.9 play?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/sisterStations> <http://dbpedia.org/resource/Al_Khaleejiya_100.9> . ?x <http://dbpedia.org/property/location> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where do the sister stations of Al Khaleejiya 100.9 play?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?station ?location
WHERE {
  ?station dbo:name ""Al Khaleejiya 100.9"" .
  ?station dbo:sisterStation ?sisterStation .
  ?sisterStation dbo:location ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?station ?location
WHERE {
  ?station dbo:name ""Al Khaleejiya 100.9"" .
  ?station dbo:sisterStation ?sisterStation .
  ?sisterStation dbo:location ?location .
}",3.4945213227383114e-155,0.08108108108108109,True,True
1225,The software with Mac OS as operating system and C++ as programming language are [answer].,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Apple_Productivity_Experience_Group> <http://dbpedia.org/ontology/product> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: The software with Mac OS as operating system and C++ as programming language are [answer].
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?software
WHERE {
  ?software rdf:type dbo:Software .
  ?software dbo:operatingSystem  <http://dbpedia.org/resource/Mac_OS> .
  ?software dbo:programmingLanguage  <http://dbpedia.org/resource/C%2B%2B> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?software
WHERE {
  ?software rdf:type dbo:Software .
  ?software dbo:operatingSystem  <http://dbpedia.org/resource/Mac_OS> .
  ?software dbo:programmingLanguage  <http://dbpedia.org/resource/C%2B%2B> .
}",2.868751113594075e-155,0.06756756756756757,True,True
1645,Which license provider of MSX basic is also the designer of Language Integrated Query?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Language_Integrated_Query> <http://dbpedia.org/ontology/designer> ?uri. <http://dbpedia.org/resource/MSX_BASIC> <http://dbpedia.org/property/license> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which license provider of MSX basic is also the designer of Language Integrated Query?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?licenseProvider ?designer
WHERE {
  ?licenseProvider dbo:licenseProviderOf ?software .
  ?software dbo:name ""MSX Basic""^^xsd:string .
  ?designer dbo:designerOf ?software .
  ?designer dbo:name ""Language Integrated Query""^^xsd:string .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?licenseProvider ?designer
WHERE {
  ?licenseProvider dbo:licenseProviderOf ?software .
  ?software dbo:name ""MSX Basic""^^xsd:string .
  ?designer dbo:designerOf ?software .
  ?designer dbo:name ""Language Integrated Query""^^xsd:string .
}",2.0523206950207848e-155,0.038461538461538464,True,True
3333,In which city are the schools whose district is Mumbai Suburban?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/district> <http://dbpedia.org/resource/Mumbai_Suburban_district> . ?x <http://dbpedia.org/ontology/city> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/School>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which city are the schools whose district is Mumbai Suburban?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?school ?schoolCity
WHERE {
  ?school dbo:district ""Mumbai Suburban"" .
  ?school dbo:location ?schoolCity .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?school ?schoolCity
WHERE {
  ?school dbo:district ""Mumbai Suburban"" .
  ?school dbo:location ?schoolCity .
}",3.1137823863213763e-155,0.06756756756756757,True,True
1204,What is the place of death of the royalties one of whose parents was Adam Ludwik Czartoryski?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/parent> <http://dbpedia.org/resource/Adam_Ludwik_Czartoryski> . ?x <http://dbpedia.org/property/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Royalty>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the place of death of the royalties one of whose parents was Adam Ludwik Czartoryski?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?royalty ?royaltyPlaceOfDeath
WHERE {
  ?royalty dbo:father ?czartoryski .
  ?czartoryski dbo:name ""Adam Ludwik Czartoryski"" .
  ?royalty dbo:placeOfDeath ?royaltyPlaceOfDeath .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?royalty ?royaltyPlaceOfDeath
WHERE {
  ?royalty dbo:father ?czartoryski .
  ?czartoryski dbo:name ""Adam Ludwik Czartoryski"" .
  ?royalty dbo:placeOfDeath ?royaltyPlaceOfDeath .
}",2.91841165985534e-155,0.06329113924050633,True,True
3638,How many developers make software for Unix like operating systems?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/operatingSystem> <http://dbpedia.org/resource/Unix-like> . ?x <http://dbpedia.org/ontology/developer> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many developers make software for Unix like operating systems?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?developer) AS ?count)
WHERE {
  ?developer dbo:occupation ""Software Developer"" .
  ?developer dbo:worksFor ?company .
  ?company dbo:product ?product .
  ?product dbo:operatingSystem ""Unix"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?developer) AS ?count)
WHERE {
  ?developer dbo:occupation ""Software Developer"" .
  ?developer dbo:worksFor ?company .
  ?company dbo:product ?product .
  ?product dbo:operatingSystem ""Unix"" .
}",3.0382827129023445e-155,0.06493506493506493,True,True
3644,"List the employments of people who died in Tampa, Florida.",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/deathPlace> <http://dbpedia.org/resource/Tampa,_Florida> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the employments of people who died in Tampa, Florida.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?person ?employment
WHERE {
  ?person dbo:deathPlace dbp:Tampa.
  ?person dbo:occupation ?employment.
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?person ?employment
WHERE {
  ?person dbo:deathPlace dbp:Tampa.
  ?person dbo:occupation ?employment.
}",3.0528361925813156e-155,0.07042253521126761,True,True
3157,"Who was on the first team in the GPs that were held at Watkins Glen, NY?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Watkins_Glen,_New_York> . ?x <http://dbpedia.org/property/firstTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/GrandPrix>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who was on the first team in the GPs that were held at Watkins Glen, NY?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?driver
WHERE {
  ?gp dbo:location <http://dbpedia.org/resource/Watkins_Glen_International> .
  ?gp dbo:firstTeam ?driver .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?driver
WHERE {
  ?gp dbo:location <http://dbpedia.org/resource/Watkins_Glen_International> .
  ?gp dbo:firstTeam ?driver .
}",3.0566417519593477e-155,0.06578947368421052,True,True
1995,Which company produced the car which was a new version of Daewoo's Tico?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Daewoo_Tico> . ?x <http://dbpedia.org/property/parentCompany> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which company produced the car which was a new version of Daewoo's Tico?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?car dbo:model ""Tico"" .
  ?car dbo:manufacturer ?company .
  FILTER (regex(?car, ""Daewoo"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?company
WHERE {
  ?car dbo:model ""Tico"" .
  ?car dbo:manufacturer ?company .
  FILTER (regex(?car, ""Daewoo"", ""i""))
}",3.0382827129023445e-155,0.0641025641025641,True,True
3021,List the things for which people of New Orleans are famous for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/placeOfBirth> <http://dbpedia.org/resource/New_Orleans> . ?x <http://dbpedia.org/property/knownFor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the things for which people of New Orleans are famous for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:birthPlace dbp:New_Orleans .
  ?person dbo:knownFor ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:birthPlace dbp:New_Orleans .
  ?person dbo:knownFor ?thing .
}",3.1335534263807668e-155,0.0684931506849315,True,True
4088,What is the field of interest of the advisor of Henri Maspero ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henri_Maspero> <http://dbpedia.org/ontology/academicAdvisor> ?x . ?x <http://dbpedia.org/property/fields> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the field of interest of the advisor of Henri Maspero ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?advisorField
WHERE {
  ?advisor dbo:advisorOf ?person .
  ?person dbo:name ""Henri Maspero"" .
  ?advisor dbo:fieldOfInterest ?advisorField .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?advisorField
WHERE {
  ?advisor dbo:advisorOf ?person .
  ?person dbo:name ""Henri Maspero"" .
  ?advisor dbo:fieldOfInterest ?advisorField .
}",3.0382827129023445e-155,0.0684931506849315,True,True
869,What is the political party of the Bengalis?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/ethnicity> <http://dbpedia.org/resource/Bengalis> . ?x <http://dbpedia.org/ontology/party> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the political party of the Bengalis?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?politicalParty
WHERE {
  ?bengali dbo:nationality ""Bengali"" .
  ?bengali dbo:politicalParty ?politicalParty .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?politicalParty
WHERE {
  ?bengali dbo:nationality ""Bengali"" .
  ?bengali dbo:politicalParty ?politicalParty .
}",3.3065753972821387e-155,0.07692307692307693,True,True
4283,Count the number of ingredient of the foods which have one of the ingredient is Pork ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/ingredient> <http://dbpedia.org/resource/Pork> . ?x <http://dbpedia.org/ontology/ingredient> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of ingredient of the foods which have one of the ingredient is Pork ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?ingredient) AS ?count)
WHERE {
  ?food dbo:ingredient ?ingredient .
  FILTER (regex(?ingredient, ""Pork"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?ingredient) AS ?count)
WHERE {
  ?food dbo:ingredient ?ingredient .
  FILTER (regex(?ingredient, ""Pork"", ""i""))
}",2.4123225276763925e-155,0.0641025641025641,True,True
4054,Who are the associated musical artist of Carolyn Dennis?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Carolyn_Dennis> <http://dbpedia.org/ontology/associatedMusicalArtist> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the associated musical artist of Carolyn Dennis?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:spouse Carolyn Dennis .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?artist dbo:spouse Carolyn Dennis .
}",3.181891987622405e-155,0.07936507936507936,False,False
664,List the movies whose music composer is often associated with Jon and Vangelis.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Jon_and_Vangelis> . ?uri <http://dbpedia.org/ontology/musicComposer> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the movies whose music composer is often associated with Jon and Vangelis.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:musicComposer ?composer .
  ?composer dbo:birthPlace ""Greece"" .
  ?composer dbo:name ?name .
  FILTER (regex(?name, ""Jon"", ""i"") || regex(?name, ""Vangelis"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?movie
WHERE {
  ?movie dbo:musicComposer ?composer .
  ?composer dbo:birthPlace ""Greece"" .
  ?composer dbo:name ?name .
  FILTER (regex(?name, ""Jon"", ""i"") || regex(?name, ""Vangelis"", ""i""))
}",2.9024197612372904e-155,0.05952380952380952,True,True
1632,What is the former team of the Athens borned basketball players?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/birthPlace> <http://dbpedia.org/resource/Athens> . ?x <http://dbpedia.org/ontology/formerTeam> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/BasketballPlayer>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the former team of the Athens borned basketball players?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?player ?team
WHERE {
  ?player dbo:birthPlace ""Athens"" .
  ?player dbo:profession ""Basketball player"" .
  ?player dbo:formerTeam ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?player ?team
WHERE {
  ?player dbo:birthPlace ""Athens"" .
  ?player dbo:profession ""Basketball player"" .
  ?player dbo:formerTeam ?team .
}",3.0382827129023445e-155,0.06666666666666667,True,True
3929,In which areas can I find wine made of Vitis vinifera grapes?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/Vitis_vinifera> . ?x <http://dbpedia.org/ontology/wineRegion> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Grape>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which areas can I find wine made of Vitis vinifera grapes?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?area
WHERE {
  ?wine dbo:grapeVariety ""Vitis vinifera"" .
  ?wine dbo:producedIn ?area .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?area
WHERE {
  ?wine dbo:grapeVariety ""Vitis vinifera"" .
  ?wine dbo:producedIn ?area .
}",3.1137823863213763e-155,0.06578947368421052,True,True
1851,How many had their debut team coached by Chip Kelly?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/coach> <http://dbpedia.org/resource/Chip_Kelly> . ?uri <http://dbpedia.org/ontology/debutTeam> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many had their debut team coached by Chip Kelly?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?player) AS ?count)
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:debutTeam ?debutTeam .
  ?debutTeam dbo:coach ?coach .
  ?coach dbo:name ""Chip Kelly"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?player) AS ?count)
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:debutTeam ?debutTeam .
  ?debutTeam dbo:coach ?coach .
  ?coach dbo:name ""Chip Kelly"" .
}",2.968021523431445e-155,0.06172839506172839,True,True
3871,How many characters are there in The Office?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/series> <http://dbpedia.org/resource/The_Office_(U.S._TV_series)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many characters are there in The Office?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?character) AS ?count)
WHERE {
  ?character dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/The_Office_(American_TV_series)> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?character) AS ?count)
WHERE {
  ?character dbo:wikiPageRedirects <http://en.wikipedia.org/wiki/The_Office_(American_TV_series)> .
}",8.319100378795605e-232,0.04411764705882353,True,True
2075,Count the number of religions followed by BJP members.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/party> <http://dbpedia.org/resource/Bharatiya_Janata_Party> . ?x <http://dbpedia.org/ontology/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of religions followed by BJP members.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?person dbo:memberOf <http://en.wikipedia.org/wiki/Bharatiya_Janata_Party> .
  ?person dbo:religion ?religion .
}
GROUP BY ?religion
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?person dbo:memberOf <http://en.wikipedia.org/wiki/Bharatiya_Janata_Party> .
  ?person dbo:religion ?religion .
}
GROUP BY ?religion",3.1537059338519422e-155,0.06944444444444445,True,True
1905,Some movies whose screenplay is done by american born people?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/United_States> . ?uri <http://dbpedia.org/property/screenplay> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Some movies whose screenplay is done by american born people?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?movie ?screenwriter
WHERE {
  ?movie dbo:director ?screenwriter .
  ?screenwriter dbo:birthPlace ""United States"" .
  FILTER(?screenwriter != dbo:Unknown)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?movie ?screenwriter
WHERE {
  ?movie dbo:director ?screenwriter .
  ?screenwriter dbo:birthPlace ""United States"" .
  FILTER(?screenwriter != dbo:Unknown)
}",3.1961673212459418e-155,0.07894736842105263,True,True
4399,Count the number of members of the organization which have Austria as one of the member ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/membership> <http://dbpedia.org/resource/Austria> . ?x <http://dbpedia.org/property/membership> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the number of members of the organization which have Austria as one of the member ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organization ?count
WHERE {
  ?organization dbo:member ?member .
  ?member dbo:country ?country .
  ?country rdfs:label ""Austria"" .
  GROUP BY ?organization
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?organization ?count
WHERE {
  ?organization dbo:member ?member .
  ?member dbo:country ?country .
  ?country rdfs:label ""Austria"" .
  GROUP BY ?organization
}",2.384592839964215e-155,0.06578947368421052,False,False
2293,Who is the headcoach of 2008-09 Marquette Golden Eagles men's basketball team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2008–09_Marquette_Golden_Eagles_men's_basketball_team> <http://dbpedia.org/property/headcoach> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the headcoach of 2008-09 Marquette Golden Eagles men's basketball team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?coach
WHERE {
  ?team dbo:headCoach ?coach .
  ?team rdfs:label ""2008-09 Marquette Golden Eagles men's basketball team"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?coach
WHERE {
  ?team dbo:headCoach ?coach .
  ?team rdfs:label ""2008-09 Marquette Golden Eagles men's basketball team"" .
}",2.294894159058245e-155,0.056338028169014086,True,True
1275,Which venue of Indy PopCon is also the death palce of Louis LeCocq?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Indy_PopCon> <http://dbpedia.org/property/venue> ?uri. <http://dbpedia.org/resource/Louis_LeCocq> <http://dbpedia.org/property/placeOfDeath> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which venue of Indy PopCon is also the death palce of Louis LeCocq?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?venue
WHERE {
  ?venue dbo:location dbp:Indianapolis .
  ?venue dbo:name ?name .
  ?venue dbo:deathPlace ?deathPlace .
  FILTER ( ?deathPlace = <http://dbpedia.org/resource/Louis_LeCocq> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?venue
WHERE {
  ?venue dbo:location dbp:Indianapolis .
  ?venue dbo:name ?name .
  ?venue dbo:deathPlace ?deathPlace .
  FILTER ( ?deathPlace = <http://dbpedia.org/resource/Louis_LeCocq> )
}",2.8039101108246434e-155,0.0625,True,True
4480,Name the fictional character whose species is American Pekin duck and has relatives named Ludwig Von Drake?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/species> <http://dbpedia.org/resource/American_Pekin_duck> . ?uri <http://dbpedia.org/property/relatives> <http://dbpedia.org/resource/Ludwig_Von_Drake>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the fictional character whose species is American Pekin duck and has relatives named Ludwig Von Drake?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?character
WHERE {
  ?character dbo:species dbp:American_Pekin_duck .
  ?character dbo:relative ?relative .
  ?relative dbo:name ""Ludwig Von Drake"" .
  FILTER (STR(?character) != ""http://dbpedia.org/resource/Ludwig_von_Drake"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?character
WHERE {
  ?character dbo:species dbp:American_Pekin_duck .
  ?character dbo:relative ?relative .
  ?relative dbo:name ""Ludwig Von Drake"" .
  FILTER (STR(?character) != ""http://dbpedia.org/resource/Ludwig_von_Drake"")
}",8.296646461826084e-232,0.03571428571428571,True,True
871,Was Writings and Drawings illustrated by Bob Dylan?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Writings_and_Drawings> <http://dbpedia.org/property/illustrator> <http://dbpedia.org/resource/Bob_Dylan> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Writings and Drawings illustrated by Bob Dylan?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:title ""Writings and Drawings"" .
  ?x dbo:illustrator ?y .
  ?y rdfs:label ""Bob Dylan"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:title ""Writings and Drawings"" .
  ?x dbo:illustrator ?y .
  ?y rdfs:label ""Bob Dylan"" .
}",2.1880577381778143e-155,0.04411764705882353,True,True
711,Which party does Iqbal Singh and B Shiva Rao currently belong to?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Iqbal_Singh_(politician)> <http://dbpedia.org/property/party> ?uri. <http://dbpedia.org/resource/B._Shiva_Rao> <http://dbpedia.org/property/party> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which party does Iqbal Singh and B Shiva Rao currently belong to?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?party
WHERE {
  ?person a dbo:Person ;
    dbp:memberOf ?party .
  FILTER (regex(?person, ""Iqbal Singh"", ""i"") || regex(?person, ""B Shiva Rao"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?party
WHERE {
  ?person a dbo:Person ;
    dbp:memberOf ?party .
  FILTER (regex(?person, ""Iqbal Singh"", ""i"") || regex(?person, ""B Shiva Rao"", ""i""))
}",3.0025357216578434e-155,0.07407407407407407,True,True
3266,Name the scientist whose supervisor also supervised Mary Ainsworth?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Mary_Ainsworth> . ?uri <http://dbpedia.org/property/doctoralAdvisor> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the scientist whose supervisor also supervised Mary Ainsworth?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:supervisor ?supervisor .
  ?supervisor dbo:supervisor Mary Ainsworth .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?scientist
WHERE {
  ?scientist dbo:supervisor ?supervisor .
  ?supervisor dbo:supervisor Mary Ainsworth .
}",3.2383880054191053e-155,0.07352941176470588,False,False
1127,Who is the common prime minster of William Deaner and Mark Latham?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Deane> <http://dbpedia.org/ontology/primeMinister> ?uri. <http://dbpedia.org/resource/Mark_Latham> <http://dbpedia.org/property/primeminister> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the common prime minster of William Deaner and Mark Latham?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?primeMinister
WHERE {
  ?person dbo:primeMinister ?primeMinister .
  FILTER ( ?person IN ( dbo:William_Deaner , dbo:Mark_Latham ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?primeMinister
WHERE {
  ?person dbo:primeMinister ?primeMinister .
  FILTER ( ?person IN ( dbo:William_Deaner , dbo:Mark_Latham ) )
}",2.7788812895482627e-155,0.05333333333333334,True,True
122,"Count all those who've played for the youth club which owns the Rosario, Santa Fe stadium.",google/gemma-2-9b-it,"SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/ground> <http://dbpedia.org/resource/Rosario,_Santa_Fe> . ?uri <http://dbpedia.org/property/youthclubs> ?x  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all those who've played for the youth club which owns the Rosario, Santa Fe stadium.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person
WHERE {
  ?person dbo:playsFor ?club .
  ?club dbo:stadium dbr:Rosario_Central_Stadium .
  FILTER (regex(?club, ""Rosario Central Youth"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT ?person
WHERE {
  ?person dbo:playsFor ?club .
  ?club dbo:stadium dbr:Rosario_Central_Stadium .
  FILTER (regex(?club, ""Rosario Central Youth"", ""i""))
}",2.4957986594494052e-155,0.06172839506172839,True,True
1367,Name a person who was educated in Humes High School?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/education> <http://dbpedia.org/resource/Humes_High_School>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name a person who was educated in Humes High School?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:education ?school .
  ?school rdfs:label ""Humes High School"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?person
WHERE {
  ?person dbo:education ?school .
  ?school rdfs:label ""Humes High School"" .
}",8.147480343967206e-232,0.04411764705882353,True,True
4273,What is the parent company of PrivateCore?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/subsidiary> <http://dbpedia.org/resource/PrivateCore> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the parent company of PrivateCore?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parentCompany
WHERE {
  ?company dbo:name ""PrivateCore"" .
  ?company dbo:parentCompany ?parentCompany .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?parentCompany
WHERE {
  ?company dbo:name ""PrivateCore"" .
  ?company dbo:parentCompany ?parentCompany .
}",8.289228799996742e-232,0.04838709677419355,True,True
3317,In how many nations can I find people related to the feminist movement?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/movement> <http://dbpedia.org/resource/Feminism> . ?x <http://dbpedia.org/ontology/nationality> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In how many nations can I find people related to the feminist movement?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?nation) AS ?count)
WHERE {
  ?person dbo:birthPlace ?nation .
  ?person dbo:occupation ""Feminist"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?nation) AS ?count)
WHERE {
  ?person dbo:birthPlace ?nation .
  ?person dbo:occupation ""Feminist"" .
}",3.075337680136661e-155,0.0641025641025641,True,True
1783,Who is the former partner of Chris Knierim?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chris_Knierim> <http://dbpedia.org/ontology/formerPartner> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the former partner of Chris Knierim?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?partner
WHERE {
  ?person dbo:name ""Chris Knierim"" .
  ?person dbo:partner ?partner .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?partner
WHERE {
  ?person dbo:name ""Chris Knierim"" .
  ?person dbo:partner ?partner .
}",2.494821638843469e-155,0.0625,True,True
2936,Under which scientist did doctoral students erban ieica and Erich Bagge study?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Șerban_Țițeica> . ?uri <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/Erich_Bagge> . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Under which scientist did doctoral students erban ieica and Erich Bagge study?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?scientist
WHERE {
  ?student dbo:doctoralAdvisor ?scientist .
  FILTER (regex(?student, ""erban ieica"", ""i"") || regex(?student, ""erich bagge"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?scientist
WHERE {
  ?student dbo:doctoralAdvisor ?scientist .
  FILTER (regex(?student, ""erban ieica"", ""i"") || regex(?student, ""erich bagge"", ""i""))
}",2.938309220081021e-155,0.06329113924050633,True,True
3278,Which birthplace of Svetlana Gounkina is also the largest city of Union State?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Union_State> <http://dbpedia.org/property/largestCity> ?uri. <http://dbpedia.org/resource/Svetlana_Gounkina> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which birthplace of Svetlana Gounkina is also the largest city of Union State?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?birthplace
WHERE {
  ?person dbo:name ""Svetlana Gounkina"" .
  ?person dbo:birthPlace ?birthplace .
  ?birthplace dbo:country ""Belarus"" .
  ?birthplace dbo:population ?population .
  FILTER(?population > 1000000)
  ?birthplace dbo:name ?city .
  ?city dbo:country ""Belarus"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?birthplace
WHERE {
  ?person dbo:name ""Svetlana Gounkina"" .
  ?person dbo:birthPlace ?birthplace .
  ?birthplace dbo:country ""Belarus"" .
  ?birthplace dbo:population ?population .
  FILTER(?population > 1000000)
  ?birthplace dbo:name ?city .
  ?city dbo:country ""Belarus"" .
}",2.5149879802969635e-155,0.04878048780487805,True,True
2514,What is the television show whose developer is J. Michael Straczynski?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/developer> <http://dbpedia.org/resource/J._Michael_Straczynski>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the television show whose developer is J. Michael Straczynski?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?showLabel WHERE {
  ?show dbo:developer J.MichaelStraczynski .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?showLabel WHERE {
  ?show dbo:developer J.MichaelStraczynski .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",8.094051362019983e-232,0.04225352112676056,False,False
4918,During the reigns of which monarchs was the name to the Israelite kingdom as United Monarch?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/title> <http://dbpedia.org/resource/Kingdom_of_Israel_(united_monarchy)> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: During the reigns of which monarchs was the name to the Israelite kingdom as United Monarch?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?monarch ?reignStart ?reignEnd
WHERE {
  ?monarch dbo:birthPlace ?birthPlace .
  ?monarch dbo:deathPlace ?deathPlace .
  ?monarch dbo:reignStart ?reignStart .
  ?monarch dbo:reignEnd ?reignEnd .
  ?monarch dbo:name ?name .
  FILTER (regex(?name, ""United Monarch"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?monarch ?reignStart ?reignEnd
WHERE {
  ?monarch dbo:birthPlace ?birthPlace .
  ?monarch dbo:deathPlace ?deathPlace .
  ?monarch dbo:reignStart ?reignStart .
  ?monarch dbo:reignEnd ?reignEnd .
  ?monarch dbo:name ?name .
  FILTER (regex(?name, ""United Monarch"", ""i""))
}",2.0939042922429456e-155,0.04819277108433735,True,True
1319,Which things are Breann McGregor known for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Breann_McGregor> <http://dbpedia.org/property/knownFor> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which things are Breann McGregor known for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?thing
WHERE {
  ?person dbo:name ""Breann McGregor"" .
  ?person dbo:knownFor ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?thing
WHERE {
  ?person dbo:name ""Breann McGregor"" .
  ?person dbo:knownFor ?thing .
}",3.1370721297783126e-155,0.07692307692307693,True,True
2941,What is the common award won by Charles LeMaire and Eric Roth,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Charles_LeMaire> <http://dbpedia.org/property/awards> ?uri. <http://dbpedia.org/resource/Eric_Roth> <http://dbpedia.org/ontology/award> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the common award won by Charles LeMaire and Eric Roth
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:award ?award .
  FILTER (regex(?person, ""Charles LeMaire"", ""i"") || regex(?person, ""Eric Roth"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:award ?award .
  FILTER (regex(?person, ""Charles LeMaire"", ""i"") || regex(?person, ""Eric Roth"", ""i""))
}",2.7788812895482627e-155,0.05128205128205128,True,True
3552,Name the Chris Marve's school ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chris_Marve> <http://dbpedia.org/ontology/school> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the Chris Marve's school ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Chris Marve"" .
  ?person dbp:almaMater ?school .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?school
WHERE {
  ?person dbo:name ""Chris Marve"" .
  ?person dbp:almaMater ?school .
}",2.530465559854518e-155,0.06451612903225806,True,True
901,Which are the countires where Pioneer Corporation has flourished?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pioneer_Corporation> <http://dbpedia.org/property/country> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which are the countires where Pioneer Corporation has flourished?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?company dbo: headquarters ?location .
  ?location dbo:country ?country .
  ?company dbo:name ""Pioneer Corporation"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?company dbo: headquarters ?location .
  ?location dbo:country ?country .
  ?company dbo:name ""Pioneer Corporation"" .
}",2.938309220081021e-155,0.07142857142857142,False,False
2394,How many shows belong to the network one of whose sister station is Cartoonite?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/sisterStation> <http://dbpedia.org/resource/Cartoonito> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many shows belong to the network one of whose sister station is Cartoonite?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?show) AS ?count)
WHERE {
  ?network dbo:sisterStation ?sisterStation .
  ?sisterStation rdfs:label ""Cartoonite"" .
  ?network dbo:shows ?show .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(?show) AS ?count)
WHERE {
  ?network dbo:sisterStation ?sisterStation .
  ?sisterStation rdfs:label ""Cartoonite"" .
  ?network dbo:shows ?show .
}",2.4123225276763925e-155,0.04938271604938271,True,True
4519,What show had NTSC format and theme music composed byRon Grainer?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/format> <http://dbpedia.org/resource/NTSC> . ?uri <http://dbpedia.org/property/themeMusicComposer> <http://dbpedia.org/resource/Ron_Grainer>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What show had NTSC format and theme music composed byRon Grainer?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:format ?format .
  ?format dbo:name ""NTSC"" .
  ?show dbo:themeMusic ?music .
  ?music dbo:composer ?composer .
  ?composer dbo:name ""Ron Grainer"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:format ?format .
  ?format dbo:name ""NTSC"" .
  ?show dbo:themeMusic ?music .
  ?music dbo:composer ?composer .
  ?composer dbo:name ""Ron Grainer"" .
}",2.344734865707205e-155,0.05063291139240506,True,True
449,Who has starred in the amusement park attractions where Jim Dooley was performing?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/music> <http://dbpedia.org/resource/Jim_Dooley> . ?x <http://dbpedia.org/property/starring> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmusementParkAttraction>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who has starred in the amusement park attractions where Jim Dooley was performing?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?star
WHERE {
  ?attraction dbo:attractionType ""Amusement Park"".
  ?attraction dbo:performer ?performer .
  ?performer dbo:name ""Jim Dooley"".
  ?attraction dbo:star ?star .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?star
WHERE {
  ?attraction dbo:attractionType ""Amusement Park"".
  ?attraction dbo:performer ?performer .
  ?performer dbo:name ""Jim Dooley"".
  ?attraction dbo:star ?star .
}",2.968021523431445e-155,0.06172839506172839,True,True
3183,What are the musical performances whose label is Celluloid Records?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/label> <http://dbpedia.org/resource/Celluloid_Records>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the musical performances whose label is Celluloid Records?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?performance
WHERE {
  ?performance dbo:label ""Celluloid Records"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?performance
WHERE {
  ?performance dbo:label ""Celluloid Records"" .
}",3.159243630213636e-155,0.07575757575757576,True,True
3398,"Who is the opponent of United States House of Representatives elections in Ohio, 2010 ?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/United_States_House_of_Representatives_elections_in_Ohio,_2010> <http://dbpedia.org/property/opponent> ?uri }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the opponent of United States House of Representatives elections in Ohio, 2010 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?opponent
WHERE {
  ?election dbo:opponent ?opponent .
  ?election dbo:location ""Ohio"" .
  ?election dbo:electionType ""United States House of Representatives elections"" .
  ?election dbo:year ""2010"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?opponent
WHERE {
  ?election dbo:opponent ?opponent .
  ?election dbo:location ""Ohio"" .
  ?election dbo:electionType ""United States House of Representatives elections"" .
  ?election dbo:year ""2010"" .
}",2.181647159764084e-155,0.05263157894736842,True,True
2208,In which state is Colemanville Covered Bridge located ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Colemanville_Covered_Bridge> <http://dbpedia.org/ontology/state> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which state is Colemanville Covered Bridge located ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?bridge dbo:location ?location .
  ?location dbo:country ""United States""^^xsd:string .
  ?location dbo:state ?state .
  FILTER (regex(?bridge, ""Colemanville Covered Bridge"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?state
WHERE {
  ?bridge dbo:location ?location .
  ?location dbo:country ""United States""^^xsd:string .
  ?location dbo:state ?state .
  FILTER (regex(?bridge, ""Colemanville Covered Bridge"", ""i""))
}",2.322545481391416e-155,0.0547945205479452,True,True
1743,Panthera leo fossils and Liger belong to which species?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Panthera_leo_fossilis> <http://dbpedia.org/ontology/species> ?uri. <http://dbpedia.org/resource/Liger> <http://dbpedia.org/ontology/species> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Panthera leo fossils and Liger belong to which species?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?species
WHERE {
  ?fossil dbo:species ?species .
  FILTER (regex(?species, ""Panthera leo""))
  ?liger dbo:species ?species .
  FILTER (regex(?species, ""Panthera leo""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?species
WHERE {
  ?fossil dbo:species ?species .
  FILTER (regex(?species, ""Panthera leo""))
  ?liger dbo:species ?species .
  FILTER (regex(?species, ""Panthera leo""))
}",3.0382827129023445e-155,0.0821917808219178,True,True
1152,Whose commanders are Colin Powell and Jaber Al-Ahmad Al-Sabah?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Colin_Powell> . ?uri <http://dbpedia.org/ontology/commander> <http://dbpedia.org/resource/Jaber_Al-Ahmad_Al-Sabah> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose commanders are Colin Powell and Jaber Al-Ahmad Al-Sabah?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?country dbo:commander ?commander .
  ?commander dbo:name ""Colin Powell""^^xsd:string .
  FILTER (BOUND(?commander))
  ?commander dbo:name ""Jaber Al-Ahmad Al-Sabah""^^xsd:string .
  FILTER (BOUND(?commander))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?country
WHERE {
  ?country dbo:commander ?commander .
  ?commander dbo:name ""Colin Powell""^^xsd:string .
  FILTER (BOUND(?commander))
  ?commander dbo:name ""Jaber Al-Ahmad Al-Sabah""^^xsd:string .
  FILTER (BOUND(?commander))
}",3.157656468883577e-155,0.08333333333333333,True,True
2049,Did Bob Dylan write the lyrics of the times they are a changin'?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/The_Times_They_Are_a-Changin'_(musical)> <http://dbpedia.org/property/lyrics> <http://dbpedia.org/resource/Bob_Dylan> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Did Bob Dylan write the lyrics of the times they are a changin'?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?song
WHERE {
  ?song rdf:type dbo:Song .
  ?song dbo:title ""The Times They Are a-Changin'"" .
  ?song dbo:lyrics ?lyrics .
  ?lyrics dbo:author ?author .
  ?author dbo:name ""Bob Dylan"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?song
WHERE {
  ?song rdf:type dbo:Song .
  ?song dbo:title ""The Times They Are a-Changin'"" .
  ?song dbo:lyrics ?lyrics .
  ?lyrics dbo:author ?author .
  ?author dbo:name ""Bob Dylan"" .
}",2.0088791894285736e-155,0.038461538461538464,True,True
3908,What is the debut team of people born in Vargas?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/birthPlace> <http://dbpedia.org/resource/Vargas_(state)> . ?x <http://dbpedia.org/property/debutteam> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the debut team of people born in Vargas?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?debutTeam
WHERE {
  ?person dbo:birthPlace dbo:Vargas .
  ?person dbo:debutTeam ?debutTeam .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?debutTeam
WHERE {
  ?person dbo:birthPlace dbo:Vargas .
  ?person dbo:debutTeam ?debutTeam .
}",3.627276877392474e-155,0.08450704225352113,True,True
376,Name all those whose spouses have performed with Tony Bennett?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/associatedMusicalArtist> <http://dbpedia.org/resource/Tony_Bennett> . ?uri <http://dbpedia.org/ontology/spouse> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name all those whose spouses have performed with Tony Bennett?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbp:partnerOf ?tonyBennett .
  ?tonyBennett dbo:name ""Tony Bennett"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbp:partnerOf ?tonyBennett .
  ?tonyBennett dbo:name ""Tony Bennett"" .
}",3.6040982025556637e-155,0.0821917808219178,True,True
4101,Count the band members of Skull Gang?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Skull_Gang> <http://dbpedia.org/ontology/bandMember> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count the band members of Skull Gang?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?memberCount
WHERE {
  ?band dbo:name ""Skull Gang"" .
  ?band dbo:member ?member .
  GROUP BY ?band
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?memberCount
WHERE {
  ?band dbo:name ""Skull Gang"" .
  ?band dbo:member ?member .
  GROUP BY ?band
}",2.4119102000777368e-155,0.056338028169014086,False,False
3265,Which territory of Tonkin campaign is also the death place of Theophane Venard ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tonkin_Campaign> <http://dbpedia.org/ontology/territory> ?uri. <http://dbpedia.org/resource/Théophane_Vénard> <http://dbpedia.org/ontology/deathPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which territory of Tonkin campaign is also the death place of Theophane Venard ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?territory
WHERE {
  ?territory dbo:wikiPageRedirects ?redirect
  ?redirect dbo:abstract ""Tonkin campaign"" .
  ?territory dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:wikiPageRedirects <http://dbpedia.org/resource/Theophane_Venard> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?territory
WHERE {
  ?territory dbo:wikiPageRedirects ?redirect
  ?redirect dbo:abstract ""Tonkin campaign"" .
  ?territory dbo:deathPlace ?deathPlace .
  ?deathPlace dbo:wikiPageRedirects <http://dbpedia.org/resource/Theophane_Venard> .
}",2.6667146252330243e-155,0.05128205128205128,False,False
4795,Was John muir one of the first to ascend a mountain on Mt hoffmann?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Mount_Hoffmann> <http://dbpedia.org/ontology/firstAscentPerson> <http://dbpedia.org/resource/John_Muir> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was John muir one of the first to ascend a mountain on Mt hoffmann?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:birthPlace ""John Muir"" .
  ?x dbo:occupation ""Mountain climber"" .
  ?x dbo:mountainClimbed ""Mt. Hoffmann"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?x
WHERE {
  ?x dbo:birthPlace ""John Muir"" .
  ?x dbo:occupation ""Mountain climber"" .
  ?x dbo:mountainClimbed ""Mt. Hoffmann"" .
}",2.1108049473741715e-155,0.04054054054054054,True,True
4551,Is Christchurch the largest city of South Island?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/South_Island> <http://dbpedia.org/ontology/largestCity> <http://dbpedia.org/resource/Christchurch> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Christchurch the largest city of South Island?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?populationChristchurch ?populationSouthIsland
WHERE {
  ?city dbo:population ?populationChristchurch .
  FILTER(?city = <http://dbpedia.org/resource/Christchurch>)
  ?southIsland dbo:largestCity ?city .
  ?city dbo:population ?populationSouthIsland .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?populationChristchurch ?populationSouthIsland
WHERE {
  ?city dbo:population ?populationChristchurch .
  FILTER(?city = <http://dbpedia.org/resource/Christchurch>)
  ?southIsland dbo:largestCity ?city .
  ?city dbo:population ?populationSouthIsland .
}",2.1745921280630745e-155,0.04411764705882353,True,True
3520,Which religion is followed by the PM who was served by Chea Sim?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chea_Sim> <http://dbpedia.org/property/primeminister> ?x . ?x <http://dbpedia.org/ontology/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which religion is followed by the PM who was served by Chea Sim?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?pm dbo:servedBy ?cheasim .
  ?cheasim dbo:religion ?religion .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?religion
WHERE {
  ?pm dbo:servedBy ?cheasim .
  ?cheasim dbo:religion ?religion .
}",3.1335534263807668e-155,0.06944444444444445,True,True
2782,What is the sovereign state of the Dafydd Benfras where Jasmine Lowson is also citizen of?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dafydd_Benfras> <http://dbpedia.org/ontology/country> ?uri. <http://dbpedia.org/resource/Jasmine_Lowson> <http://dbpedia.org/ontology/citizenship> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the sovereign state of the Dafydd Benfras where Jasmine Lowson is also citizen of?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sovereignState
WHERE {
  ?person dbo:nationality ?sovereignState .
  FILTER ( ?person = <http://dbpedia.org/resource/Jasmine_Lowson> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sovereignState
WHERE {
  ?person dbo:nationality ?sovereignState .
  FILTER ( ?person = <http://dbpedia.org/resource/Jasmine_Lowson> )
}",2.8856766331839354e-155,0.0641025641025641,True,True
4458,What is the resting place of the child of Linda Lee Cadwell?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Linda_Lee_Cadwell> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/restingPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the resting place of the child of Linda Lee Cadwell?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?restingPlace
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Linda Lee Cadwell""^^xsd:string .
  ?person dbo:child ?child .
  ?child dbo:restingPlace ?restingPlace .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?restingPlace
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Linda Lee Cadwell""^^xsd:string .
  ?person dbo:child ?child .
  ?child dbo:restingPlace ?restingPlace .
}",2.968021523431445e-155,0.06666666666666667,True,True
4929,In how many different places are Brown haired models living?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/hairColor> <http://dbpedia.org/resource/Brown_hair> . ?x <http://dbpedia.org/ontology/residence> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In how many different places are Brown haired models living?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?model dbo:hairColor ""Brown"" .
  ?model dbo:livingPlace ?place .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?model dbo:hairColor ""Brown"" .
  ?model dbo:livingPlace ?place .
}",3.1335534263807668e-155,0.06578947368421052,True,True
276,How many people are known for Dragons' Den?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Dragons'_Den_(UK_TV_series)>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many people are known for Dragons' Den?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person dbo:knownFor ?show .
  ?show rdfs:label ""Dragons' Den"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?person) AS ?count)
WHERE {
  ?person dbo:knownFor ?show .
  ?show rdfs:label ""Dragons' Den"" .
}",2.4440718429993668e-155,0.057971014492753624,True,True
2383,How many sports are played at the university whose president is Emanuel de Guzman?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/president> <http://dbpedia.org/resource/Emanuel_de_Guzman> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sport>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many sports are played at the university whose president is Emanuel de Guzman?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?sport)) AS ?count
WHERE {
  ?university dbo:president ?president .
  ?president dbo:name ""Emanuel de Guzman"" .
  ?university dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(DISTINCT ?sport)) AS ?count
WHERE {
  ?university dbo:president ?president .
  ?president dbo:name ""Emanuel de Guzman"" .
  ?university dbo:sports ?sport .
}",2.371081855250832e-155,0.04819277108433735,False,False
236,What is the major shrine of Jacques-Dsir Laval ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jacques-Désiré_Laval> <http://dbpedia.org/ontology/majorShrine> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the major shrine of Jacques-Dsir Laval ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?shrine
WHERE {
  ?person dbo:birthPlace <http://dbpedia.org/resource/Haiti> .
  ?person dbo:name ""Jacques-Dsir Laval"" .
  ?person dbo:majorShrine ?shrine .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?shrine
WHERE {
  ?person dbo:birthPlace <http://dbpedia.org/resource/Haiti> .
  ?person dbo:name ""Jacques-Dsir Laval"" .
  ?person dbo:majorShrine ?shrine .
}",2.4119102000777368e-155,0.05970149253731343,True,True
149,Who were all the people in office when bob hawke was the PM?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/primeMinister> <http://dbpedia.org/resource/Bob_Hawke> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who were all the people in office when bob hawke was the PM?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?role
WHERE {
  ?person dbo:primeMinister ?hawke .
  ?hawke dbo:termStart ?start .
  ?person dbo:termStart ?start .
  ?person dbo:termEnd ?end .
  FILTER(?start <= ?end)
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?role
WHERE {
  ?person dbo:primeMinister ?hawke .
  ?hawke dbo:termStart ?start .
  ?person dbo:termStart ?start .
  ?person dbo:termEnd ?end .
  FILTER(?start <= ?end)
}",2.205362109328438e-155,0.05263157894736842,True,True
3837,Which sports exist in the universities whose president is Emanuel de Guzman?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/president> <http://dbpedia.org/resource/Emanuel_de_Guzman> . ?x <http://dbpedia.org/ontology/sport> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which sports exist in the universities whose president is Emanuel de Guzman?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:president ?president .
  ?president dbo:name ""Emanuel de Guzman"" .
  ?university dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?sport
WHERE {
  ?university dbo:president ?president .
  ?president dbo:name ""Emanuel de Guzman"" .
  ?university dbo:sports ?sport .
}",3.0202505652128895e-155,0.06493506493506493,True,True
64,In which team did Dave Bing and Ron Reed started their basketball career?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Dave_Bing> <http://dbpedia.org/property/draftTeam> ?uri. <http://dbpedia.org/resource/Ron_Reed> <http://dbpedia.org/property/draftTeam> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: In which team did Dave Bing and Ron Reed started their basketball career?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:team ?team .
  FILTER ( ?player IN ( dbo:DaveBing , dbo:RonReed ) )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?team
WHERE {
  ?player dbo:birthPlace ?birthPlace .
  ?player dbo:team ?team .
  FILTER ( ?player IN ( dbo:DaveBing , dbo:RonReed ) )
}",2.9346708496857675e-155,0.07407407407407407,True,True
1832,Whose songs are Tickle Me and Viva Las Vegas?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tickle_Me> <http://dbpedia.org/property/artist> ?uri. <http://dbpedia.org/resource/Viva_Las_Vegas> <http://dbpedia.org/property/artist> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Whose songs are Tickle Me and Viva Las Vegas?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?song dbo:title ""Tickle Me"" .
  ?song dbo:artist ?artist .
  
  ?song2 dbo:title ""Viva Las Vegas"" .
  ?song2 dbo:artist ?artist .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?artist
WHERE {
  ?song dbo:title ""Tickle Me"" .
  ?song dbo:artist ?artist .
  
  ?song2 dbo:title ""Viva Las Vegas"" .
  ?song2 dbo:artist ?artist .
}",3.3624125453069686e-155,0.08333333333333333,True,True
972,"Who is the founder of European School, Karlsruhe?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/European_School,_Karlsruhe> <http://dbpedia.org/property/founder> ?uri }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the founder of European School, Karlsruhe?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?founder
WHERE {
  ?school dbo:founder ?founder .
  FILTER (regex(?school, ""European School, Karlsruhe"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?founder
WHERE {
  ?school dbo:founder ?founder .
  FILTER (regex(?school, ""European School, Karlsruhe"", ""i""))
}",2.4775553999024465e-155,0.06060606060606061,True,True
4201,Does KOMC play Gospel Music?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/KOMC_(AM)> <http://dbpedia.org/ontology/programmeFormat> <http://dbpedia.org/resource/Gospel_music> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does KOMC play Gospel Music?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?genre
WHERE {
  ?artist dbo:genre ?genre .
  FILTER ( ?artist = <http://dbpedia.org/resource/KOMC> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?genre
WHERE {
  ?artist dbo:genre ?genre .
  FILTER ( ?artist = <http://dbpedia.org/resource/KOMC> )
}",2.3548635457910922e-155,0.047619047619047616,True,True
3012,"Where was Henri, Duke of Rohan laid to rest?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Henri,_Duke_of_Rohan> <http://dbpedia.org/ontology/placeOfBurial> ?uri }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where was Henri, Duke of Rohan laid to rest?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace ?deathPlace .
  FILTER ( ?person = <http://dbpedia.org/resource/Henri,_Duke_of_Rohan> )
  ?deathPlace dbo:name ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:birthPlace ?birthPlace .
  ?person dbo:deathPlace ?deathPlace .
  FILTER ( ?person = <http://dbpedia.org/resource/Henri,_Duke_of_Rohan> )
  ?deathPlace dbo:name ?location .
}",2.4708136900731027e-155,0.06944444444444445,True,True
702,Where are INKAS located which is also the state of origin for Jojo Chintoh?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Jojo_Chintoh> <http://dbpedia.org/ontology/stateOfOrigin> ?uri. <http://dbpedia.org/resource/INKAS> <http://dbpedia.org/property/locations> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where are INKAS located which is also the state of origin for Jojo Chintoh?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?location dbo:country ?country .
  ?country dbo:name ""Nigeria""@en .
  ?person dbo:birthPlace ?location .
  ?person dbo:name ""Jojo Chintoh""@en .
  ?location dbo:name ?locationName .
  FILTER (regex(?locationName, ""INKAS"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?location dbo:country ?country .
  ?country dbo:name ""Nigeria""@en .
  ?person dbo:birthPlace ?location .
  ?person dbo:name ""Jojo Chintoh""@en .
  ?location dbo:name ?locationName .
  FILTER (regex(?locationName, ""INKAS"", ""i""))
}",2.5406524524079725e-155,0.04819277108433735,True,True
4833,Was Michael Schumacher the Pole driver of 1994 Spanish Grand Prix?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/1994_Spanish_Grand_Prix> <http://dbpedia.org/property/poleDriver> <http://dbpedia.org/resource/Michael_Schumacher> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Michael Schumacher the Pole driver of 1994 Spanish Grand Prix?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:birthPlace ""Kerpen, Germany"" .
  ?x dbo:name ""Michael Schumacher"" .
  ?x dbo:startSeason ""1991"" .
  ?x dbo:endSeason ""2006"" .
  ?x dbo:participatedInEvent ?event .
  ?event dbo:name ""1994 Spanish Grand Prix"" .
  ?event dbo:polePosition ?poleDriver .
  ?poleDriver dbo:name ?x .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?x WHERE {
  ?x dbo:birthPlace ""Kerpen, Germany"" .
  ?x dbo:name ""Michael Schumacher"" .
  ?x dbo:startSeason ""1991"" .
  ?x dbo:endSeason ""2006"" .
  ?x dbo:participatedInEvent ?event .
  ?event dbo:name ""1994 Spanish Grand Prix"" .
  ?event dbo:polePosition ?poleDriver .
  ?poleDriver dbo:name ?x .
}",1.9112994652876815e-155,0.0379746835443038,True,True
2920,Why did Letita McTavish Hargrave and Sextus Barbour die?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Letitia_MacTavish_Hargrave> <http://dbpedia.org/ontology/deathCause> ?uri. <http://dbpedia.org/resource/Sextus_Barbour> <http://dbpedia.org/property/deathCause> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Why did Letita McTavish Hargrave and Sextus Barbour die?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?reason
WHERE {
  ?person dbo:deathReason ?reason .
  FILTER (regex(?person, ""Letita McTavish Hargrave"", ""i"") || regex(?person, ""Sextus Barbour"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?reason
WHERE {
  ?person dbo:deathReason ?reason .
  FILTER (regex(?person, ""Letita McTavish Hargrave"", ""i"") || regex(?person, ""Sextus Barbour"", ""i""))
}",2.215756877004116e-155,0.04,True,True
952,Which mountain range is the one with Ponte d'Aveneyre and Le Gibloux?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pointe_d'Aveneyre> <http://dbpedia.org/ontology/mountainRange> ?uri. <http://dbpedia.org/resource/Le_Gibloux> <http://dbpedia.org/ontology/mountainRange> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which mountain range is the one with Ponte d'Aveneyre and Le Gibloux?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?mountainRange
WHERE {
  ?mountainRange dbo:locatedIn ?location .
  ?location dbo:name ""Ponte d'Aveneyre"" .
  ?location dbo:name ""Le Gibloux"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?mountainRange
WHERE {
  ?mountainRange dbo:locatedIn ?location .
  ?location dbo:name ""Ponte d'Aveneyre"" .
  ?location dbo:name ""Le Gibloux"" .
}",2.9029053187216252e-155,0.06756756756756757,True,True
3329,"Give me all office holders who finally retired in Montpelier, Orange, Virgina?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/restingplace> <http://dbpedia.org/resource/Montpelier_(Orange,_Virginia)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me all office holders who finally retired in Montpelier, Orange, Virgina?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:placeOfBirth dbp:Montpelier .
  ?person dbo:placeOfDeath dbp:Montpelier .
  ?person dbo:occupation dbo:Politician .
  FILTER (regex(?personLabel, ""retired"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?person ?personLabel
WHERE {
  ?person dbo:placeOfBirth dbp:Montpelier .
  ?person dbo:placeOfDeath dbp:Montpelier .
  ?person dbo:occupation dbo:Politician .
  FILTER (regex(?personLabel, ""retired"", ""i""))
}",2.2552086692851858e-155,0.05063291139240506,True,True
2779,Name the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Georgina_Theodora_Wood> <http://dbpedia.org/ontology/nationality> ?uri. <http://dbpedia.org/resource/Akwasi_Oppong_Fosu> <http://dbpedia.org/ontology/nationality> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the common nationality of Georgina Theodora Wood and akwasi Oppong Fosu ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?nationality
WHERE {
  ?person dbo:nationality ?nationality .
  FILTER (regex(?person, ""Georgina Theodora Wood"", ""i"") || regex(?person, ""akwasi Oppong Fosu"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?nationality
WHERE {
  ?person dbo:nationality ?nationality .
  FILTER (regex(?person, ""Georgina Theodora Wood"", ""i"") || regex(?person, ""akwasi Oppong Fosu"", ""i""))
}",3.0202505652128895e-155,0.0759493670886076,True,True
4719,Give me some TV stations whose network's main language is American English?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/language> <http://dbpedia.org/resource/American_English> . ?uri <http://dbpedia.org/property/network> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionStation>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me some TV stations whose network's main language is American English?
```sparql
PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?station ?network
WHERE {
  ?station dbpedia:network ?network .
  ?network rdfs:label ""American English""@en .
}
```
","PREFIX dbpedia: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?station ?network
WHERE {
  ?station dbpedia:network ?network .
  ?network rdfs:label ""American English""@en .
}",3.1537059338519422e-155,0.06756756756756757,True,True
685,How many religions are followed by the people in the Royal Thai Army?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/militaryBranch> <http://dbpedia.org/resource/Royal_Thai_Army> . ?x <http://dbpedia.org/ontology/religion> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many religions are followed by the people in the Royal Thai Army?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religionCount
WHERE {
  ?army dbo:follows ?religion .
  FILTER ( ?army = <http://dbpedia.org/resource/Royal_Thai_Army> )
  GROUP BY ?religion
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?religionCount
WHERE {
  ?army dbo:follows ?religion .
  FILTER ( ?army = <http://dbpedia.org/resource/Royal_Thai_Army> )
  GROUP BY ?religion
}",2.60205383027793e-155,0.07792207792207792,False,False
207,What is the name of the movie whose director of photography was Jordan Cronenweth and music composer was Vangelis?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/cinematography> <http://dbpedia.org/resource/Jordan_Cronenweth> . ?uri <http://dbpedia.org/ontology/musicComposer> <http://dbpedia.org/resource/Vangelis>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the name of the movie whose director of photography was Jordan Cronenweth and music composer was Vangelis?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movieLabel WHERE {
  ?movie dbo:directorOfPhotography <http://dbpedia.org/resource/Jordan_Cronenweth> .
  ?movie dbo:musicComposer <http://dbpedia.org/resource/Vangelis> .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?movieLabel WHERE {
  ?movie dbo:directorOfPhotography <http://dbpedia.org/resource/Jordan_Cronenweth> .
  ?movie dbo:musicComposer <http://dbpedia.org/resource/Vangelis> .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",2.951204860745888e-155,0.0625,False,False
36,List the teams for which Bobby Hoppe played ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Bobby_Hoppe> <http://dbpedia.org/property/pastteams> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the teams for which Bobby Hoppe played ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:name ""Bobby Hoppe"" .
  ?player dbp:sportsTeam ?team .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?team
WHERE {
  ?player dbo:name ""Bobby Hoppe"" .
  ?player dbp:sportsTeam ?team .
}",3.0940944781388835e-155,0.07692307692307693,True,True
750,Semani languages are spoken in which countries?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/languages> <http://dbpedia.org/resource/Semnani_languages>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Country>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Semani languages are spoken in which countries?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?language dbo:wikiPageRedirects ?semLanguage .
  ?semLanguage rdfs:label ""Semani""@en .
  ?language dbp:spokenIn ?country .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?country
WHERE {
  ?language dbo:wikiPageRedirects ?semLanguage .
  ?semLanguage rdfs:label ""Semani""@en .
  ?language dbp:spokenIn ?country .
}",2.3962983105918537e-155,0.05714285714285714,True,True
690,From which state do the White Plum Asangas come?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/White_Plum_Asanga> . ?x <http://dbpedia.org/ontology/stateOfOrigin> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: From which state do the White Plum Asangas come?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?state
WHERE {
  ?fruit dbo:origin ?state .
  FILTER (regex(?fruit, ""White Plum Asangas"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?state
WHERE {
  ?fruit dbo:origin ?state .
  FILTER (regex(?fruit, ""White Plum Asangas"", ""i""))
}",3.216579438360415e-155,0.08450704225352113,True,True
423,"Who founded the city where First Church of Christ, Scientist is located?",google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/First_Church_of_Christ,_Scientist_(Pittsburgh)> <http://dbpedia.org/property/locationTown> ?x . ?x <http://dbpedia.org/ontology/founder> ?uri  . }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who founded the city where First Church of Christ, Scientist is located?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?founder
WHERE {
  ?church dbo:location ?city .
  ?city dbo:foundedBy ?founder .
  FILTER ( ?church = <http://dbpedia.org/resource/First_Church_of_Christ,_Scientist> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?founder
WHERE {
  ?church dbo:location ?city .
  ?city dbo:foundedBy ?founder .
  FILTER ( ?church = <http://dbpedia.org/resource/First_Church_of_Christ,_Scientist> )
}",2.5548810418069474e-155,0.06493506493506493,True,True
4650,Where did the people die who were known for Young Life?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/knownFor> <http://dbpedia.org/resource/Young_Life> . ?x <http://dbpedia.org/ontology/deathPlace> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the people die who were known for Young Life?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?place
WHERE {
  ?person dbo:deathPlace ?place .
  ?person dbo:knownFor ""Young Life"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person ?place
WHERE {
  ?person dbo:deathPlace ?place .
  ?person dbo:knownFor ""Young Life"" .
}",3.1742523358973992e-155,0.07042253521126761,True,True
2048,List the things for which the relatives of Mrunalini Kunte are known?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Mrunalini_Kunte> <http://dbpedia.org/ontology/relative> ?x . ?x <http://dbpedia.org/property/knownFor> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the things for which the relatives of Mrunalini Kunte are known?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:name ""Mrunalini Kunte"" .
  ?person dbo:spouse ?spouse .
  ?spouse dbo:knownFor ?thing .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?thing
WHERE {
  ?person dbo:name ""Mrunalini Kunte"" .
  ?person dbo:spouse ?spouse .
  ?spouse dbo:knownFor ?thing .
}",3.4945213227383114e-155,0.08108108108108109,True,True
574,How many cities are around the sea into which the aegean sea flows?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Aegean_Sea> <http://dbpedia.org/ontology/outflow> ?x . ?x <http://dbpedia.org/property/cities> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Sea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many cities are around the sea into which the aegean sea flows?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city (COUNT(?city) AS ?cityCount)
WHERE {
  ?city dbo:locatedIn ?sea .
  ?sea dbo:connectedTo <http://dbpedia.org/resource/Aegean_Sea> .
  FILTER ( ?sea != <http://dbpedia.org/resource/Aegean_Sea> )
}
GROUP BY ?city
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city (COUNT(?city) AS ?cityCount)
WHERE {
  ?city dbo:locatedIn ?sea .
  ?sea dbo:connectedTo <http://dbpedia.org/resource/Aegean_Sea> .
  FILTER ( ?sea != <http://dbpedia.org/resource/Aegean_Sea> )
}
GROUP BY ?city",2.454081903007032e-155,0.06097560975609756,True,True
4382,Who are the people whose phD advisor was Harry Harlow?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Harry_Harlow>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the people whose phD advisor was Harry Harlow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:PhDAdvisor ?advisor .
  ?advisor dbo:name ""Harry Harlow"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?person
WHERE {
  ?person dbo:PhDAdvisor ?advisor .
  ?advisor dbo:name ""Harry Harlow"" .
}",2.4440718429993668e-155,0.057971014492753624,True,True
346,Name the office holder with predecessor as Samuel W. McCall and office in Massachusetts House of Representatives?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/predecessor> <http://dbpedia.org/resource/Samuel_W._McCall> . ?uri <http://dbpedia.org/property/office> <http://dbpedia.org/resource/Massachusetts_House_of_Representatives>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the office holder with predecessor as Samuel W. McCall and office in Massachusetts House of Representatives?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?successor
WHERE {
  ?successor dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Samuel W. McCall""^^xsd:string .
  ?successor dbo:office ?office .
  ?office dbo:location ""Massachusetts"" .
  ?office dbo:name ""House of Representatives"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?successor
WHERE {
  ?successor dbo:predecessor ?predecessor .
  ?predecessor dbo:name ""Samuel W. McCall""^^xsd:string .
  ?successor dbo:office ?office .
  ?office dbo:location ""Massachusetts"" .
  ?office dbo:name ""House of Representatives"" .
}",8.167977311814523e-232,0.03614457831325301,True,True
1538,Who manufactures the SHO V8?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Ford_SHO_V8_engine> <http://dbpedia.org/ontology/manufacturer> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who manufactures the SHO V8?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?manufacturer
WHERE {
  ?car dbo:manufacturer ?manufacturer .
  ?car dbo:name ""SHO V8"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?manufacturer
WHERE {
  ?car dbo:manufacturer ?manufacturer .
  ?car dbo:name ""SHO V8"" .
}",2.5488701582353735e-155,0.06557377049180328,True,True
1372,Does the Sicklefin lemon shark belong in the animal kingdom?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Sicklefin_lemon_shark> <http://dbpedia.org/ontology/kingdom> <http://dbpedia.org/resource/Animal> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the Sicklefin lemon shark belong in the animal kingdom?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:abstract ""Sicklefin lemon shark"" .
  ?x dbo:species ""Sicklefin lemon shark"" .
  ?x dbo:classification ?y .
  ?y dbo:higherClassification ?z .
  ?z dbo:name ""Animal"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:abstract ""Sicklefin lemon shark"" .
  ?x dbo:species ""Sicklefin lemon shark"" .
  ?x dbo:classification ?y .
  ?y dbo:higherClassification ?z .
  ?z dbo:name ""Animal"" .
}",2.0868169697040566e-155,0.043478260869565216,True,True
4849,What awards were presented to the person who produced Paradise place?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Paradise_Place> <http://dbpedia.org/property/producer> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Person>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What awards were presented to the person who produced Paradise place?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?film dbo:director ?person .
  ?film rdfs:label ""Paradise Place"" .
  ?person dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?award
WHERE {
  ?film dbo:director ?person .
  ?film rdfs:label ""Paradise Place"" .
  ?person dbo:award ?award .
}",3.0566417519593477e-155,0.06578947368421052,True,True
2664,Which country were the associates of Hilda Duhalde from?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Hilda_de_Duhalde> <http://dbpedia.org/ontology/associate> ?x . ?x <http://dbpedia.org/ontology/nationality> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which country were the associates of Hilda Duhalde from?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?country
WHERE {
  ?person dbo:birthPlace ?country .
  ?person dbo:name ""Hilda Duhalde"" .
  ?person dbo:associate ?associate .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?country
WHERE {
  ?person dbo:birthPlace ?country .
  ?person dbo:name ""Hilda Duhalde"" .
  ?person dbo:associate ?associate .
}",3.559043432561587e-155,0.0821917808219178,True,True
4236,Who starred in Nothing in Common and produced From the Earth to the Moon?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/From_the_Earth_to_the_Moon_(miniseries)> <http://dbpedia.org/ontology/executiveProducer> ?uri. <http://dbpedia.org/resource/Nothing_in_Common> <http://dbpedia.org/property/starring> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who starred in Nothing in Common and produced From the Earth to the Moon?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?actor ?producer
WHERE {
  ?actor dbo:filmography ?movie .
  ?movie dbo:title ""Nothing in Common"" .
  ?producer dbo:produced ?movie .
  ?movie dbo:title ""From the Earth to the Moon"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?actor ?producer
WHERE {
  ?actor dbo:filmography ?movie .
  ?movie dbo:title ""Nothing in Common"" .
  ?producer dbo:produced ?movie .
  ?movie dbo:title ""From the Earth to the Moon"" .
}",3.127732480617132e-155,0.07692307692307693,True,True
439,Which fields are covered by academic journals in the US?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/country> <http://dbpedia.org/resource/United_States> . ?x <http://dbpedia.org/property/discipline> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AcademicJournal>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which fields are covered by academic journals in the US?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?field
WHERE {
  ?journal dbo:country ""United States""^^xsd:string .
  ?journal dbo:field ?field .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
SELECT DISTINCT ?field
WHERE {
  ?journal dbo:country ""United States""^^xsd:string .
  ?journal dbo:field ?field .
}",3.216579438360415e-155,0.07042253521126761,True,True
1478,Where did the plays written by Robert Schenkkan take place?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Robert_Schenkkan> . ?x <http://dbpedia.org/property/place> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Play>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the plays written by Robert Schenkkan take place?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?play dbo:author ?author .
  ?author dbo:name ""Robert Schenkkan"" .
  ?play dbo:setting ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?location
WHERE {
  ?play dbo:author ?author .
  ?author dbo:name ""Robert Schenkkan"" .
  ?play dbo:setting ?location .
}",3.075337680136661e-155,0.06666666666666667,True,True
1189,What is the product of the BBC Multimedia and series of the The Last Resort (Doctor Who)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/BBC_Multimedia> <http://dbpedia.org/property/products> ?uri. <http://dbpedia.org/resource/The_Last_Resort_(Doctor_Who)> <http://dbpedia.org/ontology/series> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the product of the BBC Multimedia and series of the The Last Resort (Doctor Who)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?product
WHERE {
  ?series dbo:title ""The Last Resort"" .
  ?series dbo:partOf ?product .
  ?product dbo:productionCompany dbo:BBCMultimedia .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?product
WHERE {
  ?series dbo:title ""The Last Resort"" .
  ?series dbo:partOf ?product .
  ?product dbo:productionCompany dbo:BBCMultimedia .
}",2.0868169697040566e-155,0.039473684210526314,True,True
1939,To which political party do the children of Sonia Gandhi belong?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Sonia_Gandhi> <http://dbpedia.org/property/children> ?x . ?x <http://dbpedia.org/ontology/party> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: To which political party do the children of Sonia Gandhi belong?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?party
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Sonia Gandhi""^^xsd:string .
  ?person dbo:father ?parent .
  ?parent dbo:politicalParty ?party .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?party
WHERE {
  ?person dbo:spouse ?spouse .
  ?spouse dbo:name ""Sonia Gandhi""^^xsd:string .
  ?person dbo:father ?parent .
  ?parent dbo:politicalParty ?party .
}",3.0566417519593477e-155,0.06756756756756757,True,True
4143,What are some famous veterinary physicians known for?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/field> <http://dbpedia.org/resource/Veterinary_physician> . ?x <http://dbpedia.org/property/knownFor> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some famous veterinary physicians known for?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subject ?knownFor
WHERE {
  ?subject dbo:type dbo:Veterinarian .
  ?subject dbo:knownFor ?knownFor .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subject ?knownFor
WHERE {
  ?subject dbo:type dbo:Veterinarian .
  ?subject dbo:knownFor ?knownFor .
}",3.6750083101231446e-155,0.08571428571428572,True,True
2037,What are the artists that are associated with the Framptons camel album?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/associatedActs> <http://dbpedia.org/resource/Frampton's_Camel>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Artist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the artists that are associated with the Framptons camel album?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?artist
WHERE {
  ?album dbo:artist ?artist .
  ?album rdf:type dbo:Album .
  FILTER (regex(?album, ""Framptons camel"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?artist
WHERE {
  ?album dbo:artist ?artist .
  ?album rdf:type dbo:Album .
  FILTER (regex(?album, ""Framptons camel"", ""i""))
}",2.308595628361502e-155,0.05405405405405406,True,True
2108,What is the profession of William Luther Hill ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/William_Luther_Hill> <http://dbpedia.org/ontology/profession> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the profession of William Luther Hill ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession
WHERE {
  <http://dbpedia.org/resource/William_Luther_Hill> dbo:profession ?profession .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?profession
WHERE {
  <http://dbpedia.org/resource/William_Luther_Hill> dbo:profession ?profession .
}",9.274792349638353e-79,0.08064516129032258,True,True
4171,What is the total number of professions in which someone who has suicided worked?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/deathCause> <http://dbpedia.org/resource/Suicide> . ?x <http://dbpedia.org/ontology/occupation> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the total number of professions in which someone who has suicided worked?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?profession) AS ?totalProfessions)
WHERE {
  ?person dbo:deathCause ""Suicide"" .
  ?person dbo:occupation ?profession .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(DISTINCT ?profession) AS ?totalProfessions)
WHERE {
  ?person dbo:deathCause ""Suicide"" .
  ?person dbo:occupation ?profession .
}",3.1137823863213763e-155,0.06493506493506493,True,True
1727,What is the location of the Walter Evans Edge office which is also the place of birth of henry Miller ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Walter_Evans_Edge> <http://dbpedia.org/property/office> ?uri. <http://dbpedia.org/resource/Henry_Miller_Shreve> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the location of the Walter Evans Edge office which is also the place of birth of henry Miller ?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?location
WHERE {
  ?office dbo:location ?location .
  ?office dbp:name ""Walter Evans Edge"" .
  ?miller dbo:birthPlace ?location .
  ?miller dbo:name ""Henry Miller"" .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?location
WHERE {
  ?office dbo:location ?location .
  ?office dbp:name ""Walter Evans Edge"" .
  ?miller dbo:birthPlace ?location .
  ?miller dbo:name ""Henry Miller"" .
}",1.9881679882945454e-155,0.036585365853658534,True,True
2590,Where did the beverage sold by Refriango originate?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/manufacturer> <http://dbpedia.org/resource/Refriango> . ?x <http://dbpedia.org/property/origin> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Beverage>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did the beverage sold by Refriango originate?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?origin
WHERE {
  ?product dbo:brand ""Refriango"" .
  ?product dbp:origin ?origin .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?origin
WHERE {
  ?product dbo:brand ""Refriango"" .
  ?product dbp:origin ?origin .
}",3.2833699258334827e-155,0.07352941176470588,True,True
4087,List the websites which the authors of Tornado own ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tornado_(web_server)> <http://dbpedia.org/property/author> ?x . ?x <http://dbpedia.org/ontology/owner> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the websites which the authors of Tornado own ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?website
WHERE {
  ?author dbo:ownsWebsite ?website .
  ?author dbo:name ""Tornado"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?website
WHERE {
  ?author dbo:ownsWebsite ?website .
  ?author dbo:name ""Tornado"" .
}",3.650908595319347e-155,0.08571428571428572,True,True
2430,Where were Justina Machado and John Englehard born?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Justina_Machado> <http://dbpedia.org/property/birthPlace> ?uri. <http://dbpedia.org/resource/John_Englehart> <http://dbpedia.org/ontology/birthPlace> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where were Justina Machado and John Englehard born?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  FILTER (regex(?person, ""Justina Machado"", ""i"") || regex(?person, ""John Englehard"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?city
WHERE {
  ?person dbo:birthPlace ?city .
  FILTER (regex(?person, ""Justina Machado"", ""i"") || regex(?person, ""John Englehard"", ""i""))
}",3.1537059338519422e-155,0.07894736842105263,True,True
1086,Who owns the newspaper which was founded by Nehru?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/founder> <http://dbpedia.org/resource/Jawaharlal_Nehru> . ?x <http://dbpedia.org/ontology/owner> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Newspaper>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who owns the newspaper which was founded by Nehru?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?newspaper ?owner
WHERE {
  ?newspaper dbo:founder ?nehru .
  ?nehru dbo:name ""Nehru"" .
  ?newspaper dbo:owner ?owner .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT ?newspaper ?owner
WHERE {
  ?newspaper dbo:founder ?nehru .
  ?nehru dbo:name ""Nehru"" .
  ?newspaper dbo:owner ?owner .
}",2.50170125957988e-155,0.05555555555555555,True,True
1378,What belongs to the families of Buccinidae and Buccinoidea?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinidae> . ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinoidea> . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What belongs to the families of Buccinidae and Buccinoidea?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?item
WHERE {
  ?item dbo:family ?family .
  FILTER (regex(?family, ""Buccinidae"", ""i"") || regex(?family, ""Buccinoidea"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?item
WHERE {
  ?item dbo:family ?family .
  FILTER (regex(?family, ""Buccinidae"", ""i"") || regex(?family, ""Buccinoidea"", ""i""))
}",3.1137823863213763e-155,0.08108108108108109,True,True
3938,Was Class Conflict an interest of Karl Marx?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Karl_Marx> <http://dbpedia.org/ontology/mainInterest> <http://dbpedia.org/resource/Class_conflict> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Class Conflict an interest of Karl Marx?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?interest
WHERE {
  ?person rdf:type dbo:Person ;
         dbo:name ""Karl Marx"" ;
         dbo:interest ?interest .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?interest
WHERE {
  ?person rdf:type dbo:Person ;
         dbo:name ""Karl Marx"" ;
         dbo:interest ?interest .
}",2.2445353519102238e-155,0.043478260869565216,True,True
2374,Does the north carolina highway 280 end in Arden?,google/gemma-2-9b-it,"ASK WHERE { <http://dbpedia.org/resource/North_Carolina_Highway_280> <http://dbpedia.org/ontology/routeEnd> <http://dbpedia.org/resource/Arden,_North_Carolina> }","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the north carolina highway 280 end in Arden?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?endLocation
WHERE {
  ?highway dbo:officialName ""North Carolina Highway 280"" .
  ?highway dbo:endLocation ?endLocation .
  FILTER (str(?endLocation) = ""Arden"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?endLocation
WHERE {
  ?highway dbo:officialName ""North Carolina Highway 280"" .
  ?highway dbo:endLocation ?endLocation .
  FILTER (str(?endLocation) = ""Arden"")
}",2.1745921280630745e-155,0.041666666666666664,True,True
468,Who gives the license of WXXV-DT2?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/WXXV-DT2> <http://dbpedia.org/property/licensee> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who gives the license of WXXV-DT2?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?licensee
WHERE {
  ?station dbo:licensee ?licensee .
  FILTER (regex(?station, ""WXXV-DT2"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?licensee
WHERE {
  ?station dbo:licensee ?licensee .
  FILTER (regex(?station, ""WXXV-DT2"", ""i""))
}",2.5488701582353735e-155,0.06349206349206349,True,True
180,Which holy places did consider Pope Gregory I as a saint?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Pope_Gregory_I> <http://dbpedia.org/property/veneratedIn> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which holy places did consider Pope Gregory I as a saint?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?holyPlace
WHERE {
  ?pope dbo:canonizedBy ?holyPlace .
  FILTER ( ?pope = <http://dbpedia.org/resource/Pope_Gregory_I> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?holyPlace
WHERE {
  ?pope dbo:canonizedBy ?holyPlace .
  FILTER ( ?pope = <http://dbpedia.org/resource/Pope_Gregory_I> )
}",3.1137823863213763e-155,0.08333333333333333,True,True
4952,Where did john o conner study?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/John_O'Connor_(archbishop_of_New_York)> <http://dbpedia.org/ontology/almaMater> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did john o conner study?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""John O'Connor"" .
  ?person dbo:educationPlace ?university .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""John O'Connor"" .
  ?person dbo:educationPlace ?university .
}",2.530465559854518e-155,0.06349206349206349,True,True
3787,Where did Allama Matthews study?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allama_Matthews> <http://dbpedia.org/ontology/college> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did Allama Matthews study?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""Allama Matthews"" .
  ?person dbo:educationPlace ?university .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?university
WHERE {
  ?person dbo:name ""Allama Matthews"" .
  ?person dbo:educationPlace ?university .
}",2.5488701582353735e-155,0.06451612903225806,True,True
245,Count all the scientologists.,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/religion> <http://dbpedia.org/resource/Scientology>  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all the scientologists.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?subject
WHERE {
  ?subject dbo:religion ""Scientology"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?subject
WHERE {
  ?subject dbo:religion ""Scientology"" .
}",2.668419795632472e-155,0.06896551724137931,True,True
2567,How many molluscs are there whose families are Buccinidae and Buccinoidea?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinidae> . ?uri <http://dbpedia.org/ontology/family> <http://dbpedia.org/resource/Buccinoidea>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many molluscs are there whose families are Buccinidae and Buccinoidea?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x rdf:type dbo:Mollusca .
  ?x dbo:family ?family .
  FILTER (regex(?family, ""Buccinidae"", ""i"") || regex(?family, ""Buccinoidea"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT (COUNT(?x) AS ?count)
WHERE {
  ?x rdf:type dbo:Mollusca .
  ?x dbo:family ?family .
  FILTER (regex(?family, ""Buccinidae"", ""i"") || regex(?family, ""Buccinoidea"", ""i""))
}",2.268207528392565e-155,0.05,True,True
3468,Bud Adams owns which american football team?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/owner> <http://dbpedia.org/resource/Bud_Adams>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/AmericanFootballTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Bud Adams owns which american football team?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?person dbo:owns ?team .
  ?person dbo:name ""Bud Adams"" .
  ?team dbo:type dbo:SportsTeam .
  FILTER (regex(?team, ""American football"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?team WHERE {
  ?person dbo:owns ?team .
  ?person dbo:name ""Bud Adams"" .
  ?team dbo:type dbo:SportsTeam .
  FILTER (regex(?team, ""American football"", ""i""))
}",8.017078581883202e-232,0.0410958904109589,True,True
1616,List everything in which saxophone players have been cast.,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/instrument> <http://dbpedia.org/resource/Saxophone> . ?uri <http://dbpedia.org/property/starring> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List everything in which saxophone players have been cast.
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?work
WHERE {
  ?person dbo:occupation ""Saxophonist"" .
  ?person dbp:castIn ?work .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?work
WHERE {
  ?person dbo:occupation ""Saxophonist"" .
  ?person dbp:castIn ?work .
}",3.6750083101231446e-155,0.08450704225352113,True,True
146,What system is both a platform where Nord runs and also distributed The beauty inside?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Nord_(video_game)> <http://dbpedia.org/ontology/computingPlatform> ?uri. <http://dbpedia.org/resource/The_Beauty_Inside> <http://dbpedia.org/ontology/distributor> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What system is both a platform where Nord runs and also distributed The beauty inside?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?system
WHERE {
  ?system dbo:wikiPageRedirects ?nordPlatform .
  ?nordPlatform dbo:wikiPageRedirects ?nord .
  ?nord dbo:description ""Nord"" .
  ?system dbo:wikiPageRedirects ?beautyInside .
  ?beautyInside dbo:description ""The beauty inside"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?system
WHERE {
  ?system dbo:wikiPageRedirects ?nordPlatform .
  ?nordPlatform dbo:wikiPageRedirects ?nord .
  ?nord dbo:description ""Nord"" .
  ?system dbo:wikiPageRedirects ?beautyInside .
  ?beautyInside dbo:description ""The beauty inside"" .
}",3.194645317303101e-155,0.07692307692307693,True,True
3686,Was Castillo discovered by Galileo?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Callisto_(moon)> <http://dbpedia.org/property/discoverer> <http://dbpedia.org/resource/Galileo_Galilei> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Was Castillo discovered by Galileo?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:discoveredBy <http://dbpedia.org/resource/Galileo_Galilei> .
  FILTER (regex(str(?x), ""Castillo"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:discoveredBy <http://dbpedia.org/resource/Galileo_Galilei> .
  FILTER (regex(str(?x), ""Castillo"", ""i""))
}",2.5676822842398837e-155,0.06451612903225806,True,True
4966,Which office holder's constituency is Haight-Ashbury and has military unit as USS Kittiwake ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/constituency> <http://dbpedia.org/resource/Haight-Ashbury> . ?uri <http://dbpedia.org/ontology/militaryUnit> <http://dbpedia.org/resource/USS_Kittiwake_(ASR-13)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/OfficeHolder>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which office holder's constituency is Haight-Ashbury and has military unit as USS Kittiwake ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?officeHolder ?officeHolderLabel
WHERE {
  ?officeHolder dbo:constituency ?constituency .
  ?constituency dbo:name ""Haight-Ashbury"" .
  ?officeHolder dbo:militaryUnit ?militaryUnit .
  ?militaryUnit dbo:name ""USS Kittiwake"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?officeHolder ?officeHolderLabel
WHERE {
  ?officeHolder dbo:constituency ?constituency .
  ?constituency dbo:name ""Haight-Ashbury"" .
  ?officeHolder dbo:militaryUnit ?militaryUnit .
  ?militaryUnit dbo:name ""USS Kittiwake"" .
}",2.344734865707205e-155,0.04938271604938271,True,True
1999,What is the mascot of Galatasaray Handball Team ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Galatasaray_Handball_Team> <http://dbpedia.org/property/mascot> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the mascot of Galatasaray Handball Team ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?mascot
WHERE {
  ?team dbo:name ""Galatasaray Handball Team"" .
  ?team dbo:mascot ?mascot .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?mascot
WHERE {
  ?team dbo:name ""Galatasaray Handball Team"" .
  ?team dbo:mascot ?mascot .
}",2.4606427705034855e-155,0.06153846153846154,True,True
802,Which awards did the narrator of Oscar and Lucinda win?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Oscar_and_Lucinda_(film)> <http://dbpedia.org/ontology/narrator> ?x . ?x <http://dbpedia.org/property/awards> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which awards did the narrator of Oscar and Lucinda win?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:narratorOf <http://dbpedia.org/resource/Oscar_and_Lucinda> ;
  dbo:award ?award .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?award
WHERE {
  ?person dbo:narratorOf <http://dbpedia.org/resource/Oscar_and_Lucinda> ;
  dbo:award ?award .
}",3.608498281805203e-155,0.08695652173913043,True,True
1174,What is the nation of the Major All Stars Season 1 and Pioneer Corporation ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Major_All_Stars_Season_1> <http://dbpedia.org/property/country> ?uri. <http://dbpedia.org/resource/Pioneer_Corporation> <http://dbpedia.org/property/country> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the nation of the Major All Stars Season 1 and Pioneer Corporation ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?nationMajorStars ?nationPioneer
WHERE {
  ?majorStars dbo:country ?nationMajorStars .
  ?pioneer dbo:country ?nationPioneer .
  FILTER (regex(?nationMajorStars, ""United States"") || regex(?nationPioneer, ""Japan""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?nationMajorStars ?nationPioneer
WHERE {
  ?majorStars dbo:country ?nationMajorStars .
  ?pioneer dbo:country ?nationPioneer .
  FILTER (regex(?nationMajorStars, ""United States"") || regex(?nationPioneer, ""Japan""))
}",2.9346708496857675e-155,0.07407407407407407,True,True
3664,Do the polet airlines fly to moscow?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Polet_Airlines> <http://dbpedia.org/ontology/targetAirport> <http://dbpedia.org/resource/Moscow> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Do the polet airlines fly to moscow?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?airline
WHERE {
  ?airline dbo:name ""polet airlines"" .
  ?airline dbo:airlineDestination ?destination .
  ?destination dbo:name ""moscow"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?airline
WHERE {
  ?airline dbo:name ""polet airlines"" .
  ?airline dbo:airlineDestination ?destination .
  ?destination dbo:name ""moscow"" .
}",2.2300068516948962e-155,0.046153846153846156,True,True
1635,Name the television show directed by Simon Fuller and judged by Jennifier Lopez?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/creator> <http://dbpedia.org/resource/Simon_Fuller> . ?uri <http://dbpedia.org/property/judges> <http://dbpedia.org/resource/Jennifer_Lopez>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the television show directed by Simon Fuller and judged by Jennifier Lopez?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:director ?director .
  ?director dbo:name ""Simon Fuller"" .
  ?show dbo:judge ?judge .
  ?judge dbo:name ""Jennifer Lopez"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:director ?director .
  ?director dbo:name ""Simon Fuller"" .
  ?show dbo:judge ?judge .
  ?judge dbo:name ""Jennifer Lopez"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",8.231055179516831e-232,0.03614457831325301,False,False
4412,Which broad cast area of CFRX is the country of North America Poker Tour ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/CFRX> <http://dbpedia.org/ontology/broadcastArea> ?uri. <http://dbpedia.org/resource/North_American_Poker_Tour> <http://dbpedia.org/ontology/country> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which broad cast area of CFRX is the country of North America Poker Tour ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?broadcastArea
WHERE {
  ?broadcastArea dbo:country ?country .
  ?country rdfs:label ""North America"" .
  ?broadcastArea dbo:broadcasts ?event .
  ?event dbo:name ""North America Poker Tour"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?broadcastArea
WHERE {
  ?broadcastArea dbo:country ?country .
  ?country rdfs:label ""North America"" .
  ?broadcastArea dbo:broadcasts ?event .
  ?event dbo:name ""North America Poker Tour"" .
}",2.5944303248170386e-155,0.05,True,True
3724,Name some sports played in institutions of Maharashtra?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/state> <http://dbpedia.org/resource/Maharashtra> . ?x <http://dbpedia.org/ontology/sport> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name some sports played in institutions of Maharashtra?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?institution dbo:location dbp:Maharashtra .
  ?institution dbo:sports ?sport .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?sport
WHERE {
  ?institution dbo:location dbp:Maharashtra .
  ?institution dbo:sports ?sport .
}",3.699591675882789e-155,0.08571428571428572,True,True
4840,South Side elevated railroad and twin cities 400 are operated by which city?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/South_Side_Elevated_Railroad> <http://dbpedia.org/ontology/operatedBy> ?uri. <http://dbpedia.org/resource/Twin_Cities_400> <http://dbpedia.org/ontology/operatedBy> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: South Side elevated railroad and twin cities 400 are operated by which city?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?railroad dbo:operatedBy ?city .
  FILTER (regex(?railroad, ""South Side elevated railroad"") || regex(?railroad, ""twin cities 400""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city
WHERE {
  ?railroad dbo:operatedBy ?city .
  FILTER (regex(?railroad, ""South Side elevated railroad"") || regex(?railroad, ""twin cities 400""))
}",2.4123225276763925e-155,0.06329113924050633,True,True
3667,Name some islands in a pacific archipelago?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/location> <http://dbpedia.org/resource/Pacific_Ocean> . ?uri <http://dbpedia.org/property/archipelago> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Island>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name some islands in a pacific archipelago?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?islandLabel
WHERE {
  ?island dbo:location ?location .
  ?location dbo:continent ""Pacific Ocean""^^xsd:string .
  ?island rdfs:label ?islandLabel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?islandLabel
WHERE {
  ?island dbo:location ?location .
  ?location dbo:continent ""Pacific Ocean""^^xsd:string .
  ?island rdfs:label ?islandLabel .
}",3.1335534263807668e-155,0.06944444444444445,True,True
1286,Is Lancy a city close to Geneva?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Geneva> <http://dbpedia.org/ontology/neighboringMunicipality> <http://dbpedia.org/resource/Lancy> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Lancy a city close to Geneva?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?distance
WHERE {
  ?city dbo:name ""Lancy"" .
  ?city dbo:locatedIn ?country .
  ?country dbo:name ""Switzerland"" .
  ?city dbp:distanceTo ?otherCity .
  ?otherCity dbo:name ""Geneva"" .
  ?distance a dbo:Distance ;
    dbo:value ?distance .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?distance
WHERE {
  ?city dbo:name ""Lancy"" .
  ?city dbo:locatedIn ?country .
  ?country dbo:name ""Switzerland"" .
  ?city dbp:distanceTo ?otherCity .
  ?otherCity dbo:name ""Geneva"" .
  ?distance a dbo:Distance ;
    dbo:value ?distance .
}",2.0523206950207848e-155,0.04225352112676056,True,True
3065,Which fictional character is portrayed by Roger Barton (film editor)?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/portrayer> <http://dbpedia.org/resource/Roger_Barton_(film_editor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/FictionalCharacter>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which fictional character is portrayed by Roger Barton (film editor)?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?character
WHERE {
  ?character dbo:portrayedBy ?editor .
  ?editor dbo:name ""Roger Barton"" .
  FILTER ( ?character rdfs:type dbo:FictionalCharacter )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT ?character
WHERE {
  ?character dbo:portrayedBy ?editor .
  ?editor dbo:name ""Roger Barton"" .
  FILTER ( ?character rdfs:type dbo:FictionalCharacter )
}",7.943631954232605e-232,0.039473684210526314,False,False
4759,What are the houses of legislature in the political leader's seat of Medininagar?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Medininagar> <http://dbpedia.org/property/leaderTitle> ?x . ?x <http://dbpedia.org/property/houses> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Legislature>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are the houses of legislature in the political leader's seat of Medininagar?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?house
WHERE {
  ?leader dbo:seat ?location .
  ?location dbo:name ""Medininagar"" .
  ?location dbo:legislativeBody ?house .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?house
WHERE {
  ?leader dbo:seat ?location .
  ?location dbo:name ""Medininagar"" .
  ?location dbo:legislativeBody ?house .
}",3.0382827129023445e-155,0.06666666666666667,True,True
2759,How many different genres of games can I find which are compatible with the Commodore 64?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/ontology/computingPlatform> <http://dbpedia.org/resource/Commodore_64> . ?x <http://dbpedia.org/property/genre> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many different genres of games can I find which are compatible with the Commodore 64?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?genre
WHERE {
  ?game dbo:compatibleWith dbr:Commodore_64 .
  ?game dbo:genre ?genre .
}
GROUP BY ?genre
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbr: <http://dbpedia.org/resource/>
PREFIX dbp: <http://dbpedia.org/property/>

SELECT ?genre
WHERE {
  ?game dbo:compatibleWith dbr:Commodore_64 .
  ?game dbo:genre ?genre .
}
GROUP BY ?genre",3.0202505652128895e-155,0.06329113924050633,True,True
2190,Who is the owner of  Chelsea F.C. ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Chelsea_F.C.> <http://dbpedia.org/property/owner> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the owner of  Chelsea F.C. ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?owner
WHERE {
  ?club dbo:name ""Chelsea F.C."" .
  ?club dbo:owner ?owner .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?owner
WHERE {
  ?club dbo:name ""Chelsea F.C."" .
  ?club dbo:owner ?owner .
}",2.494821638843469e-155,0.0625,True,True
716,Does Cascade Airways have a hub in Seattle?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Cascade_Airways> <http://dbpedia.org/ontology/hubAirport> <http://dbpedia.org/resource/Seattle> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Cascade Airways have a hub in Seattle?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hub
WHERE {
  ?airline dbo:name ""Cascade Airways"" .
  ?airline dbo:hub ?hub .
  FILTER (str(?hub) = ""Seattle"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?hub
WHERE {
  ?airline dbo:name ""Cascade Airways"" .
  ?airline dbo:hub ?hub .
  FILTER (str(?hub) = ""Seattle"")
}",2.259351571061102e-155,0.04477611940298507,True,True
3909,Which companies have Kumho Asiana Group as their parent company?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/parentCompany> <http://dbpedia.org/resource/Kumho_Asiana_Group> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which companies have Kumho Asiana Group as their parent company?
```sparql
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:parentOrganization dbp:Kumho_Asiana_Group .
}
```
","PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
SELECT DISTINCT ?company
WHERE {
  ?company dbo:parentOrganization dbp:Kumho_Asiana_Group .
}",2.4775553999024465e-155,0.05970149253731343,True,True
1850,What is the city of the 2015 MLS All-Star Game and birthplace of the The Okee Dokee Brothers?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/2015_MLS_All-Star_Game> <http://dbpedia.org/property/city> ?uri. <http://dbpedia.org/resource/The_Okee_Dokee_Brothers> <http://dbpedia.org/ontology/birthPlace> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the city of the 2015 MLS All-Star Game and birthplace of the The Okee Dokee Brothers?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city1 ?city2
WHERE {
  ?game dbo:location ?city1 .
  FILTER(?game = <http://dbpedia.org/resource/2015_MLS_All-Star_Game>)
  ?person dbo:birthPlace ?city2 .
  FILTER(?person IN (
    <http://dbpedia.org/resource/Joe_Mailander>,
    <http://dbpedia.org/resource/Justin_""J.D.""_O'Keefe>
  ))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?city1 ?city2
WHERE {
  ?game dbo:location ?city1 .
  FILTER(?game = <http://dbpedia.org/resource/2015_MLS_All-Star_Game>)
  ?person dbo:birthPlace ?city2 .
  FILTER(?person IN (
    <http://dbpedia.org/resource/Joe_Mailander>,
    <http://dbpedia.org/resource/Justin_""J.D.""_O'Keefe>
  ))
}",2.0302514477228347e-155,0.03571428571428571,False,False
2305,List TV shows with producer as Erik Bork and company is DreamWorks Television ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/company> <http://dbpedia.org/resource/DreamWorks_Television> . ?uri <http://dbpedia.org/ontology/producer> <http://dbpedia.org/resource/Erik_Bork>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List TV shows with producer as Erik Bork and company is DreamWorks Television ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:producer dbr:Erik_Bork .
  ?show dbo:company dbr:DreamWorks_Television .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX dbr: <http://dbpedia.org/resource/>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:producer dbr:Erik_Bork .
  ?show dbo:company dbr:DreamWorks_Television .
}",2.486113577066771e-155,0.05263157894736842,True,True
987,Is Peter Piper Pizza in the pizza industry?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Peter_Piper_Pizza> <http://dbpedia.org/ontology/industry> <http://dbpedia.org/resource/Pizza> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Is Peter Piper Pizza in the pizza industry?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?industry
WHERE {
  ?pizza dbo:industry ?industry .
  FILTER (regex(?pizza, ""Peter Piper Pizza"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?industry
WHERE {
  ?pizza dbo:industry ?industry .
  FILTER (regex(?pizza, ""Peter Piper Pizza"", ""i""))
}",2.305625093843957e-155,0.046153846153846156,True,True
3271,Count all the universities who participated in the tournament won by Alabama Crimson Tides in 2015 ?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/champion> <http://dbpedia.org/resource/2015_Alabama_Crimson_Tide_football_team> . ?uri <http://dbpedia.org/property/athletics> ?x  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Count all the universities who participated in the tournament won by Alabama Crimson Tides in 2015 ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?university
WHERE {
  ?tournament dbo:winner <http://dbpedia.org/resource/Alabama_Crimson_Tides> .
  ?tournament dbo:year ""2015""^^xsd:gYear .
  ?tournament dbo:participant ?university .
  FILTER ( ?university != <http://dbpedia.org/resource/Alabama_Crimson_Tides> )
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?university
WHERE {
  ?tournament dbo:winner <http://dbpedia.org/resource/Alabama_Crimson_Tides> .
  ?tournament dbo:year ""2015""^^xsd:gYear .
  ?tournament dbo:participant ?university .
  FILTER ( ?university != <http://dbpedia.org/resource/Alabama_Crimson_Tides> )
}",2.3192471031465984e-155,0.04819277108433735,True,True
1276,"What state was Cyrus Mann born in, and has the famous Downriver?",google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Downriver> <http://dbpedia.org/ontology/state> ?uri. <http://dbpedia.org/resource/Cyrus_Mann> <http://dbpedia.org/property/birthPlace> ?uri . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What state was Cyrus Mann born in, and has the famous Downriver?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?state
WHERE {
  ?person dbo:birthPlace ?state .
  ?person dbo:name ""Cyrus Mann"" .
  ?location dbo:name ""Downriver"" ;
    dbp:locatedIn ?state .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?state
WHERE {
  ?person dbo:birthPlace ?state .
  ?person dbo:name ""Cyrus Mann"" .
  ?location dbo:name ""Downriver"" ;
    dbp:locatedIn ?state .
}",2.868751113594075e-155,0.06493506493506493,True,True
4349,Which TV show's company is PlayTone and is produced by Stephen E. Ambrose ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/company> <http://dbpedia.org/resource/Playtone> . ?uri <http://dbpedia.org/property/producer> <http://dbpedia.org/resource/Stephen_E._Ambrose>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which TV show's company is PlayTone and is produced by Stephen E. Ambrose ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:productionCompany ?company .
  ?company dbo:name ""PlayTone"" .
  ?show dbo:director ?director .
  ?director dbo:name ""Stephen E. Ambrose"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:productionCompany ?company .
  ?company dbo:name ""PlayTone"" .
  ?show dbo:director ?director .
  ?director dbo:name ""Stephen E. Ambrose"" .
}",2.344734865707205e-155,0.05063291139240506,True,True
4644,"How many teams was Garry Unger in, previously?",google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { <http://dbpedia.org/resource/Garry_Unger> <http://dbpedia.org/ontology/formerTeam> ?uri  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/SportsTeam>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many teams was Garry Unger in, previously?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?teamCount
WHERE {
  ?player dbo:name ""Garry Unger"" .
  ?player dbo:previousTeams ?team .
  GROUP BY ?player
  
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?teamCount
WHERE {
  ?player dbo:name ""Garry Unger"" .
  ?player dbo:previousTeams ?team .
  GROUP BY ?player
  
}",2.4440718429993668e-155,0.056338028169014086,False,False
2555,List the name of those who became famous for something garrisoned at Tennessee?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/ontology/garrison> <http://dbpedia.org/resource/Tennessee> . ?uri <http://dbpedia.org/property/knownFor> ?x  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the name of those who became famous for something garrisoned at Tennessee?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name
WHERE {
  ?person dbo:birthPlace dbp:Tennessee .
  ?person dbo:knownFor ?thing .
  ?thing dbo:location dbp:Tennessee .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?name
WHERE {
  ?person dbo:birthPlace dbp:Tennessee .
  ?person dbo:knownFor ?thing .
  ?thing dbo:location dbp:Tennessee .
}",3.4945213227383114e-155,0.08,True,True
4968,Which TV show's writer is Erik Jendresen and distributor is HBO?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/writer> <http://dbpedia.org/resource/Erik_Jendresen> . ?uri <http://dbpedia.org/property/distributor> <http://dbpedia.org/resource/HBO>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which TV show's writer is Erik Jendresen and distributor is HBO?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:writer ErikJendresen .
  ?show dbo:distributor HBO .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?show
WHERE {
  ?show dbo:writer ErikJendresen .
  ?show dbo:distributor HBO .
}",2.533776972251024e-155,0.05555555555555555,False,False
2644,What are some cars similar to the ones assembled at Toluca?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/assembly> <http://dbpedia.org/resource/Toluca> . ?x <http://dbpedia.org/property/related> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Automobile>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What are some cars similar to the ones assembled at Toluca?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?car
WHERE {
  ?car dbo:assemblyLocation <http://dbpedia.org/resource/Toluca> .
  ?car dbo:manufacturer ?manufacturer .
  ?similarCar dbo:manufacturer ?manufacturer .
  FILTER (NOT EXISTS { ?car ?p ?o . })
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?car
WHERE {
  ?car dbo:assemblyLocation <http://dbpedia.org/resource/Toluca> .
  ?car dbo:manufacturer ?manufacturer .
  ?similarCar dbo:manufacturer ?manufacturer .
  FILTER (NOT EXISTS { ?car ?p ?o . })
}",3.3566500347661918e-155,0.075,True,True
4707,What is the allegiance of Albert Kwesi Ocran ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Albert_Kwesi_Ocran> <http://dbpedia.org/property/allegiance> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the allegiance of Albert Kwesi Ocran ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?allegiance
WHERE {
  ?person dbo:name ""Albert Kwesi Ocran"" .
  ?person dbo:allegiance ?allegiance .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?allegiance
WHERE {
  ?person dbo:name ""Albert Kwesi Ocran"" .
  ?person dbo:allegiance ?allegiance .
}",2.4606427705034855e-155,0.06153846153846154,True,True
605,Name the scientist who was the winner of Royal Society award and had Georg Meissner as his doctoral advisor ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/prizes> <http://dbpedia.org/resource/Royal_Society> . ?uri <http://dbpedia.org/property/doctoralAdvisor> <http://dbpedia.org/resource/Georg_Meissner>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the scientist who was the winner of Royal Society award and had Georg Meissner as his doctoral advisor ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?scientist
WHERE {
  ?scientist dbo:award <http://dbpedia.org/resource/Royal_Society_Award> .
  ?scientist dbo:advisor ?advisor .
  ?advisor dbo:name ""Georg Meissner"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?scientist
WHERE {
  ?scientist dbo:award <http://dbpedia.org/resource/Royal_Society_Award> .
  ?scientist dbo:advisor ?advisor .
  ?advisor dbo:name ""Georg Meissner"" .
}",8.34186146802972e-232,0.036585365853658534,True,True
2321,Does the white river flow into the connecticut river?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Connecticut_River> <http://dbpedia.org/ontology/rightTributary> <http://dbpedia.org/resource/White_River_(Vermont)> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does the white river flow into the connecticut river?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""White River"" .
  ?x dbo:mouth ?y .
  ?y dbo:name ""Connecticut River"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:name ""White River"" .
  ?x dbo:mouth ?y .
  ?y dbo:name ""Connecticut River"" .
}",2.2300068516948962e-155,0.046875,True,True
3617,Where did Louis chevrolet die ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Louis_Chevrolet> <http://dbpedia.org/property/deathPlace> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Where did Louis chevrolet die ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:name ""Louis Chevrolet"" .
  ?person dbo:deathPlace ?location .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?location
WHERE {
  ?person dbo:name ""Louis Chevrolet"" .
  ?person dbo:deathPlace ?location .
}",2.530465559854518e-155,0.06349206349206349,True,True
2945,Which river has its roots in Baikal Mountains?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/sourceMountain> <http://dbpedia.org/resource/Baikal_Mountains> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which river has its roots in Baikal Mountains?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?river
WHERE {
  ?river dbo:source ?source .
  ?source dbo:locatedIn <http://dbpedia.org/resource/Baikal_Mountains> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?river
WHERE {
  ?river dbo:source ?source .
  ?source dbo:locatedIn <http://dbpedia.org/resource/Baikal_Mountains> .
}",2.6379527083228047e-155,0.07692307692307693,True,True
2415,List the relative of Tim Nanai-Williams ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Tim_Nanai-Williams> <http://dbpedia.org/ontology/relative> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List the relative of Tim Nanai-Williams ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?relative
WHERE {
  ?person dbo:name ""Tim Nanai-Williams"" .
  ?person dbo:relative ?relative .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT DISTINCT ?relative
WHERE {
  ?person dbo:name ""Tim Nanai-Williams"" .
  ?person dbo:relative ?relative .
}",3.1370721297783126e-155,0.078125,True,True
3688,Who are the chancellors of universities which is affiliated with Plymouth University?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/affiliations> <http://dbpedia.org/resource/Plymouth_University> . ?x <http://dbpedia.org/property/chancellor> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/University>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who are the chancellors of universities which is affiliated with Plymouth University?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?chancellor ?university
WHERE {
  ?university dbo:affiliatedWith <http://dbpedia.org/resource/Plymouth_University> .
  ?university rdfs:label ?universityLabel .
  ?university dbo:chancellor ?chancellor .
  ?chancellor rdfs:label ?chancellorLabel .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?chancellor ?university
WHERE {
  ?university dbo:affiliatedWith <http://dbpedia.org/resource/Plymouth_University> .
  ?university rdfs:label ?universityLabel .
  ?university dbo:chancellor ?chancellor .
  ?chancellor rdfs:label ?chancellorLabel .
}",3.4137094800074316e-155,0.07792207792207792,True,True
2864,From how many different places have participants of Breeders's Cup Turf come?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE { ?x <http://dbpedia.org/property/race> <http://dbpedia.org/resource/Breeders'_Cup_Turf> . ?x <http://dbpedia.org/property/birthPlace> ?uri  . },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: From how many different places have participants of Breeders's Cup Turf come?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?participant dbo:birthPlace ?place .
  ?participant dbo:participatedIn ?event .
  ?event rdfs:label ""Breeders' Cup Turf"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT (COUNT(DISTINCT ?place) AS ?count)
WHERE {
  ?participant dbo:birthPlace ?place .
  ?participant dbo:participatedIn ?event .
  ?event rdfs:label ""Breeders' Cup Turf"" .
}",2.9851289841006984e-155,0.06172839506172839,True,True
4071,Who gave the musical score of 9 to 5 (musical) ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/9_to_5_(musical)> <http://dbpedia.org/ontology/musicBy> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who gave the musical score of 9 to 5 (musical) ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?composer
WHERE {
  ?musical dbo:composer ?composer .
  FILTER (str(?musical) = ""9 to 5 (musical)"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?composer
WHERE {
  ?musical dbo:composer ?composer .
  FILTER (str(?musical) = ""9 to 5 (musical)"")
}",2.4119102000777368e-155,0.057971014492753624,True,True
3342,Who is the leader of Allgemeine SS ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Allgemeine_SS> <http://dbpedia.org/ontology/leader> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Who is the leader of Allgemeine SS ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?leader
WHERE {
  ?leader dbo:leaderOf <http://dbpedia.org/resource/Allgemeine_SS> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?leader
WHERE {
  ?leader dbo:leaderOf <http://dbpedia.org/resource/Allgemeine_SS> .
}",2.7353319119103705e-155,0.08196721311475409,True,True
4618,How many movies are distributed by Cinema International Corporation?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/distributor> <http://dbpedia.org/resource/Cinema_International_Corporation>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many movies are distributed by Cinema International Corporation?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:distributor dbo:Cinema_International_Corporation .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:distributor dbo:Cinema_International_Corporation .
}",8.289228799996742e-232,0.043478260869565216,True,True
4199,Does Chicago own the Monroe Station?,google/gemma-2-9b-it,ASK WHERE { <http://dbpedia.org/resource/Monroe_station_(CTA_Blue_Line)> <http://dbpedia.org/property/owned> <http://dbpedia.org/resource/Chicago> },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Does Chicago own the Monroe Station?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:officialName ""Chicago"" .
  ?x dbo:owns ?y .
  ?y dbo:officialName ""Monroe Station"" .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?x WHERE {
  ?x dbo:officialName ""Chicago"" .
  ?x dbo:owns ?y .
  ?y dbo:officialName ""Monroe Station"" .
}",2.2898861187450904e-155,0.04838709677419355,True,True
4653,Give me a count of movies whose editor is Mark Stevens?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/property/editing> <http://dbpedia.org/resource/Mark_Stevens_(film_editor)>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Film>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Give me a count of movies whose editor is Mark Stevens?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Mark Stevens"" .
}
```","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT (COUNT(?movie) AS ?count)
WHERE {
  ?movie dbo:director ?director .
  ?director dbo:name ""Mark Stevens"" .
}",8.094051362019983e-232,0.0410958904109589,True,True
230,Which Fox show is presented by Ryan Seacrest?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Ryan_Seacrest> . ?uri <http://dbpedia.org/property/channel> <http://dbpedia.org/resource/Fox_Broadcasting_Company>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which Fox show is presented by Ryan Seacrest?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:presentedBy ?person .
  ?person dbo:name ""Ryan Seacrest"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?showLabel
WHERE {
  ?show dbo:presentedBy ?person .
  ?person dbo:name ""Ryan Seacrest"" .
  SERVICE wikibase:label { bd:serviceParam wikibase:language ""[AUTO_LANGUAGE],en"". }
}",8.561894227089738e-232,0.03896103896103896,False,False
1168,Name the river passing through Reading Berkshire and has mouth place at Essex?,google/gemma-2-9b-it,"SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/city> <http://dbpedia.org/resource/Reading,_Berkshire> . ?uri <http://dbpedia.org/ontology/mouthPlace> <http://dbpedia.org/resource/Essex>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/River>}","Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the river passing through Reading Berkshire and has mouth place at Essex?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:locatedIn ?location .
  ?location dbo:name ""Reading, Berkshire""@en .
  ?river dbo:mouthPlace ?mouthPlace .
  ?mouthPlace dbo:name ?mouthName .
  FILTER (regex(?mouthName, ""Essex"", ""i""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?river
WHERE {
  ?river dbo:locatedIn ?location .
  ?location dbo:name ""Reading, Berkshire""@en .
  ?river dbo:mouthPlace ?mouthPlace .
  ?mouthPlace dbo:name ?mouthName .
  FILTER (regex(?mouthName, ""Essex"", ""i""))
}",8.319100378795605e-232,0.037037037037037035,True,True
2007,What is the currency of Republic of Montenegro (1992-2006) ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Republic_of_Montenegro_(1992–2006)> <http://dbpedia.org/property/currency> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the currency of Republic of Montenegro (1992-2006) ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?currency
WHERE {
  ?country dbo:name ""Republic of Montenegro"" .
  ?country dbo:officialCurrency ?currency .
  FILTER (regex(?country rdfs:label ""Republic of Montenegro"", ""1992-2006""))
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?currency
WHERE {
  ?country dbo:name ""Republic of Montenegro"" .
  ?country dbo:officialCurrency ?currency .
  FILTER (regex(?country rdfs:label ""Republic of Montenegro"", ""1992-2006""))
}",2.294894159058245e-155,0.05555555555555555,False,False
3330,What is the headquarters of Juan Dalmau Ramerez?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Juan_Dalmau_Ramírez> <http://dbpedia.org/property/headquarters> ?uri },"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: What is the headquarters of Juan Dalmau Ramerez?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?headquarters
WHERE {
  ?person dbo:name ""Juan Dalmau Ramerez"" .
  ?person dbo:headquarters ?headquarters .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?headquarters
WHERE {
  ?person dbo:name ""Juan Dalmau Ramerez"" .
  ?person dbo:headquarters ?headquarters .
}",2.4775553999024465e-155,0.0625,True,True
3921,Name the television program voiced by Isaac Hayes and aired on Comedy Central?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/property/voices> <http://dbpedia.org/resource/Isaac_Hayes> . ?uri <http://dbpedia.org/property/network> <http://dbpedia.org/resource/Comedy_Central>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/TelevisionShow>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the television program voiced by Isaac Hayes and aired on Comedy Central?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?program
WHERE {
  ?program dbo:voicedBy ?actor .
  ?actor dbo:name ""Isaac Hayes"" .
  ?program dbo:broadcastNetwork dbo:ComedyCentral .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?program
WHERE {
  ?program dbo:voicedBy ?actor .
  ?actor dbo:name ""Isaac Hayes"" .
  ?program dbo:broadcastNetwork dbo:ComedyCentral .
}",8.510469113101058e-232,0.039473684210526314,True,True
3229,Name the award given in Norway and presented by Swedish Academy ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE {?uri <http://dbpedia.org/ontology/presenter> <http://dbpedia.org/resource/Swedish_Academy> . ?uri <http://dbpedia.org/ontology/country> <http://dbpedia.org/resource/Norway>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Award>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Name the award given in Norway and presented by Swedish Academy ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?awardName
WHERE {
  ?award dbo:awardName ?awardName .
  ?award dbo:presentedBy ?presentedBy .
  ?presentedBy dbo:country ?country .
  FILTER(?country = ""Sweden"")
  ?award dbo:location ?location .
  FILTER(?location = ""Norway"")
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT ?awardName
WHERE {
  ?award dbo:awardName ?awardName .
  ?award dbo:presentedBy ?presentedBy .
  ?presentedBy dbo:country ?country .
  FILTER(?country = ""Sweden"")
  ?award dbo:location ?location .
  FILTER(?location = ""Norway"")
}",8.319100378795605e-232,0.037037037037037035,True,True
984,List all the doctoral student of the scientist who has advised John Bowlby?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { ?x <http://dbpedia.org/property/doctoralStudents> <http://dbpedia.org/resource/John_Bowlby> . ?x <http://dbpedia.org/property/doctoralStudents> ?uri  . ?x <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Scientist>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: List all the doctoral student of the scientist who has advised John Bowlby?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?student
WHERE {
  ?scientist dbo:advised ?bowlby .
  ?bowlby rdf:type dbo:Person .
  ?bowlby dbp:birthDate ""1907-01-26""^^xsd:date .
  ?scientist dbo:doctoralStudent ?student .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>

SELECT DISTINCT ?student
WHERE {
  ?scientist dbo:advised ?bowlby .
  ?bowlby rdf:type dbo:Person .
  ?bowlby dbp:birthDate ""1907-01-26""^^xsd:date .
  ?scientist dbo:doctoralStudent ?student .
}",2.968021523431445e-155,0.06493506493506493,True,True
2052,How many saints have been venerated in Judaism?,google/gemma-2-9b-it,SELECT DISTINCT COUNT(?uri) WHERE {?uri <http://dbpedia.org/ontology/veneratedIn> <http://dbpedia.org/resource/Judaism>  . ?uri <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> <http://dbpedia.org/ontology/Saint>},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: How many saints have been venerated in Judaism?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?saint dbo:religion ""Judaism""^^xsd:string .
  ?saint dbo:religious_tradition ""Saint""^^xsd:string .
  FILTER (EXISTS { ?saint dbo:venerated_by ?venerator . })
}
GROUP BY ?saint
HAVING (COUNT(?venerator) > 0)
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
SELECT ?count
WHERE {
  ?saint dbo:religion ""Judaism""^^xsd:string .
  ?saint dbo:religious_tradition ""Saint""^^xsd:string .
  FILTER (EXISTS { ?saint dbo:venerated_by ?venerator . })
}
GROUP BY ?saint
HAVING (COUNT(?venerator) > 0)",7.873430974476304e-232,0.0379746835443038,True,False
2771,Which non fictional subject of Thud is the athletics of PATTS College of Aeronautics ?,google/gemma-2-9b-it,SELECT DISTINCT ?uri WHERE { <http://dbpedia.org/resource/Thud!> <http://dbpedia.org/ontology/nonFictionSubject> ?uri. <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> <http://dbpedia.org/property/athletics> ?uri},"Generate a SPARQL query for the input question for the DBpedia Knowledge Graph. Ensure that the query uses proper SPARQL syntax, includes prefixes, and retrieves unique results. Step-by-step: Identify relevant properties and structure the query accordingly.
Output only the SPARQL query
Question: Which non fictional subject of Thud is the athletics of PATTS College of Aeronautics ?
```sparql
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:subjectOf <http://dbpedia.org/resource/Thud> .
  ?subject dbo:genre ""Non-fiction""@en .
  ?subject dbp:subjectOf ?athletics .
  ?athletics dbo:wikiPageRedirects <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> .
}
```
","PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX dbp: <http://dbpedia.org/property/>
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

SELECT DISTINCT ?subject
WHERE {
  ?subject dbo:subjectOf <http://dbpedia.org/resource/Thud> .
  ?subject dbo:genre ""Non-fiction""@en .
  ?subject dbp:subjectOf ?athletics .
  ?athletics dbo:wikiPageRedirects <http://dbpedia.org/resource/PATTS_College_of_Aeronautics> .
}",2.8039101108246434e-155,0.0641025641025641,True,True
